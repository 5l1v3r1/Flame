{
  "api/Flame.Ir.DecoderState.html": {
    "href": "api/Flame.Ir.DecoderState.html",
    "title": "Class DecoderState | Flame",
    "keywords": "Class DecoderState Decodes Loyc LNodes to Flame's intermediate representation. Inheritance System.Object DecoderState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class DecoderState Constructors | Improve this Doc View Source DecoderState(ILog, ReadOnlyTypeResolver) Creates a decoder that relies on the default codec. Declaration public DecoderState(ILog log, ReadOnlyTypeResolver typeResolver) Parameters Type Name Description Pixie.ILog log A log to use for error and warning messages. ReadOnlyTypeResolver typeResolver A read-only type resolver for resolving types. | Improve this Doc View Source DecoderState(ILog, ReadOnlyTypeResolver, IrCodec) Creates a decoder. Declaration public DecoderState(ILog log, ReadOnlyTypeResolver typeResolver, IrCodec codec) Parameters Type Name Description Pixie.ILog log A log to use for error and warning messages. ReadOnlyTypeResolver typeResolver A read-only type resolver for resolving types. IrCodec codec A Flame IR codec. Properties | Improve this Doc View Source Codec Gets the codec used by this decoder. Declaration public IrCodec Codec { get; } Property Value Type Description IrCodec The codec. | Improve this Doc View Source DefiningType Gets the type that either is or defines the current decoding scope. Declaration public IType DefiningType { get; } Property Value Type Description IType | Improve this Doc View Source Log Gets a log to use for error and warning messages. Declaration public ILog Log { get; } Property Value Type Description Pixie.ILog A log. | Improve this Doc View Source Scope Gets the scope in which elements are decoded. Declaration public TypeParent Scope { get; } Property Value Type Description TypeParent The scope in which elements are decoded, represented as a type parent. | Improve this Doc View Source TypeMemberIndex Gets an index that allows for quick type member lookup. Declaration public Index<IType, UnqualifiedName, ITypeMember> TypeMemberIndex { get; } Property Value Type Description Index < IType , UnqualifiedName , ITypeMember > A type member lookup index. | Improve this Doc View Source TypeResolver Gets the read-only type resolver for this decoder state. Declaration public ReadOnlyTypeResolver TypeResolver { get; } Property Value Type Description ReadOnlyTypeResolver A type resolver. Methods | Improve this Doc View Source AssertDecodeEnum<T>(LNode, IReadOnlyDictionary<Symbol, T>, String, out T) Decodes an id node using a symbol-to-value mapping. An error is reported if the node cannot be decoded. Declaration public bool AssertDecodeEnum<T>(LNode node, IReadOnlyDictionary<Symbol, T> decodeMap, string enumDescription, out T result) Parameters Type Name Description Loyc.Syntax.LNode node A node to decode. System.Collections.Generic.IReadOnlyDictionary < Loyc.Symbol , T> decodeMap A mapping of symbols to values that is used for decoding the node. System.String enumDescription A short description of the type of value that is being decoded, e.g., \"method lookup strategy\". T result The decoded value, if any. Returns Type Description System.Boolean true if the node could be decoded; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source AssertDecodeGenericMember(LNode, out IGenericMember) Decodes an LNode as a reference to a generic member. Logs an error if the decoding process fails. Declaration public bool AssertDecodeGenericMember(LNode node, out IGenericMember genericMember) Parameters Type Name Description Loyc.Syntax.LNode node A node to decode as a generic member. IGenericMember genericMember Returns Type Description System.Boolean true if node can be decoded as a generic member; otherwise, false . | Improve this Doc View Source AssertDecodeInt32(LNode, out Int32) Decodes an LNode as a 32-bit signed integer constant and returns a Boolean flag telling if the decoding operation was successful. Declaration public bool AssertDecodeInt32(LNode node, out int result) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. System.Int32 result A 32-bit signed integer. Returns Type Description System.Boolean true if node was successfully decoded as a 32-bit signed integer; otherwise, false . | Improve this Doc View Source AssertDecodeQualifiedName(LNode, out QualifiedName) Decodes an LNode as a qualified name. Logs an error if the decoding process fails. Declaration public bool AssertDecodeQualifiedName(LNode node, out QualifiedName name) Parameters Type Name Description Loyc.Syntax.LNode node A node to decode as a qualified name. QualifiedName name The name described by node . Returns Type Description System.Boolean true if node can be decoded as a qualified name; otherwise, false . | Improve this Doc View Source AssertDecodeSimpleName(LNode, out SimpleName) Decodes an LNode as a simple name. Logs an error if the decoding process fails. Declaration public bool AssertDecodeSimpleName(LNode node, out SimpleName name) Parameters Type Name Description Loyc.Syntax.LNode node A node to decode as a simple name. SimpleName name The name described by node . Returns Type Description System.Boolean true if node can be decoded as a simple name; otherwise, false . | Improve this Doc View Source DecodeAssembly(LNode) Decodes an assembly. Declaration public IAssembly DecodeAssembly(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The assembly to decode. Returns Type Description IAssembly A decoded assembly. | Improve this Doc View Source DecodeAttribute(LNode) Decodes an attribute node. Declaration public IAttribute DecodeAttribute(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The attribute node to decode. Returns Type Description IAttribute An attribute node. | Improve this Doc View Source DecodeAttributeMap(IEnumerable<LNode>) Decodes a sequence of attribute nodes as an attribute map. Declaration public AttributeMap DecodeAttributeMap(IEnumerable<LNode> attributeNodes) Parameters Type Name Description System.Collections.Generic.IEnumerable < Loyc.Syntax.LNode > attributeNodes The nodes to decode. Returns Type Description AttributeMap An attribute map. | Improve this Doc View Source DecodeBoolean(LNode) Decodes an LNode as a Boolean constant. Declaration public bool DecodeBoolean(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description System.Boolean A Boolean constant. | Improve this Doc View Source DecodeConstant(LNode) Decodes an LNode as a constant value. Declaration public Constant DecodeConstant(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description Constant A decoded constant. | Improve this Doc View Source DecodeField(LNode) Decoes an LNode as a field reference. Declaration public IField DecodeField(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description IField A decode field reference. | Improve this Doc View Source DecodeFlowGraph(LNode) Decodes a control-flow graph as a method body. Declaration public FlowGraph DecodeFlowGraph(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node An encoded control-flow graph. Returns Type Description FlowGraph A new method body that includes the decoded control-flow graph. | Improve this Doc View Source DecodeGenericParameterDefinition(LNode) Decodes an LNode as a generic parameter definition. Declaration public IGenericParameter DecodeGenericParameterDefinition(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description IGenericParameter A decoded generic parameter. | Improve this Doc View Source DecodeInstructionProtoype(LNode) Decodes an LNode as an instruction prototype. Declaration public InstructionPrototype DecodeInstructionProtoype(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description InstructionPrototype A decoded instruction prototype. | Improve this Doc View Source DecodeInt32(LNode) Decodes an LNode as a 32-bit signed integer constant. Declaration public int DecodeInt32(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description System.Int32 A 32-bit signed integer. | Improve this Doc View Source DecodeMethod(LNode) Decodes an LNode as a method reference. Declaration public IMethod DecodeMethod(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description IMethod A decoded method reference. | Improve this Doc View Source DecodeMethodLookup(LNode) Decodes an LNode as a method lookup strategy. Declaration public MethodLookup DecodeMethodLookup(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description MethodLookup A method lookup strategy. | Improve this Doc View Source DecodeParameter(LNode) Decodes a parameter node. Declaration public Parameter DecodeParameter(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node A parameter node to decode. Returns Type Description Parameter A decoded parameter. | Improve this Doc View Source DecodeProperty(LNode) Decodes an LNode as a property reference. Declaration public IProperty DecodeProperty(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description IProperty A decoded property reference. | Improve this Doc View Source DecodeQualifiedName(LNode) Decodes an LNode as a qualified name. Logs an error if the decoding process fails. Declaration public QualifiedName DecodeQualifiedName(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node A node to decode as a qualified name. Returns Type Description QualifiedName The name described by node if node can be decoded as a qualified name; otherwise, a default qualified name. | Improve this Doc View Source DecodeSimpleName(LNode) Decodes an LNode as a simple name. Logs an error if the decoding process fails. Declaration public SimpleName DecodeSimpleName(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node A node to decode as a simple name. Returns Type Description SimpleName The name described by node if node can be decoded as a simple name; otherwise, a sensible default simple name. | Improve this Doc View Source DecodeType(LNode) Decodes an LNode as a type reference. Declaration public IType DecodeType(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description IType A decoded type reference. | Improve this Doc View Source DecodeTypeDefinition(LNode) Decodes an LNode as a type definition. Declaration public IType DecodeTypeDefinition(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description IType A decoded type definition. | Improve this Doc View Source DecodeTypeMemberDefinition(LNode) Decodes an LNode as a type member definition. Declaration public ITypeMember DecodeTypeMemberDefinition(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. Returns Type Description ITypeMember A decoded type member definition. | Improve this Doc View Source WithScope(TypeParent) Creates a new decoder state that is identical to this decoder state in every way except for the decoding scope. Declaration public DecoderState WithScope(TypeParent newScope) Parameters Type Name Description TypeParent newScope The decoding scope for the new decoder state. Returns Type Description DecoderState A new decoder state."
  },
  "api/Flame.Ir.ConstantCodec.html": {
    "href": "api/Flame.Ir.ConstantCodec.html",
    "title": "Class ConstantCodec | Flame",
    "keywords": "Class ConstantCodec A codec for constants. Inheritance System.Object Codec < Constant , Loyc.Syntax.LNode > ConstantCodec Inherited Members Codec<Constant, LNode>.Encode(Constant, EncoderState) Codec<Constant, LNode>.Decode(LNode, DecoderState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class ConstantCodec : Codec<Constant, LNode> Fields | Improve this Doc View Source Instance An instance of the constant codec. Declaration public static readonly ConstantCodec Instance Field Value Type Description ConstantCodec Methods | Improve this Doc View Source Decode(LNode, DecoderState) Decodes an LNode as a constant value. Declaration public override Constant Decode(LNode node, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. DecoderState state The decoder state to use. Returns Type Description Constant A decoded constant. Overrides Flame.Ir.Codec<Flame.Constant, Loyc.Syntax.LNode>.Decode(Loyc.Syntax.LNode, Flame.Ir.DecoderState) | Improve this Doc View Source Encode(Constant, EncoderState) Encodes a constant value. Declaration public override LNode Encode(Constant value, EncoderState state) Parameters Type Name Description Constant value The value to encode. EncoderState state The encoder state to use. Returns Type Description Loyc.Syntax.LNode An encoded constant value. Overrides Flame.Ir.Codec<Flame.Constant, Loyc.Syntax.LNode>.Encode(Flame.Constant, Flame.Ir.EncoderState)"
  },
  "api/Flame.Ir.CodecElement-2.html": {
    "href": "api/Flame.Ir.CodecElement-2.html",
    "title": "Struct CodecElement<TObj, TEnc> | Flame",
    "keywords": "Struct CodecElement<TObj, TEnc> An encoder/decoder for a specific type of object. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public struct CodecElement<TObj, TEnc> Type Parameters Name Description TObj TEnc Constructors | Improve this Doc View Source CodecElement(Symbol, Func<TObj, EncoderState, TEnc>, Func<TEnc, DecoderState, TObj>) Creates a codec for a specific type of object. Declaration public CodecElement(Symbol identifier, Func<TObj, EncoderState, TEnc> encode, Func<TEnc, DecoderState, TObj> decode) Parameters Type Name Description Loyc.Symbol identifier System.Func <TObj, EncoderState , TEnc> encode A delegate that encodes objects. System.Func <TEnc, DecoderState , TObj> decode A delegate that decodes objects. | Improve this Doc View Source CodecElement(String, Func<TObj, EncoderState, TEnc>, Func<TEnc, DecoderState, TObj>) Creates a codec for a specific type of object. Declaration public CodecElement(string identifier, Func<TObj, EncoderState, TEnc> encode, Func<TEnc, DecoderState, TObj> decode) Parameters Type Name Description System.String identifier System.Func <TObj, EncoderState , TEnc> encode A delegate that encodes objects. System.Func <TEnc, DecoderState , TObj> decode A delegate that decodes objects. Properties | Improve this Doc View Source Decode Decodes an object's data. Declaration public Func<TEnc, DecoderState, TObj> Decode { get; } Property Value Type Description System.Func <TEnc, DecoderState , TObj> A delegate that decodes objects. | Improve this Doc View Source Encode Encodes an object's data. Declaration public Func<TObj, EncoderState, TEnc> Encode { get; } Property Value Type Description System.Func <TObj, EncoderState , TEnc> A delegate that encodes objects. | Improve this Doc View Source Identifier Gets an identifier for encoded objects. Declaration public Symbol Identifier { get; } Property Value Type Description Loyc.Symbol The encoded object identifier."
  },
  "api/Flame.Ir.Codec-2.html": {
    "href": "api/Flame.Ir.Codec-2.html",
    "title": "Class Codec<TObj, TEnc> | Flame",
    "keywords": "Class Codec<TObj, TEnc> An encoder/decoder for values. Inheritance System.Object Codec<TObj, TEnc> ConstantCodec PiecewiseCodec<TObj> TypeCodec TypeDefinitionCodec TypeMemberCodec TypeMemberDefinitionCodec Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public abstract class Codec<TObj, TEnc> Type Parameters Name Description TObj TEnc Methods | Improve this Doc View Source Decode(TEnc, DecoderState) Decodes a particular piece of data. Declaration public abstract TObj Decode(TEnc data, DecoderState state) Parameters Type Name Description TEnc data Encoded data to decode. DecoderState state The decoder's state. Returns Type Description TObj A decoded object. | Improve this Doc View Source Encode(TObj, EncoderState) Encodes a value. Declaration public abstract TEnc Encode(TObj value, EncoderState state) Parameters Type Name Description TObj value The value to encode. EncoderState state The state of the encoder. Returns Type Description TEnc The encoded value."
  },
  "api/Flame.IProperty.html": {
    "href": "api/Flame.IProperty.html",
    "title": "Interface IProperty | Flame",
    "keywords": "Interface IProperty Describes a property: a collection of accessors that manipulate a (virtual) value. Inherited Members ITypeMember.ParentType IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IProperty : ITypeMember, IMember Properties | Improve this Doc View Source Accessors Gets this property's accessors. Each property can have at most one accessor any given kind. Declaration IReadOnlyList<IAccessor> Accessors { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IAccessor > A read-only list of accessors. | Improve this Doc View Source IndexerParameters Gets this property's indexer parameters, i.e., an additional list of parameters that each accessor takes. Declaration IReadOnlyList<Parameter> IndexerParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > The indexer parameters. | Improve this Doc View Source PropertyType Gets this property's type. Declaration IType PropertyType { get; } Property Value Type Description IType The property's type."
  },
  "api/Flame.IMethod.html": {
    "href": "api/Flame.IMethod.html",
    "title": "Interface IMethod | Flame",
    "keywords": "Interface IMethod Defines a common interface for methods. Inherited Members ITypeMember.ParentType IGenericMember.GenericParameters IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IMethod : ITypeMember, IGenericMember, IMember Properties | Improve this Doc View Source BaseMethods Gets the method's base methods. Declaration IReadOnlyList<IMethod> BaseMethods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > | Improve this Doc View Source IsConstructor Indicates if this method is a constructor. Declaration bool IsConstructor { get; } Property Value Type Description System.Boolean true if this method is a constructor; otherwise, false . | Improve this Doc View Source IsStatic Tells if this is a static method. Non-static methods take a non-null pointer to their parent type as an implicit first arguments. Static methods do not. Declaration bool IsStatic { get; } Property Value Type Description System.Boolean true if this method is a static method; otherwise, false . | Improve this Doc View Source Parameters Gets the method's parameters. Declaration IReadOnlyList<Parameter> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > | Improve this Doc View Source ReturnParameter Gets the method's return parameter. Declaration Parameter ReturnParameter { get; } Property Value Type Description Parameter Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.IMember.html": {
    "href": "api/Flame.IMember.html",
    "title": "Interface IMember | Flame",
    "keywords": "Interface IMember The root interface for members: constructs that have a name, a full name and a set of attributes. Namespace : Flame Assembly : Flame.dll Syntax public interface IMember Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source FullName Gets the member's full name. Declaration QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source Name Gets the member's unqualified name. Declaration UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName"
  },
  "api/Flame.IGenericParameter.html": {
    "href": "api/Flame.IGenericParameter.html",
    "title": "Interface IGenericParameter | Flame",
    "keywords": "Interface IGenericParameter Defines a generic parameter. Inherited Members IType.Parent IType.BaseTypes IType.Fields IType.Methods IType.Properties IType.NestedTypes IGenericMember.GenericParameters IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IGenericParameter : IType, IGenericMember, IMember Properties | Improve this Doc View Source ParentMember Gets the generic member that defines this generic parameter. Declaration IGenericMember ParentMember { get; } Property Value Type Description IGenericMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.IGenericMember.html": {
    "href": "api/Flame.IGenericMember.html",
    "title": "Interface IGenericMember | Flame",
    "keywords": "Interface IGenericMember Defines a generic member: a member that has a list of generic parameters. Inherited Members IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IGenericMember : IMember Properties | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters."
  },
  "api/Flame.IField.html": {
    "href": "api/Flame.IField.html",
    "title": "Interface IField | Flame",
    "keywords": "Interface IField Describes a field: a type member that stores some data. Inherited Members ITypeMember.ParentType IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IField : ITypeMember, IMember Properties | Improve this Doc View Source FieldType Gets the type of value stored in this field. Declaration IType FieldType { get; } Property Value Type Description IType The type of value stored in this field. | Improve this Doc View Source IsStatic Tells if this field is static. The storage for static fields is shared by the entire application, whereas the storage for instance (i.e., non-static) fields is specific to an instance of a type. Declaration bool IsStatic { get; } Property Value Type Description System.Boolean true if this field is static; otherwise, false . Extension Methods TypeExtensions.GetRecursiveGenericDeclaration(IField)"
  },
  "api/Flame.Constants.Float64Constant.html": {
    "href": "api/Flame.Constants.Float64Constant.html",
    "title": "Class Float64Constant | Flame",
    "keywords": "Class Float64Constant A 64-bit floating point constant. Inheritance System.Object Constant Float64Constant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class Float64Constant : Constant, IEquatable<Constant> Constructors | Improve this Doc View Source Float64Constant(Double) Creates a constant from a value. Declaration public Float64Constant(double value) Parameters Type Name Description System.Double value The constant value. Properties | Improve this Doc View Source Value Gets the value represented by this constant. Declaration public double Value { get; } Property Value Type Description System.Double The constant value. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.Float32Constant.html": {
    "href": "api/Flame.Constants.Float32Constant.html",
    "title": "Class Float32Constant | Flame",
    "keywords": "Class Float32Constant A 32-bit floating point constant. Inheritance System.Object Constant Float32Constant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class Float32Constant : Constant, IEquatable<Constant> Constructors | Improve this Doc View Source Float32Constant(Single) Creates a constant from a value. Declaration public Float32Constant(float value) Parameters Type Name Description System.Single value The constant value. Properties | Improve this Doc View Source Value Gets the value represented by this constant. Declaration public float Value { get; } Property Value Type Description System.Single The constant value. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.FieldTokenConstant.html": {
    "href": "api/Flame.Constants.FieldTokenConstant.html",
    "title": "Class FieldTokenConstant | Flame",
    "keywords": "Class FieldTokenConstant A field token constant: a constant that wraps a runtime handle to a field. Inheritance System.Object Constant FieldTokenConstant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class FieldTokenConstant : Constant, IEquatable<Constant> Constructors | Improve this Doc View Source FieldTokenConstant(IField) Creates a field token constant from a field. Declaration public FieldTokenConstant(IField field) Parameters Type Name Description IField field The field to create a token to. Properties | Improve this Doc View Source Field Gets the field encapsulated by this field token constant. Declaration public IField Field { get; } Property Value Type Description IField A field. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.DefaultConstant.html": {
    "href": "api/Flame.Constants.DefaultConstant.html",
    "title": "Class DefaultConstant | Flame",
    "keywords": "Class DefaultConstant A default-value constant, which represents the default value of some type, typically characterized by the all-zeroes bit pattern. Inheritance System.Object Constant DefaultConstant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class DefaultConstant : Constant, IEquatable<Constant> Fields | Improve this Doc View Source Instance An instance of the default-value constant. Declaration public static readonly DefaultConstant Instance Field Value Type Description DefaultConstant The default-value constant. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.BooleanConstant.html": {
    "href": "api/Flame.Constants.BooleanConstant.html",
    "title": "Class BooleanConstant | Flame",
    "keywords": "Class BooleanConstant Helpers for Boolean constants. Inheritance System.Object BooleanConstant Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public static class BooleanConstant Fields | Improve this Doc View Source False Gets a Boolean constant for 'false.' Declaration public static readonly IntegerConstant False Field Value Type Description IntegerConstant The 'false' constant. | Improve this Doc View Source True Gets a Boolean constant for 'true.' Declaration public static readonly IntegerConstant True Field Value Type Description IntegerConstant The 'true' constant. Methods | Improve this Doc View Source Create(Boolean) Creates a Boolean constant from a value. Declaration public static IntegerConstant Create(bool value) Parameters Type Name Description System.Boolean value The constant value. Returns Type Description IntegerConstant"
  },
  "api/Flame.Constant.html": {
    "href": "api/Flame.Constant.html",
    "title": "Class Constant | Flame",
    "keywords": "Class Constant A constant value. Inheritance System.Object Constant DefaultConstant FieldTokenConstant Float32Constant Float64Constant IntegerConstant MethodTokenConstant NullConstant StringConstant TypeTokenConstant Implements System.IEquatable < Constant > Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public abstract class Constant : IEquatable<Constant> Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public abstract bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public abstract override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators | Improve this Doc View Source Equality(Constant, Constant) Tests if two constants are equal. Declaration public static bool operator ==(Constant left, Constant right) Parameters Type Name Description Constant left A first constant. Constant right A second constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . | Improve this Doc View Source Inequality(Constant, Constant) Tests if two constants are not equal. Declaration public static bool operator !=(Constant left, Constant right) Parameters Type Name Description Constant left A first constant. Constant right A second constant. Returns Type Description System.Boolean false if the constants are equal; otherwise, true . Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.Instructions.IntrinsicNamespace.html": {
    "href": "api/Flame.Compiler.Instructions.IntrinsicNamespace.html",
    "title": "Struct IntrinsicNamespace | Flame",
    "keywords": "Struct IntrinsicNamespace Represents a namespace of intrinsics. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public struct IntrinsicNamespace Constructors | Improve this Doc View Source IntrinsicNamespace(String) Creates an intrinsic namespace. Declaration public IntrinsicNamespace(string ns) Parameters Type Name Description System.String ns The namespace to manage. Properties | Improve this Doc View Source Namespace Gets the name of the namespace of intrinsics. Declaration public string Namespace { get; } Property Value Type Description System.String The namespace, as a string. Methods | Improve this Doc View Source GetIntrinsicName(String) Creates a namespaced intrinsic name from a namespaced operator name. Declaration public string GetIntrinsicName(string operatorName) Parameters Type Name Description System.String operatorName The operator name to wrap in a namespaced intrinsic name. Returns Type Description System.String A namespaced intrinsic name. | Improve this Doc View Source IsIntrinsicName(String) Tests if an intrinsic name is a namespaced intrinsic name. Declaration public bool IsIntrinsicName(string intrinsicName) Parameters Type Name Description System.String intrinsicName The intrinsic name to examine. Returns Type Description System.Boolean true if the intrinsic name is a namespaced intrinsic name; otherwise, false . | Improve this Doc View Source IsIntrinsicPrototype(InstructionPrototype) Tests if an instruction prototype is a intrinsic prototype defined in the current namespace. Declaration public bool IsIntrinsicPrototype(InstructionPrototype prototype) Parameters Type Name Description InstructionPrototype prototype The prototype to examine. Returns Type Description System.Boolean true if the prototype is a namespaced intrinsic prototype; otherwise, false . | Improve this Doc View Source IsIntrinsicPrototype(InstructionPrototype, String) Tests if an instruction prototype is a intrinsic prototype with a particular name defined in the current namespace. Declaration public bool IsIntrinsicPrototype(InstructionPrototype prototype, string name) Parameters Type Name Description InstructionPrototype prototype The prototype to examine. System.String name The prototype name to expect. Returns Type Description System.Boolean true if the prototype is a namespaced intrinsic prototype with a name equal to name ; otherwise, false . | Improve this Doc View Source ParseIntrinsicName(String) Parses an intrinsic name as a namespaced intrinsic name, assuming that the intrinsic name is a namespaced intrinsic name. Returns the name of the operator wrapped by the namespaced intrinsic name. Declaration public string ParseIntrinsicName(string intrinsicName) Parameters Type Name Description System.String intrinsicName The namespaced intrinsic name to parse. Returns Type Description System.String The operator name wrapped by the namespaced intrinsic name. | Improve this Doc View Source TryParseIntrinsicName(String, out String) Tries to parse an intrinsic name as an intrinsic name in this namespace. Declaration public bool TryParseIntrinsicName(string intrinsicName, out string operatorName) Parameters Type Name Description System.String intrinsicName The intrinsic name to parse. System.String operatorName The name of the operator specified by the intrinsic, if the intrinsic name is an namespaced intrinsic name. Returns Type Description System.Boolean true if the intrinsic name is an intrinsic name in the current namespace; otherwise, false ."
  },
  "api/Flame.Compiler.Instructions.IndirectCallPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.IndirectCallPrototype.html",
    "title": "Class IndirectCallPrototype | Flame",
    "keywords": "Class IndirectCallPrototype An instruction prototype for indirect call instructions: instructions that call a delegate or function pointer. Inheritance System.Object InstructionPrototype IndirectCallPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class IndirectCallPrototype : InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ParameterTypes Gets the list of parameter types. Declaration public IReadOnlyList<IType> ParameterTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > The parameter types. | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType, IReadOnlyList<IType>) Gets the indirect call instruction prototype for a particular return type and parameter type list. Declaration public static IndirectCallPrototype Create(IType returnType, IReadOnlyList<IType> parameterTypes) Parameters Type Name Description IType returnType The type of value returned by the callee. System.Collections.Generic.IReadOnlyList < IType > parameterTypes A list of the callee's parameter types. Returns Type Description IndirectCallPrototype An indirect call instruction prototype. | Improve this Doc View Source GetArgumentList(Instruction) Gets the argument list in an instruction that conforms to this prototype. Declaration public ReadOnlySlice<ValueTag> GetArgumentList(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ReadOnlySlice < ValueTag > The formal argument list. | Improve this Doc View Source GetCallee(Instruction) Gets the callee delegate or function pointer argument in an instruction that conforms to this prototype. Declaration public ValueTag GetCallee(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ValueTag The callee argument. | Improve this Doc View Source Instantiate(ValueTag, IReadOnlyList<ValueTag>) Instantiates this indirect call prototype. Declaration public Instruction Instantiate(ValueTag callee, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description ValueTag callee The delegate or function pointer to call. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The argument list for the call. Returns Type Description Instruction An indirect call instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.ArithmeticIntrinsics.html": {
    "href": "api/Flame.Compiler.Instructions.ArithmeticIntrinsics.html",
    "title": "Class ArithmeticIntrinsics | Flame",
    "keywords": "Class ArithmeticIntrinsics Supports creating, recognizing and parsing arithmetic intrinsics. Inheritance System.Object ArithmeticIntrinsics Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class ArithmeticIntrinsics Fields | Improve this Doc View Source Namespace The namespace for arithmetic intrinsics. Declaration public static readonly IntrinsicNamespace Namespace Field Value Type Description IntrinsicNamespace Methods | Improve this Doc View Source CreatePrototype(String, IType, IType[]) Creates an arithmetic intrinsic prototype. Declaration public static IntrinsicPrototype CreatePrototype(string operatorName, IType resultType, params IType[] parameterTypes) Parameters Type Name Description System.String operatorName The name of the operator represented by the arithmetic intrinsic. IType resultType The type of value produced by the intrinsic to create. IType [] parameterTypes The types of the values the intrinsic takes as arguments. Returns Type Description IntrinsicPrototype An arithmetic intrinsic prototype. | Improve this Doc View Source CreatePrototype(String, IType, IReadOnlyList<IType>) Creates an arithmetic intrinsic prototype. Declaration public static IntrinsicPrototype CreatePrototype(string operatorName, IType resultType, IReadOnlyList<IType> parameterTypes) Parameters Type Name Description System.String operatorName The name of the operator represented by the arithmetic intrinsic. IType resultType The type of value produced by the intrinsic to create. System.Collections.Generic.IReadOnlyList < IType > parameterTypes The types of the values the intrinsic takes as arguments. Returns Type Description IntrinsicPrototype An arithmetic intrinsic prototype. | Improve this Doc View Source GetArithmeticIntrinsicName(String) Creates an arithmetic intrinsic name from an arithmetic operator name. Declaration public static string GetArithmeticIntrinsicName(string operatorName) Parameters Type Name Description System.String operatorName The operator name to wrap in an arithmetic intrinsic name. Returns Type Description System.String An arithmetic intrinsic name. | Improve this Doc View Source IsArithmeticIntrinsicName(String) Tests if an intrinsic name is an arithmetic intrinsic name. Declaration public static bool IsArithmeticIntrinsicName(string intrinsicName) Parameters Type Name Description System.String intrinsicName The intrinsic name to examine. Returns Type Description System.Boolean true if the intrinsic name is an arithmetic intrinsic name; otherwise, false . | Improve this Doc View Source ParseArithmeticIntrinsicName(String) Parses an intrinsic name as an arithmetic intrinsic name, assuming that the intrinsic name is an arithmetic intrinsic name. Returns the name of the operator wrapped by the arithmetic intrinsic name. Declaration public static string ParseArithmeticIntrinsicName(string intrinsicName) Parameters Type Name Description System.String intrinsicName The arithmetic intrinsic name to parse. Returns Type Description System.String The operator name wrapped by the arithmetic intrinsic name. | Improve this Doc View Source TryEvaluate(String, IType, IReadOnlyList<Constant>, out Constant) Tries to evaluate an application of a standard arithmetic operator. Declaration public static bool TryEvaluate(string operatorName, IType resultType, IReadOnlyList<Constant> arguments, out Constant result) Parameters Type Name Description System.String operatorName The name of the operator to evaluate. IType resultType The result type of the operator. System.Collections.Generic.IReadOnlyList < Constant > arguments The operator application's arguments. Constant result The operator application's result, if it can be computed. Returns Type Description System.Boolean true if the operator application can be evaluated; otherwise, false . | Improve this Doc View Source TryParseArithmeticIntrinsicName(String, out String) Tries to parse an intrinsic name as an arithmetic intrinsic name. Declaration public static bool TryParseArithmeticIntrinsicName(string intrinsicName, out string operatorName) Parameters Type Name Description System.String intrinsicName The intrinsic name to parse. System.String operatorName The name of the operator specified by the intrinsic, if the intrinsic name is an arithmetic intrinsic name. Returns Type Description System.Boolean true if the intrinsic name is an arithmetic intrinsic name; otherwise, false ."
  },
  "api/Flame.Compiler.Instructions.ArithmeticIntrinsics.Operators.html": {
    "href": "api/Flame.Compiler.Instructions.ArithmeticIntrinsics.Operators.html",
    "title": "Class ArithmeticIntrinsics.Operators | Flame",
    "keywords": "Class ArithmeticIntrinsics.Operators A collection of names for arithmetic operations. Inheritance System.Object ArithmeticIntrinsics.Operators Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class Operators Fields | Improve this Doc View Source Add The addition binary operator. Declaration public const string Add = \"add\" Field Value Type Description System.String | Improve this Doc View Source All An immutable array containing all standard arithmetic intrinsic operator names. Declaration public static readonly ImmutableArray<string> All Field Value Type Description System.Collections.Immutable.ImmutableArray < System.String > | Improve this Doc View Source And The bitwise and binary operator. Declaration public const string And = \"and\" Field Value Type Description System.String | Improve this Doc View Source Convert The unary conversion operator. Declaration public const string Convert = \"convert\" Field Value Type Description System.String | Improve this Doc View Source Divide The division binary operator. Declaration public const string Divide = \"div\" Field Value Type Description System.String | Improve this Doc View Source IsEqualTo The is-equal-to binary operator. Declaration public const string IsEqualTo = \"eq\" Field Value Type Description System.String | Improve this Doc View Source IsGreaterThan The is-greater-than binary operator. Declaration public const string IsGreaterThan = \"gt\" Field Value Type Description System.String | Improve this Doc View Source IsGreaterThanOrEqualTo The is-greater-than-or-equal-to binary operator. Declaration public const string IsGreaterThanOrEqualTo = \"gte\" Field Value Type Description System.String | Improve this Doc View Source IsLessThan The is-less-than binary operator. Declaration public const string IsLessThan = \"lt\" Field Value Type Description System.String | Improve this Doc View Source IsLessThanOrEqualTo The is-less-than-or-equal-to binary operator. Declaration public const string IsLessThanOrEqualTo = \"lte\" Field Value Type Description System.String | Improve this Doc View Source IsNotEqualTo The is-not-equal-to binary operator. Declaration public const string IsNotEqualTo = \"neq\" Field Value Type Description System.String | Improve this Doc View Source LeftShift The left shift operator. Declaration public const string LeftShift = \"shl\" Field Value Type Description System.String | Improve this Doc View Source Multiply The multiplication binary operator. Declaration public const string Multiply = \"mul\" Field Value Type Description System.String | Improve this Doc View Source Not The bitwise not unary operator. Declaration public const string Not = \"not\" Field Value Type Description System.String | Improve this Doc View Source Or The bitwise or binary operator. Declaration public const string Or = \"or\" Field Value Type Description System.String | Improve this Doc View Source Remainder The remainder binary operator. Declaration public const string Remainder = \"rem\" Field Value Type Description System.String | Improve this Doc View Source RightShift The right shift operator. Declaration public const string RightShift = \"shr\" Field Value Type Description System.String | Improve this Doc View Source Subtract The subtraction binary operator. Declaration public const string Subtract = \"sub\" Field Value Type Description System.String | Improve this Doc View Source Xor The bitwise exclusive or binary operator. Declaration public const string Xor = \"xor\" Field Value Type Description System.String Methods | Improve this Doc View Source IsRelationalOperator(String) Tells if a particular operator name refers to a standard relational operator. Declaration public static bool IsRelationalOperator(string operatorName) Parameters Type Name Description System.String operatorName The operator name to examine. Returns Type Description System.Boolean true if operatorName is a standard relational operator; otherwise, false ."
  },
  "api/Flame.Compiler.Instructions.AllocaPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.AllocaPrototype.html",
    "title": "Class AllocaPrototype | Flame",
    "keywords": "Class AllocaPrototype A prototype for alloca instructions, which allocate a single value on the stack. Inheritance System.Object InstructionPrototype AllocaPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class AllocaPrototype : InstructionPrototype Properties | Improve this Doc View Source ElementType Gets the type of element to allocate storage for. Declaration public IType ElementType { get; } Property Value Type Description IType The type of element. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType) Gets the alloca instruction prototype for a particular result type. Declaration public static AllocaPrototype Create(IType elementType) Parameters Type Name Description IType elementType The type of value to allocate storage for. Returns Type Description AllocaPrototype An alloca instruction prototype. | Improve this Doc View Source Instantiate() Instantiates this prototype. Declaration public Instruction Instantiate() Returns Type Description Instruction An alloca instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.AllocaArrayPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.AllocaArrayPrototype.html",
    "title": "Class AllocaArrayPrototype | Flame",
    "keywords": "Class AllocaArrayPrototype A prototype for alloca-array instructions, which allocate a variable-length array of values on the stack. Inheritance System.Object InstructionPrototype AllocaArrayPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class AllocaArrayPrototype : InstructionPrototype Properties | Improve this Doc View Source ElementType Gets the type of element to allocate storage for. Declaration public IType ElementType { get; } Property Value Type Description IType The type of element. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType) Gets the alloca-array instruction prototype for a particular result type. Declaration public static AllocaArrayPrototype Create(IType resultType) Parameters Type Name Description IType resultType The result type. Returns Type Description AllocaArrayPrototype An alloca-array instruction prototype. | Improve this Doc View Source GetElementCount(Instruction) Gets the number of elements allocated by an instance of this prototype. Declaration public ValueTag GetElementCount(Instruction instance) Parameters Type Name Description Instruction instance An alloca-array instruction. Returns Type Description ValueTag The number of elements allocated by the instruction. | Improve this Doc View Source Instantiate(ValueTag) Instantiates this prototype. Declaration public Instruction Instantiate(ValueTag elementCount) Parameters Type Name Description ValueTag elementCount The number of elements to allocate storage for. Returns Type Description Instruction An alloca-array instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.InstructionPrototype.html": {
    "href": "api/Flame.Compiler.InstructionPrototype.html",
    "title": "Class InstructionPrototype | Flame",
    "keywords": "Class InstructionPrototype Describes an instruction's prototype: everything there is to an instruction except for its arguments. Inheritance System.Object InstructionPrototype AllocaArrayPrototype AllocaPrototype BoxPrototype CallPrototype ConstantPrototype ConstrainedCallPrototype CopyPrototype DynamicCastPrototype FusedInstructionPrototype GetFieldPointerPrototype GetStaticFieldPointerPrototype IndirectCallPrototype IntrinsicPrototype LoadPrototype NewDelegatePrototype NewObjectPrototype ReinterpretCastPrototype StorePrototype UnboxPrototype Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public abstract class InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public abstract int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public abstract IType ResultType { get; } Property Value Type Description IType A type of value. Methods | Improve this Doc View Source AssertIsPrototypeOf(Instruction) Asserts that a particular instruction is an instance of this prototype. Declaration public void AssertIsPrototypeOf(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to examine. | Improve this Doc View Source AssertIsPrototypeOf(Instruction, String) Asserts that a particular instruction is an instance of this prototype. Declaration public void AssertIsPrototypeOf(Instruction instruction, string errorMessage) Parameters Type Name Description Instruction instruction The instruction to examine. System.String errorMessage An error message to print if the assertion does not hold true. | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public abstract IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. | Improve this Doc View Source Instantiate(IReadOnlyList<ValueTag>) Instantiates this prototype with a list of arguments. Declaration public Instruction Instantiate(IReadOnlyList<ValueTag> arguments) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < ValueTag > arguments The arguments to instantiate this prototype with. Returns Type Description Instruction An instruction whose prototype is equal to this prototype and whose argument list is arguments . | Improve this Doc View Source IsPrototypeOf(Instruction) Tests if a particular instruction is an instance of this prototype. Declaration public bool IsPrototypeOf(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to examine. Returns Type Description System.Boolean true if the instruction is an instance of this prototype; otherwise, false . | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public abstract InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype."
  },
  "api/Flame.Compiler.InstructionBuilder.html": {
    "href": "api/Flame.Compiler.InstructionBuilder.html",
    "title": "Class InstructionBuilder | Flame",
    "keywords": "Class InstructionBuilder A reference to an instruction in a control-flow graph, which can either be a named instruction that is defined directly by a basic block or an unnamed instruction included in a block's flow. This is a mutable reference: it refers to an instruction in a control-flow graph builder and that instruction can be changed. Inheritance System.Object InstructionBuilder FlowInstructionBuilder NamedInstructionBuilder Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public abstract class InstructionBuilder Properties | Improve this Doc View Source Arguments Gets the instruction's argument list. Declaration public IReadOnlyList<ValueTag> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ValueTag > | Improve this Doc View Source Block Gets the block that defines this instruction. Declaration public abstract BasicBlockBuilder Block { get; } Property Value Type Description BasicBlockBuilder A basic block builder. | Improve this Doc View Source Graph Gets the graph that defines this instruction. Declaration public virtual FlowGraphBuilder Graph { get; } Property Value Type Description FlowGraphBuilder A control-flow graph builder. | Improve this Doc View Source Instruction Gets or sets the instruction referred to by this instruction builder. Declaration public abstract Instruction Instruction { get; set; } Property Value Type Description Instruction The instruction referred to by this builder. | Improve this Doc View Source IsValid Tells if this instruction builder is still valid. Querying or modifying invalid instruction builders results in an exception. Declaration public abstract bool IsValid { get; } Property Value Type Description System.Boolean true if this instruction reference is valid; otherwise, false . | Improve this Doc View Source Prototype Gets the instruction's prototype. Declaration public InstructionPrototype Prototype { get; } Property Value Type Description InstructionPrototype | Improve this Doc View Source ResultType Gets the instruction's result type. Declaration public IType ResultType { get; } Property Value Type Description IType Methods | Improve this Doc View Source ReplaceInstruction(FlowGraph) Replaces the instruction referred to by this instruction builder with a control-flow graph that implements the instruction. The instruction's arguments are passed to implementation 's entry point block. Declaration public void ReplaceInstruction(FlowGraph implementation) Parameters Type Name Description FlowGraph implementation A control-flow graph that implements the instruction. Remarks Calling this method may invalidate instruction builders, including this builder. Specifically, if this builder refers to an unnamed instruction in block flow, then this builder and all other builders to unnamed instructions in that block flow may be invalidated. | Improve this Doc View Source ReplaceInstruction(FlowGraph, IReadOnlyList<ValueTag>) Replaces the instruction referred to by this instruction builder with a control-flow graph that implements the instruction. Declaration public abstract void ReplaceInstruction(FlowGraph implementation, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description FlowGraph implementation A control-flow graph that implements the instruction. System.Collections.Generic.IReadOnlyList < ValueTag > arguments A list of arguments to pass to implementation 's entry point block. Remarks Calling this method may invalidate instruction builders, including this builder. Specifically, if this builder refers to an unnamed instruction in block flow, then this builder and all other builders to unnamed instructions in that block flow may be invalidated."
  },
  "api/Flame.Compiler.BlockParameter.html": {
    "href": "api/Flame.Compiler.BlockParameter.html",
    "title": "Struct BlockParameter | Flame",
    "keywords": "Struct BlockParameter A parameter to a basic block. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public struct BlockParameter Constructors | Improve this Doc View Source BlockParameter(IType) Creates a block parameter from a type. An anonymous tag is automatically generated for the block parameter. Declaration public BlockParameter(IType type) Parameters Type Name Description IType type The block parameter's type. | Improve this Doc View Source BlockParameter(IType, ValueTag) Creates a block parameter from a type and a tag. Declaration public BlockParameter(IType type, ValueTag tag) Parameters Type Name Description IType type The block parameter's type. ValueTag tag The block parameter's tag. | Improve this Doc View Source BlockParameter(IType, String) Creates a block parameter from a type and a name. Declaration public BlockParameter(IType type, string name) Parameters Type Name Description IType type The block parameter's type. System.String name The name to assign to an automatically-created block parameter tag. Properties | Improve this Doc View Source Tag Gets this block parameter's tag. Declaration public ValueTag Tag { get; } Property Value Type Description ValueTag The block parameter's tag. | Improve this Doc View Source Type Gets this block parameter's type. Declaration public IType Type { get; } Property Value Type Description IType The block parameter's type. Methods | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this block parameter. Declaration public BlockParameter Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description BlockParameter A transformed block parameter. Operators | Improve this Doc View Source Implicit(BlockParameter to ValueTag) Implicitly converts a block parameter to its tag. Declaration public static implicit operator ValueTag(BlockParameter parameter) Parameters Type Name Description BlockParameter parameter The block parameter to convert. Returns Type Description ValueTag"
  },
  "api/Flame.Compiler.BlockFlow.html": {
    "href": "api/Flame.Compiler.BlockFlow.html",
    "title": "Class BlockFlow | Flame",
    "keywords": "Class BlockFlow Describes control flow at the end of a basic block. Inheritance System.Object BlockFlow JumpFlow ReturnFlow SwitchFlow TryFlow UnreachableFlow Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public abstract class BlockFlow Properties | Improve this Doc View Source Branches Gets a list of branches this flow may take. Declaration public abstract IReadOnlyList<Branch> Branches { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Branch > A list of potential branches. | Improve this Doc View Source BranchTargets Gets a list of each branch's target. Declaration public IEnumerable<BasicBlockTag> BranchTargets { get; } Property Value Type Description System.Collections.Generic.IEnumerable < BasicBlockTag > A list of branch targets. | Improve this Doc View Source Instructions Gets a list of inner instructions for this block flow. Declaration public abstract IReadOnlyList<Instruction> Instructions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Instruction > The inner instructions. Methods | Improve this Doc View Source GetInstructionBuilder(BasicBlockBuilder, Int32) Gets an instruction builder for the nth anonymous instruction in this block flow. Declaration public abstract InstructionBuilder GetInstructionBuilder(BasicBlockBuilder block, int instructionIndex) Parameters Type Name Description BasicBlockBuilder block The block that defines this flow. System.Int32 instructionIndex The index of the anonymous instruction to create a builder for. Returns Type Description InstructionBuilder An instruction builder for an anonymous instruction. | Improve this Doc View Source GetInstructionBuilders(BasicBlockBuilder) Gets instruction builders for all anonymous instructions in this block flow. Declaration public IEnumerable<InstructionBuilder> GetInstructionBuilders(BasicBlockBuilder block) Parameters Type Name Description BasicBlockBuilder block The block that defines this flow. Returns Type Description System.Collections.Generic.IEnumerable < InstructionBuilder > A sequence of instruction builders for anonymous instructions. | Improve this Doc View Source MapArguments(IReadOnlyDictionary<BranchArgument, BranchArgument>) Applies a mapping to all branch arguments in this flow. Declaration public BlockFlow MapArguments(IReadOnlyDictionary<BranchArgument, BranchArgument> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < BranchArgument , BranchArgument > mapping A argument-to-argument mapping to apply. Returns Type Description BlockFlow Block flow. | Improve this Doc View Source MapArguments(Func<BranchArgument, BranchArgument>) Applies a mapping to all branch arguments in this flow. Declaration public BlockFlow MapArguments(Func<BranchArgument, BranchArgument> mapping) Parameters Type Name Description System.Func < BranchArgument , BranchArgument > mapping A argument-to-argument mapping to apply. Returns Type Description BlockFlow Block flow. | Improve this Doc View Source MapBlocks(IReadOnlyDictionary<BasicBlockTag, BasicBlockTag>) Applies a mapping to all basic blocks referenced by branches in this block flow. Declaration public BlockFlow MapBlocks(IReadOnlyDictionary<BasicBlockTag, BasicBlockTag> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < BasicBlockTag , BasicBlockTag > mapping A block-to-block mapping to apply. Returns Type Description BlockFlow Block flow. | Improve this Doc View Source MapBlocks(Func<BasicBlockTag, BasicBlockTag>) Applies a mapping to all basic blocks referenced by branches in this block flow. Declaration public BlockFlow MapBlocks(Func<BasicBlockTag, BasicBlockTag> mapping) Parameters Type Name Description System.Func < BasicBlockTag , BasicBlockTag > mapping A block-to-block mapping to apply. Returns Type Description BlockFlow Block flow. | Improve this Doc View Source MapBranches(Func<Branch, Branch>) Applies a mapping to all branches in this basic block. Declaration public BlockFlow MapBranches(Func<Branch, Branch> mapping) Parameters Type Name Description System.Func < Branch , Branch > mapping The mapping to apply. Returns Type Description BlockFlow Block flow. | Improve this Doc View Source MapValues(IReadOnlyDictionary<ValueTag, ValueTag>) Applies a mapping to all values referenced by instructions and branches in this block flow. Declaration public BlockFlow MapValues(IReadOnlyDictionary<ValueTag, ValueTag> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < ValueTag , ValueTag > mapping A value-to-value mapping to apply. Returns Type Description BlockFlow Block flow. | Improve this Doc View Source MapValues(Func<ValueTag, ValueTag>) Applies a mapping to all values referenced by instructions and branches in this block flow. Declaration public BlockFlow MapValues(Func<ValueTag, ValueTag> mapping) Parameters Type Name Description System.Func < ValueTag , ValueTag > mapping A value-to-value mapping to apply. Returns Type Description BlockFlow Block flow. | Improve this Doc View Source WithBranches(IReadOnlyList<Branch>) Replaces this flow's branches with a particular list of branches. Declaration public abstract BlockFlow WithBranches(IReadOnlyList<Branch> branches) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Branch > branches The new branches. Returns Type Description BlockFlow A new flow. | Improve this Doc View Source WithInstructions(IReadOnlyList<Instruction>) Replaces this flow's inner instructions. Declaration public abstract BlockFlow WithInstructions(IReadOnlyList<Instruction> instructions) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Instruction > instructions The new instructions. Returns Type Description BlockFlow A new flow."
  },
  "api/Flame.Compiler.Analysis.ValueNumbering.html": {
    "href": "api/Flame.Compiler.Analysis.ValueNumbering.html",
    "title": "Class ValueNumbering | Flame",
    "keywords": "Class ValueNumbering A mapping of values to representative values for a particular control-flow graph. Inheritance System.Object ValueNumbering Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class ValueNumbering Methods | Improve this Doc View Source AreEquivalent(Instruction, Instruction) Tests if two instructions are equivalent. Instructions 'a', 'b' are considered to be equivalent iff 'a' dominates 'b' implies that 'b' can be replaced with a copy of the result computed by 'a'. Declaration public virtual bool AreEquivalent(Instruction first, Instruction second) Parameters Type Name Description Instruction first The first instruction to consider. Instruction second The second instruction to consider. Returns Type Description System.Boolean true if the instructions are equivalent; otherwise, false . | Improve this Doc View Source AreEquivalent(Instruction, ValueTag) Tests if an instruction is equivalent to a value. Declaration public bool AreEquivalent(Instruction first, ValueTag second) Parameters Type Name Description Instruction first The instruction to consider. ValueTag second The value to consider. Returns Type Description System.Boolean true if the instruction is equivalent to the value; otherwise, false . | Improve this Doc View Source AreEquivalent(ValueTag, ValueTag) Tests if two values are equivalent. Values 'a', 'b' are considered to be equivalent iff 'a' dominates 'b' implies that 'b' can be replaced with a copy of 'a'. Declaration public bool AreEquivalent(ValueTag first, ValueTag second) Parameters Type Name Description ValueTag first The first value to consider. ValueTag second The second value to consider. Returns Type Description System.Boolean true if the values are equivalent; otherwise, false . | Improve this Doc View Source GetNumber(ValueTag) Gets a value's \"number,\" i.e., another value that is representative of the set of all values that are equivalent with the value. Declaration public abstract ValueTag GetNumber(ValueTag value) Parameters Type Name Description ValueTag value A value tag to examine. Returns Type Description ValueTag The set representative for the set of all values equivalent with value . Requesting the set representative of another value that is equivalent with value will produce the same set representative. | Improve this Doc View Source TryGetNumber(Instruction, out ValueTag) Tries to compute the value number of an instruction. Declaration public abstract bool TryGetNumber(Instruction instruction, out ValueTag number) Parameters Type Name Description Instruction instruction The instruction to number. ValueTag number A value number if a value is found that is equivalent to instruction ; otherwise, null . Returns Type Description System.Boolean true if a value is found that is equivalent to instruction ; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.ValueNullability.html": {
    "href": "api/Flame.Compiler.Analysis.ValueNullability.html",
    "title": "Class ValueNullability | Flame",
    "keywords": "Class ValueNullability An analysis result that tells if values produce non- null or dereferenceable pointers. Inheritance System.Object ValueNullability Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class ValueNullability Methods | Improve this Doc View Source IsDereferenceable(ValueTag) Tells if a particular value always produces a pointer that can be dereferenced. Declaration public bool IsDereferenceable(ValueTag value) Parameters Type Name Description ValueTag value A pointer value to test for dereferenceability. Returns Type Description System.Boolean true if value may produce a null pointer; otherwise, false . | Improve this Doc View Source IsDereferenceableOrNull(Instruction) Tells if a particular instruction always produces a pointer that is either dereferenceable or null . Declaration public virtual bool IsDereferenceableOrNull(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction to test for dereferenceability. Returns Type Description System.Boolean true if instruction may produce a null pointer; otherwise, false . | Improve this Doc View Source IsDereferenceableOrNull(ValueTag) Tells if a particular value always produces a pointer that is either dereferenceable or null . Declaration public abstract bool IsDereferenceableOrNull(ValueTag value) Parameters Type Name Description ValueTag value A pointer value to test for dereferenceability. Returns Type Description System.Boolean true if value may produce a null pointer; otherwise, false . | Improve this Doc View Source IsDereferenceableOrNull(IType) Tests if a type is always either dereferenceable or null . Declaration public virtual bool IsDereferenceableOrNull(IType type) Parameters Type Name Description IType type The type to test for dereferenceability. Returns Type Description System.Boolean true all instances of type are either dereferenceable or null ; otherwise, false . | Improve this Doc View Source IsNonNull(Instruction) Tells if a particular instruction always produces a non- null pointer. Declaration public virtual bool IsNonNull(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction to test for nullability. Returns Type Description System.Boolean true if instruction will always produce a non- null pointer; otherwise, false . | Improve this Doc View Source IsNonNull(ValueTag) Tells if a particular value always produces a non- null pointer. Declaration public abstract bool IsNonNull(ValueTag value) Parameters Type Name Description ValueTag value A pointer value to test for nullability. Returns Type Description System.Boolean true if value will always produce a non- null pointer; otherwise, false . | Improve this Doc View Source IsNonNull(IType) Tests if a type is never nullable. Declaration public virtual bool IsNonNull(IType type) Parameters Type Name Description IType type The type to test for non-nullability. Returns Type Description System.Boolean true if a null pointer is an instance of type ; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.ValueLiveness.html": {
    "href": "api/Flame.Compiler.Analysis.ValueLiveness.html",
    "title": "Struct ValueLiveness | Flame",
    "keywords": "Struct ValueLiveness Describes which variables are live at any location in a control flow graph. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public struct ValueLiveness Methods | Improve this Doc View Source GetLiveness(BasicBlockTag) Gets block liveness data for a particular block. Declaration public BlockLiveness GetLiveness(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The tag of the block to get the liveness data for. Returns Type Description BlockLiveness Block liveness data."
  },
  "api/Flame.Compiler.Analysis.TrivialInstructionExceptionSpecs.html": {
    "href": "api/Flame.Compiler.Analysis.TrivialInstructionExceptionSpecs.html",
    "title": "Class TrivialInstructionExceptionSpecs | Flame",
    "keywords": "Class TrivialInstructionExceptionSpecs An instruction exception specification mapping that trivially copies prototype exception specifications. Inheritance System.Object InstructionExceptionSpecs TrivialInstructionExceptionSpecs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class TrivialInstructionExceptionSpecs : InstructionExceptionSpecs Constructors | Improve this Doc View Source TrivialInstructionExceptionSpecs(PrototypeExceptionSpecs) Creates instruction exception specification rules that simply copy instruction prototype exception specifications. Declaration public TrivialInstructionExceptionSpecs(PrototypeExceptionSpecs exceptionSpecs) Parameters Type Name Description PrototypeExceptionSpecs exceptionSpecs Prototype exception specification rules. Properties | Improve this Doc View Source ExceptionSpecs Exception specification rules for instruction prototypes. Declaration public PrototypeExceptionSpecs ExceptionSpecs { get; } Property Value Type Description PrototypeExceptionSpecs Exception specification rules. Methods | Improve this Doc View Source GetExceptionSpecification(Instruction) Gets the exception specification for a particular instruction. Declaration public override ExceptionSpecification GetExceptionSpecification(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to examine. Returns Type Description ExceptionSpecification An exception specification for instruction . Overrides InstructionExceptionSpecs.GetExceptionSpecification(Instruction)"
  },
  "api/Flame.Compiler.Analysis.TrivialAliasAnalysisResult.html": {
    "href": "api/Flame.Compiler.Analysis.TrivialAliasAnalysisResult.html",
    "title": "Class TrivialAliasAnalysisResult | Flame",
    "keywords": "Class TrivialAliasAnalysisResult A truly trivial alias analysis result implementation: all values are deemed to must-alias themselves and may-alias all other values. Inheritance System.Object AliasAnalysisResult TrivialAliasAnalysisResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class TrivialAliasAnalysisResult : AliasAnalysisResult Fields | Improve this Doc View Source Instance An instance of the trivial alias analysis result. Declaration public static readonly TrivialAliasAnalysisResult Instance Field Value Type Description TrivialAliasAnalysisResult Methods | Improve this Doc View Source GetAliasing(ValueTag, ValueTag) Gets the aliasing relation between two pointers. Declaration public override Aliasing GetAliasing(ValueTag first, ValueTag second) Parameters Type Name Description ValueTag first The first pointer value to examine. ValueTag second The second pointer value to examine. Returns Type Description Aliasing A conservative approximation of the aliasing relation between first and second . Overrides AliasAnalysisResult.GetAliasing(ValueTag, ValueTag)"
  },
  "api/Flame.Compiler.Analysis.StrictExceptionDelayability.html": {
    "href": "api/Flame.Compiler.Analysis.StrictExceptionDelayability.html",
    "title": "Class StrictExceptionDelayability | Flame",
    "keywords": "Class StrictExceptionDelayability Exception delayability rules that disallow delaying exceptions in all cases. Inheritance System.Object ExceptionDelayability StrictExceptionDelayability Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class StrictExceptionDelayability : ExceptionDelayability Fields | Improve this Doc View Source Instance An instance of the strict exception delayability policy. Declaration public static readonly StrictExceptionDelayability Instance Field Value Type Description StrictExceptionDelayability Methods | Improve this Doc View Source CanDelayExceptions(InstructionPrototype) Tells if it is permissible to delay exceptions thrown by a particular instruction until the instruction's result is used by an effectful instruction. If the instruction's result is never used that way, the exception may even be deleted altogether. Declaration public override bool CanDelayExceptions(InstructionPrototype prototype) Parameters Type Name Description InstructionPrototype prototype An instruction prototype to examine. Returns Type Description System.Boolean true if exceptions thrown by instances of prototype may be delayed until the instances' values are used by effectful instructions; otherwise, false . Overrides ExceptionDelayability.CanDelayExceptions(InstructionPrototype)"
  },
  "api/Flame.Compiler.Analysis.SetEntryPointUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.SetEntryPointUpdate.html",
    "title": "Class SetEntryPointUpdate | Flame",
    "keywords": "Class SetEntryPointUpdate A flow graph update that sets the graph's entry point to a new block. Inheritance System.Object FlowGraphUpdate BasicBlockUpdate SetEntryPointUpdate Inherited Members BasicBlockUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class SetEntryPointUpdate : BasicBlockUpdate"
  },
  "api/Flame.Compiler.Analysis.RuleBasedPrototypeExceptionSpecs.html": {
    "href": "api/Flame.Compiler.Analysis.RuleBasedPrototypeExceptionSpecs.html",
    "title": "Class RuleBasedPrototypeExceptionSpecs | Flame",
    "keywords": "Class RuleBasedPrototypeExceptionSpecs Assigns exception specifications to prototypes based on a set of user-configurable rules. Inheritance System.Object PrototypeExceptionSpecs RuleBasedPrototypeExceptionSpecs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class RuleBasedPrototypeExceptionSpecs : PrototypeExceptionSpecs Constructors | Improve this Doc View Source RuleBasedPrototypeExceptionSpecs() Creates an empty set of prototype exception spec rules. Declaration public RuleBasedPrototypeExceptionSpecs() | Improve this Doc View Source RuleBasedPrototypeExceptionSpecs(RuleBasedPrototypeExceptionSpecs) Creates a copy of another set of prototype exception spec rules. Declaration public RuleBasedPrototypeExceptionSpecs(RuleBasedPrototypeExceptionSpecs other) Parameters Type Name Description RuleBasedPrototypeExceptionSpecs other Fields | Improve this Doc View Source Default Gets the default prototype exception spec rules. Declaration public static readonly RuleBasedPrototypeExceptionSpecs Default Field Value Type Description RuleBasedPrototypeExceptionSpecs The default prototype exception spec rules. Methods | Improve this Doc View Source GetExceptionSpecification(InstructionPrototype) Gets the exception specification for a particular instruction prototype. Declaration public override ExceptionSpecification GetExceptionSpecification(InstructionPrototype prototype) Parameters Type Name Description InstructionPrototype prototype The prototype to examine. Returns Type Description ExceptionSpecification An exception specification for prototype . Overrides PrototypeExceptionSpecs.GetExceptionSpecification(InstructionPrototype) | Improve this Doc View Source Register(String, ExceptionSpecification) Registers a function that assigns a fixed exception specification to a particular type of intrinsic. Declaration public void Register(string intrinsicName, ExceptionSpecification exceptionSpec) Parameters Type Name Description System.String intrinsicName The name of the intrinsic to assign the exception specifications to. ExceptionSpecification exceptionSpec The exception specification for all intrinsic prototypes with name intrinsicName . | Improve this Doc View Source Register(String, Func<IntrinsicPrototype, ExceptionSpecification>) Registers a function that computes exception specifications for a particular type of intrinsic. Declaration public void Register(string intrinsicName, Func<IntrinsicPrototype, ExceptionSpecification> getExceptionSpec) Parameters Type Name Description System.String intrinsicName The name of the intrinsic to compute exception specifications for. System.Func < IntrinsicPrototype , ExceptionSpecification > getExceptionSpec A function that takes an intrinsic prototype with name intrinsicName and computes the exception specification for that prototype. | Improve this Doc View Source Register<T>(ExceptionSpecification) Maps a particular type of instruction prototype to an exception specification. Declaration public void Register<T>(ExceptionSpecification exceptionSpec) where T : InstructionPrototype Parameters Type Name Description ExceptionSpecification exceptionSpec The exception specification to register. Type Parameters Name Description T The type of instruction prototypes to which exceptionSpec is applicable. | Improve this Doc View Source Register<T>(Func<T, ExceptionSpecification>) Registers a function that computes exception specifications for a particular type of instruction prototype. Declaration public void Register<T>(Func<T, ExceptionSpecification> getExceptionSpec) where T : InstructionPrototype Parameters Type Name Description System.Func <T, ExceptionSpecification > getExceptionSpec A function that computes exception specifications for all instruction prototypes of type T. Type Parameters Name Description T The type of instruction prototypes to which getExceptionSpec is applicable."
  },
  "api/Flame.Compiler.Analysis.MapMembersUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.MapMembersUpdate.html",
    "title": "Class MapMembersUpdate | Flame",
    "keywords": "Class MapMembersUpdate A flow graph update that applies a mapping to every member in the flow graph. Inheritance System.Object FlowGraphUpdate MapMembersUpdate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class MapMembersUpdate : FlowGraphUpdate Properties | Improve this Doc View Source Mapping Gets the member mapping that is applied to the flow graph. Declaration public MemberMapping Mapping { get; } Property Value Type Description MemberMapping A member mapping."
  },
  "api/Flame.Compiler.Analysis.LocalMemorySSAAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.LocalMemorySSAAnalysis.html",
    "title": "Class LocalMemorySSAAnalysis | Flame",
    "keywords": "Class LocalMemorySSAAnalysis A very simple, block-local memory SSA analysis. Inheritance System.Object LocalMemorySSAAnalysis Implements IFlowGraphAnalysis < MemorySSA > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class LocalMemorySSAAnalysis : IFlowGraphAnalysis<MemorySSA> Fields | Improve this Doc View Source Instance An instance of the local memory SSA analysis. Declaration public static readonly LocalMemorySSAAnalysis Instance Field Value Type Description LocalMemorySSAAnalysis Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public MemorySSA Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description MemorySSA | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, MemorySSA, IReadOnlyList<FlowGraphUpdate>) Declaration public MemorySSA AnalyzeWithUpdates(FlowGraph graph, MemorySSA previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph MemorySSA previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description MemorySSA Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.ExceptionDelayability.html": {
    "href": "api/Flame.Compiler.Analysis.ExceptionDelayability.html",
    "title": "Class ExceptionDelayability | Flame",
    "keywords": "Class ExceptionDelayability A base class for rules about whether or not exceptions thrown by particular types of instructions may be delayed until the value they produce is used by an effectful instruction. Inheritance System.Object ExceptionDelayability PermissiveExceptionDelayability StrictExceptionDelayability Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class ExceptionDelayability Methods | Improve this Doc View Source CanDelayExceptions(InstructionPrototype) Tells if it is permissible to delay exceptions thrown by a particular instruction until the instruction's result is used by an effectful instruction. If the instruction's result is never used that way, the exception may even be deleted altogether. Declaration public abstract bool CanDelayExceptions(InstructionPrototype prototype) Parameters Type Name Description InstructionPrototype prototype An instruction prototype to examine. Returns Type Description System.Boolean true if exceptions thrown by instances of prototype may be delayed until the instances' values are used by effectful instructions; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.EffectfulInstructions.html": {
    "href": "api/Flame.Compiler.Analysis.EffectfulInstructions.html",
    "title": "Struct EffectfulInstructions | Flame",
    "keywords": "Struct EffectfulInstructions The set of instructions in a graph that may have side-effects. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public struct EffectfulInstructions Constructors | Improve this Doc View Source EffectfulInstructions(ImmutableHashSet<ValueTag>) Creates a set of effectful instructions. Declaration public EffectfulInstructions(ImmutableHashSet<ValueTag> instructions) Parameters Type Name Description System.Collections.Immutable.ImmutableHashSet < ValueTag > instructions The set of effectful instructions to encapsulate. Properties | Improve this Doc View Source Instructions Gets the set of effectful instructions as an immutable hash set. Declaration public ImmutableHashSet<ValueTag> Instructions { get; } Property Value Type Description System.Collections.Immutable.ImmutableHashSet < ValueTag > The set of effectful instructions."
  },
  "api/Flame.Compiler.Analysis.BasicBlockUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.BasicBlockUpdate.html",
    "title": "Class BasicBlockUpdate | Flame",
    "keywords": "Class BasicBlockUpdate A flow graph update at the basic block level: the insertion, deletion or modification of a basic block. Inheritance System.Object FlowGraphUpdate BasicBlockUpdate AddBasicBlockUpdate BasicBlockFlowUpdate BasicBlockParametersUpdate RemoveBasicBlockUpdate SetEntryPointUpdate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class BasicBlockUpdate : FlowGraphUpdate Properties | Improve this Doc View Source Tag Gets the tag of the block that is updated. Declaration public BasicBlockTag Tag { get; } Property Value Type Description BasicBlockTag The tag of a basic block."
  },
  "api/Flame.Compiler.Analysis.BasicBlockPredecessors.html": {
    "href": "api/Flame.Compiler.Analysis.BasicBlockPredecessors.html",
    "title": "Struct BasicBlockPredecessors | Flame",
    "keywords": "Struct BasicBlockPredecessors A data structure that can be queried to get the predecessors of a block, that is, the set of all blocks that have branches to the block. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public struct BasicBlockPredecessors Methods | Improve this Doc View Source GetPredecessorsOf(BasicBlockTag) Gets the set of all predecessors of a basic block with a particular tag. Declaration public IEnumerable<BasicBlockTag> GetPredecessorsOf(BasicBlockTag block) Parameters Type Name Description BasicBlockTag block The tag of the basic block to examine. Returns Type Description System.Collections.Generic.IEnumerable < BasicBlockTag > A set of predecessors. | Improve this Doc View Source IsPredecessorOf(BasicBlockTag, BasicBlockTag) Tests if one block is a predecessor of another. Declaration public bool IsPredecessorOf(BasicBlockTag potentialPredecessor, BasicBlockTag block) Parameters Type Name Description BasicBlockTag potentialPredecessor The tag of a block that might be a predecessor of block , that is, the block to examine for predecessorness here. BasicBlockTag block The tag of a basic block in the flow graph. Returns Type Description System.Boolean true if potentialPredecessor is a predecessor of block ; otherwise; false ."
  },
  "api/Flame.Collections.MappedComparer-2.html": {
    "href": "api/Flame.Collections.MappedComparer-2.html",
    "title": "Class MappedComparer<T1, T2> | Flame",
    "keywords": "Class MappedComparer<T1, T2> An equality comparer that applies a mapping to elements before comparing them. Inheritance System.Object MappedComparer<T1, T2> Implements System.Collections.Generic.IEqualityComparer <T1> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class MappedComparer<T1, T2> : IEqualityComparer<T1> Type Parameters Name Description T1 The argument type of the mapping. T2 The return type of the mapping. Constructors | Improve this Doc View Source MappedComparer(Func<T1, T2>) Creates an equality comparer that first applies a mapping and then compares the results using the default comparer. Declaration public MappedComparer(Func<T1, T2> transform) Parameters Type Name Description System.Func <T1, T2> transform A mapping that takes an element and transforms it before it is compared. | Improve this Doc View Source MappedComparer(Func<T1, T2>, IEqualityComparer<T2>) Creates an equality comparer that first applies a mapping and then compares the results using a custom comparer. Declaration public MappedComparer(Func<T1, T2> transform, IEqualityComparer<T2> resultComparer) Parameters Type Name Description System.Func <T1, T2> transform A mapping that takes an element and transforms it before it is compared. System.Collections.Generic.IEqualityComparer <T2> resultComparer A comparer for the results of transform . Fields | Improve this Doc View Source ResultComparer An equality comparer for values of type T2 . Declaration public readonly IEqualityComparer<T2> ResultComparer Field Value Type Description System.Collections.Generic.IEqualityComparer <T2> | Improve this Doc View Source Transform Takes a value of type T1 and maps it to a value of type T2 . Declaration public readonly Func<T1, T2> Transform Field Value Type Description System.Func <T1, T2> Methods | Improve this Doc View Source Equals(T1, T1) Tests if two values are equal. Declaration public bool Equals(T1 x, T1 y) Parameters Type Name Description T1 x The first value to compare. T1 y The second value to compare. Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode(T1) Computes a hash code for a value. Declaration public int GetHashCode(T1 obj) Parameters Type Name Description T1 obj The value to compute a hash code for. Returns Type Description System.Int32 A hash code. Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Flame.Collections.LruCache-2.html": {
    "href": "api/Flame.Collections.LruCache-2.html",
    "title": "Class LruCache<TKey, TValue> | Flame",
    "keywords": "Class LruCache<TKey, TValue> A cache implementation that uses the least recently used (LRU) policy to evict stale key-value pairs. Inheritance System.Object Cache <TKey, TValue> LruCache<TKey, TValue> Inherited Members Cache<TKey, TValue>.Insert(TKey, TValue) Cache<TKey, TValue>.TryGet(TKey, TValue) Cache<TKey, TValue>.Get(TKey, Func<TKey, TValue>) Cache<TKey, TValue>.ContainsKey(TKey) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class LruCache<TKey, TValue> : Cache<TKey, TValue> Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source LruCache(Int32) Creates an LRU cache with a particular capacity. Declaration public LruCache(int capacity) Parameters Type Name Description System.Int32 capacity The maximal number of key-value pairs in the LRU cache. | Improve this Doc View Source LruCache(Int32, IEqualityComparer<TKey>) Creates an LRU cache with a particular capacity and a key equality comparer. Declaration public LruCache(int capacity, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Int32 capacity The maximal number of key-value pairs in the LRU cache. System.Collections.Generic.IEqualityComparer <TKey> comparer An equality comparer for keys. Properties | Improve this Doc View Source Capacity Gets the LRU cache's capacity. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The maximal number of key-value pairs in the LRU cache. Methods | Improve this Doc View Source Get(TKey, Func<TKey, TValue>) Declaration public override TValue Get(TKey key, Func<TKey, TValue> createValue) Parameters Type Name Description TKey key System.Func <TKey, TValue> createValue Returns Type Description TValue Overrides Flame.Collections.Cache<TKey, TValue>.Get(TKey, System.Func<TKey, TValue>) | Improve this Doc View Source Insert(TKey, TValue) Declaration public override void Insert(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Overrides Flame.Collections.Cache<TKey, TValue>.Insert(TKey, TValue) | Improve this Doc View Source TryGet(TKey, out TValue) Declaration public override bool TryGet(TKey key, out TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description System.Boolean Overrides Flame.Collections.Cache<TKey, TValue>.TryGet(TKey, TValue)"
  },
  "api/Flame.Collections.EnumerableComparer-1.html": {
    "href": "api/Flame.Collections.EnumerableComparer-1.html",
    "title": "Class EnumerableComparer<T> | Flame",
    "keywords": "Class EnumerableComparer<T> An element-wise equality comparer for sequences of values. Inheritance System.Object EnumerableComparer<T> Implements System.Collections.Generic.IEqualityComparer < System.Collections.Generic.IEnumerable <T>> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class EnumerableComparer<T> : IEqualityComparer<IEnumerable<T>> Type Parameters Name Description T The type of the elements in the sequences to compare. Constructors | Improve this Doc View Source EnumerableComparer(IEqualityComparer<T>) Creates an equality comparer for sequences from an equality comparer for elements. Declaration public EnumerableComparer(IEqualityComparer<T> elementComparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> elementComparer Fields | Improve this Doc View Source Default An instance of an enumerable comparer based on the default element comparer. Declaration public static readonly EnumerableComparer<T> Default Field Value Type Description EnumerableComparer <T> Properties | Improve this Doc View Source ElementComparer Gets the equality comparer for sequence elements. Declaration public IEqualityComparer<T> ElementComparer { get; } Property Value Type Description System.Collections.Generic.IEqualityComparer <T> The equality comparer for elements. Methods | Improve this Doc View Source Equals(IEnumerable<T>, IEnumerable<T>) Tests if two sequences of values are equal. Declaration public bool Equals(IEnumerable<T> x, IEnumerable<T> y) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> x The first sequence to test. System.Collections.Generic.IEnumerable <T> y The second sequence to test. Returns Type Description System.Boolean true if the sequences are equal element-wise; otherwise, false . | Improve this Doc View Source GetHashCode(IEnumerable<T>) Hashes a sequence of values. Declaration public int GetHashCode(IEnumerable<T> obj) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> obj The sequence to hash. Returns Type Description System.Int32 A hash code for the sequence. Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Flame.Collections.EmptyArray-1.html": {
    "href": "api/Flame.Collections.EmptyArray-1.html",
    "title": "Class EmptyArray<T> | Flame",
    "keywords": "Class EmptyArray<T> Exposes an empty array. Inheritance System.Object EmptyArray<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public static class EmptyArray<T> Type Parameters Name Description T Fields | Improve this Doc View Source Value Gets an empty array. Declaration public static readonly T[] Value Field Value Type Description T[]"
  },
  "api/Flame.Clr.Emit.CilPeepholeOptimizer.html": {
    "href": "api/Flame.Clr.Emit.CilPeepholeOptimizer.html",
    "title": "Class CilPeepholeOptimizer | Flame",
    "keywords": "Class CilPeepholeOptimizer A peephole optimizer for CIL instructions. Inheritance System.Object PeepholeOptimizer < Mono.Cecil.Cil.Instruction , Mono.Cecil.Cil.ExceptionHandler > CilPeepholeOptimizer Inherited Members PeepholeOptimizer<Instruction, ExceptionHandler>.Rules PeepholeOptimizer<Instruction, ExceptionHandler>.GetBranchTargets(Instruction) PeepholeOptimizer<Instruction, ExceptionHandler>.GetInstructionReferences(ExceptionHandler) PeepholeOptimizer<Instruction, ExceptionHandler>.RewriteBranchTargets(Instruction, IReadOnlyDictionary<Instruction, Instruction>) PeepholeOptimizer<Instruction, ExceptionHandler>.RewriteInstructionReferences(ExceptionHandler, IReadOnlyDictionary<Instruction, Instruction>) PeepholeOptimizer<Instruction, ExceptionHandler>.Optimize(IReadOnlyList<Instruction>) PeepholeOptimizer<Instruction, ExceptionHandler>.Optimize(IReadOnlyList<Instruction>, IReadOnlyList<ExceptionHandler>, IReadOnlyList<ExceptionHandler>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilPeepholeOptimizer : PeepholeOptimizer<Instruction, ExceptionHandler> Fields | Improve this Doc View Source Instance An instance of the CIL peephole optimizer. Declaration public static readonly CilPeepholeOptimizer Instance Field Value Type Description CilPeepholeOptimizer Methods | Improve this Doc View Source GetBranchTargets(Instruction) Declaration protected override IEnumerable<Instruction> GetBranchTargets(Instruction instruction) Parameters Type Name Description Mono.Cecil.Cil.Instruction instruction Returns Type Description System.Collections.Generic.IEnumerable < Mono.Cecil.Cil.Instruction > Overrides Flame.Collections.Target.PeepholeOptimizer<Mono.Cecil.Cil.Instruction, Mono.Cecil.Cil.ExceptionHandler>.GetBranchTargets(Mono.Cecil.Cil.Instruction) | Improve this Doc View Source GetInstructionReferences(ExceptionHandler) Declaration protected override IEnumerable<Instruction> GetInstructionReferences(ExceptionHandler externalRef) Parameters Type Name Description Mono.Cecil.Cil.ExceptionHandler externalRef Returns Type Description System.Collections.Generic.IEnumerable < Mono.Cecil.Cil.Instruction > Overrides Flame.Collections.Target.PeepholeOptimizer<Mono.Cecil.Cil.Instruction, Mono.Cecil.Cil.ExceptionHandler>.GetInstructionReferences(Mono.Cecil.Cil.ExceptionHandler) | Improve this Doc View Source Optimize(MethodBody) Applies peephole optimizations to a CIL method body. Declaration public static void Optimize(MethodBody body) Parameters Type Name Description Mono.Cecil.Cil.MethodBody body The method body to optimize. | Improve this Doc View Source RewriteBranchTargets(Instruction, IReadOnlyDictionary<Instruction, Instruction>) Declaration protected override Instruction RewriteBranchTargets(Instruction instruction, IReadOnlyDictionary<Instruction, Instruction> branchTargetMap) Parameters Type Name Description Mono.Cecil.Cil.Instruction instruction System.Collections.Generic.IReadOnlyDictionary < Mono.Cecil.Cil.Instruction , Mono.Cecil.Cil.Instruction > branchTargetMap Returns Type Description Mono.Cecil.Cil.Instruction Overrides Flame.Collections.Target.PeepholeOptimizer<Mono.Cecil.Cil.Instruction, Mono.Cecil.Cil.ExceptionHandler>.RewriteBranchTargets(Mono.Cecil.Cil.Instruction, System.Collections.Generic.IReadOnlyDictionary<Mono.Cecil.Cil.Instruction, Mono.Cecil.Cil.Instruction>) | Improve this Doc View Source RewriteInstructionReferences(ExceptionHandler, IReadOnlyDictionary<Instruction, Instruction>) Declaration protected override ExceptionHandler RewriteInstructionReferences(ExceptionHandler externalRef, IReadOnlyDictionary<Instruction, Instruction> referenceMap) Parameters Type Name Description Mono.Cecil.Cil.ExceptionHandler externalRef System.Collections.Generic.IReadOnlyDictionary < Mono.Cecil.Cil.Instruction , Mono.Cecil.Cil.Instruction > referenceMap Returns Type Description Mono.Cecil.Cil.ExceptionHandler Overrides Flame.Collections.Target.PeepholeOptimizer<Mono.Cecil.Cil.Instruction, Mono.Cecil.Cil.ExceptionHandler>.RewriteInstructionReferences(Mono.Cecil.Cil.ExceptionHandler, System.Collections.Generic.IReadOnlyDictionary<Mono.Cecil.Cil.Instruction, Mono.Cecil.Cil.Instruction>)"
  },
  "api/Flame.Clr.Emit.CilOpInstruction.html": {
    "href": "api/Flame.Clr.Emit.CilOpInstruction.html",
    "title": "Class CilOpInstruction | Flame",
    "keywords": "Class CilOpInstruction An actual CIL instruction that is emitted as-is. Inheritance System.Object CilCodegenInstruction CilOpInstruction Inherited Members CilCodegenInstruction.Traversal CilCodegenInstruction.Children System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilOpInstruction : CilCodegenInstruction Constructors | Improve this Doc View Source CilOpInstruction(Instruction) Creates a CIL instruction that is emitted as-is. Declaration public CilOpInstruction(Instruction op) Parameters Type Name Description Mono.Cecil.Cil.Instruction op The CIL instruction to emit. | Improve this Doc View Source CilOpInstruction(Instruction, Action<Instruction, IReadOnlyDictionary<BasicBlockTag, Instruction>>) Creates a CIL instruction that is emitted and patched afterward. Declaration public CilOpInstruction(Instruction op, Action<Instruction, IReadOnlyDictionary<BasicBlockTag, Instruction>> patch) Parameters Type Name Description Mono.Cecil.Cil.Instruction op The CIL instruction to emit. System.Action < Mono.Cecil.Cil.Instruction , System.Collections.Generic.IReadOnlyDictionary < BasicBlockTag , Mono.Cecil.Cil.Instruction >> patch An action that patches the instruction. | Improve this Doc View Source CilOpInstruction(OpCode) Creates a CIL instruction that is emitted as-is. Declaration public CilOpInstruction(OpCode op) Parameters Type Name Description Mono.Cecil.Cil.OpCode op The opcode to emit. Properties | Improve this Doc View Source Op Gets the operation encapsulated by this instruction. Declaration public Instruction Op { get; } Property Value Type Description Mono.Cecil.Cil.Instruction A CIL instruction. | Improve this Doc View Source Patch Gets an optional action that patches this instruction based on a branch target to instruction mapping. Declaration public Action<Instruction, IReadOnlyDictionary<BasicBlockTag, Instruction>> Patch { get; } Property Value Type Description System.Action < Mono.Cecil.Cil.Instruction , System.Collections.Generic.IReadOnlyDictionary < BasicBlockTag , Mono.Cecil.Cil.Instruction >> An action or null ."
  },
  "api/Flame.Clr.Emit.CilAddressOfRegisterInstruction.html": {
    "href": "api/Flame.Clr.Emit.CilAddressOfRegisterInstruction.html",
    "title": "Class CilAddressOfRegisterInstruction | Flame",
    "keywords": "Class CilAddressOfRegisterInstruction An instruction that computes the address of a virtual register. Inheritance System.Object CilCodegenInstruction CilAddressOfRegisterInstruction Inherited Members CilCodegenInstruction.Traversal CilCodegenInstruction.Children System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilAddressOfRegisterInstruction : CilCodegenInstruction Constructors | Improve this Doc View Source CilAddressOfRegisterInstruction(ValueTag) Creates an instruction that computes the address of a virtual register. Declaration public CilAddressOfRegisterInstruction(ValueTag value) Parameters Type Name Description ValueTag value The virtual register. Properties | Improve this Doc View Source Value Gets the virtual register manipulated by this instruction. Declaration public ValueTag Value { get; } Property Value Type Description ValueTag A value tag."
  },
  "api/Flame.Clr.CorlibTypeEnvironment.html": {
    "href": "api/Flame.Clr.CorlibTypeEnvironment.html",
    "title": "Class CorlibTypeEnvironment | Flame",
    "keywords": "Class CorlibTypeEnvironment A type environment that extracts relevant BCL types from a single core library based on their names. Inheritance System.Object TypeEnvironment CorlibTypeEnvironment Inherited Members TypeEnvironment.Boolean TypeEnvironment.Int8 TypeEnvironment.UInt8 TypeEnvironment.Int16 TypeEnvironment.UInt16 TypeEnvironment.Int32 TypeEnvironment.UInt32 TypeEnvironment.Int64 TypeEnvironment.UInt64 TypeEnvironment.MakeSignedIntegerType(Int32) TypeEnvironment.MakeUnsignedIntegerType(Int32) TypeEnvironment.MakeArrayType(IType, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class CorlibTypeEnvironment : TypeEnvironment Constructors | Improve this Doc View Source CorlibTypeEnvironment(IAssembly) Creates a type system based on a core library assembly. Declaration public CorlibTypeEnvironment(IAssembly corlib) Parameters Type Name Description IAssembly corlib The core library, which supplies the types in the type system. | Improve this Doc View Source CorlibTypeEnvironment(ReadOnlyTypeResolver) Creates a type system based on a core library type resolver. Declaration public CorlibTypeEnvironment(ReadOnlyTypeResolver corlibTypeResolver) Parameters Type Name Description ReadOnlyTypeResolver corlibTypeResolver A type resolver for the core library, which supplies the types in the type system. Properties | Improve this Doc View Source CapturedException Gets the canonical type of a captured exception in this environment. Declaration public override IType CapturedException { get; } Property Value Type Description IType The captured exception type. Overrides TypeEnvironment.CapturedException | Improve this Doc View Source Char Gets the character type in this type environment. Declaration public override IType Char { get; } Property Value Type Description IType The character type. Overrides TypeEnvironment.Char | Improve this Doc View Source CorlibTypeResolver Gets a type resolver for the core library from which types are resolved. Declaration public ReadOnlyTypeResolver CorlibTypeResolver { get; } Property Value Type Description ReadOnlyTypeResolver The core library type resolver. | Improve this Doc View Source FieldToken Gets the canonical type of a field token in this environment, if there is such a type. Declaration public override IType FieldToken { get; } Property Value Type Description IType The field token type. Overrides TypeEnvironment.FieldToken | Improve this Doc View Source Float32 Gets the 32-bit floating point type in this type environment. Declaration public override IType Float32 { get; } Property Value Type Description IType A 32-bit floating point type. Overrides TypeEnvironment.Float32 | Improve this Doc View Source Float64 Gets the 64-bit floating point type in this type environment. Declaration public override IType Float64 { get; } Property Value Type Description IType A 64-bit floating point type. Overrides TypeEnvironment.Float64 | Improve this Doc View Source MethodToken Gets the canonical type of a method token in this environment, if there is such a type. Declaration public override IType MethodToken { get; } Property Value Type Description IType The method token type. Overrides TypeEnvironment.MethodToken | Improve this Doc View Source NaturalInt Gets the natural signed integer type in this type environment. Declaration public override IType NaturalInt { get; } Property Value Type Description IType The natural signed integer type. Overrides TypeEnvironment.NaturalInt | Improve this Doc View Source NaturalUInt Gets the natural unsigned integer type in this type environment. Declaration public override IType NaturalUInt { get; } Property Value Type Description IType The natural unsigned integer type. Overrides TypeEnvironment.NaturalUInt | Improve this Doc View Source Object Gets the root type for this environment, if there is a root type. Declaration public override IType Object { get; } Property Value Type Description IType The root type. Overrides TypeEnvironment.Object | Improve this Doc View Source String Gets the character string type in this type environment. Declaration public override IType String { get; } Property Value Type Description IType The character string type. Overrides TypeEnvironment.String | Improve this Doc View Source Subtyping Gets the subtyping rules for this type environment. Declaration public override SubtypingRules Subtyping { get; } Property Value Type Description SubtypingRules The subtyping rules. Overrides TypeEnvironment.Subtyping | Improve this Doc View Source TypeToken Gets the canonical type of a type token in this environment, if there is such a type. Declaration public override IType TypeToken { get; } Property Value Type Description IType The type token type. Overrides TypeEnvironment.TypeToken | Improve this Doc View Source Void Gets the Void type in this type environment. Declaration public override IType Void { get; } Property Value Type Description IType The Void type. Overrides TypeEnvironment.Void Methods | Improve this Doc View Source TryMakeArrayType(IType, Int32, out IType) Tries to create an array type with a particular element type and rank. Declaration public override bool TryMakeArrayType(IType elementType, int rank, out IType arrayType) Parameters Type Name Description IType elementType The type of value to store in the array. System.Int32 rank The rank of the array, that is, the number of dimensions in the array. IType arrayType An array with the specified element type and rank. Returns Type Description System.Boolean true if the environment can create such an array type; otherwise, false . Overrides TypeEnvironment.TryMakeArrayType(IType, Int32, out IType) | Improve this Doc View Source TryMakeSignedIntegerType(Int32, out IType) Tries to create a signed integer type with a particular number of bits of storage. Declaration public override bool TryMakeSignedIntegerType(int sizeInBits, out IType integerType) Parameters Type Name Description System.Int32 sizeInBits The size in bits of the integer type to create. IType integerType The integer type. Returns Type Description System.Boolean true if the environment can create such an integer type; otherwise, false . Overrides TypeEnvironment.TryMakeSignedIntegerType(Int32, out IType) | Improve this Doc View Source TryMakeUnsignedIntegerType(Int32, out IType) Tries to create an unsigned integer type with a particular number of bits of storage. Declaration public override bool TryMakeUnsignedIntegerType(int sizeInBits, out IType integerType) Parameters Type Name Description System.Int32 sizeInBits The size in bits of the integer type to create. IType integerType The integer type. Returns Type Description System.Boolean true if the environment can create such an integer type; otherwise, false . Overrides TypeEnvironment.TryMakeUnsignedIntegerType(Int32, out IType)"
  },
  "api/Flame.Clr.ClrFieldDefinition.html": {
    "href": "api/Flame.Clr.ClrFieldDefinition.html",
    "title": "Class ClrFieldDefinition | Flame",
    "keywords": "Class ClrFieldDefinition A CLR field definition. Inheritance System.Object ClrFieldDefinition Implements IField ITypeMember IMember Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrFieldDefinition : IField, ITypeMember, IMember Constructors | Improve this Doc View Source ClrFieldDefinition(FieldDefinition, ClrTypeDefinition) Creates a Flame field definition that wraps around an IL field definition. Declaration public ClrFieldDefinition(FieldDefinition definition, ClrTypeDefinition parentType) Parameters Type Name Description Mono.Cecil.FieldDefinition definition The IL field definition to wrap. ClrTypeDefinition parentType The parent type that defines the field wrapper. Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source Definition Gets the IL field definition wrapped by this Flame field definition. Declaration public FieldDefinition Definition { get; } Property Value Type Description Mono.Cecil.FieldDefinition An IL field definition. | Improve this Doc View Source FieldType Gets the type of value stored in this field. Declaration public IType FieldType { get; } Property Value Type Description IType The type of value stored in this field. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source IsStatic Tells if this field is static. The storage for static fields is shared by the entire application, whereas the storage for instance (i.e., non-static) fields is specific to an instance of a type. Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean true if this field is static; otherwise, false . | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source ParentType Gets this field definition's parent type. Declaration public ClrTypeDefinition ParentType { get; } Property Value Type Description ClrTypeDefinition The parent type of this field definition. Explicit Interface Implementations | Improve this Doc View Source ITypeMember.ParentType Gets the type that defines this member, if any. Declaration IType ITypeMember.ParentType { get; } Returns Type Description IType The parent type. Implements IField ITypeMember IMember"
  },
  "api/Flame.Clr.ClrAssembly.html": {
    "href": "api/Flame.Clr.ClrAssembly.html",
    "title": "Class ClrAssembly | Flame",
    "keywords": "Class ClrAssembly A Flame assembly that wraps a Cecil assembly definition. Inheritance System.Object ClrAssembly Implements IAssembly IMember Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrAssembly : IAssembly, IMember Constructors | Improve this Doc View Source ClrAssembly(AssemblyDefinition, ReferenceResolver) Creates a Flame assembly that wraps a Cecil assembly definition. Declaration public ClrAssembly(AssemblyDefinition definition, ReferenceResolver resolver) Parameters Type Name Description Mono.Cecil.AssemblyDefinition definition The assembly definition to wrap. ReferenceResolver resolver The reference resolver to use. | Improve this Doc View Source ClrAssembly(AssemblyDefinition, AssemblyResolver, TypeEnvironment) Creates a Flame assembly that wraps a Cecil assembly definition. Declaration public ClrAssembly(AssemblyDefinition definition, AssemblyResolver resolver, TypeEnvironment typeEnvironment) Parameters Type Name Description Mono.Cecil.AssemblyDefinition definition The assembly definition to wrap. AssemblyResolver resolver The assembly resolver to use. TypeEnvironment typeEnvironment The type environment to use. Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source Definition Gets the Cecil assembly definition wrapped by this assembly. Declaration public AssemblyDefinition Definition { get; } Property Value Type Description Mono.Cecil.AssemblyDefinition A Cecil assembly definition. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source Resolver Gets the reference resolver used by this assembly. Declaration public ReferenceResolver Resolver { get; } Property Value Type Description ReferenceResolver The reference resolver. | Improve this Doc View Source SyncRoot Gets the object that is used for synchronizing access to the IL assembly wrapped by this Flame assembly. Declaration public object SyncRoot { get; } Property Value Type Description System.Object A synchronization object. | Improve this Doc View Source Types Gets a list of all top-level types defined in this assembly. Declaration public IReadOnlyList<IType> Types { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined in this assembly. Methods | Improve this Doc View Source CreateSynchronizedInitializer(Action) Creates a deferred initializer object from an initializer function that is run in a single-threaded fashion with respect to other functions operating on this assembly. Declaration public DeferredInitializer CreateSynchronizedInitializer(Action func) Parameters Type Name Description System.Action func The initialization function to run synchronously. Returns Type Description DeferredInitializer A deferred initializer object. | Improve this Doc View Source CreateSynchronizedLazy<T>(Func<T>) Creates a lazily initialized object from an initializer function that is run in a single-threaded fashion with respect to other functions operating on this assembly. Declaration public Lazy<T> CreateSynchronizedLazy<T>(Func<T> func) Parameters Type Name Description System.Func <T> func The initialization function to run synchronously. Returns Type Description System.Lazy <T> A lazily initialized object. Type Parameters Name Description T The type of value to create. | Improve this Doc View Source Resolve(AssemblyNameReference) Resolves an assembly name reference as an assembly. Declaration public IAssembly Resolve(AssemblyNameReference assemblyRef) Parameters Type Name Description Mono.Cecil.AssemblyNameReference assemblyRef An assembly name reference to resolve. Returns Type Description IAssembly The assembly referenced by assemblyRef . | Improve this Doc View Source Resolve(FieldReference) Resolves a field reference declared in this assembly. Declaration public IField Resolve(FieldReference fieldRef) Parameters Type Name Description Mono.Cecil.FieldReference fieldRef The field reference to resolve. Returns Type Description IField A field referred to by the reference. | Improve this Doc View Source Resolve(MethodReference) Resolves a method reference declared in this assembly. Declaration public IMethod Resolve(MethodReference methodRef) Parameters Type Name Description Mono.Cecil.MethodReference methodRef The method reference to resolve. Returns Type Description IMethod A method referred to by the reference. | Improve this Doc View Source Resolve(PropertyReference) Resolves a property reference declared in this assembly. Declaration public IProperty Resolve(PropertyReference propertyRef) Parameters Type Name Description Mono.Cecil.PropertyReference propertyRef The property reference to resolve. Returns Type Description IProperty A property referred to by the reference. | Improve this Doc View Source Resolve(TypeReference) Resolves a type reference declared in this assembly. Declaration public IType Resolve(TypeReference typeRef) Parameters Type Name Description Mono.Cecil.TypeReference typeRef The type reference to resolve. Returns Type Description IType A type referred to by the reference. | Improve this Doc View Source RunSynchronized(Action) Runs a function in a single-threaded fashion with respect to other functions operating on this assembly. Declaration public void RunSynchronized(Action func) Parameters Type Name Description System.Action func The function to run. | Improve this Doc View Source RunSynchronized<T>(Func<T>) Runs a function in a single-threaded fashion with respect to other functions operating on this assembly. Declaration public T RunSynchronized<T>(Func<T> func) Parameters Type Name Description System.Func <T> func The function to run. Returns Type Description T The function's return value. Type Parameters Name Description T The type of value produced by the function. | Improve this Doc View Source Wrap(AssemblyDefinition) Wraps a CIL assembly definition in a Flame assembly, setting up an assembly resolver and type system. Declaration public static ClrAssembly Wrap(AssemblyDefinition definition) Parameters Type Name Description Mono.Cecil.AssemblyDefinition definition The assembly definition to wrap. Returns Type Description ClrAssembly A Flame assembly. Implements IAssembly IMember"
  },
  "api/Flame.Clr.Analysis.ClrMethodBodyAnalyzer.html": {
    "href": "api/Flame.Clr.Analysis.ClrMethodBodyAnalyzer.html",
    "title": "Class ClrMethodBodyAnalyzer | Flame",
    "keywords": "Class ClrMethodBodyAnalyzer A data structure that analyzes CIL instructions and translates them to Flame IR. Inheritance System.Object ClrMethodBodyAnalyzer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Analysis Assembly : Flame.Clr.dll Syntax public sealed class ClrMethodBodyAnalyzer Properties | Improve this Doc View Source Assembly Gets a reference to the assembly that defines the method body. Declaration public ClrAssembly Assembly { get; } Property Value Type Description ClrAssembly An assembly reference. | Improve this Doc View Source Parameters Gets the parameter list of the method body. Declaration public IReadOnlyList<Parameter> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > The parameter list. | Improve this Doc View Source ReturnParameter Gets the 'return' parameter of the method body. Declaration public Parameter ReturnParameter { get; } Property Value Type Description Parameter The 'return' parameter. | Improve this Doc View Source ThisParameter Gets the 'this' parameter of the method body. Declaration public Parameter ThisParameter { get; } Property Value Type Description Parameter The 'this' parameter. Methods | Improve this Doc View Source Analyze(MethodBody, ClrMethodDefinition) Analyzes a particular method body. Declaration public static MethodBody Analyze(MethodBody cilMethodBody, ClrMethodDefinition method) Parameters Type Name Description Mono.Cecil.Cil.MethodBody cilMethodBody The CIL method body to analyze. ClrMethodDefinition method The method that defines the method body. Returns Type Description MethodBody A Flame IR method body. | Improve this Doc View Source Analyze(MethodBody, Parameter, Parameter, IReadOnlyList<Parameter>, ClrAssembly) Analyzes a particular method body. Declaration public static MethodBody Analyze(MethodBody cilMethodBody, Parameter returnParameter, Parameter thisParameter, IReadOnlyList<Parameter> parameters, ClrAssembly assembly) Parameters Type Name Description Mono.Cecil.Cil.MethodBody cilMethodBody The CIL method body to analyze. Parameter returnParameter The 'return' parameter of the method body. Parameter thisParameter The 'this' parameter of the method body. System.Collections.Generic.IReadOnlyList < Parameter > parameters The parameter list of the method body. ClrAssembly assembly A reference to the assembly that defines the method body. Returns Type Description MethodBody A Flame IR method body."
  },
  "api/Flame.Clr.Analysis.CilPrototypeExceptionSpecs.html": {
    "href": "api/Flame.Clr.Analysis.CilPrototypeExceptionSpecs.html",
    "title": "Class CilPrototypeExceptionSpecs | Flame",
    "keywords": "Class CilPrototypeExceptionSpecs Exception specifications for prototypes that rely on CIL's semantics. Inheritance System.Object CilPrototypeExceptionSpecs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Analysis Assembly : Flame.Clr.dll Syntax public static class CilPrototypeExceptionSpecs Methods | Improve this Doc View Source Create(ReadOnlyTypeResolver) Creates CIL prototype exception specification rules. Declaration public static RuleBasedPrototypeExceptionSpecs Create(ReadOnlyTypeResolver corlibTypeResolver) Parameters Type Name Description ReadOnlyTypeResolver corlibTypeResolver A type resolver for the core library (corlib.dll) that defines well-known exception types. Returns Type Description RuleBasedPrototypeExceptionSpecs Prototype exception specification rules."
  },
  "api/Flame.AttributeMap.html": {
    "href": "api/Flame.AttributeMap.html",
    "title": "Struct AttributeMap | Flame",
    "keywords": "Struct AttributeMap Defines a container that facilitates quick type-based attribute lookups. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame Assembly : Flame.dll Syntax public struct AttributeMap Constructors | Improve this Doc View Source AttributeMap(AttributeMapBuilder) Creates this attribute map as a read-only view of the given attribute map builder. Declaration public AttributeMap(AttributeMapBuilder Builder) Parameters Type Name Description AttributeMapBuilder Builder | Improve this Doc View Source AttributeMap(IAttribute[]) Creates a new attribute map from the given sequence of attributes. Declaration public AttributeMap(params IAttribute[] attributes) Parameters Type Name Description IAttribute [] attributes | Improve this Doc View Source AttributeMap(IEnumerable<IAttribute>) Creates a new attribute map from the given sequence of attributes. Declaration public AttributeMap(IEnumerable<IAttribute> attributes) Parameters Type Name Description System.Collections.Generic.IEnumerable < IAttribute > attributes Fields | Improve this Doc View Source Empty An empty attribute map. Declaration public static readonly AttributeMap Empty Field Value Type Description AttributeMap Methods | Improve this Doc View Source Contains(IType) Checks if this attribute map contains at least one attribute with the given type. Declaration public bool Contains(IType Type) Parameters Type Name Description IType Type Returns Type Description System.Boolean | Improve this Doc View Source Get(IType) Gets an attribute with the given type. If no such attribute exists, then null is returned. Declaration public IAttribute Get(IType Type) Parameters Type Name Description IType Type Returns Type Description IAttribute | Improve this Doc View Source GetAll() Gets all attributes in this attribute map. Declaration public IEnumerable<IAttribute> GetAll() Returns Type Description System.Collections.Generic.IEnumerable < IAttribute > | Improve this Doc View Source GetAll(IType) Gets all attributes of a particular type in this attribute map. Declaration public IEnumerable<IAttribute> GetAll(IType Type) Parameters Type Name Description IType Type Returns Type Description System.Collections.Generic.IEnumerable < IAttribute >"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "A brief introduction to Flame | Flame",
    "keywords": "A brief introduction to Flame This article is designed to be a quick introduction to the concepts that matter most to Flame. Some previous experience with the .NET ecosystem and optimizing compilers might be useful. The two most important categories of data structures in Flame are its type system and its intermediate representation (IR). The former roughly corresponds to the type system of the .NET universe modulo some tweaks. The latter is in static single assignment (SSA) form , which is the state of the art in optimizing compilers. Flame's type system Flame's type system is essentially a stripped-down version of the type system of the .NET universe. All types must implement the IType interface . Key points include: Flame has first-class support for object-oriented programming constructs. Types can define fields, methods and properties. Types can define other types. Types and methods can have generic parameters. Types, fields, methods and properties can be instantiate either directly if they define generic parameters and indirectly if an enclosing type defines generic parameters. There are no built-in types in Flame. If you want to refer to, e.g., a 32-bit signed integer, then you should load System.Int32 from a core library. This is easy in practice: the TypeEnvironment class offers convenient access to primitives types such as integers, floating-point numbers, Booleans, characters and strings. Removing built-in types was a deliberate decision based on experience with a previous iteration of Flame that did have built-in types for integers—library types like System.Int32 implement various bits of functionality that cannot easily be modeled in built-in types. When Flame had built-in types, accessing that functionality was tremendously difficult and complicated the way the type system works. Flame uses a single pointer type ( PointerType ) to unify many different kinds of pointers from the .NET world. Regular pointers are represented as transient pointers ( PointerKind.Transient ). References ( ref / out / byref ) are represented as reference pointers ( PointerKind.Reference ). Instances of reference types (i.e., classes) and boxed values are represented as box pointers ( PointerKind.Box ). This is a notable departure from the .NET type system, where instances of reference types are implicit pointers rather than explicit pointers. The rationale for this decision is that explicit pointers are easier to reason about in optimizations and analyses than implicit pointers—explicit pointers reduce the number of special cases there. Flame IR Flame represents method bodies as control-flow graphs (CFGs) of instructions in SSA form. This representation makes it easier for analyses and transformations to reason about the computations performed by a method. Flame IR's control-flow graphs are immutable data structures that have mutable wrappers for easy manipulation, so most concepts in Flame IR have both an immutable and mutable API. These APIs are usually very similar, with the former being geared towards analysis and the latter intended mainly for IR construction and transformation. These are the main data structures in Flame IR: A control-flow graph is a sets of basic blocks. Exactly one basic block in every control-flow graph is marked as the entry point block , which means that control is transferred to that block when the method is invoked for which the control-flow graph is its implementation. Immutable API: FlowGraph . Mutable API: FlowGraphBuilder . Conceptually, a basic block is a straight-line sequence of instructions that ends in a control-flow instruction. In Flame IR, a basic block consists of four main components: A unique tag that identifies the basic block. A sequence of block parameters , which allow for arbitrary values to be passed from one block to another. This is primarily a means for overcoming the limitations imposed by SSA form in a disciplined manner. Flame's block parameters roughly correspond to the phi functions found in compiler literature. A sequence of named instructions : instructions that are each identified by a unique tag. Block flow: the block's outgoing control flow. Immutable API: BasicBlock . Mutable API: BasicBlockBuilder . An instruction is an expression that accepts zero or more values and produces exactly one value. Every instruction consists of two components: a prototype and an argument list. An instruction prototype describes the instruction's semantics. For example, instructions that produce constants have prototype ConstantPrototype whereas instructions that call a method have prototype CallPrototype . Prototypes are never specific to the control-flow graph in which they occur. An argument list is simply a list of values defined in the enclosing control-flow graph. For this reason, argument lists are always specific to the control-flow graph in which they occur. Instructions are named if they are defined directly by a basic block. Instructions are anonymous if they are defined by block flow, which in turn appears in a basic block. Named instructions can be used as values by other instructions. Anonymous instructions cannot; their values are consumed immediately by the block flow that defines them. Examples of anonymous instructions include the condition of switch flow, the result returned by return flow and the \"dangerous\" instruction wrapped by try flow. Immutable API: Instruction . Mutable API: InstructionBuilder . Block flow represents the control flow that terminates a basic block. Flame defines five types of control flow: Jump ( JumpFlow ): an unconditional branch to some other block in the control-flow graph. Corresponds to a goto statement in C#. Return ( ReturnFlow ): returns exactly one value to the caller. A value of type void can be returned to indicate that no actual value should be returned. Switch ( SwitchFlow ): branches to one of many blocks by comparing a condition with a number of constants. Corresponds to a switch statement in C#, but is also used to represent if statements. Try ( TryFlow ): executes an instruction and checks if that instruction throws an exception. If it does, an exception-path branch is taken. Otherwise, a success-path branch is taken. Unreachable ( UnreachableFlow ): indicates that the end of a particular basic block is unreachable. Example: a factorial function To illustrate what Flame IR looks like in practice, we'll consider the recursive factorial function below. public static int FactorialRecursive(int value, int accumulator) { if (value > 1) { return FactorialRecursive(value - 1, value * accumulator); } else { return accumulator; } } After compiling this using csc , we get the following IL: .method public static hidebysig default int32 FactorialRecursive (int32 'value', int32 accumulator) cil managed { // Method begins at RVA 0x2076 // Code size 18 (0x12) .maxstack 8 IL_0000: ldarg.0 IL_0001: ldc.i4.1 IL_0002: ble.s IL_0010 IL_0004: ldarg.0 IL_0005: ldc.i4.1 IL_0006: sub IL_0007: ldarg.0 IL_0008: ldarg.1 IL_0009: mul IL_000a: call int32 class Program::FactorialRecursive(int32, int32) IL_000f: ret IL_0010: ldarg.1 IL_0011: ret } We now feed the csc -compiled exe to ilopt with the --print-ir option. ilopt reports the following optimized IR. If you look carefully, you'll see that Flame eliminated the recursive call to FactorialRecursive , replacing it with a branch to the entry point block. { #entry_point( @entry-point.thunk, #(#param(System::Int32, @value.thunk), #param(System::Int32, @accumulator.thunk)), { }, #goto(@entry-point(@value.thunk, @accumulator.thunk))); #block( @entry-point, #(#param(System::Int32, value), #param(System::Int32, accumulator)), { IL_0000_val_1 = const(1, System::Int32)(); IL_0000_val_2 = intrinsic(@arith.gt, System::Boolean, #(System::Int32, System::Int32))(value, IL_0000_val_1); }, #switch( copy(System::Boolean)(IL_0000_val_2), // <-- value to switch on IL_0009(), // <-- 'default' case { #case(#(@false), IL_001D()); // <-- 'case false' })); #block( IL_0009, #(), { @IL_0000_val_1.rff.IL_0009 = const(1, System::Int32)(); IL_0009_val_2 = intrinsic(@arith.sub, System::Int32, #(System::Int32, System::Int32))(value, @IL_0000_val_1.rff.IL_0009); IL_0009_val_5 = intrinsic(@arith.mul, System::Int32, #(System::Int32, System::Int32))(value, accumulator); }, #goto(@entry-point(IL_0009_val_2, IL_0009_val_5))); #block( IL_001D, #(), { }, #return(copy(System::Int32)(accumulator))); }; ilopt selects the following CIL for the snippet of Flame IR above. .method public static hidebysig default int32 FactorialRecursive (int32 'value', int32 accumulator) cil managed { // Method begins at RVA 0x2078 // Code size 24 (0x18) .maxstack 3 IL_0000: ldarg.0 IL_0001: ldarg.1 IL_0002: starg 1 IL_0006: dup IL_0007: starg 0 IL_000b: ldc.i4.1 IL_000c: ble.s IL_0016 IL_000e: ldarg.0 IL_000f: ldc.i4.1 IL_0010: sub IL_0011: ldarg.0 IL_0012: ldarg.1 IL_0013: mul IL_0014: br.s IL_0002 IL_0016: ldarg.1 IL_0017: ret }"
  },
  "articles/brainfuck.html": {
    "href": "articles/brainfuck.html",
    "title": "Building a Brainfuck compiler with Flame | Flame",
    "keywords": "Building a Brainfuck compiler with Flame Introduction This tutorial aims to be a gentle introduction to using Flame . Flame is a set of reusable libraries that can be leveraged to build a compiler. It's especially good at generating code for managed languages like C#, but it's also perfectly capable of compiling, say, Brainfuck. Which is exactly what we're going to do in this tutorial: we're going to build an AOT compiler for Brainfuck, and we'll produce executables that can be run by implementations of the .NET common language runtime (CLR), e.g., Mono or the .NET framework . I'm assuming that you're familiar with C# development and a C# IDE of your choice. You should also know how to use command-line programs, because that's what we'll be building in this tutorial. If you don't know what Brainfuck is, then I recommend that you take a look at its Wikipedia page . The important bit is that it's an extremely minimal programming language, so it'll be super easy to implement. This tutorial will contain a fair amount of code but will focus mostly on a few key aspects of the Brainfuck compiler—the bits that'll hopefully help you grok Flame. If you want the full source code, then you'll find that in the Flame GitHub repo . If you have any questions or comments, feel free to open an issue—or maybe even a pull request!—on GitHub . Your feedback and/or contributions are most welcome. Anyway, let's get started. Getting started TODO: actual tutorial."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API documentation | Flame",
    "keywords": "API documentation Welcome to Flame's API docs! Select a namespace or type on the left to get a detailed description of its API. If you're new to Flame and/or just browsing the docs, then the Flame and Flame.Compiler namespaces are probably a good place to start: they introduce most of Flame's core concepts, ranging from its type system to its SSA IR."
  },
  "index.html": {
    "href": "index.html",
    "title": "Flame | Flame",
    "keywords": "Flame Flame is a collection of C# libraries for building tools that read, analyze, optimize and write managed languages. Things you can build with Flame include optimizing compilers, IL optimizers, static analyzers and more. Key features include: An intermediate representation (IR) in static single assignment (SSA) form. This type of IR is favored by state-of-the-art optimizing compilers such as LLVM and GCC. Flame IR is designed from the ground up with the express intent of making it as suitable as possible for a wide range of optimizations and analyses. A wealth of optimization passes that operate on Flame IR. These passes include constant propagation, jump threading, global value numbering, LINQ optimization, tail call optimization and many others . A variety of IR analyses. These analyses extract information not explicitly encoded in Flame IR. For example, there are analyses that compute dominator trees, value numbering, block predecessor information, value nullability and more . A pluggable architecture. Flame conveniently includes many built-in transforms and analyses, but sometimes these generic algorithms don't quite cover your use case exactly. In that case, you can easily implement your own transform or analysis. A CIL front-end and back-end. Flame can translate CIL to Flame IR and vice-versa, allowing you to easily read and/or write CIL while operating at the optimization and analysis–focused abstraction layer afforded by Flame IR. For an introduction to Flame's main concepts see A brief introduction to Flame . Subprojects At its core, Flame is a set of libraries designed to support tools that read, analyze, optimize and write managed languages. Additionally, Flame includes a number of projects that use Flame in a fairly straightforward way. ilopt ilopt is an ahead-of-time optimizer for CIL assemblies, that is, ilopt is a fairly simple command-line tool that reads CIL assemblies, optimizes them and writes the optimized version back to disk. ilopt currently understands most if not all of the CIL opcodes generated by \"safe\" C#. Other opcodes may not be supported yet. For an overview of single-file C# programs that ilopt can definitely optimize, take a look at the ilopt test programs . Build instructions Flame is a C# project that targets .NET 4.5 implementations, like Mono and the .NET framework. .NET Core is not supported yet because Flame relies on NuGet packages that don't yet support .NET Core. Additionally, Flame uses EC# macros to convert Flame IR rewrite rule DSL to C# code. Linux, Mac OS X Building Flame is easy if you're on Linux or Mac OS X. Just spell $ make nuget $ make That's it. The above will grab NuGet dependencies, compile EC# macros down to regular C# and build the project. To run the unit tests, type $ make test Windows Building Flame is somewhat more challenging on Windows. If at all possible, use a GNU Make implementation to run the Makefile, same as for Linux and Mac OS X. Otherwise, you will need to do the following: Restore NuGet packages ( nuget restore ). Build the macros. ( msbuild /p:Configuration=Release FlameMacros/FlameMacros.csproj ). Compile EC# macros down to regular C# ( make dsl in the Makefile, otherwise FlameMacros/bin/Release/LeMP.exe --macros FlameMacros/bin/Release/FlameMacros.dll --outext=.out.cs file.ecs for all .ecs files). Build Flame itself ( msbuild /p:Configuration=Release Flame.sln ). Run the unit tests by spelling UnitTests\\bin\\Release\\UnitTests.exe all Windows workflow enhancements welcome!"
  },
  "api/Flame.ContractHelpers.html": {
    "href": "api/Flame.ContractHelpers.html",
    "title": "Class ContractHelpers | Flame",
    "keywords": "Class ContractHelpers A collection of functions that help enforce contracts. Inheritance System.Object ContractHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public static class ContractHelpers Methods | Improve this Doc View Source Assert(Boolean) Asserts that a condition must always hold. Declaration public static void Assert(bool condition) Parameters Type Name Description System.Boolean condition A condition that must be true. | Improve this Doc View Source Assert(Boolean, String) Asserts that a condition must always hold. Declaration public static void Assert(bool condition, string message) Parameters Type Name Description System.Boolean condition A condition that must be true. System.String message The error message to print if the condition is false. | Improve this Doc View Source CheckPositive(Int32, String) Checks that an integer value is positive, i.e., it is greater than or equal to zero. Declaration public static void CheckPositive(int value, string valueName) Parameters Type Name Description System.Int32 value The value to check. System.String valueName The name of the value to check."
  },
  "api/Flame.Constants.html": {
    "href": "api/Flame.Constants.html",
    "title": "Namespace Flame.Constants | Flame",
    "keywords": "Namespace Flame.Constants Classes BooleanConstant Helpers for Boolean constants. DefaultConstant A default-value constant, which represents the default value of some type, typically characterized by the all-zeroes bit pattern. FieldTokenConstant A field token constant: a constant that wraps a runtime handle to a field. Float32Constant A 32-bit floating point constant. Float64Constant A 64-bit floating point constant. IntegerConstant Describes an integer value that adheres to an integer spec. IntegerSpec Describes the size and signedness of an integer. Signed integers are assumed to use a two's complement scheme. MethodTokenConstant A method token constant: a constant that wraps a runtime handle to a method. NullConstant A null pointer constant. StringConstant A character string constant. TypeTokenConstant A type token constant: a constant that wraps a runtime handle to a type. Structs SignedDivisionMagic A collection of magic constants that can be used to perform signed integer division by constant. UnsignedDivisionMagic A collection of magic constants that can be used to perform unsigned integer division by constant."
  },
  "api/Flame.Constants.UnsignedDivisionMagic.html": {
    "href": "api/Flame.Constants.UnsignedDivisionMagic.html",
    "title": "Struct UnsignedDivisionMagic | Flame",
    "keywords": "Struct UnsignedDivisionMagic A collection of magic constants that can be used to perform unsigned integer division by constant. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Constants Assembly : Flame.dll Syntax public struct UnsignedDivisionMagic Constructors | Improve this Doc View Source UnsignedDivisionMagic(IntegerConstant, Int32, Boolean) Collects unsigned division magic constants. Declaration public UnsignedDivisionMagic(IntegerConstant multiplier, int shiftAmount, bool useAdd) Parameters Type Name Description IntegerConstant multiplier A constant factor to multiply by. System.Int32 shiftAmount An amount of bits to shift. System.Boolean useAdd A Boolean flag that tells if an addition should be used. Properties | Improve this Doc View Source Multiplier Gets the constant factor to multiply by. Declaration public IntegerConstant Multiplier { get; } Property Value Type Description IntegerConstant The constant factor to multiply by. | Improve this Doc View Source ShiftAmount Gets the number of bits to shift. Declaration public int ShiftAmount { get; } Property Value Type Description System.Int32 The number of bits to shift. | Improve this Doc View Source UseAdd Gets a Boolean flag that tells if an add-operation should be used. Declaration public bool UseAdd { get; } Property Value Type Description System.Boolean true if an addition should be performed; otherwise, false ."
  },
  "api/Flame.Constants.TypeTokenConstant.html": {
    "href": "api/Flame.Constants.TypeTokenConstant.html",
    "title": "Class TypeTokenConstant | Flame",
    "keywords": "Class TypeTokenConstant A type token constant: a constant that wraps a runtime handle to a type. Inheritance System.Object Constant TypeTokenConstant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class TypeTokenConstant : Constant, IEquatable<Constant> Constructors | Improve this Doc View Source TypeTokenConstant(IType) Creates a type token constant from a type. Declaration public TypeTokenConstant(IType type) Parameters Type Name Description IType type The type to create a token to. Properties | Improve this Doc View Source Type Gets the type encapsulated by this type token constant. Declaration public IType Type { get; } Property Value Type Description IType A type. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.StringConstant.html": {
    "href": "api/Flame.Constants.StringConstant.html",
    "title": "Class StringConstant | Flame",
    "keywords": "Class StringConstant A character string constant. Inheritance System.Object Constant StringConstant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class StringConstant : Constant, IEquatable<Constant> Constructors | Improve this Doc View Source StringConstant(String) Creates a constant from a value. Declaration public StringConstant(string value) Parameters Type Name Description System.String value The constant value. Properties | Improve this Doc View Source Value Gets the value represented by this constant. Declaration public string Value { get; } Property Value Type Description System.String The constant value. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.SignedDivisionMagic.html": {
    "href": "api/Flame.Constants.SignedDivisionMagic.html",
    "title": "Struct SignedDivisionMagic | Flame",
    "keywords": "Struct SignedDivisionMagic A collection of magic constants that can be used to perform signed integer division by constant. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Constants Assembly : Flame.dll Syntax public struct SignedDivisionMagic Constructors | Improve this Doc View Source SignedDivisionMagic(IntegerConstant, Int32) Collects signed division magic constants. Declaration public SignedDivisionMagic(IntegerConstant multiplier, int shiftAmount) Parameters Type Name Description IntegerConstant multiplier A constant factor to multiply by. System.Int32 shiftAmount An amount of bits to shift. Properties | Improve this Doc View Source Multiplier Gets the constant factor to multiply by. Declaration public IntegerConstant Multiplier { get; } Property Value Type Description IntegerConstant The constant factor to multiply by. | Improve this Doc View Source ShiftAmount Gets the number of bits to shift. Declaration public int ShiftAmount { get; } Property Value Type Description System.Int32 The number of bits to shift."
  },
  "api/Flame.Constants.NullConstant.html": {
    "href": "api/Flame.Constants.NullConstant.html",
    "title": "Class NullConstant | Flame",
    "keywords": "Class NullConstant A null pointer constant. Inheritance System.Object Constant NullConstant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class NullConstant : Constant, IEquatable<Constant> Fields | Improve this Doc View Source Instance An instance of a null constant. Declaration public static readonly NullConstant Instance Field Value Type Description NullConstant A null constant. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.MethodTokenConstant.html": {
    "href": "api/Flame.Constants.MethodTokenConstant.html",
    "title": "Class MethodTokenConstant | Flame",
    "keywords": "Class MethodTokenConstant A method token constant: a constant that wraps a runtime handle to a method. Inheritance System.Object Constant MethodTokenConstant Implements System.IEquatable < Constant > Inherited Members Constant.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class MethodTokenConstant : Constant, IEquatable<Constant> Constructors | Improve this Doc View Source MethodTokenConstant(IMethod) Creates a method token constant from a Method. Declaration public MethodTokenConstant(IMethod method) Parameters Type Name Description IMethod method The method to create a token to. Properties | Improve this Doc View Source Method Gets the method encapsulated by this method token constant. Declaration public IMethod Method { get; } Property Value Type Description IMethod A method. Methods | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.IntegerSpec.html": {
    "href": "api/Flame.Constants.IntegerSpec.html",
    "title": "Class IntegerSpec | Flame",
    "keywords": "Class IntegerSpec Describes the size and signedness of an integer. Signed integers are assumed to use a two's complement scheme. Inheritance System.Object IntegerSpec Implements System.IEquatable < IntegerSpec > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class IntegerSpec : IEquatable<IntegerSpec> Constructors | Improve this Doc View Source IntegerSpec(Int32, Boolean) Creates an integer size from the given number of bits, and signedness. Declaration public IntegerSpec(int size, bool isSigned) Parameters Type Name Description System.Int32 size System.Boolean isSigned Properties | Improve this Doc View Source DataSize Gets the number of bits this integer represents, minus the sign bit, if there is a sign bit. Declaration public int DataSize { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Int16 Gets the integer spec for 16-bit signed integers. Declaration public static IntegerSpec Int16 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source Int32 Gets the integer spec for 32-bit signed integers. Declaration public static IntegerSpec Int32 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source Int64 Gets the integer spec for 64-bit signed integers. Declaration public static IntegerSpec Int64 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source Int8 Gets the integer spec for 8-bit signed integers. Declaration public static IntegerSpec Int8 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source IsSigned Gets a boolean value that tells if conforming integers have a sign bit or not. Declaration public bool IsSigned { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxValue Gets the biggest integer for this spec. Declaration public BigInteger MaxValue { get; } Property Value Type Description System.Numerics.BigInteger | Improve this Doc View Source MinValue Gets the smallest integer for this spec. Declaration public BigInteger MinValue { get; } Property Value Type Description System.Numerics.BigInteger | Improve this Doc View Source Modulus Gets the modulus for this integer spec: two to the power of the number of data bits. Declaration public BigInteger Modulus { get; } Property Value Type Description System.Numerics.BigInteger | Improve this Doc View Source SignedVariant Gets the signed variant of this integer spec, that is, a signed integer spec of the same size as this integer spec. Declaration public IntegerSpec SignedVariant { get; } Property Value Type Description IntegerSpec A signed integer spec of the same size as this integer spec. | Improve this Doc View Source Size Gets the integer size, in bits. Declaration public int Size { get; } Property Value Type Description System.Int32 | Improve this Doc View Source UInt1 Gets the integer spec for 1-bit unsigned integers. Declaration public static IntegerSpec UInt1 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source UInt16 Gets the integer spec for 16-bit unsigned integers. Declaration public static IntegerSpec UInt16 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source UInt32 Gets the integer spec for 32-bit unsigned integers. Declaration public static IntegerSpec UInt32 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source UInt64 Gets the integer spec for 64-bit unsigned integers. Declaration public static IntegerSpec UInt64 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source UInt8 Gets the integer spec for 8-bit unsigned integers. Declaration public static IntegerSpec UInt8 { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source UnsignedModulus Gets the modulus for this integer spec: two to the power of the number of total bits. Declaration public BigInteger UnsignedModulus { get; } Property Value Type Description System.Numerics.BigInteger | Improve this Doc View Source UnsignedVariant Gets the unsigned variant of this integer spec, that is, an unsigned integer spec of the same size as this integer spec. Declaration public IntegerSpec UnsignedVariant { get; } Property Value Type Description IntegerSpec An unsigned integer spec of the same size as this integer spec. Methods | Improve this Doc View Source Cast(BigInteger, IntegerSpec) Casts the given integer, which currently matches the given spec, to match this spec. Declaration public BigInteger Cast(BigInteger value, IntegerSpec valueSpec) Parameters Type Name Description System.Numerics.BigInteger value IntegerSpec valueSpec Returns Type Description System.Numerics.BigInteger | Improve this Doc View Source Equals(IntegerSpec) Checks if this integer spec equals another integer spec. Declaration public bool Equals(IntegerSpec other) Parameters Type Name Description IntegerSpec other An integer spec. Returns Type Description System.Boolean true if the integer specs are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source IsRepresentible(BigInteger) Checks if the given integer is representible by an integer value that adheres to this spec. Declaration public bool IsRepresentible(BigInteger value) Parameters Type Name Description System.Numerics.BigInteger value Returns Type Description System.Boolean | Improve this Doc View Source Normalize(BigInteger) \"Normalizes\" the given value, by casting it to this integer spec, from this integer spec. The result of this operation is always representible, even if the input value is not. Declaration public BigInteger Normalize(BigInteger value) Parameters Type Name Description System.Numerics.BigInteger value Returns Type Description System.Numerics.BigInteger | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source TryParse(String, out IntegerSpec) Tries to parse an integer spec's string representation. Declaration public static bool TryParse(string str, out IntegerSpec spec) Parameters Type Name Description System.String str A string representation of an integer spec. IntegerSpec spec A parsed integer spec. Returns Type Description System.Boolean true if the string was parsed successfully; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/Flame.Constants.IntegerConstant.html": {
    "href": "api/Flame.Constants.IntegerConstant.html",
    "title": "Class IntegerConstant | Flame",
    "keywords": "Class IntegerConstant Describes an integer value that adheres to an integer spec. Inheritance System.Object Constant IntegerConstant Implements System.IEquatable < Constant > System.IComparable < IntegerConstant > System.IEquatable < IntegerConstant > System.IComparable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Constants Assembly : Flame.dll Syntax public sealed class IntegerConstant : Constant, IEquatable<Constant>, IComparable<IntegerConstant>, IEquatable<IntegerConstant>, IComparable Constructors | Improve this Doc View Source IntegerConstant(Boolean) Creates an integer value that wraps the given boolean. Declaration public IntegerConstant(bool value) Parameters Type Name Description System.Boolean value Remarks The resulting integer value's spec is that of a one-bit unsigned integer. | Improve this Doc View Source IntegerConstant(Byte) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(byte value) Parameters Type Name Description System.Byte value | Improve this Doc View Source IntegerConstant(Char) Creates an integer value that wraps the given cbaracter value. Declaration public IntegerConstant(char value) Parameters Type Name Description System.Char value | Improve this Doc View Source IntegerConstant(Int16) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(short value) Parameters Type Name Description System.Int16 value | Improve this Doc View Source IntegerConstant(Int32) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source IntegerConstant(Int64) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(long value) Parameters Type Name Description System.Int64 value | Improve this Doc View Source IntegerConstant(BigInteger, IntegerSpec) Creates an integer value from the given integer and an integer spec. Declaration public IntegerConstant(BigInteger value, IntegerSpec spec) Parameters Type Name Description System.Numerics.BigInteger value IntegerSpec spec | Improve this Doc View Source IntegerConstant(SByte) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(sbyte value) Parameters Type Name Description System.SByte value Remarks The resulting integer value's spec is that of a sixteen-bit unsigned integer. | Improve this Doc View Source IntegerConstant(UInt16) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(ushort value) Parameters Type Name Description System.UInt16 value | Improve this Doc View Source IntegerConstant(UInt32) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(uint value) Parameters Type Name Description System.UInt32 value | Improve this Doc View Source IntegerConstant(UInt64) Creates an integer value that wraps the given integer. Declaration public IntegerConstant(ulong value) Parameters Type Name Description System.UInt64 value Properties | Improve this Doc View Source AbsoluteValue Gets this integer value's absolute value. Declaration public IntegerConstant AbsoluteValue { get; } Property Value Type Description IntegerConstant This integer value's absolute value. | Improve this Doc View Source IsEven Gets a Boolean that tells if this integer is divisible by two. Declaration public bool IsEven { get; } Property Value Type Description System.Boolean true if this integer value is divisible by two; otherwise, false . | Improve this Doc View Source IsNegative Gets a Boolean that tells if this integer is less than zero. Declaration public bool IsNegative { get; } Property Value Type Description System.Boolean true if this integer value is less than zero; otherwise, false . | Improve this Doc View Source IsNonNegative Gets a Boolean that tells if this integer is greater than or equal to zero. Declaration public bool IsNonNegative { get; } Property Value Type Description System.Boolean true if this integer value is greater than or equal to zero; otherwise, false . | Improve this Doc View Source IsNonPositive Gets a Boolean that tells if this integer is less than or equal to zero. Declaration public bool IsNonPositive { get; } Property Value Type Description System.Boolean true if this integer value is less than or equal to zero; otherwise, false . | Improve this Doc View Source IsOdd Gets a Boolean that tells if this integer is not divisible by two. Declaration public bool IsOdd { get; } Property Value Type Description System.Boolean true if this integer value is not divisible by two; otherwise, false . | Improve this Doc View Source IsPositive Gets a Boolean that tells if this integer is greater than zero. Declaration public bool IsPositive { get; } Property Value Type Description System.Boolean true if this integer value is greater than zero; otherwise, false . | Improve this Doc View Source IsPowerOfTwo Gets a Boolean that tells if this integer is a power of two. Declaration public bool IsPowerOfTwo { get; } Property Value Type Description System.Boolean true if this integer value is a power of two; otherwise, false . | Improve this Doc View Source IsValid Checks if this value is valid, i.e. it conforms to the given spec. Declaration public bool IsValid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsZero Gets a Boolean that tells if this integer is zero. Declaration public bool IsZero { get; } Property Value Type Description System.Boolean true if this integer value is zero; otherwise, false . | Improve this Doc View Source Negated Gets the negated value of this integer. This may or may not be representible by the integer spec this value adheres to. Declaration public IntegerConstant Negated { get; } Property Value Type Description IntegerConstant | Improve this Doc View Source Normalized Gets a normalized value. A normalized value will always conform to the integer spec. Declaration public IntegerConstant Normalized { get; } Property Value Type Description IntegerConstant | Improve this Doc View Source OnesComplement Gets the one's complement of this integer. Declaration public IntegerConstant OnesComplement { get; } Property Value Type Description IntegerConstant | Improve this Doc View Source Spec Gets this integer's spec, which defines its size and signedness. Declaration public IntegerSpec Spec { get; } Property Value Type Description IntegerSpec | Improve this Doc View Source TrailingZeroCount Gets the number of trailing zero bits in this integer value Declaration public int TrailingZeroCount { get; } Property Value Type Description System.Int32 The number of trailing zero bits in this integer value. | Improve this Doc View Source Value Gets this integer's value. Declaration public BigInteger Value { get; } Property Value Type Description System.Numerics.BigInteger Methods | Improve this Doc View Source Add(IntegerConstant) Adds the given integer to this integer. The result retains this integer's spec. Declaration public IntegerConstant Add(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source BitwiseAnd(IntegerConstant) Applies the bitwise 'and' operator to this integer and the given other integer. The result retains this integer's spec. Declaration public IntegerConstant BitwiseAnd(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source BitwiseOr(IntegerConstant) Applies the bitwise 'or' operator to this integer and the given other integer. The result retains this integer's spec. Declaration public IntegerConstant BitwiseOr(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source BitwiseXor(IntegerConstant) Applies the bitwise 'xor' operator to this integer and the given other integer. The result retains this integer's spec. Declaration public IntegerConstant BitwiseXor(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source Cast(IntegerSpec) Casts this integer value to match the given spec. Declaration public IntegerConstant Cast(IntegerSpec newSpec) Parameters Type Name Description IntegerSpec newSpec Returns Type Description IntegerConstant | Improve this Doc View Source CastSignedness(Boolean) Extends or wraps this integer to match the given signedness. Declaration public IntegerConstant CastSignedness(bool isSigned) Parameters Type Name Description System.Boolean isSigned Returns Type Description IntegerConstant | Improve this Doc View Source CastSize(Int32) Extends or wraps this integer to match the given number of bits. Declaration public IntegerConstant CastSize(int size) Parameters Type Name Description System.Int32 size Returns Type Description IntegerConstant | Improve this Doc View Source CompareTo(IntegerConstant) Compares this integer value to the given integer value. Declaration public int CompareTo(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(Object) Compares this integer value to the given object. Declaration public int CompareTo(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 | Improve this Doc View Source ComputeSignedDivisionMagic() Calculate the magic numbers required to implement a signed integer division by a constant as a sequence of multiplies, adds and shifts. Requires that the divisor not be 0, 1 or -1. Declaration public SignedDivisionMagic ComputeSignedDivisionMagic() Returns Type Description SignedDivisionMagic The magic numbers required to implement an unsigned integer division by a constant as a sequence of multiplies, adds and shifts. | Improve this Doc View Source ComputeUnsignedDivisionMagic() Calculate the magic numbers required to implement an unsigned integer division by a constant as a sequence of multiplies, adds and shifts. Requires that the divisor not be 0. Declaration public UnsignedDivisionMagic ComputeUnsignedDivisionMagic() Returns Type Description UnsignedDivisionMagic The magic numbers required to implement an unsigned integer division by a constant as a sequence of multiplies, adds and shifts. | Improve this Doc View Source ComputeUnsignedDivisionMagic(Int32) Calculate the magic numbers required to implement an unsigned integer division by a constant as a sequence of multiplies, adds and shifts. Requires that the divisor not be 0. Declaration public UnsignedDivisionMagic ComputeUnsignedDivisionMagic(int leadingZeros) Parameters Type Name Description System.Int32 leadingZeros The number of upper bits in the divided value that are known to be zero. Returns Type Description UnsignedDivisionMagic The magic numbers required to implement an unsigned integer division by a constant as a sequence of multiplies, adds and shifts. | Improve this Doc View Source Divide(IntegerConstant) Divides this integer by the given integer. The result retains this integer's spec. Declaration public IntegerConstant Divide(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source Equals(Constant) Tests if this constant is equal to another constant. Declaration public override bool Equals(Constant other) Parameters Type Name Description Constant other The other constant. Returns Type Description System.Boolean true if the constants are equal; otherwise, false . Overrides Constant.Equals(Constant) | Improve this Doc View Source Equals(IntegerConstant) Tests if this integer constant equals another integer constant, both in terms of value and spec. Declaration public bool Equals(IntegerConstant other) Parameters Type Name Description IntegerConstant other An integer constant. Returns Type Description System.Boolean true if the integer constants are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides Constant.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Constant.GetHashCode() | Improve this Doc View Source IntegerLog(IntegerConstant) Computes the integer logarithm of this integer value in the specified base. The integer logarithm is equal to the number of times the base can be multiplied by itself without exceeding this integer value. Declaration public IntegerConstant IntegerLog(IntegerConstant baseValue) Parameters Type Name Description IntegerConstant baseValue The base of the logarithm. Returns Type Description IntegerConstant The integer logarithm of this integer value in the specified base. | Improve this Doc View Source IsGreaterThan(IntegerConstant) Tests if this integer value is greater than the given value. Declaration public bool IsGreaterThan(IntegerConstant Other) Parameters Type Name Description IntegerConstant Other The right-hand side of the comparison. Returns Type Description System.Boolean true if this integer is greater than the given integer; otherwise, false . | Improve this Doc View Source IsGreaterThanOrEqual(IntegerConstant) Tests if this integer value is greater than or equal to the given value. Declaration public bool IsGreaterThanOrEqual(IntegerConstant other) Parameters Type Name Description IntegerConstant other The right-hand side of the comparison. Returns Type Description System.Boolean true if this integer is greater than or equal to the given integer; otherwise, false . | Improve this Doc View Source IsLessThan(IntegerConstant) Tests if this integer value is less than the given value. Declaration public bool IsLessThan(IntegerConstant other) Parameters Type Name Description IntegerConstant other The right-hand side of the comparison. Returns Type Description System.Boolean true if this integer is less than the given integer; otherwise, false . | Improve this Doc View Source IsLessThanOrEqual(IntegerConstant) Tests if this integer value is less than or equal to the given value. Declaration public bool IsLessThanOrEqual(IntegerConstant other) Parameters Type Name Description IntegerConstant other The right-hand side of the comparison. Returns Type Description System.Boolean true if this integer is less than or equal to the given integer; otherwise, false . | Improve this Doc View Source Log(Double) Computes the logarithm of this integer value in the specified base. Declaration public double Log(double baseValue) Parameters Type Name Description System.Double baseValue The base of the logarithm. Returns Type Description System.Double The logarithm of this integer value in the specified base. | Improve this Doc View Source Multiply(IntegerConstant) Multiplies the given integer with this integer. The result retains this integer's spec. Declaration public IntegerConstant Multiply(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source Remainder(IntegerConstant) Computes the remainder of the division of this integer by the given integer. The result retains this integer's spec. Declaration public IntegerConstant Remainder(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source ShiftLeft(IntegerConstant) Applies the bitwise left shift operator to this integer and the given other integer. The result retains this integer's spec. Declaration public IntegerConstant ShiftLeft(IntegerConstant shiftAmount) Parameters Type Name Description IntegerConstant shiftAmount Returns Type Description IntegerConstant | Improve this Doc View Source ShiftLeft(Int32) Applies the bitwise left shift operator to this integer and the given other integer. The result retains this integer's spec. Declaration public IntegerConstant ShiftLeft(int shiftAmount) Parameters Type Name Description System.Int32 shiftAmount Returns Type Description IntegerConstant | Improve this Doc View Source ShiftRight(IntegerConstant) Applies the bitwise right shift operator to this integer and the given other integer. The result retains this integer's spec. Declaration public IntegerConstant ShiftRight(IntegerConstant shiftAmount) Parameters Type Name Description IntegerConstant shiftAmount Returns Type Description IntegerConstant | Improve this Doc View Source ShiftRight(Int32) Applies the bitwise right shift operator to this integer and the given other integer. The result retains this integer's spec. Declaration public IntegerConstant ShiftRight(int shiftAmount) Parameters Type Name Description System.Int32 shiftAmount Returns Type Description IntegerConstant | Improve this Doc View Source Subtract(IntegerConstant) Subtracts the given integer from this integer. The result retains this integer's spec. Declaration public IntegerConstant Subtract(IntegerConstant other) Parameters Type Name Description IntegerConstant other Returns Type Description IntegerConstant | Improve this Doc View Source ToBoolean() Converts this integer value to a Boolean. Declaration public bool ToBoolean() Returns Type Description System.Boolean | Improve this Doc View Source ToFloat32() Converts this integer value to a 32-bit floating point number. Declaration public float ToFloat32() Returns Type Description System.Single | Improve this Doc View Source ToFloat64() Converts this integer value to a 64-bit floating point number. Declaration public double ToFloat64() Returns Type Description System.Double | Improve this Doc View Source ToInt16() Converts this integer value to a 16-bit signed integer. Declaration public short ToInt16() Returns Type Description System.Int16 | Improve this Doc View Source ToInt32() Converts this integer value to a 32-bit signed integer. Declaration public int ToInt32() Returns Type Description System.Int32 | Improve this Doc View Source ToInt64() Converts this integer value to a 64-bit signed integer. Declaration public long ToInt64() Returns Type Description System.Int64 | Improve this Doc View Source ToInt8() Converts this integer value to an 8-bit signed integer. Declaration public sbyte ToInt8() Returns Type Description System.SByte | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToUInt16() Converts this integer value to a 16-bit unsigned integer. Declaration public ushort ToUInt16() Returns Type Description System.UInt16 | Improve this Doc View Source ToUInt32() Converts this integer value to a 32-bit unsigned integer. Declaration public uint ToUInt32() Returns Type Description System.UInt32 | Improve this Doc View Source ToUInt64() Converts this integer value to a 64-bit unsigned integer. Declaration public ulong ToUInt64() Returns Type Description System.UInt64 | Improve this Doc View Source ToUInt8() Converts this integer value to an 8-bit unsigned integer. Declaration public byte ToUInt8() Returns Type Description System.Byte Implements System.IEquatable<T> System.IComparable<T> System.IEquatable<T> System.IComparable"
  },
  "api/Flame.Compiler.UniqueTag.html": {
    "href": "api/Flame.Compiler.UniqueTag.html",
    "title": "Class UniqueTag | Flame",
    "keywords": "Class UniqueTag A base class for unique tags: identifiers for values that have a name and use referential equality instead of structural equality. Inheritance System.Object UniqueTag BasicBlockTag ValueTag Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public abstract class UniqueTag Constructors | Improve this Doc View Source UniqueTag() Creates a new unique tag. Declaration public UniqueTag() | Improve this Doc View Source UniqueTag(String) Creates a new unique tag. Declaration public UniqueTag(string name) Parameters Type Name Description System.String name The tag's name. Properties | Improve this Doc View Source Name Gets the (preferred) name for this tag. Declaration public string Name { get; } Property Value Type Description System.String The tag's name. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Flame.Compiler.Transforms.html": {
    "href": "api/Flame.Compiler.Transforms.html",
    "title": "Namespace Flame.Compiler.Transforms | Flame",
    "keywords": "Namespace Flame.Compiler.Transforms Classes AllocaToRegister The \"alloca to register\" transformation, which tries to eliminate alloca instructions whose addresses do not escape. BlockFusion An optimization that fuses basic blocks, eliminating unnecessary jumps. BoxToAlloca A transform that looks for box instructions that are only ever unboxed and replaces them with alloca instructions. The transform is only applied to box instructions for which the unboxed pointers do not escape. ConstantPropagation A transform that evaluates non-effectful instructions at compile-time and propagates their results. Essentially just an implementation of sparse conditional constant propagation. CopyPropagation The copy propagation transform, which replaces references to values that are merely copies of values with the copied values themselves. DeadBlockElimination A transform that removes all blocks not reachable from the entry point block. DeadValueElimination Removes unused, non-effectful instructions and basic block parameters from flow graphs. DuplicateReturns An optimization that replaces direct jumps to blocks that return a copy of a value with the return itself. ForwardRegisters A transform that rewrites control-flow graphs in register forwarding form, that is, it rewrites control-flow graphs such that basic blocks only use values that are defined in that basic block. Block parameters and branch arguments are used to \"import\" and \"export\" values. FuseMemoryAccesses A transform that tries to turn loads from and stores to special addresses like field pointers into fused loads and store instructions. Back-ends are this pass' main target audience; fused loads and stores produce better codegen for back-ends such as the CIL back-end. GlobalValueNumbering An optimization that replaces redundant computations by copies based on the results of value numbering and dominator tree analyses. InstructionSimplification An intraprocedural transform that greedily applies instruction simplifications. InstructionSimplificationAnalysis Looks for transforms that simplify instructions. InstructionSimplificationAnalysis.Results The results produced by the analysis. IntraproceduralOptimization Describes an intraprocedural optimization: an optimization that considers a method implementation only and does not rely on the implementation of other methods. JumpThreading An optimization that tries to eliminate repeated jumps between blocks. JumpToEntryRemoval A transform that removes all direct jumps to the entry point by replacing the current entry point with a 'thunk' basic block that is entered once per function call. MemoryAccessElimination A pass that tries to eliminate loads and stores, replacing them with local value copies instead. ReassociateOperators An optimization that reassociates operators to simplify computations. ScalarReplacement The scalar replacement of aggregates transform, which tries to decompose local variables of aggregate types, replacing them with other local variables that represent their fields. SwitchLowering A switch lowering transform, which rewrites general switch flow as if-else switch flow and jump table switch flow. SwitchSimplification An optimization that transforms switch flows in a way that makes it easier for other optimizations to reason about said switches. TailRecursionElimination A transform that rewrites static calls to the current method just prior to a return as unconditional jumps to the entry point. Transform A transform that can be applied to a flow graph."
  },
  "api/Flame.Compiler.Transforms.Transform.html": {
    "href": "api/Flame.Compiler.Transforms.Transform.html",
    "title": "Class Transform | Flame",
    "keywords": "Class Transform A transform that can be applied to a flow graph. Inheritance System.Object Transform Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public abstract class Transform Remarks Transforms may be specific to transform graphs. The context in which a transform can be legally applied is specified by the entity producing the transform. Methods | Improve this Doc View Source Apply(FlowGraphBuilder) Applies the transform to a mutable flow graph. Declaration public abstract void Apply(FlowGraphBuilder graph) Parameters Type Name Description FlowGraphBuilder graph A flow graph to rewrite."
  },
  "api/Flame.Compiler.Transforms.TailRecursionElimination.html": {
    "href": "api/Flame.Compiler.Transforms.TailRecursionElimination.html",
    "title": "Class TailRecursionElimination | Flame",
    "keywords": "Class TailRecursionElimination A transform that rewrites static calls to the current method just prior to a return as unconditional jumps to the entry point. Inheritance System.Object Optimization IntraproceduralOptimization TailRecursionElimination Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class TailRecursionElimination : IntraproceduralOptimization Constructors | Improve this Doc View Source TailRecursionElimination(IMethod) Creates a tail recursion elimination transform for a particular method. Declaration public TailRecursionElimination(IMethod method) Parameters Type Name Description IMethod method The method to optimize. Properties | Improve this Doc View Source Method Gets the method being optimized. Declaration public IMethod Method { get; } Property Value Type Description IMethod The method being optimized. Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.SwitchSimplification.html": {
    "href": "api/Flame.Compiler.Transforms.SwitchSimplification.html",
    "title": "Class SwitchSimplification | Flame",
    "keywords": "Class SwitchSimplification An optimization that transforms switch flows in a way that makes it easier for other optimizations to reason about said switches. Inheritance System.Object Optimization IntraproceduralOptimization SwitchSimplification Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class SwitchSimplification : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the switch simplification optimization. Declaration public static readonly SwitchSimplification Instance Field Value Type Description SwitchSimplification Methods | Improve this Doc View Source Apply(FlowGraph) Simplifies switches in a particular flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The graph to transform. Returns Type Description FlowGraph A transformed graph. Overrides IntraproceduralOptimization.Apply(FlowGraph) | Improve this Doc View Source TrySimplifySwitchFlow(BasicBlockBuilder) Tries to simplify a basic block's switch flow, provided that the block ends in switch flow. Declaration public static bool TrySimplifySwitchFlow(BasicBlockBuilder block) Parameters Type Name Description BasicBlockBuilder block The basic block to simplify. Returns Type Description System.Boolean true if the block's flow was simplified; otherwise, false ."
  },
  "api/Flame.Compiler.Transforms.SwitchLowering.html": {
    "href": "api/Flame.Compiler.Transforms.SwitchLowering.html",
    "title": "Class SwitchLowering | Flame",
    "keywords": "Class SwitchLowering A switch lowering transform, which rewrites general switch flow as if-else switch flow and jump table switch flow. Inheritance System.Object Optimization IntraproceduralOptimization SwitchLowering Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class SwitchLowering : IntraproceduralOptimization Constructors | Improve this Doc View Source SwitchLowering(TypeEnvironment, Boolean, Boolean) Creates a switch lowering transform. Declaration public SwitchLowering(TypeEnvironment typeEnvironment, bool allowBitTests = true, bool allowJumpTables = true) Parameters Type Name Description TypeEnvironment typeEnvironment The type environment to use. System.Boolean allowBitTests Tells if it is permissible to generate bit tests. System.Boolean allowJumpTables Tells if it is permissible to generate jump tables. Properties | Improve this Doc View Source AllowBitTests Tells if it is permissible to generate bit tests. Declaration public bool AllowBitTests { get; } Property Value Type Description System.Boolean true if bit tests may be generated; otherwise, false . | Improve this Doc View Source AllowJumpTables Tells if it is permissible to generate jump tables. Declaration public bool AllowJumpTables { get; } Property Value Type Description System.Boolean true if jump tables may be generated; otherwise, false . | Improve this Doc View Source TypeEnvironment Gets the type environment used by this switch lowering pass. Declaration public TypeEnvironment TypeEnvironment { get; } Property Value Type Description TypeEnvironment The type environment. Methods | Improve this Doc View Source Apply(FlowGraph) Lowers general switch flow in a particular flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to rewrite. Returns Type Description FlowGraph A rewritten flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.ScalarReplacement.html": {
    "href": "api/Flame.Compiler.Transforms.ScalarReplacement.html",
    "title": "Class ScalarReplacement | Flame",
    "keywords": "Class ScalarReplacement The scalar replacement of aggregates transform, which tries to decompose local variables of aggregate types, replacing them with other local variables that represent their fields. Inheritance System.Object Optimization IntraproceduralOptimization ScalarReplacement Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class ScalarReplacement : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the scalar replacement transform. Declaration public static readonly ScalarReplacement Instance Field Value Type Description ScalarReplacement Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.ReassociateOperators.html": {
    "href": "api/Flame.Compiler.Transforms.ReassociateOperators.html",
    "title": "Class ReassociateOperators | Flame",
    "keywords": "Class ReassociateOperators An optimization that reassociates operators to simplify computations. Inheritance System.Object Optimization IntraproceduralOptimization ReassociateOperators Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class ReassociateOperators : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the operator reassociation pass. Declaration public static readonly ReassociateOperators Instance Field Value Type Description ReassociateOperators Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.MemoryAccessElimination.html": {
    "href": "api/Flame.Compiler.Transforms.MemoryAccessElimination.html",
    "title": "Class MemoryAccessElimination | Flame",
    "keywords": "Class MemoryAccessElimination A pass that tries to eliminate loads and stores, replacing them with local value copies instead. Inheritance System.Object Optimization IntraproceduralOptimization MemoryAccessElimination Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class MemoryAccessElimination : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the memory access elimination pass. Declaration public static readonly MemoryAccessElimination Instance Field Value Type Description MemoryAccessElimination Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.JumpToEntryRemoval.html": {
    "href": "api/Flame.Compiler.Transforms.JumpToEntryRemoval.html",
    "title": "Class JumpToEntryRemoval | Flame",
    "keywords": "Class JumpToEntryRemoval A transform that removes all direct jumps to the entry point by replacing the current entry point with a 'thunk' basic block that is entered once per function call. Inheritance System.Object Optimization IntraproceduralOptimization JumpToEntryRemoval Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class JumpToEntryRemoval : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the jump-to-entry removal transform. Declaration public static readonly JumpToEntryRemoval Instance Field Value Type Description JumpToEntryRemoval Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.JumpThreading.html": {
    "href": "api/Flame.Compiler.Transforms.JumpThreading.html",
    "title": "Class JumpThreading | Flame",
    "keywords": "Class JumpThreading An optimization that tries to eliminate repeated jumps between blocks. Inheritance System.Object Optimization IntraproceduralOptimization JumpThreading Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class JumpThreading : IntraproceduralOptimization Constructors | Improve this Doc View Source JumpThreading(Boolean) Creates an instance of the jump threading transform. Declaration public JumpThreading(bool includeSwitches = true) Parameters Type Name Description System.Boolean includeSwitches Tells if switches are also eligible for jump threading. If set to true , then switches that branch to other switches can be merged and jumps to switches can be replaced with the switch itself. Properties | Improve this Doc View Source IncludeSwitches Tells if switches are also eligible for jump threading. If set to true , then switches that branch to other switches can be merged and jumps to switches can be replaced with the switch itself. Declaration public bool IncludeSwitches { get; } Property Value Type Description System.Boolean true if switches are eligible for jump threading; otherwise, false . Methods | Improve this Doc View Source Apply(FlowGraph) Applies the jump threading optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to rewrite. Returns Type Description FlowGraph An optimized flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.IntraproceduralOptimization.html": {
    "href": "api/Flame.Compiler.Transforms.IntraproceduralOptimization.html",
    "title": "Class IntraproceduralOptimization | Flame",
    "keywords": "Class IntraproceduralOptimization Describes an intraprocedural optimization: an optimization that considers a method implementation only and does not rely on the implementation of other methods. Inheritance System.Object Optimization IntraproceduralOptimization CanonicalizeDelegates ExpandLinq LowerDelegates AllocaToRegister BlockFusion BoxToAlloca ConstantPropagation CopyPropagation DeadBlockElimination DeadValueElimination DuplicateReturns ForwardRegisters FuseMemoryAccesses GlobalValueNumbering InstructionSimplification JumpThreading JumpToEntryRemoval MemoryAccessElimination ReassociateOperators ScalarReplacement SwitchLowering SwitchSimplification TailRecursionElimination Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public abstract class IntraproceduralOptimization : Optimization Properties | Improve this Doc View Source IsCheckpoint Tells if this optimization checkpoints its result. The optimizer takes care to always return the latest checkpointed method body is returned when a method's optimized method body is requested. Declaration public override bool IsCheckpoint { get; } Property Value Type Description System.Boolean Tells if this optimization performs a checkpoint. Overrides Optimization.IsCheckpoint Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public abstract FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. | Improve this Doc View Source ApplyAsync(MethodBody, OptimizationState) Applies the optimization to a method body. Declaration public override Task<MethodBody> ApplyAsync(MethodBody body, OptimizationState state) Parameters Type Name Description MethodBody body A method body holder to optimize. OptimizationState state State associated with optimizations. Returns Type Description System.Threading.Tasks.Task < MethodBody > A task that produces an optimized method body. Overrides Optimization.ApplyAsync(MethodBody, OptimizationState)"
  },
  "api/Flame.Compiler.Transforms.InstructionSimplificationAnalysis.html": {
    "href": "api/Flame.Compiler.Transforms.InstructionSimplificationAnalysis.html",
    "title": "Class InstructionSimplificationAnalysis | Flame",
    "keywords": "Class InstructionSimplificationAnalysis Looks for transforms that simplify instructions. Inheritance System.Object InstructionSimplificationAnalysis Implements IFlowGraphAnalysis < InstructionSimplificationAnalysis.Results > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class InstructionSimplificationAnalysis : IFlowGraphAnalysis<InstructionSimplificationAnalysis.Results> Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public InstructionSimplificationAnalysis.Results Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description InstructionSimplificationAnalysis.Results | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, InstructionSimplificationAnalysis.Results, IReadOnlyList<FlowGraphUpdate>) Declaration public InstructionSimplificationAnalysis.Results AnalyzeWithUpdates(FlowGraph graph, InstructionSimplificationAnalysis.Results previousResults, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph InstructionSimplificationAnalysis.Results previousResults System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description InstructionSimplificationAnalysis.Results Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Transforms.InstructionSimplificationAnalysis.Results.html": {
    "href": "api/Flame.Compiler.Transforms.InstructionSimplificationAnalysis.Results.html",
    "title": "Class InstructionSimplificationAnalysis.Results | Flame",
    "keywords": "Class InstructionSimplificationAnalysis.Results The results produced by the analysis. Inheritance System.Object InstructionSimplificationAnalysis.Results Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class Results Fields | Improve this Doc View Source ApplicableRules The set of all applicable rules detected by the analysis. Declaration public readonly IReadOnlyList<Transform> ApplicableRules Field Value Type Description System.Collections.Generic.IReadOnlyList < Transform >"
  },
  "api/Flame.Compiler.Transforms.InstructionSimplification.html": {
    "href": "api/Flame.Compiler.Transforms.InstructionSimplification.html",
    "title": "Class InstructionSimplification | Flame",
    "keywords": "Class InstructionSimplification An intraprocedural transform that greedily applies instruction simplifications. Inheritance System.Object Optimization IntraproceduralOptimization InstructionSimplification Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class InstructionSimplification : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the instruction simplification transform. Declaration public static readonly InstructionSimplification Instance Field Value Type Description InstructionSimplification Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.GlobalValueNumbering.html": {
    "href": "api/Flame.Compiler.Transforms.GlobalValueNumbering.html",
    "title": "Class GlobalValueNumbering | Flame",
    "keywords": "Class GlobalValueNumbering An optimization that replaces redundant computations by copies based on the results of value numbering and dominator tree analyses. Inheritance System.Object Optimization IntraproceduralOptimization GlobalValueNumbering Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class GlobalValueNumbering : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the global value numbering transform. Declaration public static readonly GlobalValueNumbering Instance Field Value Type Description GlobalValueNumbering Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.FuseMemoryAccesses.html": {
    "href": "api/Flame.Compiler.Transforms.FuseMemoryAccesses.html",
    "title": "Class FuseMemoryAccesses | Flame",
    "keywords": "Class FuseMemoryAccesses A transform that tries to turn loads from and stores to special addresses like field pointers into fused loads and store instructions. Back-ends are this pass' main target audience; fused loads and stores produce better codegen for back-ends such as the CIL back-end. Inheritance System.Object Optimization IntraproceduralOptimization FuseMemoryAccesses Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class FuseMemoryAccesses : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the memory access fusion transform. Declaration public static readonly FuseMemoryAccesses Instance Field Value Type Description FuseMemoryAccesses Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.ForwardRegisters.html": {
    "href": "api/Flame.Compiler.Transforms.ForwardRegisters.html",
    "title": "Class ForwardRegisters | Flame",
    "keywords": "Class ForwardRegisters A transform that rewrites control-flow graphs in register forwarding form, that is, it rewrites control-flow graphs such that basic blocks only use values that are defined in that basic block. Block parameters and branch arguments are used to \"import\" and \"export\" values. Inheritance System.Object Optimization IntraproceduralOptimization ForwardRegisters Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class ForwardRegisters : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the register forwarding form construction transform. Declaration public static readonly ForwardRegisters Instance Field Value Type Description ForwardRegisters Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.DuplicateReturns.html": {
    "href": "api/Flame.Compiler.Transforms.DuplicateReturns.html",
    "title": "Class DuplicateReturns | Flame",
    "keywords": "Class DuplicateReturns An optimization that replaces direct jumps to blocks that return a copy of a value with the return itself. Inheritance System.Object Optimization IntraproceduralOptimization DuplicateReturns Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class DuplicateReturns : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the return duplication transform. Declaration public static readonly DuplicateReturns Instance Field Value Type Description DuplicateReturns Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.DeadValueElimination.html": {
    "href": "api/Flame.Compiler.Transforms.DeadValueElimination.html",
    "title": "Class DeadValueElimination | Flame",
    "keywords": "Class DeadValueElimination Removes unused, non-effectful instructions and basic block parameters from flow graphs. Inheritance System.Object Optimization IntraproceduralOptimization DeadValueElimination Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class DeadValueElimination : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the dead value elimination transform. Declaration public static readonly DeadValueElimination Instance Field Value Type Description DeadValueElimination Methods | Improve this Doc View Source Apply(FlowGraph) Removes unused, non-effectful instructions and basic block parameters from a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.DeadBlockElimination.html": {
    "href": "api/Flame.Compiler.Transforms.DeadBlockElimination.html",
    "title": "Class DeadBlockElimination | Flame",
    "keywords": "Class DeadBlockElimination A transform that removes all blocks not reachable from the entry point block. Inheritance System.Object Optimization IntraproceduralOptimization DeadBlockElimination Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class DeadBlockElimination : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the dead block elimination transform. Declaration public static readonly DeadBlockElimination Instance Field Value Type Description DeadBlockElimination Methods | Improve this Doc View Source Apply(FlowGraph) Removes dead blocks from a particular graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The graph to rewrite. Returns Type Description FlowGraph A rewritten flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.CopyPropagation.html": {
    "href": "api/Flame.Compiler.Transforms.CopyPropagation.html",
    "title": "Class CopyPropagation | Flame",
    "keywords": "Class CopyPropagation The copy propagation transform, which replaces references to values that are merely copies of values with the copied values themselves. Inheritance System.Object Optimization IntraproceduralOptimization CopyPropagation Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class CopyPropagation : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the copy propagation transform. Declaration public static readonly CopyPropagation Instance Field Value Type Description CopyPropagation Methods | Improve this Doc View Source Apply(FlowGraph) Propagates copies in a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The graph to transform. Returns Type Description FlowGraph A transformed graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Instructions.ArrayIntrinsics.html": {
    "href": "api/Flame.Compiler.Instructions.ArrayIntrinsics.html",
    "title": "Class ArrayIntrinsics | Flame",
    "keywords": "Class ArrayIntrinsics Supports creating, recognizing and parsing array-related intrinsics. Inheritance System.Object ArrayIntrinsics Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class ArrayIntrinsics Fields | Improve this Doc View Source Namespace The namespace for array intrinsics. Declaration public static readonly IntrinsicNamespace Namespace Field Value Type Description IntrinsicNamespace Methods | Improve this Doc View Source CreateGetElementPointerPrototype(IType, IType, IReadOnlyList<IType>) Creates a 'get_element_pointer' instruction prototype, which indexes an array and produces a reference to the indexed array element. Declaration public static IntrinsicPrototype CreateGetElementPointerPrototype(IType elementType, IType arrayType, IReadOnlyList<IType> indexTypes) Parameters Type Name Description IType elementType The type of element to create a reference to. IType arrayType The type of array to index. System.Collections.Generic.IReadOnlyList < IType > indexTypes The types of indices to index the array with. Returns Type Description IntrinsicPrototype A 'get_element_pointer' instruction prototype. | Improve this Doc View Source CreateGetLengthPrototype(IType, IType) Creates a 'get_length' instruction prototype, which computes the number of elements in an array. Declaration public static IntrinsicPrototype CreateGetLengthPrototype(IType sizeType, IType arrayType) Parameters Type Name Description IType sizeType The type of integer to store the length of the array in. IType arrayType The type of array to inspect. Returns Type Description IntrinsicPrototype A 'get_length' instruction prototype. | Improve this Doc View Source CreateLoadElementPrototype(IType, IType, IReadOnlyList<IType>) Creates a 'load_element' instruction prototype, which indexes an array and loads the indexed array element. Declaration public static IntrinsicPrototype CreateLoadElementPrototype(IType elementType, IType arrayType, IReadOnlyList<IType> indexTypes) Parameters Type Name Description IType elementType The type of element to load. IType arrayType The type of array to index. System.Collections.Generic.IReadOnlyList < IType > indexTypes The types of indices to index the array with. Returns Type Description IntrinsicPrototype A 'load_element' instruction prototype. | Improve this Doc View Source CreateNewArrayPrototype(IType, IType) Creates a 'new_array' instruction prototype, allocates a new array. Declaration public static IntrinsicPrototype CreateNewArrayPrototype(IType arrayType, IType sizeType) Parameters Type Name Description IType arrayType The type of array to create. IType sizeType The type of integer that describes the length of the array to create. Returns Type Description IntrinsicPrototype A 'new_array' instruction prototype. | Improve this Doc View Source CreatePrototype(String, IType, IReadOnlyList<IType>) Creates an array intrinsic prototype. Declaration public static IntrinsicPrototype CreatePrototype(string operatorName, IType resultType, IReadOnlyList<IType> parameterTypes) Parameters Type Name Description System.String operatorName The name of the operator represented by the array intrinsic. IType resultType The type of value produced by the intrinsic to create. System.Collections.Generic.IReadOnlyList < IType > parameterTypes The types of the values the intrinsic takes as arguments. Returns Type Description IntrinsicPrototype An array intrinsic prototype. | Improve this Doc View Source CreateStoreElementPrototype(IType, IType, IReadOnlyList<IType>) Creates a 'store_element' instruction prototype, which indexes an array and updates the indexed array element. Declaration public static IntrinsicPrototype CreateStoreElementPrototype(IType elementType, IType arrayType, IReadOnlyList<IType> indexTypes) Parameters Type Name Description IType elementType The type of element to store in the array. IType arrayType The type of array to index. System.Collections.Generic.IReadOnlyList < IType > indexTypes The types of indices to index the array with. Returns Type Description IntrinsicPrototype A 'store_element' instruction prototype."
  },
  "api/Flame.Compiler.Instructions.ArrayIntrinsics.Operators.html": {
    "href": "api/Flame.Compiler.Instructions.ArrayIntrinsics.Operators.html",
    "title": "Class ArrayIntrinsics.Operators | Flame",
    "keywords": "Class ArrayIntrinsics.Operators A collection of names for array operations. Inheritance System.Object ArrayIntrinsics.Operators Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class Operators Fields | Improve this Doc View Source All An immutable array containing all standard array intrinsics. Declaration public static readonly ImmutableArray<string> All Field Value Type Description System.Collections.Immutable.ImmutableArray < System.String > | Improve this Doc View Source GetElementPointer The 'get_element_pointer' operator, which indexes an array and produces a reference to the indexed array element. Declaration public const string GetElementPointer = \"get_element_pointer\" Field Value Type Description System.String | Improve this Doc View Source GetLength The 'get_length' operator, which computes the number of elements in an array. Declaration public const string GetLength = \"get_length\" Field Value Type Description System.String | Improve this Doc View Source LoadElement The 'load_element' operator, which indexes an array and loads the indexed array element. Declaration public const string LoadElement = \"load_element\" Field Value Type Description System.String | Improve this Doc View Source NewArray The 'new_array' operator, which allocates a new array of a particular size. Declaration public const string NewArray = \"new_array\" Field Value Type Description System.String | Improve this Doc View Source StoreElement The 'store_element' operator, which indexes an array and updates the indexed array element. Declaration public const string StoreElement = \"store_element\" Field Value Type Description System.String"
  },
  "api/Flame.Compiler.FlowGraphBuilder.html": {
    "href": "api/Flame.Compiler.FlowGraphBuilder.html",
    "title": "Class FlowGraphBuilder | Flame",
    "keywords": "Class FlowGraphBuilder A mutable view of an immutable control-flow graph. Inheritance System.Object FlowGraphBuilder Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class FlowGraphBuilder Constructors | Improve this Doc View Source FlowGraphBuilder() Creates a control-flow graph builder that contains only an empty entry point block. Declaration public FlowGraphBuilder() | Improve this Doc View Source FlowGraphBuilder(FlowGraph) Creates a control-flow graph builder from an immutable control-flow graph. Declaration public FlowGraphBuilder(FlowGraph graph) Parameters Type Name Description FlowGraph graph An immutable control-flow graph. Properties | Improve this Doc View Source AnonymousInstructions Gets a sequence of all anonymous instructions defined by block flow in this control-flow graph. Declaration public IEnumerable<InstructionBuilder> AnonymousInstructions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < InstructionBuilder > All anonymous instructions. | Improve this Doc View Source BasicBlocks Gets a sequence of all basic blocks in this control-flow graph. Declaration public IEnumerable<BasicBlockBuilder> BasicBlocks { get; } Property Value Type Description System.Collections.Generic.IEnumerable < BasicBlockBuilder > All basic blocks. | Improve this Doc View Source BasicBlockTags Gets a sequence of all basic block tags in this control-flow graph. Declaration public IEnumerable<BasicBlockTag> BasicBlockTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < BasicBlockTag > | Improve this Doc View Source EntryPoint Gets the entry point block. Declaration public BasicBlockBuilder EntryPoint { get; } Property Value Type Description BasicBlockBuilder The entry point block. | Improve this Doc View Source EntryPointTag Gets the tag of the entry point block. Declaration public BasicBlockTag EntryPointTag { get; set; } Property Value Type Description BasicBlockTag The tag of the entry point block. | Improve this Doc View Source Instructions Gets a sequence of all instructions defined in this control-flow graph, including both named and anonymous instructions. Declaration public IEnumerable<InstructionBuilder> Instructions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < InstructionBuilder > All instructions in this control-flow graph. | Improve this Doc View Source InstructionTags Gets a sequence of all instruction tags in this control-flow graph. Declaration public IEnumerable<ValueTag> InstructionTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > | Improve this Doc View Source NamedInstructions Gets a sequence of all named instructions in this control-flow graph. Anonymous instructions as defined by block flow are not included. Declaration public IEnumerable<NamedInstructionBuilder> NamedInstructions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < NamedInstructionBuilder > All named instructions. | Improve this Doc View Source ParameterTags Gets a sequence of all parameter tags in this control-flow graph. Declaration public IEnumerable<ValueTag> ParameterTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > | Improve this Doc View Source ValueTags Gets a sequence of all value tags in this control-flow graph. This sequence includes both instruction values and basic block parameter values. Declaration public IEnumerable<ValueTag> ValueTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > Methods | Improve this Doc View Source AddAnalysis<T>(IFlowGraphAnalysis<T>) Registers a flow graph analysis with this graph. Declaration public void AddAnalysis<T>(IFlowGraphAnalysis<T> analysis) Parameters Type Name Description IFlowGraphAnalysis <T> analysis The analysis to register. Type Parameters Name Description T The type of result produced by the analysis. | Improve this Doc View Source AddBasicBlock() Adds an empty basic block to this flow-graph builder. Declaration public BasicBlockBuilder AddBasicBlock() Returns Type Description BasicBlockBuilder An empty basic block builder. | Improve this Doc View Source AddBasicBlock(String) Adds an empty basic block to this flow-graph builder. Declaration public BasicBlockBuilder AddBasicBlock(string name) Parameters Type Name Description System.String name The (preferred) name of the basic block's tag. Returns Type Description BasicBlockBuilder An empty basic block builder. | Improve this Doc View Source ContainsBasicBlock(BasicBlockTag) Checks if this control-flow graph contains a basic block with a particular tag. Declaration public bool ContainsBasicBlock(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The basic block's tag. Returns Type Description System.Boolean true if this control-flow graph contains a basic block with the given tag; otherwise, false . | Improve this Doc View Source ContainsBlockParameter(ValueTag) Checks if this control-flow graph contains a basic block parameter with a particular tag. Declaration public bool ContainsBlockParameter(ValueTag tag) Parameters Type Name Description ValueTag tag The parameter's tag. Returns Type Description System.Boolean true if this control-flow graph contains a basic block parameter with the given tag; otherwise, false . | Improve this Doc View Source ContainsInstruction(ValueTag) Checks if this control-flow graph contains an instruction with a particular tag. Declaration public bool ContainsInstruction(ValueTag tag) Parameters Type Name Description ValueTag tag The instruction's tag. Returns Type Description System.Boolean true if this control-flow graph contains an instruction with the given tag; otherwise, false . | Improve this Doc View Source ContainsValue(ValueTag) Checks if this control-flow graph contains an instruction or basic block parameter with a particular tag. Declaration public bool ContainsValue(ValueTag tag) Parameters Type Name Description ValueTag tag The value's tag. Returns Type Description System.Boolean true if this control-flow graph contains a value with the given tag; otherwise, false . | Improve this Doc View Source GetAnalysisFor<T>() Gets the analysis, registered with this control-flow graph, that produced a particular type of result. Declaration public IFlowGraphAnalysis<T> GetAnalysisFor<T>() Returns Type Description IFlowGraphAnalysis <T> An analysis. Type Parameters Name Description T The type of analysis result that is sought. | Improve this Doc View Source GetAnalysisResult<T>() Gets an analysis result based on its type. Declaration public T GetAnalysisResult<T>() Returns Type Description T An analysis result. Type Parameters Name Description T The type of analysis result to fetch or compute. | Improve this Doc View Source GetBasicBlock(BasicBlockTag) Gets the basic block with a particular tag. Declaration public BasicBlockBuilder GetBasicBlock(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The basic block's tag. Returns Type Description BasicBlockBuilder A basic block. | Improve this Doc View Source GetInstruction(ValueTag) Gets the instruction with a particular tag. Declaration public NamedInstructionBuilder GetInstruction(ValueTag tag) Parameters Type Name Description ValueTag tag The instruction's tag. Returns Type Description NamedInstructionBuilder A named instruction. | Improve this Doc View Source GetValueParent(ValueTag) Gets basic block that defines a value with a particular tag. Declaration public BasicBlockBuilder GetValueParent(ValueTag tag) Parameters Type Name Description ValueTag tag The tag of the value to look for. Returns Type Description BasicBlockBuilder The basic block that defines the value. | Improve this Doc View Source GetValueType(ValueTag) Gets the type of a value in this graph. Declaration public IType GetValueType(ValueTag tag) Parameters Type Name Description ValueTag tag The value's tag. Returns Type Description IType The value's type. | Improve this Doc View Source HasAnalysisFor<T>() Tells if this flow graph has an analysis that produces a particular type of result. Declaration public bool HasAnalysisFor<T>() Returns Type Description System.Boolean true if a registered analysis produces a result of type T ; otherwise, false . Type Parameters Name Description T The type of analysis result that is sought. | Improve this Doc View Source Include(FlowGraph, Func<ReturnFlow, BasicBlockBuilder, BlockFlow>) Includes a control-flow graph in this control-flow graph. Any values and blocks defined by the graph to include are renamed in order to avoid conflicts with tags in this graph. Declaration public BasicBlockTag Include(FlowGraph graph, Func<ReturnFlow, BasicBlockBuilder, BlockFlow> rewriteReturnFlow) Parameters Type Name Description FlowGraph graph The graph to include in this graph. System.Func < ReturnFlow , BasicBlockBuilder , BlockFlow > rewriteReturnFlow Rewrites 'return' flow. Returns Type Description BasicBlockTag The tag of the imported graph's entry point. | Improve this Doc View Source Include(FlowGraph, Func<ReturnFlow, BasicBlockBuilder, BlockFlow>, Branch) Includes a control-flow graph in this control-flow graph. Any values and blocks defined by the graph to include are renamed in order to avoid conflicts with tags in this graph. Instructions that may throw an exception are wrapped in 'try' flow. Declaration public BasicBlockTag Include(FlowGraph graph, Func<ReturnFlow, BasicBlockBuilder, BlockFlow> rewriteReturnFlow, Branch exceptionBranch) Parameters Type Name Description FlowGraph graph The graph to include in this graph. System.Func < ReturnFlow , BasicBlockBuilder , BlockFlow > rewriteReturnFlow Rewrites 'return' flow. Branch exceptionBranch The branch to take when an exception is thrown by an instruction in graph . Instructions are not wrapped in 'try' flow if this parameter is set to null . Returns Type Description BasicBlockTag The tag of the imported graph's entry point. | Improve this Doc View Source RemoveBasicBlock(BasicBlockTag) Removes the basic block with a particular tag from this control-flow graph. Declaration public void RemoveBasicBlock(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The basic block's tag. | Improve this Doc View Source RemoveDefinitions(IEnumerable<ValueTag>) Removes the definitions for a set of values from this flow graph. Declaration public void RemoveDefinitions(IEnumerable<ValueTag> valuesToRemove) Parameters Type Name Description System.Collections.Generic.IEnumerable < ValueTag > valuesToRemove A set of values whose definitions are to be eliminated from the flow graph. These values can refer to instructions and basic block parameters. | Improve this Doc View Source RemoveInstruction(ValueTag) Removes a particular instruction from this control-flow graph. Returns a new control-flow graph that does not contain the instruction. Declaration public void RemoveInstruction(ValueTag instructionTag) Parameters Type Name Description ValueTag instructionTag The tag of the instruction to remove. | Improve this Doc View Source RemoveInstructionDefinitions(IEnumerable<ValueTag>) Removes the definitions for a set of instructions from this flow graph. Declaration public void RemoveInstructionDefinitions(IEnumerable<ValueTag> instructionsToRemove) Parameters Type Name Description System.Collections.Generic.IEnumerable < ValueTag > instructionsToRemove A set of values whose definitions are to be eliminated from the flow graph. These values may only refer to instructions. | Improve this Doc View Source ReplaceUses(IReadOnlyDictionary<ValueTag, ValueTag>) Replaces all uses of values with other values. The values to replace are encoded as keys in a dictionary and the values to replace them with as values in that same dictionary. Declaration public void ReplaceUses(IReadOnlyDictionary<ValueTag, ValueTag> replacementMap) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < ValueTag , ValueTag > replacementMap A mapping of values to replacement values. | Improve this Doc View Source ToImmutable() Turns this control-flow graph builder into an immutable control-flow graph. Declaration public FlowGraph ToImmutable() Returns Type Description FlowGraph An immutable control-flow graph. | Improve this Doc View Source Transform(IntraproceduralOptimization) Applies an intraprocedural optimization to this flow graph. Declaration public void Transform(IntraproceduralOptimization optimization) Parameters Type Name Description IntraproceduralOptimization optimization The transform to apply. | Improve this Doc View Source Transform(IntraproceduralOptimization[]) Applies a sequence of intraprocedural optimizations to this flow graph. Declaration public void Transform(params IntraproceduralOptimization[] optimizations) Parameters Type Name Description IntraproceduralOptimization [] optimizations The transforms to apply. | Improve this Doc View Source Transform(IEnumerable<IntraproceduralOptimization>) Applies a sequence of intraprocedural optimizations to this flow graph. Declaration public void Transform(IEnumerable<IntraproceduralOptimization> optimizations) Parameters Type Name Description System.Collections.Generic.IEnumerable < IntraproceduralOptimization > optimizations The transforms to apply. | Improve this Doc View Source TryGetAnalysisResult<T>(out T) Tries to get an analysis result of a particular type. Declaration public bool TryGetAnalysisResult<T>(out T result) Parameters Type Name Description T result The analysis result, if one can be fetched or computed. Returns Type Description System.Boolean true if there is an analyzer to compute the result; otherwise, false . Type Parameters Name Description T The type of analysis result to fetch or compute. | Improve this Doc View Source TryGetInstruction(ValueTag, out NamedInstructionBuilder) Tries to get an instruction with a particular tag, if it exists in this control-flow graph. Declaration public bool TryGetInstruction(ValueTag tag, out NamedInstructionBuilder result) Parameters Type Name Description ValueTag tag The instruction's tag. NamedInstructionBuilder result The named instruction, if it exists in this control-flow graph. Returns Type Description System.Boolean true if the instruction exists; otherwise, false . Extension Methods ExceptionDelayabilityExtensions.CanDelayExceptions(FlowGraphBuilder, ValueTag)"
  },
  "api/Flame.Compiler.FlowGraph.html": {
    "href": "api/Flame.Compiler.FlowGraph.html",
    "title": "Class FlowGraph | Flame",
    "keywords": "Class FlowGraph An immutable control-flow graph that consists of basic blocks. Inheritance System.Object FlowGraph Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class FlowGraph Constructors | Improve this Doc View Source FlowGraph() Creates a control-flow graph that contains only an empty entry point block. Declaration public FlowGraph() Properties | Improve this Doc View Source BasicBlocks Gets a sequence of all basic blocks in this control-flow graph. Declaration public IEnumerable<BasicBlock> BasicBlocks { get; } Property Value Type Description System.Collections.Generic.IEnumerable < BasicBlock > All basic blocks. | Improve this Doc View Source BasicBlockTags Gets a sequence of all basic block tags in this control-flow graph. Declaration public IEnumerable<BasicBlockTag> BasicBlockTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < BasicBlockTag > | Improve this Doc View Source EntryPoint Gets the entry point block. Declaration public BasicBlock EntryPoint { get; } Property Value Type Description BasicBlock The entry point block. | Improve this Doc View Source EntryPointTag Gets the tag of the entry point block. Declaration public BasicBlockTag EntryPointTag { get; } Property Value Type Description BasicBlockTag The tag of the entry point block. | Improve this Doc View Source InstructionTags Gets a sequence of all instruction tags in this control-flow graph. Declaration public IEnumerable<ValueTag> InstructionTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > | Improve this Doc View Source NamedInstructions Gets a sequence of all named instructions in this control-flow graph. Anonymous instructions as defined by block flow are not included. Declaration public IEnumerable<NamedInstruction> NamedInstructions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < NamedInstruction > All named instructions | Improve this Doc View Source ParameterTags Gets a sequence of all parameter tags in this control-flow graph. Declaration public IEnumerable<ValueTag> ParameterTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > | Improve this Doc View Source ValueTags Gets a sequence of all value tags in this control-flow graph. This sequence includes both instruction values and basic block parameter values. Declaration public IEnumerable<ValueTag> ValueTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > Methods | Improve this Doc View Source AddBasicBlock() Creates a new basic block that includes all basic blocks in this graph plus an empty basic block. The latter basic block is returned. Declaration public BasicBlock AddBasicBlock() Returns Type Description BasicBlock An empty basic block in a new control-flow graph. | Improve this Doc View Source AddBasicBlock(String) Creates a new basic block that includes all basic blocks in this graph plus an empty basic block. The latter basic block is returned. Declaration public BasicBlock AddBasicBlock(string name) Parameters Type Name Description System.String name The (preferred) name of the basic block's tag. Returns Type Description BasicBlock An empty basic block in a new control-flow graph. | Improve this Doc View Source AssertContainsBasicBlock(BasicBlockTag) Asserts that this control-flow graph must contain a basic block with a particular tag. Declaration public void AssertContainsBasicBlock(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The tag of the basic block that must be in the graph. | Improve this Doc View Source AssertContainsBasicBlock(BasicBlockTag, String) Asserts that this control-flow graph must contain a basic block with a particular tag. Declaration public void AssertContainsBasicBlock(BasicBlockTag tag, string message) Parameters Type Name Description BasicBlockTag tag The tag of the basic block that must be in the graph. System.String message The error message for when no basic block in this control-flow graph has the tag. | Improve this Doc View Source AssertContainsInstruction(ValueTag) Asserts that this control-flow graph must contain an instruction with a particular tag. Declaration public void AssertContainsInstruction(ValueTag tag) Parameters Type Name Description ValueTag tag The tag of the instruction that must be in the graph. | Improve this Doc View Source AssertContainsInstruction(ValueTag, String) Asserts that this control-flow graph must contain an instruction with a particular tag. Declaration public void AssertContainsInstruction(ValueTag tag, string message) Parameters Type Name Description ValueTag tag The tag of the instruction that must be in the graph. System.String message The error message for when no instruction in this control-flow graph has the tag. | Improve this Doc View Source AssertContainsValue(ValueTag) Asserts that this control-flow graph must contain an instruction or basic block parameter with a particular tag. Declaration public void AssertContainsValue(ValueTag tag) Parameters Type Name Description ValueTag tag The tag of the value that must be in the graph. | Improve this Doc View Source AssertContainsValue(ValueTag, String) Asserts that this control-flow graph must contain an instruction or basic block parameter with a particular tag. Declaration public void AssertContainsValue(ValueTag tag, string message) Parameters Type Name Description ValueTag tag The tag of the value that must be in the graph. System.String message The error message for when no value in this control-flow graph has the tag. | Improve this Doc View Source AssertNotContainsValue(ValueTag) Asserts that this control-flow graph must not contain an instruction or basic block parameter with a particular tag. Declaration public void AssertNotContainsValue(ValueTag tag) Parameters Type Name Description ValueTag tag The tag of the value that must not be in the graph. | Improve this Doc View Source AssertNotContainsValue(ValueTag, String) Asserts that this control-flow graph must not contain an instruction or basic block parameter with a particular tag. Declaration public void AssertNotContainsValue(ValueTag tag, string message) Parameters Type Name Description ValueTag tag The tag of the value that must not be in the graph. System.String message The error message for when a value in this control-flow graph has the tag. | Improve this Doc View Source ContainsBasicBlock(BasicBlockTag) Checks if this control-flow graph contains a basic block with a particular tag. Declaration public bool ContainsBasicBlock(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The basic block's tag. Returns Type Description System.Boolean true if this control-flow graph contains a basic block with the given tag; otherwise, false . | Improve this Doc View Source ContainsBlockParameter(ValueTag) Checks if this control-flow graph contains a basic block parameter with a particular tag. Declaration public bool ContainsBlockParameter(ValueTag tag) Parameters Type Name Description ValueTag tag The parameter's tag. Returns Type Description System.Boolean true if this control-flow graph contains a basic block parameter with the given tag; otherwise, false . | Improve this Doc View Source ContainsInstruction(ValueTag) Checks if this control-flow graph contains an instruction with a particular tag. Declaration public bool ContainsInstruction(ValueTag tag) Parameters Type Name Description ValueTag tag The instruction's tag. Returns Type Description System.Boolean true if this control-flow graph contains an instruction with the given tag; otherwise, false . | Improve this Doc View Source ContainsValue(ValueTag) Checks if this control-flow graph contains an instruction or basic block parameter with a particular tag. Declaration public bool ContainsValue(ValueTag tag) Parameters Type Name Description ValueTag tag The value's tag. Returns Type Description System.Boolean true if this control-flow graph contains a value with the given tag; otherwise, false . | Improve this Doc View Source GetAnalysisFor<T>() Gets the analysis, registered with this control-flow graph, that produced a particular type of result. Declaration public IFlowGraphAnalysis<T> GetAnalysisFor<T>() Returns Type Description IFlowGraphAnalysis <T> An analysis. Type Parameters Name Description T The type of analysis result that is sought. | Improve this Doc View Source GetAnalysisResult<T>() Gets an analysis result based on its type. Declaration public T GetAnalysisResult<T>() Returns Type Description T An analysis result. Type Parameters Name Description T The type of analysis result to fetch or compute. | Improve this Doc View Source GetBasicBlock(BasicBlockTag) Gets the basic block with a particular tag. Declaration public BasicBlock GetBasicBlock(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The basic block's tag. Returns Type Description BasicBlock A basic block. | Improve this Doc View Source GetInstruction(ValueTag) Gets the named instruction with a particular tag. Declaration public NamedInstruction GetInstruction(ValueTag tag) Parameters Type Name Description ValueTag tag The instruction's tag. Returns Type Description NamedInstruction A named instruction. | Improve this Doc View Source GetValueParent(ValueTag) Gets basic block that defines a value with a particular tag. Declaration public BasicBlock GetValueParent(ValueTag tag) Parameters Type Name Description ValueTag tag The tag of the value to look for. Returns Type Description BasicBlock The basic block that defines the value. | Improve this Doc View Source GetValueType(ValueTag) Gets the type of a value in this graph. Declaration public IType GetValueType(ValueTag tag) Parameters Type Name Description ValueTag tag The value's tag. Returns Type Description IType The value's type. | Improve this Doc View Source HasAnalysisFor<T>() Tells if this flow graph has an analysis that produces a particular type of result. Declaration public bool HasAnalysisFor<T>() Returns Type Description System.Boolean true if a registered analysis produces a result of type T ; otherwise, false . Type Parameters Name Description T The type of analysis result that is sought. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this flow graph. Declaration public FlowGraph Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description FlowGraph A transformed flow graph. | Improve this Doc View Source RemoveBasicBlock(BasicBlockTag) Removes the basic block with a particular tag from this control-flow graph. Declaration public FlowGraph RemoveBasicBlock(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The basic block's tag. Returns Type Description FlowGraph A new control-flow graph that does not contain the basic block. | Improve this Doc View Source RemoveDefinitions(IEnumerable<ValueTag>) Removes the definitions for a set of values from this flow graph. Declaration public FlowGraph RemoveDefinitions(IEnumerable<ValueTag> valuesToRemove) Parameters Type Name Description System.Collections.Generic.IEnumerable < ValueTag > valuesToRemove A set of values whose definitions are to be eliminated from the flow graph. These values can refer to instructions and basic block parameters. Returns Type Description FlowGraph A flow graph that does not define any of the values. | Improve this Doc View Source RemoveInstruction(ValueTag) Removes a particular instruction from this control-flow graph. Returns a new control-flow graph that does not contain the instruction. Declaration public FlowGraph RemoveInstruction(ValueTag instructionTag) Parameters Type Name Description ValueTag instructionTag The tag of the instruction to remove. Returns Type Description FlowGraph A control-flow graph that no longer contains the instruction. | Improve this Doc View Source RemoveInstructionDefinitions(IEnumerable<ValueTag>) Removes the definitions for a set of instructions from this flow graph. Declaration public FlowGraph RemoveInstructionDefinitions(IEnumerable<ValueTag> instructionsToRemove) Parameters Type Name Description System.Collections.Generic.IEnumerable < ValueTag > instructionsToRemove A set of values whose definitions are to be eliminated from the flow graph. These values may only refer to instructions. Returns Type Description FlowGraph A flow graph that does not define any of the values. | Improve this Doc View Source ReplaceUses(IReadOnlyDictionary<ValueTag, ValueTag>) Replaces all uses of values with other values. The values to replace are encoded as keys in a dictionary and the values to replace them with as values in that same dictionary. Declaration public FlowGraph ReplaceUses(IReadOnlyDictionary<ValueTag, ValueTag> replacementMap) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < ValueTag , ValueTag > replacementMap A mapping of values to replacement values. Returns Type Description FlowGraph A new flow graph. | Improve this Doc View Source ToBuilder() Creates a mutable control-flow graph builder from this immutable control-flow graph. Declaration public FlowGraphBuilder ToBuilder() Returns Type Description FlowGraphBuilder A mutable control-flow graph builder. | Improve this Doc View Source Transform(IntraproceduralOptimization) Applies an intraprocedural optimization to this flow graph. Declaration public FlowGraph Transform(IntraproceduralOptimization optimization) Parameters Type Name Description IntraproceduralOptimization optimization The transform to apply. Returns Type Description FlowGraph A transformed flow graph. | Improve this Doc View Source Transform(IntraproceduralOptimization[]) Applies a sequence of intraprocedural optimizations to this flow graph. Declaration public FlowGraph Transform(params IntraproceduralOptimization[] optimizations) Parameters Type Name Description IntraproceduralOptimization [] optimizations The transforms to apply. Returns Type Description FlowGraph A transformed flow graph. | Improve this Doc View Source Transform(IEnumerable<IntraproceduralOptimization>) Applies a sequence of intraprocedural optimizations to this flow graph. Declaration public FlowGraph Transform(IEnumerable<IntraproceduralOptimization> optimizations) Parameters Type Name Description System.Collections.Generic.IEnumerable < IntraproceduralOptimization > optimizations The transforms to apply. Returns Type Description FlowGraph A transformed flow graph. | Improve this Doc View Source TryGetAnalysisResult<T>(out T) Tries to get an analysis result of a particular type. Declaration public bool TryGetAnalysisResult<T>(out T result) Parameters Type Name Description T result The analysis result, if one can be fetched or computed. Returns Type Description System.Boolean true if there is an analyzer to compute the result; otherwise, false . Type Parameters Name Description T The type of analysis result to fetch or compute. | Improve this Doc View Source TryGetInstruction(ValueTag, out NamedInstruction) Tries to get an instruction with a particular tag, if it exists in this control-flow graph. Declaration public bool TryGetInstruction(ValueTag tag, out NamedInstruction result) Parameters Type Name Description ValueTag tag The instruction's tag. NamedInstruction result The named instruction, if it exists in this control-flow graph. Returns Type Description System.Boolean true if the instruction exists; otherwise, false . | Improve this Doc View Source WithAnalysis<T>(IFlowGraphAnalysis<T>) Registers an analysis on this flow graph. Declaration public FlowGraph WithAnalysis<T>(IFlowGraphAnalysis<T> analysis) Parameters Type Name Description IFlowGraphAnalysis <T> analysis The analysis to register. Returns Type Description FlowGraph A new flow graph that includes the analysis. Type Parameters Name Description T The type of result produced by the analysis. | Improve this Doc View Source WithEntryPoint(BasicBlockTag) Creates a new control-flow graph that takes the basic block with a particular tag as entry point. Declaration public FlowGraph WithEntryPoint(BasicBlockTag tag) Parameters Type Name Description BasicBlockTag tag The tag of the new entry point block. Returns Type Description FlowGraph A control-flow graph. Extension Methods ExceptionDelayabilityExtensions.CanDelayExceptions(FlowGraph, ValueTag)"
  },
  "api/Flame.Compiler.Flow.html": {
    "href": "api/Flame.Compiler.Flow.html",
    "title": "Namespace Flame.Compiler.Flow | Flame",
    "keywords": "Namespace Flame.Compiler.Flow Classes FlowInstructionBuilder An instruction reference to an unnamed instruction in block flow. JumpFlow Control flow that unconditionally jumps to a particular branch. ReturnFlow Control flow that returns control to the caller. StructuralSwitchFlowComparer An equality comparer that for structural switch flow equality. SwitchFlow Switch flow, which tries to match a value against a list of constants in cases and takes an appropriate branch based on which case is selected, if any. TryFlow Control flow that executes an instruction and checks if that instruction throws. If it does, an exception-path branch is taken. Otherwise, a success-path branch is taken. UnreachableFlow Control flow that marks the end of a basic block as unreachable. Structs SwitchCase A case in switch flow."
  },
  "api/Flame.Compiler.Flow.UnreachableFlow.html": {
    "href": "api/Flame.Compiler.Flow.UnreachableFlow.html",
    "title": "Class UnreachableFlow | Flame",
    "keywords": "Class UnreachableFlow Control flow that marks the end of a basic block as unreachable. Inheritance System.Object BlockFlow UnreachableFlow Inherited Members BlockFlow.BranchTargets BlockFlow.GetInstructionBuilders(BasicBlockBuilder) BlockFlow.MapValues(Func<ValueTag, ValueTag>) BlockFlow.MapValues(IReadOnlyDictionary<ValueTag, ValueTag>) BlockFlow.MapBlocks(Func<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBlocks(IReadOnlyDictionary<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBranches(Func<Branch, Branch>) BlockFlow.MapArguments(Func<BranchArgument, BranchArgument>) BlockFlow.MapArguments(IReadOnlyDictionary<BranchArgument, BranchArgument>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public sealed class UnreachableFlow : BlockFlow Fields | Improve this Doc View Source Instance Gets an instance of unreachable flow. Declaration public static readonly UnreachableFlow Instance Field Value Type Description UnreachableFlow Unreachable flow. Properties | Improve this Doc View Source Branches Gets a list of branches this flow may take. Declaration public override IReadOnlyList<Branch> Branches { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Branch > A list of potential branches. Overrides BlockFlow.Branches | Improve this Doc View Source Instructions Gets a list of inner instructions for this block flow. Declaration public override IReadOnlyList<Instruction> Instructions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Instruction > The inner instructions. Overrides BlockFlow.Instructions Methods | Improve this Doc View Source GetInstructionBuilder(BasicBlockBuilder, Int32) Gets an instruction builder for the nth anonymous instruction in this block flow. Declaration public override InstructionBuilder GetInstructionBuilder(BasicBlockBuilder block, int instructionIndex) Parameters Type Name Description BasicBlockBuilder block The block that defines this flow. System.Int32 instructionIndex The index of the anonymous instruction to create a builder for. Returns Type Description InstructionBuilder An instruction builder for an anonymous instruction. Overrides BlockFlow.GetInstructionBuilder(BasicBlockBuilder, Int32) | Improve this Doc View Source WithBranches(IReadOnlyList<Branch>) Replaces this flow's branches with a particular list of branches. Declaration public override BlockFlow WithBranches(IReadOnlyList<Branch> branches) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Branch > branches The new branches. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithBranches(IReadOnlyList<Branch>) | Improve this Doc View Source WithInstructions(IReadOnlyList<Instruction>) Replaces this flow's inner instructions. Declaration public override BlockFlow WithInstructions(IReadOnlyList<Instruction> instructions) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Instruction > instructions The new instructions. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithInstructions(IReadOnlyList<Instruction>)"
  },
  "api/Flame.Compiler.Flow.TryFlow.html": {
    "href": "api/Flame.Compiler.Flow.TryFlow.html",
    "title": "Class TryFlow | Flame",
    "keywords": "Class TryFlow Control flow that executes an instruction and checks if that instruction throws. If it does, an exception-path branch is taken. Otherwise, a success-path branch is taken. Inheritance System.Object BlockFlow TryFlow Inherited Members BlockFlow.BranchTargets BlockFlow.GetInstructionBuilders(BasicBlockBuilder) BlockFlow.MapValues(Func<ValueTag, ValueTag>) BlockFlow.MapValues(IReadOnlyDictionary<ValueTag, ValueTag>) BlockFlow.MapBlocks(Func<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBlocks(IReadOnlyDictionary<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBranches(Func<Branch, Branch>) BlockFlow.MapArguments(Func<BranchArgument, BranchArgument>) BlockFlow.MapArguments(IReadOnlyDictionary<BranchArgument, BranchArgument>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public sealed class TryFlow : BlockFlow Constructors | Improve this Doc View Source TryFlow(Instruction, Branch, Branch) Creates 'try' flow from an instruction, a branch to take if that instruction does not throw and a branch to take if the instruction does throw. Declaration public TryFlow(Instruction instruction, Branch successBranch, Branch exceptionBranch) Parameters Type Name Description Instruction instruction The inner instruction to execute. Branch successBranch The branch to take if the instruction does not throw. Branch exceptionBranch The branch to take if the instruction throws. Properties | Improve this Doc View Source Branches Gets a list of branches this flow may take. Declaration public override IReadOnlyList<Branch> Branches { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Branch > A list of potential branches. Overrides BlockFlow.Branches | Improve this Doc View Source ExceptionBranch Gets the branch this 'try' flow takes if the instruction throws. Declaration public Branch ExceptionBranch { get; } Property Value Type Description Branch The exception branch. | Improve this Doc View Source Instruction Gets the instruction this 'try' flow tries to execute. Declaration public Instruction Instruction { get; } Property Value Type Description Instruction The inner instruction. | Improve this Doc View Source Instructions Gets a list of inner instructions for this block flow. Declaration public override IReadOnlyList<Instruction> Instructions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Instruction > The inner instructions. Overrides BlockFlow.Instructions | Improve this Doc View Source SuccessBranch Gets the branch this 'try' flow takes if the instruction does not throw. Declaration public Branch SuccessBranch { get; } Property Value Type Description Branch The success branch. Methods | Improve this Doc View Source GetInstructionBuilder(BasicBlockBuilder, Int32) Gets an instruction builder for the nth anonymous instruction in this block flow. Declaration public override InstructionBuilder GetInstructionBuilder(BasicBlockBuilder block, int instructionIndex) Parameters Type Name Description BasicBlockBuilder block The block that defines this flow. System.Int32 instructionIndex The index of the anonymous instruction to create a builder for. Returns Type Description InstructionBuilder An instruction builder for an anonymous instruction. Overrides BlockFlow.GetInstructionBuilder(BasicBlockBuilder, Int32) | Improve this Doc View Source WithBranches(IReadOnlyList<Branch>) Replaces this flow's branches with a particular list of branches. Declaration public override BlockFlow WithBranches(IReadOnlyList<Branch> branches) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Branch > branches The new branches. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithBranches(IReadOnlyList<Branch>) | Improve this Doc View Source WithInstructions(IReadOnlyList<Instruction>) Replaces this flow's inner instructions. Declaration public override BlockFlow WithInstructions(IReadOnlyList<Instruction> instructions) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Instruction > instructions The new instructions. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithInstructions(IReadOnlyList<Instruction>)"
  },
  "api/Flame.Compiler.Flow.SwitchFlow.html": {
    "href": "api/Flame.Compiler.Flow.SwitchFlow.html",
    "title": "Class SwitchFlow | Flame",
    "keywords": "Class SwitchFlow Switch flow, which tries to match a value against a list of constants in cases and takes an appropriate branch based on which case is selected, if any. Inheritance System.Object BlockFlow SwitchFlow Inherited Members BlockFlow.BranchTargets BlockFlow.GetInstructionBuilders(BasicBlockBuilder) BlockFlow.MapValues(Func<ValueTag, ValueTag>) BlockFlow.MapValues(IReadOnlyDictionary<ValueTag, ValueTag>) BlockFlow.MapBlocks(Func<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBlocks(IReadOnlyDictionary<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBranches(Func<Branch, Branch>) BlockFlow.MapArguments(Func<BranchArgument, BranchArgument>) BlockFlow.MapArguments(IReadOnlyDictionary<BranchArgument, BranchArgument>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public sealed class SwitchFlow : BlockFlow Constructors | Improve this Doc View Source SwitchFlow(Instruction, IReadOnlyList<SwitchCase>, Branch) Creates switch flow. Declaration public SwitchFlow(Instruction switchValue, IReadOnlyList<SwitchCase> cases, Branch defaultBranch) Parameters Type Name Description Instruction switchValue An instruction that produces the value to switch on. System.Collections.Generic.IReadOnlyList < SwitchCase > cases A list of switch cases. Branch defaultBranch A branch to take if none of the switch cases match the value being switched on. Remarks This constructor will simplify cases by unifying cases that point to the same branch and eliminate cases that are associated with no constants or point to the default branch. Properties | Improve this Doc View Source Branches Gets a list of branches this flow may take. Declaration public override IReadOnlyList<Branch> Branches { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Branch > A list of potential branches. Overrides BlockFlow.Branches | Improve this Doc View Source Cases Gets the list of switch cases in this switch flow. Declaration public IReadOnlyList<SwitchCase> Cases { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < SwitchCase > A list of switch cases. | Improve this Doc View Source DefaultBranch Gets the default branch, which is only taken when no case matches. Declaration public Branch DefaultBranch { get; } Property Value Type Description Branch The default branch. | Improve this Doc View Source Instructions Gets a list of inner instructions for this block flow. Declaration public override IReadOnlyList<Instruction> Instructions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Instruction > The inner instructions. Overrides BlockFlow.Instructions | Improve this Doc View Source IsIfElseFlow Tells if this switch flow represents if-else flow, that is, if it has a single case matching on a single value. Declaration public bool IsIfElseFlow { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIntegerSwitch Tells if this switch flow contains only integer constants. Declaration public bool IsIntegerSwitch { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsJumpTable Tells if the switch flow can be implemented as a jump table, that is, its cases do not have any branches with arguments and all of its case values are integer constants. Declaration public bool IsJumpTable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SwitchValue Gets an instruction that produces the value to switch on. Declaration public Instruction SwitchValue { get; } Property Value Type Description Instruction An instruction that produces the value to switch on. | Improve this Doc View Source ValueToBranchMap Gets a mapping of values to branches for this switch. This mapping does not include the default branch. Declaration public IReadOnlyDictionary<Constant, Branch> ValueToBranchMap { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < Constant , Branch > A mapping of values to branches. Methods | Improve this Doc View Source CreateConstantCheck(Instruction, Constant, Branch, Branch) Creates switch flow that redirects control to one branch if a value equals a particular constant and to another branch otherwise. Declaration public static SwitchFlow CreateConstantCheck(Instruction value, Constant constant, Branch equalBranch, Branch notEqualBranch) Parameters Type Name Description Instruction value The value to compare to a constant. Constant constant The constant to compare the value to. Branch equalBranch The branch to which flow is redirected if value equals constant . Branch notEqualBranch The branch to which flow is redirected if value does not equal constant . Returns Type Description SwitchFlow Switch flow that corresponds to a constant equality check. | Improve this Doc View Source CreateIfElse(Instruction, Branch, Branch) Creates switch flow that corresponds to if-else flow on a Boolean condition. Declaration public static SwitchFlow CreateIfElse(Instruction condition, Branch ifBranch, Branch elseBranch) Parameters Type Name Description Instruction condition An instruction that produces Boolean condition. Branch ifBranch The 'if' branch, which is taken when the value produced by the Boolean condition is not false. Branch elseBranch The 'else' branch, which is taken when the value produced by the Boolean condition is false. Returns Type Description SwitchFlow Switch flow that corresponds to if-else flow. | Improve this Doc View Source CreateNullCheck(Instruction, Branch, Branch) Creates switch flow that redirects control to one branch if a value equals null and to another branch otherwise. Declaration public static SwitchFlow CreateNullCheck(Instruction value, Branch nullBranch, Branch nonNullBranch) Parameters Type Name Description Instruction value A value to compare to null . Branch nullBranch The branch to which flow is redirected if value equals null . Branch nonNullBranch The branch to which flow is redirected if value does not equal null . Returns Type Description SwitchFlow Switch flow that corresponds to a null check. | Improve this Doc View Source GetInstructionBuilder(BasicBlockBuilder, Int32) Gets an instruction builder for the nth anonymous instruction in this block flow. Declaration public override InstructionBuilder GetInstructionBuilder(BasicBlockBuilder block, int instructionIndex) Parameters Type Name Description BasicBlockBuilder block The block that defines this flow. System.Int32 instructionIndex The index of the anonymous instruction to create a builder for. Returns Type Description InstructionBuilder An instruction builder for an anonymous instruction. Overrides BlockFlow.GetInstructionBuilder(BasicBlockBuilder, Int32) | Improve this Doc View Source WithBranches(IReadOnlyList<Branch>) Replaces this flow's branches with a particular list of branches. Declaration public override BlockFlow WithBranches(IReadOnlyList<Branch> branches) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Branch > branches The new branches. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithBranches(IReadOnlyList<Branch>) | Improve this Doc View Source WithInstructions(IReadOnlyList<Instruction>) Replaces this flow's inner instructions. Declaration public override BlockFlow WithInstructions(IReadOnlyList<Instruction> instructions) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Instruction > instructions The new instructions. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithInstructions(IReadOnlyList<Instruction>)"
  },
  "api/Flame.Compiler.Flow.SwitchCase.html": {
    "href": "api/Flame.Compiler.Flow.SwitchCase.html",
    "title": "Struct SwitchCase | Flame",
    "keywords": "Struct SwitchCase A case in switch flow. Implements System.IEquatable < SwitchCase > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public struct SwitchCase : IEquatable<SwitchCase> Constructors | Improve this Doc View Source SwitchCase(Constant, Branch) Creates a switch case from a value and a branch. Declaration public SwitchCase(Constant value, Branch branch) Parameters Type Name Description Constant value The value for the switch case. Branch branch A branch for the switch case. | Improve this Doc View Source SwitchCase(ImmutableHashSet<Constant>, Branch) Creates a switch case from a set of values and a branch. Declaration public SwitchCase(ImmutableHashSet<Constant> values, Branch branch) Parameters Type Name Description System.Collections.Immutable.ImmutableHashSet < Constant > values A set of values for the switch case. Branch branch A branch for the switch case. Properties | Improve this Doc View Source Branch Gets the branch that is taken when any of the values in this switch case match the value being switched on. Declaration public Branch Branch { get; } Property Value Type Description Branch The switch case's branch. | Improve this Doc View Source Values Gets a set of all values for this switch case. If control reaches this switch case and any of these values match the value being switched on, then control is redirected to this switch case's branch target. Declaration public ImmutableHashSet<Constant> Values { get; } Property Value Type Description System.Collections.Immutable.ImmutableHashSet < Constant > The switch case's values. Methods | Improve this Doc View Source Equals(SwitchCase) Tests if this switch case equals another switch case. Declaration public bool Equals(SwitchCase other) Parameters Type Name Description SwitchCase other A switch case to compare with this switch case. Returns Type Description System.Boolean true if the switch cases are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(SwitchCase, SwitchCase) Tests if two switch cases are equal. Declaration public static bool operator ==(SwitchCase left, SwitchCase right) Parameters Type Name Description SwitchCase left The first switch cases to compare. SwitchCase right The second switch cases to compare. Returns Type Description System.Boolean true if the switch cases are equal; otherwise, false . | Improve this Doc View Source Inequality(SwitchCase, SwitchCase) Tests if two switch cases are not equal. Declaration public static bool operator !=(SwitchCase left, SwitchCase right) Parameters Type Name Description SwitchCase left The first switch cases to compare. SwitchCase right The second switch cases to compare. Returns Type Description System.Boolean false if the switch cases are equal; otherwise, true . Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.Flow.StructuralSwitchFlowComparer.html": {
    "href": "api/Flame.Compiler.Flow.StructuralSwitchFlowComparer.html",
    "title": "Class StructuralSwitchFlowComparer | Flame",
    "keywords": "Class StructuralSwitchFlowComparer An equality comparer that for structural switch flow equality. Inheritance System.Object StructuralSwitchFlowComparer Implements System.Collections.Generic.IEqualityComparer < SwitchFlow > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public sealed class StructuralSwitchFlowComparer : IEqualityComparer<SwitchFlow> Methods | Improve this Doc View Source Equals(SwitchFlow, SwitchFlow) Tests if two switch flows are structurally equal. Declaration public bool Equals(SwitchFlow x, SwitchFlow y) Parameters Type Name Description SwitchFlow x A first switch flow. SwitchFlow y A second switch flow. Returns Type Description System.Boolean true if the switch flows are structurally equal; otherwise, false . | Improve this Doc View Source GetHashCode(SwitchFlow) Computes the hash code for a particular switch flow. Declaration public int GetHashCode(SwitchFlow obj) Parameters Type Name Description SwitchFlow obj The switch flow to compute a hash code for. Returns Type Description System.Int32 A hash code. Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Flame.Compiler.BasicBlockTag.html": {
    "href": "api/Flame.Compiler.BasicBlockTag.html",
    "title": "Class BasicBlockTag | Flame",
    "keywords": "Class BasicBlockTag A unique tag type for basic blocks. Inheritance System.Object UniqueTag BasicBlockTag Inherited Members UniqueTag.Name UniqueTag.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class BasicBlockTag : UniqueTag Constructors | Improve this Doc View Source BasicBlockTag() Creates a new basic block tag. Declaration public BasicBlockTag() | Improve this Doc View Source BasicBlockTag(String) Creates a new basic block tag. Declaration public BasicBlockTag(string name) Parameters Type Name Description System.String name The tag's name."
  },
  "api/Flame.Compiler.BasicBlockBuilder.html": {
    "href": "api/Flame.Compiler.BasicBlockBuilder.html",
    "title": "Class BasicBlockBuilder | Flame",
    "keywords": "Class BasicBlockBuilder A basic block in a mutable control-flow graph builder. Inheritance System.Object BasicBlockBuilder Implements System.IEquatable < BasicBlockBuilder > Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class BasicBlockBuilder : IEquatable<BasicBlockBuilder> Properties | Improve this Doc View Source Flow Gets or sets the control flow at the end of this basic block. Declaration public BlockFlow Flow { get; set; } Property Value Type Description BlockFlow The end-of-block control flow. | Improve this Doc View Source Graph Gets the control-flow graph builder that defines this basic block. Declaration public FlowGraphBuilder Graph { get; } Property Value Type Description FlowGraphBuilder The control-flow graph builder. | Improve this Doc View Source InstructionTags Gets the list of all instruction tags in this basic block. Declaration public ImmutableList<ValueTag> InstructionTags { get; } Property Value Type Description System.Collections.Immutable.ImmutableList < ValueTag > The list of all instruction tags. | Improve this Doc View Source IsEntryPoint Tells if this block is the graph's entry point. Declaration public bool IsEntryPoint { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsValid Tells if this basic block builder is still valid, that is, it has not been removed from its control-flow graph builder's set of basic blocks. Declaration public bool IsValid { get; } Property Value Type Description System.Boolean true if this basic block builder is still valid; otherwise, false . | Improve this Doc View Source NamedInstructions Gets the list of all named instructions in this basic block. Declaration public IEnumerable<NamedInstructionBuilder> NamedInstructions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < NamedInstructionBuilder > A sequence containing all named instructions. | Improve this Doc View Source Parameters Gets or sets this basic block's list of parameters. Declaration public ImmutableList<BlockParameter> Parameters { get; set; } Property Value Type Description System.Collections.Immutable.ImmutableList < BlockParameter > The basic block's parameters. | Improve this Doc View Source ParameterTags Gets a sequence of all parameter tags defined by this basic block. Declaration public IEnumerable<ValueTag> ParameterTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > The basic block's parameter tags. | Improve this Doc View Source Tag Gets this basic block's tag. Declaration public BasicBlockTag Tag { get; } Property Value Type Description BasicBlockTag The basic block's tag. Methods | Improve this Doc View Source AppendInstruction(Instruction) Appends a new instruction to the end of this basic block. Returns the instruction builder for the inserted instruction. Declaration public NamedInstructionBuilder AppendInstruction(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to append. Returns Type Description NamedInstructionBuilder The appended instruction. | Improve this Doc View Source AppendInstruction(Instruction, ValueTag) Appends a new instruction to the end of this basic block. Returns the instruction builder for the inserted instruction. Declaration public NamedInstructionBuilder AppendInstruction(Instruction instruction, ValueTag tag) Parameters Type Name Description Instruction instruction The instruction to append. ValueTag tag The instruction's tag. Returns Type Description NamedInstructionBuilder The appended instruction. | Improve this Doc View Source AppendInstruction(Instruction, String) Appends a new instruction to the end of this basic block. Returns the instruction builder for the inserted instruction. Declaration public NamedInstructionBuilder AppendInstruction(Instruction instruction, string name) Parameters Type Name Description Instruction instruction The instruction to append. System.String name The preferred name of the instruction's tag. Returns Type Description NamedInstructionBuilder The appended instruction. | Improve this Doc View Source AppendParameter(BlockParameter) Appends a new parameter to the end of this basic block's parameter list. Declaration public BlockParameter AppendParameter(BlockParameter parameter) Parameters Type Name Description BlockParameter parameter The parameter to append. Returns Type Description BlockParameter The block parameter. | Improve this Doc View Source AppendParameter(IType) Appends a new parameter to the end of this basic block's parameter list. Declaration public BlockParameter AppendParameter(IType type) Parameters Type Name Description IType type The type of the parameter to append. Returns Type Description BlockParameter The block parameter. | Improve this Doc View Source AppendParameter(IType, ValueTag) Appends a new parameter to the end of this basic block's parameter list. Declaration public BlockParameter AppendParameter(IType type, ValueTag tag) Parameters Type Name Description IType type The type of the parameter to append. ValueTag tag The tag of the parameter to append. Returns Type Description BlockParameter The block parameter. | Improve this Doc View Source AppendParameter(IType, String) Appends a new parameter to the end of this basic block's parameter list. Declaration public BlockParameter AppendParameter(IType type, string name) Parameters Type Name Description IType type The type of the parameter to append. System.String name The name of the parameter to append. Returns Type Description BlockParameter The block parameter. | Improve this Doc View Source CopyInstructionsFrom(Int32, BasicBlock, IReadOnlyList<ValueTag>) Copies all instructions in a particular basic block into this basic block. All instructions defined by the block are renamed to avoid name clashes. References to the block's parameters are substituted by a list of arguments. Declaration public BlockFlow CopyInstructionsFrom(int insertionIndex, BasicBlock block, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description System.Int32 insertionIndex The instruction at which to insert block 's instructions. BasicBlock block The block to copy instructions from. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The arguments to feed to the block . Returns Type Description BlockFlow block 's flow, with values renamed to inserted instruction tags. | Improve this Doc View Source Equals(BasicBlockBuilder) Tests if this basic block equals another basic block. Declaration public bool Equals(BasicBlockBuilder other) Parameters Type Name Description BasicBlockBuilder other The other basic block. Returns Type Description System.Boolean true if this basic block equals the other basic block; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source InsertInstruction(Int32, Instruction) Appends a new instruction to the end of this basic block. Returns the instruction builder for the inserted instruction. Declaration public NamedInstructionBuilder InsertInstruction(int index, Instruction instruction) Parameters Type Name Description System.Int32 index The index to insert the instruction at. Instruction instruction The instruction to insert. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source InsertInstruction(Int32, Instruction, ValueTag) Inserts a new instruction into this basic block's list of instructions. Returns the instruction builder for the inserted instruction. Declaration public NamedInstructionBuilder InsertInstruction(int index, Instruction instruction, ValueTag tag) Parameters Type Name Description System.Int32 index The index to insert the instruction at. Instruction instruction The instruction to insert. ValueTag tag The instruction's tag. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source InsertInstruction(Int32, Instruction, String) Appends a new instruction to the end of this basic block. Returns the instruction builder for the inserted instruction. Declaration public NamedInstructionBuilder InsertInstruction(int index, Instruction instruction, string name) Parameters Type Name Description System.Int32 index The index to insert the instruction at. Instruction instruction The instruction to insert. System.String name The preferred name of the instruction's tag. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source RemoveInstruction(ValueTag) Removes the instruction with a particular tag from this basic block. Declaration public void RemoveInstruction(ValueTag tag) Parameters Type Name Description ValueTag tag The tag of the instruction to remove. Operators | Improve this Doc View Source Implicit(BasicBlockBuilder to BasicBlockTag) Implicitly converts a block to its tag. Declaration public static implicit operator BasicBlockTag(BasicBlockBuilder block) Parameters Type Name Description BasicBlockBuilder block The block to convert. Returns Type Description BasicBlockTag Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.BasicBlock.html": {
    "href": "api/Flame.Compiler.BasicBlock.html",
    "title": "Struct BasicBlock | Flame",
    "keywords": "Struct BasicBlock A basic block in a control-flow graph. Implements System.IEquatable < BasicBlock > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public struct BasicBlock : IEquatable<BasicBlock> Properties | Improve this Doc View Source Flow Gets the control flow at the end of this basic block. Declaration public BlockFlow Flow { get; } Property Value Type Description BlockFlow The end-of-block control flow. | Improve this Doc View Source Graph Gets the control-flow graph in which this block resides. Declaration public FlowGraph Graph { get; } Property Value Type Description FlowGraph A control-flow graph. | Improve this Doc View Source InstructionTags Gets the list of all instruction tags in this basic block. Declaration public ImmutableList<ValueTag> InstructionTags { get; } Property Value Type Description System.Collections.Immutable.ImmutableList < ValueTag > The list of all instruction tags. | Improve this Doc View Source IsEntryPoint Tells if this block is the graph's entry point. Declaration public bool IsEntryPoint { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NamedInstructions Gets the list of all named instructions in this basic block. Declaration public IEnumerable<NamedInstruction> NamedInstructions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < NamedInstruction > The list of all named instructions. | Improve this Doc View Source Parameters Gets this basic block's list of parameters. Declaration public ImmutableList<BlockParameter> Parameters { get; } Property Value Type Description System.Collections.Immutable.ImmutableList < BlockParameter > The basic block's parameters. | Improve this Doc View Source ParameterTags Gets a sequence of all parameter tags defined by this basic block. Declaration public IEnumerable<ValueTag> ParameterTags { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > The basic block's parameter tags. | Improve this Doc View Source Tag Gets this basic block's tag. Declaration public BasicBlockTag Tag { get; } Property Value Type Description BasicBlockTag The basic block's tag. Methods | Improve this Doc View Source AppendInstruction(Instruction) Appends a new instruction to the end of this basic block. Returns a new basic block in a new control-flow graph. Declaration public NamedInstruction AppendInstruction(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to append. Returns Type Description NamedInstruction The appended instruction. | Improve this Doc View Source AppendInstruction(Instruction, ValueTag) Appends a new instruction to the end of this basic block. Returns a new basic block in a new control-flow graph. Declaration public NamedInstruction AppendInstruction(Instruction instruction, ValueTag tag) Parameters Type Name Description Instruction instruction The instruction to append. ValueTag tag The tag for the instruction. Returns Type Description NamedInstruction The appended instruction. | Improve this Doc View Source AppendInstruction(Instruction, String) Appends a new instruction to the end of this basic block. Returns a new basic block in a new control-flow graph. Declaration public NamedInstruction AppendInstruction(Instruction instruction, string name) Parameters Type Name Description Instruction instruction The instruction to append. System.String name The preferred name of the instruction's tag. Returns Type Description NamedInstruction The appended instruction. | Improve this Doc View Source AppendParameter(BlockParameter) Appends a new parameter to the end of this basic block's parameter list. Returns a new basic block in a new control-flow graph. Declaration public BasicBlock AppendParameter(BlockParameter parameter) Parameters Type Name Description BlockParameter parameter The parameter to append. Returns Type Description BasicBlock A new basic block in a new control-flow graph. | Improve this Doc View Source Equals(BasicBlock) Tests if this basic block equals another basic block. Declaration public bool Equals(BasicBlock other) Parameters Type Name Description BasicBlock other The other basic block. Returns Type Description System.Boolean true if this basic block equals the other basic block; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source InsertInstruction(Int32, Instruction) Inserts a new instruction into this basic block's list of instructions. Returns a new basic block in a new control-flow graph. Declaration public NamedInstruction InsertInstruction(int index, Instruction instruction) Parameters Type Name Description System.Int32 index The index at which the instruction is to be inserted. Instruction instruction The instruction to insert. Returns Type Description NamedInstruction The inserted instruction. | Improve this Doc View Source InsertInstruction(Int32, Instruction, ValueTag) Inserts a new instruction into this basic block's list of instructions. Returns a new basic block in a new control-flow graph. Declaration public NamedInstruction InsertInstruction(int index, Instruction instruction, ValueTag tag) Parameters Type Name Description System.Int32 index The index at which the instruction is to be inserted. Instruction instruction The instruction to insert. ValueTag tag The tag for the instruction. Returns Type Description NamedInstruction The inserted instruction. | Improve this Doc View Source InsertInstruction(Int32, Instruction, String) Inserts a new instruction into this basic block's list of instructions. Returns a new basic block in a new control-flow graph. Declaration public NamedInstruction InsertInstruction(int index, Instruction instruction, string name) Parameters Type Name Description System.Int32 index The index at which the instruction is to be inserted. Instruction instruction The instruction to insert. System.String name The preferred name of the instruction's tag. Returns Type Description NamedInstruction The inserted instruction. | Improve this Doc View Source RemoveInstruction(ValueTag) Removes the instruction with a particular tag from this basic block. Returns a new basic block in a new control-flow graph. Declaration public BasicBlock RemoveInstruction(ValueTag tag) Parameters Type Name Description ValueTag tag The tag of the instruction to remove. Returns Type Description BasicBlock A new basic block in a new control-flow graph. | Improve this Doc View Source WithFlow(BlockFlow) Creates a new basic block in a new control-flow graph that has a particular flow. Declaration public BasicBlock WithFlow(BlockFlow flow) Parameters Type Name Description BlockFlow flow The new flow. Returns Type Description BasicBlock A new basic block in a new control-flow graph. | Improve this Doc View Source WithParameters(IReadOnlyList<BlockParameter>) Creates a new basic block in a new control-flow graph that has a particular list of parameters. Declaration public BasicBlock WithParameters(IReadOnlyList<BlockParameter> parameters) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < BlockParameter > parameters The new parameters. Returns Type Description BasicBlock A new basic block in a new control-flow graph. | Improve this Doc View Source WithParameters(ImmutableList<BlockParameter>) Creates a new basic block in a new control-flow graph that has a particular list of parameters. Declaration public BasicBlock WithParameters(ImmutableList<BlockParameter> parameters) Parameters Type Name Description System.Collections.Immutable.ImmutableList < BlockParameter > parameters The new parameters. Returns Type Description BasicBlock A new basic block in a new control-flow graph. Operators | Improve this Doc View Source Implicit(BasicBlock to BasicBlockTag) Implicitly converts a block to its tag. Declaration public static implicit operator BasicBlockTag(BasicBlock block) Parameters Type Name Description BasicBlock block The block to convert. Returns Type Description BasicBlockTag Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.Analysis.html": {
    "href": "api/Flame.Compiler.Analysis.html",
    "title": "Namespace Flame.Compiler.Analysis | Flame",
    "keywords": "Namespace Flame.Compiler.Analysis Classes AddBasicBlockUpdate A flow graph update that adds a basic block to the flow graph. AddInstructionUpdate A flow graph update that inserts an instruction. AliasAnalysisResult A data structure that captures the result of applying alias analysis to a control-flow graph. BasicBlockFlowUpdate A flow graph update that sets the outgoing flow of a basic block. BasicBlockParametersUpdate A flow graph update that sets the parameters of a basic block. BasicBlockUpdate A flow graph update at the basic block level: the insertion, deletion or modification of a basic block. BlockLiveness Contains value liveness data for a single block. BlockReachability A description of which blocks can reach other blocks in a control-flow graph. ConservativeInstructionOrderingAnalysis A conservative analysis that determines the must-run-before relation between instructions. The must-run-before relation is determined by imposing a total ordering on effectful instructions. ConstantAnalysis<T> An analysis that always returns the same result. This kind of analysis is particularly useful for adding metadata to flow graphs that encode a (user-specified) configuration, such as the exception delayability policy. DefaultAnalyses Manages a collection of default control-flow graph analyses, which are used when no analysis is explicitly added to a graph. DominatorTree A data structure that describes the dominator tree of a control-flow graph. DominatorTreeAnalysis An analysis that computes dominator trees for control-flow graphs. EffectfulInstructionAnalysis An analysis that produces the set of all effectful instructions in a graph. ExceptionDelayability A base class for rules about whether or not exceptions thrown by particular types of instructions may be delayed until the value they produce is used by an effectful instruction. ExceptionDelayabilityExtensions Defines extension methods related to exception delayability. FlowGraphUpdate Describes an update to a flow graph. GreedyRegisterAllocator<TRegister> An analysis that greedily allocates registers to values. The set of values is assumed to be unbounded: the analysis is allowed to \"create\" an arbitrarily large amount of registers. InstructionExceptionSpecs Maps instructions to their exception specifications. InstructionOrdering Captures the must-run-before relation between instructions. All instruction orderings that respect this relation are legal and computationally equivalent. InstructionUpdate A flow graph update at the instruction level: the insertion, deletion or replacement of an instruction. These updates don't affect the control flow graph itself. InterferenceGraph A symmetric relation that tells if there is some point at which two arbitrary values are both live. InterferenceGraphAnalysis An analysis that constructs an interference graph. LazyBlockReachability A block reachability implementation that performs reachability analysis on an on-demand basis and caches the results. LazyBlockReachabilityAnalysis An analysis that finds computes block reachability information on an on-demand basis. LivenessAnalysis An analysis that determines which variables are live at any location in a control flow graph. LocalMemorySSAAnalysis A very simple, block-local memory SSA analysis. MapMembersUpdate A flow graph update that applies a mapping to every member in the flow graph. MemorySSA A mapping of instructions to memory SSA states. MemorySSA.Phi A memory SSA phi, which sets the memory state to one of a list of potential memory SSA states. MemorySSA.Store A memory SSA value that represents an update of another memory SSA value. MemorySSA.Unknown A memory SSA value that represents a completely unknown state. MemorySSA.Value A memory SSA value, i.e., a state that memory can have. NullabilityAnalysis A simple nullability analysis. NullCheckExceptionSpecification An exception specification for an instruction parameter null check. PermissiveExceptionDelayability Exception delayability rules that allow delaying exceptions for implicit checks when computing pointers. PredecessorAnalysis An analysis that finds basic block predecessors. PrototypeExceptionSpecs Maps instruction prototypes to exception specifications. RelatedValueAnalysis An analysis that computes the related value--relation for graphs. RemoveBasicBlockUpdate A flow graph update that removes a basic block from the flow graph. RemoveInstructionUpdate A flow graph update that removes an instruction. ReplaceInstructionUpdate A flow graph update that replaces an instruction. RuleBasedPrototypeExceptionSpecs Assigns exception specifications to prototypes based on a set of user-configurable rules. SetEntryPointUpdate A flow graph update that sets the graph's entry point to a new block. StrictExceptionDelayability Exception delayability rules that disallow delaying exceptions in all cases. TrivialAliasAnalysisResult A truly trivial alias analysis result implementation: all values are deemed to must-alias themselves and may-alias all other values. TrivialInstructionExceptionSpecs An instruction exception specification mapping that trivially copies prototype exception specifications. ValueNullability An analysis result that tells if values produce non- null or dereferenceable pointers. ValueNumbering A mapping of values to representative values for a particular control-flow graph. ValueNumberingAnalysis An analysis that computes value numbers. ValueNumberingInstructionComparer A specialized instruction comparer for instructions that uses value numbers to more accurately compare instructions. Assumes that all instructions being compared are defined by the same graph. The equality relation that arises from this comparer is that of semantic instruction equivalence, not of syntactic equality. ValueUseAnalysis An analysis that figures out where values are used. Structs BasicBlockPredecessors A data structure that can be queried to get the predecessors of a block, that is, the set of all blocks that have branches to the block. EffectfulInstructions The set of instructions in a graph that may have side-effects. RegisterAllocation<TRegister> An allocation of values to registers. RelatedValues A symmetric relation that consists of all pairs of values that are direct copies of each other. A value is deemed a copy of another value if the former is produced by a copy instruction that references the latter or if the former is a block parameter and there is a branch that specifies the latter as the argument to the former. This information can be useful for the purpose of register allocation: allocating two related values to the same register will elide a copy. ValueLiveness Describes which variables are live at any location in a control flow graph. ValueUses A mapping that describes where values are used. Interfaces IFlowGraphAnalysis<T> An analysis on a flow graph. Enums Aliasing Enumerates possible aliasing relations between pointers."
  },
  "api/Flame.Compiler.Analysis.ValueUses.html": {
    "href": "api/Flame.Compiler.Analysis.ValueUses.html",
    "title": "Struct ValueUses | Flame",
    "keywords": "Struct ValueUses A mapping that describes where values are used. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public struct ValueUses Methods | Improve this Doc View Source GetFlowUses(ValueTag) Gets the set of basic block tags for all basic blocks containing flows that use tag . Declaration public ImmutableHashSet<BasicBlockTag> GetFlowUses(ValueTag tag) Parameters Type Name Description ValueTag tag The tag to examine. Returns Type Description System.Collections.Immutable.ImmutableHashSet < BasicBlockTag > A set of basic block tags for all basic blocks containing flows that use tag . | Improve this Doc View Source GetInstructionUses(ValueTag) Gets the set of all values that are defined by instructions that take tag as an argument. Declaration public ImmutableHashSet<ValueTag> GetInstructionUses(ValueTag tag) Parameters Type Name Description ValueTag tag The tag to examine. Returns Type Description System.Collections.Immutable.ImmutableHashSet < ValueTag > A set of all value tags of instructions that use tag . | Improve this Doc View Source GetUseCount(ValueTag) Gets the number of distinct instructions and block flows that use a particular tag. Declaration public int GetUseCount(ValueTag tag) Parameters Type Name Description ValueTag tag The tag to find a use count for. Returns Type Description System.Int32 The number of distinct instructions and block flows that use tag ."
  },
  "api/Flame.Compiler.Analysis.ValueUseAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.ValueUseAnalysis.html",
    "title": "Class ValueUseAnalysis | Flame",
    "keywords": "Class ValueUseAnalysis An analysis that figures out where values are used. Inheritance System.Object ValueUseAnalysis Implements IFlowGraphAnalysis < ValueUses > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class ValueUseAnalysis : IFlowGraphAnalysis<ValueUses> Fields | Improve this Doc View Source Instance Gets an instance of the value use analysis. Declaration public static readonly ValueUseAnalysis Instance Field Value Type Description ValueUseAnalysis An instance of the value use analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public ValueUses Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description ValueUses | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, ValueUses, IReadOnlyList<FlowGraphUpdate>) Declaration public ValueUses AnalyzeWithUpdates(FlowGraph graph, ValueUses previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph ValueUses previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description ValueUses Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.ValueNumberingInstructionComparer.html": {
    "href": "api/Flame.Compiler.Analysis.ValueNumberingInstructionComparer.html",
    "title": "Class ValueNumberingInstructionComparer | Flame",
    "keywords": "Class ValueNumberingInstructionComparer A specialized instruction comparer for instructions that uses value numbers to more accurately compare instructions. Assumes that all instructions being compared are defined by the same graph. The equality relation that arises from this comparer is that of semantic instruction equivalence, not of syntactic equality. Inheritance System.Object ValueNumberingInstructionComparer Implements System.Collections.Generic.IEqualityComparer < Instruction > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class ValueNumberingInstructionComparer : IEqualityComparer<Instruction> Constructors | Improve this Doc View Source ValueNumberingInstructionComparer(ValueNumbering) Creates an instruction comparer that uses a value numbering to decide if two instructions are equivalent. Declaration public ValueNumberingInstructionComparer(ValueNumbering numbering) Parameters Type Name Description ValueNumbering numbering The value numbering to use for deciding if instructions are equivalent. Methods | Improve this Doc View Source Equals(Instruction, Instruction) Tests if two instructions are equivalent in a value numbering sense. Instructions 'a', 'b' are considered to be equivalent iff 'a' dominates 'b' implies that 'b' can be replaced with a copy of the result computed by 'a'. Declaration public bool Equals(Instruction a, Instruction b) Parameters Type Name Description Instruction a The first instruction to compare. Instruction b The second instruction to compare. Returns Type Description System.Boolean true if the instructions are equivalent; otherwise, false . | Improve this Doc View Source GetHashCode(Instruction) Computes a hash code for an instruction. Declaration public int GetHashCode(Instruction obj) Parameters Type Name Description Instruction obj The instruction to hash. Returns Type Description System.Int32 A hash code. Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Flame.Compiler.Analysis.ValueNumberingAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.ValueNumberingAnalysis.html",
    "title": "Class ValueNumberingAnalysis | Flame",
    "keywords": "Class ValueNumberingAnalysis An analysis that computes value numbers. Inheritance System.Object ValueNumberingAnalysis Implements IFlowGraphAnalysis < ValueNumbering > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class ValueNumberingAnalysis : IFlowGraphAnalysis<ValueNumbering> Fields | Improve this Doc View Source Instance Gets an instance of the value numbering analysis. Declaration public static readonly ValueNumberingAnalysis Instance Field Value Type Description ValueNumberingAnalysis An instance of the value numbering analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public ValueNumbering Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description ValueNumbering | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, ValueNumbering, IReadOnlyList<FlowGraphUpdate>) Declaration public ValueNumbering AnalyzeWithUpdates(FlowGraph graph, ValueNumbering previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph ValueNumbering previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description ValueNumbering Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.ReplaceInstructionUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.ReplaceInstructionUpdate.html",
    "title": "Class ReplaceInstructionUpdate | Flame",
    "keywords": "Class ReplaceInstructionUpdate A flow graph update that replaces an instruction. Inheritance System.Object FlowGraphUpdate InstructionUpdate ReplaceInstructionUpdate Inherited Members InstructionUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class ReplaceInstructionUpdate : InstructionUpdate Properties | Improve this Doc View Source Instruction Gets the new instruction that replaces the old one. Declaration public Instruction Instruction { get; } Property Value Type Description Instruction The new instruction."
  },
  "api/Flame.Compiler.Analysis.RemoveInstructionUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.RemoveInstructionUpdate.html",
    "title": "Class RemoveInstructionUpdate | Flame",
    "keywords": "Class RemoveInstructionUpdate A flow graph update that removes an instruction. Inheritance System.Object FlowGraphUpdate InstructionUpdate RemoveInstructionUpdate Inherited Members InstructionUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class RemoveInstructionUpdate : InstructionUpdate"
  },
  "api/Flame.Compiler.Analysis.RemoveBasicBlockUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.RemoveBasicBlockUpdate.html",
    "title": "Class RemoveBasicBlockUpdate | Flame",
    "keywords": "Class RemoveBasicBlockUpdate A flow graph update that removes a basic block from the flow graph. Inheritance System.Object FlowGraphUpdate BasicBlockUpdate RemoveBasicBlockUpdate Inherited Members BasicBlockUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class RemoveBasicBlockUpdate : BasicBlockUpdate"
  },
  "api/Flame.Compiler.Analysis.RelatedValues.html": {
    "href": "api/Flame.Compiler.Analysis.RelatedValues.html",
    "title": "Struct RelatedValues | Flame",
    "keywords": "Struct RelatedValues A symmetric relation that consists of all pairs of values that are direct copies of each other. A value is deemed a copy of another value if the former is produced by a copy instruction that references the latter or if the former is a block parameter and there is a branch that specifies the latter as the argument to the former. This information can be useful for the purpose of register allocation: allocating two related values to the same register will elide a copy. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public struct RelatedValues Methods | Improve this Doc View Source AreRelated(ValueTag, ValueTag) Tests if two values are related. Declaration public bool AreRelated(ValueTag first, ValueTag second) Parameters Type Name Description ValueTag first A first value. ValueTag second A second value. Returns Type Description System.Boolean true if the values are related; otherwise, false . | Improve this Doc View Source GetRelatedValues(ValueTag) Gets the set of all values related to a particular value. Declaration public IEnumerable<ValueTag> GetRelatedValues(ValueTag value) Parameters Type Name Description ValueTag value The related value. Returns Type Description System.Collections.Generic.IEnumerable < ValueTag > The set of related values."
  },
  "api/Flame.Compiler.Analysis.RelatedValueAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.RelatedValueAnalysis.html",
    "title": "Class RelatedValueAnalysis | Flame",
    "keywords": "Class RelatedValueAnalysis An analysis that computes the related value--relation for graphs. Inheritance System.Object RelatedValueAnalysis Implements IFlowGraphAnalysis < RelatedValues > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class RelatedValueAnalysis : IFlowGraphAnalysis<RelatedValues> Fields | Improve this Doc View Source Instance Gets an instance of the related value analysis. Declaration public static readonly RelatedValueAnalysis Instance Field Value Type Description RelatedValueAnalysis An instance of the related value analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public RelatedValues Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description RelatedValues | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, RelatedValues, IReadOnlyList<FlowGraphUpdate>) Declaration public RelatedValues AnalyzeWithUpdates(FlowGraph graph, RelatedValues previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph RelatedValues previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description RelatedValues Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.RegisterAllocation-1.html": {
    "href": "api/Flame.Compiler.Analysis.RegisterAllocation-1.html",
    "title": "Struct RegisterAllocation<TRegister> | Flame",
    "keywords": "Struct RegisterAllocation<TRegister> An allocation of values to registers. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public struct RegisterAllocation<TRegister> Type Parameters Name Description TRegister The type of register allocated to values. Constructors | Improve this Doc View Source RegisterAllocation(IReadOnlyDictionary<ValueTag, TRegister>) Creates a register allocation container from a value-to-register map. Declaration public RegisterAllocation(IReadOnlyDictionary<ValueTag, TRegister> allocation) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < ValueTag , TRegister> allocation Properties | Improve this Doc View Source Allocation Gets a mapping of values to the registers they are allocated to. Declaration public IReadOnlyDictionary<ValueTag, TRegister> Allocation { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < ValueTag , TRegister> A mapping of values to registers. Methods | Improve this Doc View Source GetRegister(ValueTag) Gets the register allocated to a particular value. Declaration public TRegister GetRegister(ValueTag value) Parameters Type Name Description ValueTag value The value to find a register for. Returns Type Description TRegister A register."
  },
  "api/Flame.Compiler.Analysis.PrototypeExceptionSpecs.html": {
    "href": "api/Flame.Compiler.Analysis.PrototypeExceptionSpecs.html",
    "title": "Class PrototypeExceptionSpecs | Flame",
    "keywords": "Class PrototypeExceptionSpecs Maps instruction prototypes to exception specifications. Inheritance System.Object PrototypeExceptionSpecs RuleBasedPrototypeExceptionSpecs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class PrototypeExceptionSpecs Methods | Improve this Doc View Source GetExceptionSpecification(InstructionPrototype) Gets the exception specification for a particular instruction prototype. Declaration public abstract ExceptionSpecification GetExceptionSpecification(InstructionPrototype prototype) Parameters Type Name Description InstructionPrototype prototype The prototype to examine. Returns Type Description ExceptionSpecification An exception specification for prototype ."
  },
  "api/Flame.Compiler.Analysis.PredecessorAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.PredecessorAnalysis.html",
    "title": "Class PredecessorAnalysis | Flame",
    "keywords": "Class PredecessorAnalysis An analysis that finds basic block predecessors. Inheritance System.Object PredecessorAnalysis Implements IFlowGraphAnalysis < BasicBlockPredecessors > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class PredecessorAnalysis : IFlowGraphAnalysis<BasicBlockPredecessors> Fields | Improve this Doc View Source Instance An instance of the basic block predecessor analysis. Declaration public static readonly PredecessorAnalysis Instance Field Value Type Description PredecessorAnalysis Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public BasicBlockPredecessors Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description BasicBlockPredecessors | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, BasicBlockPredecessors, IReadOnlyList<FlowGraphUpdate>) Declaration public BasicBlockPredecessors AnalyzeWithUpdates(FlowGraph graph, BasicBlockPredecessors previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph BasicBlockPredecessors previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description BasicBlockPredecessors Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.PermissiveExceptionDelayability.html": {
    "href": "api/Flame.Compiler.Analysis.PermissiveExceptionDelayability.html",
    "title": "Class PermissiveExceptionDelayability | Flame",
    "keywords": "Class PermissiveExceptionDelayability Exception delayability rules that allow delaying exceptions for implicit checks when computing pointers. Inheritance System.Object ExceptionDelayability PermissiveExceptionDelayability Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class PermissiveExceptionDelayability : ExceptionDelayability Fields | Improve this Doc View Source Instance An instance of the permissive exception delayability policy. Declaration public static readonly PermissiveExceptionDelayability Instance Field Value Type Description PermissiveExceptionDelayability Methods | Improve this Doc View Source CanDelayExceptions(InstructionPrototype) Tells if it is permissible to delay exceptions thrown by a particular instruction until the instruction's result is used by an effectful instruction. If the instruction's result is never used that way, the exception may even be deleted altogether. Declaration public override bool CanDelayExceptions(InstructionPrototype prototype) Parameters Type Name Description InstructionPrototype prototype An instruction prototype to examine. Returns Type Description System.Boolean true if exceptions thrown by instances of prototype may be delayed until the instances' values are used by effectful instructions; otherwise, false . Overrides ExceptionDelayability.CanDelayExceptions(InstructionPrototype)"
  },
  "api/Flame.Compiler.Analysis.NullCheckExceptionSpecification.html": {
    "href": "api/Flame.Compiler.Analysis.NullCheckExceptionSpecification.html",
    "title": "Class NullCheckExceptionSpecification | Flame",
    "keywords": "Class NullCheckExceptionSpecification An exception specification for an instruction parameter null check. Inheritance System.Object ExceptionSpecification NullCheckExceptionSpecification Inherited Members ExceptionSpecification.NoThrow ExceptionSpecification.ThrowAny ExceptionSpecification.Exactly(IType) ExceptionSpecification.Union(ExceptionSpecification[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class NullCheckExceptionSpecification : ExceptionSpecification Constructors | Improve this Doc View Source NullCheckExceptionSpecification(Int32, ExceptionSpecification) Creates a null-check exception specification. Declaration public NullCheckExceptionSpecification(int parameterIndex, ExceptionSpecification nullCheckSpec) Parameters Type Name Description System.Int32 parameterIndex The index of the instruction parameter that is null checked. ExceptionSpecification nullCheckSpec The exception specification of the exception thrown if and when a null check fails. | Improve this Doc View Source NullCheckExceptionSpecification(Int32, IType) Creates a null-check exception specification. Declaration public NullCheckExceptionSpecification(int parameterIndex, IType exceptionType) Parameters Type Name Description System.Int32 parameterIndex The index of the instruction parameter that is null checked. IType exceptionType The type of exception that is thrown if and when a null check fails. Properties | Improve this Doc View Source CanThrowSomething Tells if this exception specification allows for any exceptions at all to be thrown. Declaration public override bool CanThrowSomething { get; } Property Value Type Description System.Boolean true if this exception specification allows for at least one type of exception to be thrown; otherwise, false . Overrides ExceptionSpecification.CanThrowSomething | Improve this Doc View Source NullCheckSpec Gets the exception specification of the exception thrown if and when a null check fails. Declaration public ExceptionSpecification NullCheckSpec { get; } Property Value Type Description ExceptionSpecification An exception specification. | Improve this Doc View Source ParameterIndex Gets the index of the null-checked parameter, Declaration public int ParameterIndex { get; } Property Value Type Description System.Int32 The index of the null-checked parameter. Methods | Improve this Doc View Source CanThrow(IType) Tells if this exception specification allows for an exception of a particular type or a derived type to be thrown. Declaration public override bool CanThrow(IType exceptionType) Parameters Type Name Description IType exceptionType The type of exception to examine. Returns Type Description System.Boolean true if an exception of type exceptionType or a derived type can be thrown; otherwise, false . Overrides ExceptionSpecification.CanThrow(IType)"
  },
  "api/Flame.Compiler.Analysis.NullabilityAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.NullabilityAnalysis.html",
    "title": "Class NullabilityAnalysis | Flame",
    "keywords": "Class NullabilityAnalysis A simple nullability analysis. Inheritance System.Object NullabilityAnalysis Implements IFlowGraphAnalysis < ValueNullability > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class NullabilityAnalysis : IFlowGraphAnalysis<ValueNullability> Fields | Improve this Doc View Source Instance Gets an instance of the nullability analysis. Declaration public static readonly NullabilityAnalysis Instance Field Value Type Description NullabilityAnalysis An instance of the nullability analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public ValueNullability Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description ValueNullability | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, ValueNullability, IReadOnlyList<FlowGraphUpdate>) Declaration public ValueNullability AnalyzeWithUpdates(FlowGraph graph, ValueNullability previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph ValueNullability previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description ValueNullability Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.MemorySSA.html": {
    "href": "api/Flame.Compiler.Analysis.MemorySSA.html",
    "title": "Class MemorySSA | Flame",
    "keywords": "Class MemorySSA A mapping of instructions to memory SSA states. Inheritance System.Object MemorySSA Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class MemorySSA Constructors | Improve this Doc View Source MemorySSA(ImmutableDictionary<BasicBlockTag, MemorySSA.Value>, ImmutableDictionary<ValueTag, MemorySSA.Value>) Creates a memory SSA mapping. Declaration public MemorySSA(ImmutableDictionary<BasicBlockTag, MemorySSA.Value> blockValues, ImmutableDictionary<ValueTag, MemorySSA.Value> instructionValues) Parameters Type Name Description System.Collections.Immutable.ImmutableDictionary < BasicBlockTag , MemorySSA.Value > blockValues A mapping of basic block entry points to memory states. System.Collections.Immutable.ImmutableDictionary < ValueTag , MemorySSA.Value > instructionValues A mapping of instructions to memory states. Properties | Improve this Doc View Source BlockValues Gets the mapping of basic block entry points to memory states. Declaration public ImmutableDictionary<BasicBlockTag, MemorySSA.Value> BlockValues { get; } Property Value Type Description System.Collections.Immutable.ImmutableDictionary < BasicBlockTag , MemorySSA.Value > An immutable dictionary. | Improve this Doc View Source InstructionValues Gets the mapping of instructions to memory states. Declaration public ImmutableDictionary<ValueTag, MemorySSA.Value> InstructionValues { get; } Property Value Type Description System.Collections.Immutable.ImmutableDictionary < ValueTag , MemorySSA.Value > An immutable dictionary. Methods | Improve this Doc View Source GetMemoryAfter(NamedInstruction) Gets the memory state after a particular instruction has executed. Declaration public MemorySSA.Value GetMemoryAfter(NamedInstruction instruction) Parameters Type Name Description NamedInstruction instruction An instruction. Returns Type Description MemorySSA.Value A memory state. | Improve this Doc View Source GetMemoryAfter(NamedInstructionBuilder) Gets the memory state after a particular instruction has executed. Declaration public MemorySSA.Value GetMemoryAfter(NamedInstructionBuilder instruction) Parameters Type Name Description NamedInstructionBuilder instruction An instruction. Returns Type Description MemorySSA.Value A memory state. | Improve this Doc View Source GetMemoryAtEntry(BasicBlockTag) Gets the memory state at the start of a particular basic block. Declaration public MemorySSA.Value GetMemoryAtEntry(BasicBlockTag block) Parameters Type Name Description BasicBlockTag block A basic block. Returns Type Description MemorySSA.Value A memory state. | Improve this Doc View Source GetMemoryBefore(NamedInstruction) Gets the memory state before a particular instruction has executed. Declaration public MemorySSA.Value GetMemoryBefore(NamedInstruction instruction) Parameters Type Name Description NamedInstruction instruction An instruction. Returns Type Description MemorySSA.Value A memory state. | Improve this Doc View Source GetMemoryBefore(NamedInstructionBuilder) Gets the memory state before a particular instruction has executed. Declaration public MemorySSA.Value GetMemoryBefore(NamedInstructionBuilder instruction) Parameters Type Name Description NamedInstructionBuilder instruction An instruction. Returns Type Description MemorySSA.Value A memory state."
  },
  "api/Flame.Compiler.Analysis.MemorySSA.Value.html": {
    "href": "api/Flame.Compiler.Analysis.MemorySSA.Value.html",
    "title": "Class MemorySSA.Value | Flame",
    "keywords": "Class MemorySSA.Value A memory SSA value, i.e., a state that memory can have. Inheritance System.Object MemorySSA.Value MemorySSA.Phi MemorySSA.Store MemorySSA.Unknown Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class Value Methods | Improve this Doc View Source TryGetValueAt(ValueTag, FlowGraph, out ValueTag) Tries to ascertain the value stored at a particular address. Declaration public bool TryGetValueAt(ValueTag address, FlowGraph graph, out ValueTag value) Parameters Type Name Description ValueTag address The address to examine. FlowGraph graph The graph that defines the address value. ValueTag value This method's result: the value that is stored at the address, if any. Returns Type Description System.Boolean true if the value at address ; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.MemorySSA.Unknown.html": {
    "href": "api/Flame.Compiler.Analysis.MemorySSA.Unknown.html",
    "title": "Class MemorySSA.Unknown | Flame",
    "keywords": "Class MemorySSA.Unknown A memory SSA value that represents a completely unknown state. Inheritance System.Object MemorySSA.Value MemorySSA.Unknown Inherited Members MemorySSA.Value.TryGetValueAt(ValueTag, FlowGraph, ValueTag) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class Unknown : MemorySSA.Value Fields | Improve this Doc View Source Instance An instance of the unknown state. Declaration public static readonly MemorySSA.Unknown Instance Field Value Type Description MemorySSA.Unknown The unknown state."
  },
  "api/Flame.Compiler.Analysis.MemorySSA.Store.html": {
    "href": "api/Flame.Compiler.Analysis.MemorySSA.Store.html",
    "title": "Class MemorySSA.Store | Flame",
    "keywords": "Class MemorySSA.Store A memory SSA value that represents an update of another memory SSA value. Inheritance System.Object MemorySSA.Value MemorySSA.Store Inherited Members MemorySSA.Value.TryGetValueAt(ValueTag, FlowGraph, ValueTag) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class Store : MemorySSA.Value Constructors | Improve this Doc View Source Store(MemorySSA.Value, ValueTag, ValueTag) Creates a store. Declaration public Store(MemorySSA.Value operand, ValueTag address, ValueTag value) Parameters Type Name Description MemorySSA.Value operand The memory state to update. ValueTag address The address that is written to. ValueTag value The value that is written to the address. Properties | Improve this Doc View Source Address Gets the address that is written to. Declaration public ValueTag Address { get; } Property Value Type Description ValueTag An address. | Improve this Doc View Source Operand Gets the memory SSA value that is updated. Declaration public MemorySSA.Value Operand { get; } Property Value Type Description MemorySSA.Value A memory state. | Improve this Doc View Source Value Gets the value that is stored at that address. Declaration public ValueTag Value { get; } Property Value Type Description ValueTag A value. Methods | Improve this Doc View Source WithStore(MemorySSA.Value, ValueTag, ValueTag, FlowGraph) Creates a memory SSA state that represents an existing state, updated by a store to a particular address. If the store is a no-op, then the current state is returned. Declaration public static MemorySSA.Value WithStore(MemorySSA.Value state, ValueTag address, ValueTag value, FlowGraph graph) Parameters Type Name Description MemorySSA.Value state The state that gets updated. ValueTag address The address to which value value is written. ValueTag value A value that is written to an address. FlowGraph graph The control-flow graph that performs the update. Returns Type Description MemorySSA.Value A memory SSA state."
  },
  "api/Flame.Compiler.Analysis.MemorySSA.Phi.html": {
    "href": "api/Flame.Compiler.Analysis.MemorySSA.Phi.html",
    "title": "Class MemorySSA.Phi | Flame",
    "keywords": "Class MemorySSA.Phi A memory SSA phi, which sets the memory state to one of a list of potential memory SSA states. Inheritance System.Object MemorySSA.Value MemorySSA.Phi Inherited Members MemorySSA.Value.TryGetValueAt(ValueTag, FlowGraph, ValueTag) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class Phi : MemorySSA.Value Constructors | Improve this Doc View Source Phi(IReadOnlyList<MemorySSA.Value>) Creates a phi. Declaration public Phi(IReadOnlyList<MemorySSA.Value> operands) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < MemorySSA.Value > operands The phi's operands. Properties | Improve this Doc View Source Operands Gets the phi's operands. Declaration public IReadOnlyList<MemorySSA.Value> Operands { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < MemorySSA.Value > The phi's operands."
  },
  "api/Flame.Compiler.Analysis.LazyBlockReachability.html": {
    "href": "api/Flame.Compiler.Analysis.LazyBlockReachability.html",
    "title": "Class LazyBlockReachability | Flame",
    "keywords": "Class LazyBlockReachability A block reachability implementation that performs reachability analysis on an on-demand basis and caches the results. Inheritance System.Object BlockReachability LazyBlockReachability Inherited Members BlockReachability.IsReachableFrom(BasicBlockTag, BasicBlockTag) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class LazyBlockReachability : BlockReachability Constructors | Improve this Doc View Source LazyBlockReachability(FlowGraph) Creates a lazy block reachability analysis for a particular graph. Declaration public LazyBlockReachability(FlowGraph graph) Parameters Type Name Description FlowGraph graph The graph to create a reachability analysis for. Properties | Improve this Doc View Source Graph Gets the flow graph that is queried for reachability. Declaration public FlowGraph Graph { get; } Property Value Type Description FlowGraph The flow graph. Methods | Improve this Doc View Source GetStrictlyReachableBlocks(BasicBlockTag) Gets the set of all basic blocks that are strictly reachable from a particular basic block. Declaration public override IEnumerable<BasicBlockTag> GetStrictlyReachableBlocks(BasicBlockTag source) Parameters Type Name Description BasicBlockTag source The source block to start at. Returns Type Description System.Collections.Generic.IEnumerable < BasicBlockTag > A set of basic block tags referring to basic blocks that are reachable from source . Overrides BlockReachability.GetStrictlyReachableBlocks(BasicBlockTag) | Improve this Doc View Source IsStrictlyReachableFrom(BasicBlockTag, BasicBlockTag) Tests if there exists a nonempty path through the control-flow graph that starts at source and ends at target . Declaration public override bool IsStrictlyReachableFrom(BasicBlockTag source, BasicBlockTag target) Parameters Type Name Description BasicBlockTag source The block tag of the start of the path. BasicBlockTag target The block tag of the end of the path. Returns Type Description System.Boolean true if there is such a path; otherwise, false . Overrides BlockReachability.IsStrictlyReachableFrom(BasicBlockTag, BasicBlockTag)"
  },
  "api/Flame.Compiler.Analysis.InterferenceGraphAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.InterferenceGraphAnalysis.html",
    "title": "Class InterferenceGraphAnalysis | Flame",
    "keywords": "Class InterferenceGraphAnalysis An analysis that constructs an interference graph. Inheritance System.Object InterferenceGraphAnalysis Implements IFlowGraphAnalysis < InterferenceGraph > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class InterferenceGraphAnalysis : IFlowGraphAnalysis<InterferenceGraph> Fields | Improve this Doc View Source Instance Gets an instance of the interference graph analysis. Declaration public static readonly InterferenceGraphAnalysis Instance Field Value Type Description InterferenceGraphAnalysis An instance of the interference graph analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public InterferenceGraph Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description InterferenceGraph | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, InterferenceGraph, IReadOnlyList<FlowGraphUpdate>) Declaration public InterferenceGraph AnalyzeWithUpdates(FlowGraph graph, InterferenceGraph previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph InterferenceGraph previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description InterferenceGraph Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.InterferenceGraph.html": {
    "href": "api/Flame.Compiler.Analysis.InterferenceGraph.html",
    "title": "Class InterferenceGraph | Flame",
    "keywords": "Class InterferenceGraph A symmetric relation that tells if there is some point at which two arbitrary values are both live. Inheritance System.Object InterferenceGraph Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class InterferenceGraph Methods | Improve this Doc View Source GetInterferingValues(ValueTag) Gets the set of all values that interfere with a given value. Declaration public IEnumerable<ValueTag> GetInterferingValues(ValueTag value) Parameters Type Name Description ValueTag value The value to find the set of interfering values for. Returns Type Description System.Collections.Generic.IEnumerable < ValueTag > A set of interfering values. | Improve this Doc View Source InterferesWith(ValueTag, ValueTag) Tests if one value interferes with another, that is, tests if there is at least one point in the program at which both values must exist simultaneously. Declaration public bool InterferesWith(ValueTag first, ValueTag second) Parameters Type Name Description ValueTag first The first value to consider. ValueTag second The second value to consider. Returns Type Description System.Boolean true if first interferes with second ; otherwise; false ."
  },
  "api/Flame.Compiler.Analysis.InstructionUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.InstructionUpdate.html",
    "title": "Class InstructionUpdate | Flame",
    "keywords": "Class InstructionUpdate A flow graph update at the instruction level: the insertion, deletion or replacement of an instruction. These updates don't affect the control flow graph itself. Inheritance System.Object FlowGraphUpdate InstructionUpdate AddInstructionUpdate RemoveInstructionUpdate ReplaceInstructionUpdate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class InstructionUpdate : FlowGraphUpdate Properties | Improve this Doc View Source Tag Gets the tag of the instruction that is updated. Declaration public ValueTag Tag { get; } Property Value Type Description ValueTag The tag of an instruction."
  },
  "api/Flame.Compiler.Analysis.EffectfulInstructionAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.EffectfulInstructionAnalysis.html",
    "title": "Class EffectfulInstructionAnalysis | Flame",
    "keywords": "Class EffectfulInstructionAnalysis An analysis that produces the set of all effectful instructions in a graph. Inheritance System.Object EffectfulInstructionAnalysis Implements IFlowGraphAnalysis < EffectfulInstructions > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class EffectfulInstructionAnalysis : IFlowGraphAnalysis<EffectfulInstructions> Constructors | Improve this Doc View Source EffectfulInstructionAnalysis() Creates an effectful instruction analysis based on the default effectfulness predicate. Declaration public EffectfulInstructionAnalysis() | Improve this Doc View Source EffectfulInstructionAnalysis(Predicate<NamedInstruction>) Creates an effectful instruction analysis based on a predicate that tells if instructions are effectful. Declaration public EffectfulInstructionAnalysis(Predicate<NamedInstruction> isEffectful) Parameters Type Name Description System.Predicate < NamedInstruction > isEffectful A predicate that takes an instruction and tells if it is effectful or not. Properties | Improve this Doc View Source IsEffectful Tells if a particular instruction is effectful. Declaration public Predicate<NamedInstruction> IsEffectful { get; } Property Value Type Description System.Predicate < NamedInstruction > A predicate that takes an instruction and tells if it is effectful or not. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public EffectfulInstructions Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description EffectfulInstructions | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, EffectfulInstructions, IReadOnlyList<FlowGraphUpdate>) Declaration public EffectfulInstructions AnalyzeWithUpdates(FlowGraph graph, EffectfulInstructions previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph EffectfulInstructions previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description EffectfulInstructions Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.DominatorTreeAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.DominatorTreeAnalysis.html",
    "title": "Class DominatorTreeAnalysis | Flame",
    "keywords": "Class DominatorTreeAnalysis An analysis that computes dominator trees for control-flow graphs. Inheritance System.Object DominatorTreeAnalysis Implements IFlowGraphAnalysis < DominatorTree > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class DominatorTreeAnalysis : IFlowGraphAnalysis<DominatorTree> Fields | Improve this Doc View Source Instance An instance of the dominator tree analysis. Declaration public static readonly DominatorTreeAnalysis Instance Field Value Type Description DominatorTreeAnalysis An instance of the dominator tree analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public DominatorTree Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description DominatorTree | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, DominatorTree, IReadOnlyList<FlowGraphUpdate>) Declaration public DominatorTree AnalyzeWithUpdates(FlowGraph graph, DominatorTree previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph DominatorTree previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description DominatorTree Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.DominatorTree.html": {
    "href": "api/Flame.Compiler.Analysis.DominatorTree.html",
    "title": "Class DominatorTree | Flame",
    "keywords": "Class DominatorTree A data structure that describes the dominator tree of a control-flow graph. Inheritance System.Object DominatorTree Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class DominatorTree Methods | Improve this Doc View Source GetImmediateDominator(BasicBlockTag) Gets a block's immediate dominator, that is, the block that dominates this block such that there is no intermediate block that is dominated by the immediate dominator and also dominates the given block. Declaration public abstract BasicBlockTag GetImmediateDominator(BasicBlockTag block) Parameters Type Name Description BasicBlockTag block A block to find an immediate dominator for. Returns Type Description BasicBlockTag The tag of the immediate dominator block if it exists; otherwise, null . | Improve this Doc View Source IsDominatedBy(BasicBlockTag, BasicBlockTag) Tells if a particular block is dominated by another block, that is, if control cannot flow to the block unless it first flowed through the dominator block or if the blocks are equal. Declaration public bool IsDominatedBy(BasicBlockTag block, BasicBlockTag dominator) Parameters Type Name Description BasicBlockTag block A block that might be dominated by dominator . BasicBlockTag dominator A block that might dominate block . Returns Type Description System.Boolean true if block is strictly dominated by dominator or block equals dominator ; otherwise, false . | Improve this Doc View Source IsDominatedBy(InstructionBuilder, ValueTag) Tells if a particular value is dominated by another value, that is, if control cannot flow to the value unless it first flowed through the dominator value. Declaration public bool IsDominatedBy(InstructionBuilder value, ValueTag dominator) Parameters Type Name Description InstructionBuilder value A value that might be dominated by dominator . ValueTag dominator A value that might dominate value . Returns Type Description System.Boolean true if value is strictly dominated by dominator or value equals dominator ; otherwise, false . | Improve this Doc View Source IsDominatedBy(NamedInstruction, NamedInstruction) Tells if a particular instruction is dominated by another instruction, that is, if control cannot flow to the instruction unless it first flowed through the dominator instruction. Declaration public bool IsDominatedBy(NamedInstruction instruction, NamedInstruction dominator) Parameters Type Name Description NamedInstruction instruction An instruction that might be dominated by dominator . NamedInstruction dominator An instruction that might dominate instruction . Returns Type Description System.Boolean true if instruction is strictly dominated by dominator or instruction equals dominator ; otherwise, false . | Improve this Doc View Source IsDominatedBy(ValueTag, ValueTag, FlowGraph) Tells if a particular value is dominated by another value, that is, if control cannot flow to the value unless it first flowed through the dominator value. Declaration public bool IsDominatedBy(ValueTag value, ValueTag dominator, FlowGraph graph) Parameters Type Name Description ValueTag value A value that might be dominated by dominator . ValueTag dominator A value that might dominate value . FlowGraph graph A control-flow graph that defines both value and dominator . Returns Type Description System.Boolean true if value is strictly dominated by dominator or value equals dominator ; otherwise, false . | Improve this Doc View Source IsDominatedBy(ValueTag, ValueTag, FlowGraphBuilder) Tells if a particular value is dominated by another value, that is, if control cannot flow to the value unless it first flowed through the dominator value. Declaration public bool IsDominatedBy(ValueTag value, ValueTag dominator, FlowGraphBuilder graph) Parameters Type Name Description ValueTag value A value that might be dominated by dominator . ValueTag dominator A value that might dominate value . FlowGraphBuilder graph A control-flow graph that defines both value and dominator . Returns Type Description System.Boolean true if value is strictly dominated by dominator or value equals dominator ; otherwise, false . | Improve this Doc View Source IsStrictlyDominatedBy(BasicBlockTag, BasicBlockTag) Tells if a particular block is strictly dominated by another block, that is, if control cannot flow to the block unless it first flowed through the dominator block. Declaration public virtual bool IsStrictlyDominatedBy(BasicBlockTag block, BasicBlockTag dominator) Parameters Type Name Description BasicBlockTag block A block that might be dominated by dominator . BasicBlockTag dominator A block that might dominate block . Returns Type Description System.Boolean true if block is strictly dominated by dominator ; otherwise, false . | Improve this Doc View Source IsStrictlyDominatedBy(InstructionBuilder, ValueTag) Tells if a particular value is strictly dominated by another value, that is, if control cannot flow to the value unless it first flowed through the dominator value. Declaration public bool IsStrictlyDominatedBy(InstructionBuilder value, ValueTag dominator) Parameters Type Name Description InstructionBuilder value An value that might be dominated by dominator . ValueTag dominator An value that might dominate value . Returns Type Description System.Boolean true if value is strictly dominated by dominator ; otherwise, false . | Improve this Doc View Source IsStrictlyDominatedBy(NamedInstruction, NamedInstruction) Tells if a particular instruction is strictly dominated by another instruction, that is, if control cannot flow to the instruction unless it first flowed through the dominator instruction. Declaration public bool IsStrictlyDominatedBy(NamedInstruction instruction, NamedInstruction dominator) Parameters Type Name Description NamedInstruction instruction An instruction that might be dominated by dominator . NamedInstruction dominator An instruction that might dominate instruction . Returns Type Description System.Boolean true if instruction is strictly dominated by dominator ; otherwise, false . | Improve this Doc View Source IsStrictlyDominatedBy(ValueTag, ValueTag, FlowGraph) Tells if a particular value is strictly dominated by another value, that is, if control cannot flow to the value unless it first flowed through the dominator value. Declaration public bool IsStrictlyDominatedBy(ValueTag value, ValueTag dominator, FlowGraph graph) Parameters Type Name Description ValueTag value An value that might be dominated by dominator . ValueTag dominator An value that might dominate value . FlowGraph graph A graph that defines both values. Returns Type Description System.Boolean true if value is strictly dominated by dominator ; otherwise, false . | Improve this Doc View Source IsStrictlyDominatedBy(ValueTag, ValueTag, FlowGraphBuilder) Tells if a particular value is strictly dominated by another value, that is, if control cannot flow to the value unless it first flowed through the dominator value. Declaration public bool IsStrictlyDominatedBy(ValueTag value, ValueTag dominator, FlowGraphBuilder graph) Parameters Type Name Description ValueTag value An value that might be dominated by dominator . ValueTag dominator An value that might dominate value . FlowGraphBuilder graph A control-flow graph that defines both value and dominator . Returns Type Description System.Boolean true if value is strictly dominated by dominator ; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.DefaultAnalyses.html": {
    "href": "api/Flame.Compiler.Analysis.DefaultAnalyses.html",
    "title": "Class DefaultAnalyses | Flame",
    "keywords": "Class DefaultAnalyses Manages a collection of default control-flow graph analyses, which are used when no analysis is explicitly added to a graph. Inheritance System.Object DefaultAnalyses Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public static class DefaultAnalyses Methods | Improve this Doc View Source Register<T>(IFlowGraphAnalysis<T>) Registers a default analysis for a particular type of analysis result. Declaration public static void Register<T>(IFlowGraphAnalysis<T> analysis) Parameters Type Name Description IFlowGraphAnalysis <T> analysis The analysis to register. Type Parameters Name Description T The type of result produced by the analysis. | Improve this Doc View Source Register<T>(Func<FlowGraph, IFlowGraphAnalysis<T>>) Registers a function that creates a default analysis for a particular type of analysis result. Declaration public static void Register<T>(Func<FlowGraph, IFlowGraphAnalysis<T>> createAnalysis) Parameters Type Name Description System.Func < FlowGraph , IFlowGraphAnalysis <T>> createAnalysis A function that creates an analysis based on a control-flow graph. Type Parameters Name Description T The type of result produced by the analysis."
  },
  "api/Flame.Compiler.Analysis.ConstantAnalysis-1.html": {
    "href": "api/Flame.Compiler.Analysis.ConstantAnalysis-1.html",
    "title": "Class ConstantAnalysis<T> | Flame",
    "keywords": "Class ConstantAnalysis<T> An analysis that always returns the same result. This kind of analysis is particularly useful for adding metadata to flow graphs that encode a (user-specified) configuration, such as the exception delayability policy. Inheritance System.Object ConstantAnalysis<T> Implements IFlowGraphAnalysis <T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class ConstantAnalysis<T> : IFlowGraphAnalysis<T> Type Parameters Name Description T The type of result returned by the analysis. Constructors | Improve this Doc View Source ConstantAnalysis(T) Creates an analysis that returns a constant result. Declaration public ConstantAnalysis(T result) Parameters Type Name Description T result The constant result returned by the analysis. Properties | Improve this Doc View Source Result Gets the result that is returned when this analysis is coaxed into \"analyzing\" a flow graph. Declaration public T Result { get; } Property Value Type Description T Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public T Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description T | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, T, IReadOnlyList<FlowGraphUpdate>) Declaration public T AnalyzeWithUpdates(FlowGraph graph, T previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph T previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description T Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.ConservativeInstructionOrderingAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.ConservativeInstructionOrderingAnalysis.html",
    "title": "Class ConservativeInstructionOrderingAnalysis | Flame",
    "keywords": "Class ConservativeInstructionOrderingAnalysis A conservative analysis that determines the must-run-before relation between instructions. The must-run-before relation is determined by imposing a total ordering on effectful instructions. Inheritance System.Object ConservativeInstructionOrderingAnalysis Implements IFlowGraphAnalysis < InstructionOrdering > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class ConservativeInstructionOrderingAnalysis : IFlowGraphAnalysis<InstructionOrdering> Fields | Improve this Doc View Source Instance Gets an instance of the conservative instruction ordering analysis. Declaration public static readonly ConservativeInstructionOrderingAnalysis Instance Field Value Type Description ConservativeInstructionOrderingAnalysis An instance of the conservative instruction ordering analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public InstructionOrdering Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description InstructionOrdering | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, InstructionOrdering, IReadOnlyList<FlowGraphUpdate>) Declaration public InstructionOrdering AnalyzeWithUpdates(FlowGraph graph, InstructionOrdering previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph InstructionOrdering previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description InstructionOrdering Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.BlockReachability.html": {
    "href": "api/Flame.Compiler.Analysis.BlockReachability.html",
    "title": "Class BlockReachability | Flame",
    "keywords": "Class BlockReachability A description of which blocks can reach other blocks in a control-flow graph. Inheritance System.Object BlockReachability LazyBlockReachability Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class BlockReachability Methods | Improve this Doc View Source GetStrictlyReachableBlocks(BasicBlockTag) Gets the set of all basic blocks that are strictly reachable from a particular basic block. Declaration public abstract IEnumerable<BasicBlockTag> GetStrictlyReachableBlocks(BasicBlockTag source) Parameters Type Name Description BasicBlockTag source The source block to start at. Returns Type Description System.Collections.Generic.IEnumerable < BasicBlockTag > A set of basic block tags referring to basic blocks that are reachable from source . | Improve this Doc View Source IsReachableFrom(BasicBlockTag, BasicBlockTag) Tests if there exists a (possibly empty) path through the control-flow graph that starts at source and ends at target . Declaration public bool IsReachableFrom(BasicBlockTag source, BasicBlockTag target) Parameters Type Name Description BasicBlockTag source The block tag of the start of the path. BasicBlockTag target The block tag of the end of the path. Returns Type Description System.Boolean true if there is such a path; otherwise, false . | Improve this Doc View Source IsStrictlyReachableFrom(BasicBlockTag, BasicBlockTag) Tests if there exists a nonempty path through the control-flow graph that starts at source and ends at target . Declaration public abstract bool IsStrictlyReachableFrom(BasicBlockTag source, BasicBlockTag target) Parameters Type Name Description BasicBlockTag source The block tag of the start of the path. BasicBlockTag target The block tag of the end of the path. Returns Type Description System.Boolean true if there is such a path; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.BlockLiveness.html": {
    "href": "api/Flame.Compiler.Analysis.BlockLiveness.html",
    "title": "Class BlockLiveness | Flame",
    "keywords": "Class BlockLiveness Contains value liveness data for a single block. Inheritance System.Object BlockLiveness Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class BlockLiveness Fields | Improve this Doc View Source ImportIndex The index of imported values in the virtual instruction list. Declaration public const int ImportIndex = -2 Field Value Type Description System.Int32 | Improve this Doc View Source ParameterIndex The index of parameters in the virtual instruction list. Declaration public const int ParameterIndex = -1 Field Value Type Description System.Int32 Properties | Improve this Doc View Source ExportIndex The index of exported values in the virtual instruction list. Declaration public int ExportIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Imports Gets this block's sequence of imported values. Declaration public IEnumerable<ValueTag> Imports { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ValueTag > A sequence of imported values. Methods | Improve this Doc View Source GetLiveValuesByIndex() Gets a mapping of virtual instruction indices to the values that are live at those indices. Declaration public IReadOnlyDictionary<int, ImmutableHashSet<ValueTag>> GetLiveValuesByIndex() Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int32 , System.Collections.Immutable.ImmutableHashSet < ValueTag >> A mapping of virtual instruction indices to live values. | Improve this Doc View Source IsDefined(ValueTag) Tells if a value is directly defined by this block. Declaration public bool IsDefined(ValueTag value) Parameters Type Name Description ValueTag value The value that may or may not be defined. Returns Type Description System.Boolean true if the value is defined by this block; otherwise, false . | Improve this Doc View Source IsDefinedOrImported(ValueTag) Tells if a value is either defined or imported by this block. Declaration public bool IsDefinedOrImported(ValueTag value) Parameters Type Name Description ValueTag value The value that may or may not be defined or imported by this block. Returns Type Description System.Boolean true if the value is defined or imported; otherwise, false . | Improve this Doc View Source IsImported(ValueTag) Tells if a value is imported by this block. Declaration public bool IsImported(ValueTag value) Parameters Type Name Description ValueTag value The value that may or may not be imported. Returns Type Description System.Boolean true if the value is imported; otherwise, false . | Improve this Doc View Source IsLiveAt(ValueTag, Int32) Tells if a value is live right after a particular instruction in this block. Declaration public bool IsLiveAt(ValueTag value, int index) Parameters Type Name Description ValueTag value The value whose liveness is to be queried. System.Int32 index An index into the instruction list that defines the point at which the value's liveness is queried. Returns Type Description System.Boolean true if value is live right after index ; otherwise, false ."
  },
  "api/Flame.Collections.html": {
    "href": "api/Flame.Collections.html",
    "title": "Namespace Flame.Collections | Flame",
    "keywords": "Namespace Flame.Collections Classes BetternessExtensions Extension methods related to the BetterResult enum. Cache<TKey, TValue> A base class for cache data structures. EmptyArray<T> Exposes an empty array. EnumerableComparer An element-wise equality comparer for sequences of values. EnumerableComparer<T> An element-wise equality comparer for sequences of values. ImmutableOrderedDictionary An immutable dictionary that iterates over elements in the order they were added. ImmutableOrderedDictionary<TKey, TValue>.Builder A mutable wrapper around an immutable ordered dictionary. Index<TContainer, TKey, TValue> A data structure that memoizes lookups by key in a data structure. InterningCache<T> A cache that interns values: it maps each input value to a value that is structurally equal to the input and all structurally equal input values are mapped to the same output value as long as that output value is live. LruCache<TKey, TValue> A cache implementation that uses the least recently used (LRU) policy to evict stale key-value pairs. MappedComparer<T1, T2> An equality comparer that applies a mapping to elements before comparing them. ReadOnlyListExtensions Extensions that make manipulating read-only lists easier. SmallMultiDictionary<TKey, TValue> A small, memory-friendly and cache-friendly dictionary with O(n) asymptotic complexity for all operations. StronglyConnectedComponents Defines algorithms that compute strongly connected components. SymmetricRelation<T> Describes a symmetric relation between values: a set of two-element sets. TreeSearchAlgorithm<TInternalNode, TLeafNode> A base class for algorithms that search trees. UniqueNameMap<T> Generates a unique name for every value that is given to it. Generated names are stored. Requesting a name for the same object more than once always results in the same unique name. UniqueNameSet<T> Generates a unique name for every value it is passed. Generated names are stored, but not associated with the object they originated from: generating a name for the same object twice will always result in two different unique names. The resulting name will never be null or empty. WeakCache<TKey, TValue> A cache that maps keys to values for as long as neither the key nor the value of a key-value pair is garbage-collected. Weak caches do not prevent keys or values from being garbage-collected. Structs DeferredInitializer A type of object that guarantees thread-safe, on-demand initialization. An initialization action is only executed once. ImmutableOrderedDictionary<TKey, TValue> An immutable dictionary that iterates over elements in the order they were added. ReadOnlySlice<T> A slice of a read-only list. ValueList<T> A growable list that is implemented as a value type. This type is mainly intended for use by other collection types, and is not a drop-in replacement for System.Collections.Generic.List. Enums Betterness Specifies if one of two items is better than the other."
  },
  "api/Flame.Collections.WeakCache-2.html": {
    "href": "api/Flame.Collections.WeakCache-2.html",
    "title": "Class WeakCache<TKey, TValue> | Flame",
    "keywords": "Class WeakCache<TKey, TValue> A cache that maps keys to values for as long as neither the key nor the value of a key-value pair is garbage-collected. Weak caches do not prevent keys or values from being garbage-collected. Inheritance System.Object Cache <TKey, TValue> WeakCache<TKey, TValue> Inherited Members Cache<TKey, TValue>.Insert(TKey, TValue) Cache<TKey, TValue>.TryGet(TKey, TValue) Cache<TKey, TValue>.Get(TKey, Func<TKey, TValue>) Cache<TKey, TValue>.ContainsKey(TKey) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class WeakCache<TKey, TValue> : Cache<TKey, TValue> where TKey : class where TValue : class Type Parameters Name Description TKey TValue Remarks Public instance methods of this class are thread-safe. Constructors | Improve this Doc View Source WeakCache() Creates a weak cache. Declaration public WeakCache() | Improve this Doc View Source WeakCache(IEqualityComparer<TKey>) Creates a weak cache that uses a particular key comparer under the hood. Declaration public WeakCache(IEqualityComparer<TKey> keyComparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <TKey> keyComparer A key comparer. | Improve this Doc View Source WeakCache(IEqualityComparer<TKey>, Int32) Creates a weak cache that uses a particular key comparer under the hood and can be accessed by up to maxConcurrency threads simultaneously (under ideal circumstances). Declaration public WeakCache(IEqualityComparer<TKey> keyComparer, int maxConcurrency) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <TKey> keyComparer A key comparer. System.Int32 maxConcurrency The maximum number of threads that can access the weak cache simultaneously under optimal circumstances. Methods | Improve this Doc View Source Cleanup() Explictly cleans up all outdated keys in the weak cache. Declaration public void Cleanup() | Improve this Doc View Source Get(TKey, Func<TKey, TValue>) Declaration public override TValue Get(TKey key, Func<TKey, TValue> createValue) Parameters Type Name Description TKey key System.Func <TKey, TValue> createValue Returns Type Description TValue Overrides Flame.Collections.Cache<TKey, TValue>.Get(TKey, System.Func<TKey, TValue>) | Improve this Doc View Source Insert(TKey, TValue) Declaration public override sealed void Insert(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Overrides Flame.Collections.Cache<TKey, TValue>.Insert(TKey, TValue) | Improve this Doc View Source TryGet(TKey, out TValue) Declaration public override sealed bool TryGet(TKey key, out TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description System.Boolean Overrides Flame.Collections.Cache<TKey, TValue>.TryGet(TKey, TValue)"
  },
  "api/Flame.Clr.ReferenceResolver.html": {
    "href": "api/Flame.Clr.ReferenceResolver.html",
    "title": "Class ReferenceResolver | Flame",
    "keywords": "Class ReferenceResolver A data structure that resolves IL references as Flame members. Inheritance System.Object ReferenceResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ReferenceResolver Constructors | Improve this Doc View Source ReferenceResolver(AssemblyResolver, TypeEnvironment) Creates a reference resolver. Declaration public ReferenceResolver(AssemblyResolver resolver, TypeEnvironment typeEnvironment) Parameters Type Name Description AssemblyResolver resolver The assembly resolver to use. TypeEnvironment typeEnvironment The reference resolver's type environment. Properties | Improve this Doc View Source AssemblyResolver Gets the assembly resolver used by this object. Declaration public AssemblyResolver AssemblyResolver { get; } Property Value Type Description AssemblyResolver An assembly resolver. | Improve this Doc View Source TypeEnvironment Gets the type environment for this reference resolver. Declaration public TypeEnvironment TypeEnvironment { get; } Property Value Type Description TypeEnvironment The type environment. Methods | Improve this Doc View Source Resolve(AssemblyNameReference) Resolves an assembly name reference as an assembly. Declaration public IAssembly Resolve(AssemblyNameReference assemblyRef) Parameters Type Name Description Mono.Cecil.AssemblyNameReference assemblyRef An assembly name reference to resolve. Returns Type Description IAssembly The assembly referenced by assemblyRef ."
  },
  "api/Flame.Clr.NameConversion.html": {
    "href": "api/Flame.Clr.NameConversion.html",
    "title": "Class NameConversion | Flame",
    "keywords": "Class NameConversion A collection of functions that help convert back and forth between Flame names and IL names. Inheritance System.Object NameConversion Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public static class NameConversion Methods | Improve this Doc View Source ParseNamespace(String) Parses an IL namespace as a Flame qualified name. Declaration public static QualifiedName ParseNamespace(string ns) Parameters Type Name Description System.String ns The namespace to parse. Returns Type Description QualifiedName A qualified name. | Improve this Doc View Source ParseSimpleName(String) Parses an IL name as a Flame simple name. Declaration public static SimpleName ParseSimpleName(string name) Parameters Type Name Description System.String name The name to parse. Returns Type Description SimpleName A simple name."
  },
  "api/Flame.Clr.Emit.CilStoreRegisterInstruction.html": {
    "href": "api/Flame.Clr.Emit.CilStoreRegisterInstruction.html",
    "title": "Class CilStoreRegisterInstruction | Flame",
    "keywords": "Class CilStoreRegisterInstruction An instruction that writes to a virtual register. Inheritance System.Object CilCodegenInstruction CilStoreRegisterInstruction Inherited Members CilCodegenInstruction.Traversal CilCodegenInstruction.Children System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilStoreRegisterInstruction : CilCodegenInstruction Constructors | Improve this Doc View Source CilStoreRegisterInstruction(ValueTag) Creates an instruction that writes to a virtual register. Declaration public CilStoreRegisterInstruction(ValueTag value) Parameters Type Name Description ValueTag value The value to write to. Properties | Improve this Doc View Source Value Gets the value written to by this instruction. Declaration public ValueTag Value { get; } Property Value Type Description ValueTag A value tag."
  },
  "api/Flame.Clr.Emit.CilRegisterAllocator.html": {
    "href": "api/Flame.Clr.Emit.CilRegisterAllocator.html",
    "title": "Class CilRegisterAllocator | Flame",
    "keywords": "Class CilRegisterAllocator A register allocator for the CIL backend. Inheritance System.Object GreedyRegisterAllocator < CilCodegenRegister > CilRegisterAllocator Implements IFlowGraphAnalysis < RegisterAllocation < CilCodegenRegister >> Inherited Members GreedyRegisterAllocator<CilCodegenRegister>.Analyze(FlowGraph) GreedyRegisterAllocator<CilCodegenRegister>.AnalyzeWithUpdates(FlowGraph, RegisterAllocation<CilCodegenRegister>, IReadOnlyList<FlowGraphUpdate>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilRegisterAllocator : GreedyRegisterAllocator<CilCodegenRegister>, IFlowGraphAnalysis<RegisterAllocation<CilCodegenRegister>> Constructors | Improve this Doc View Source CilRegisterAllocator(HashSet<ValueTag>, Dictionary<ValueTag, ParameterDefinition>, ModuleDefinition) Creates a CIL register allocator that will only allocate registers to a particular set of values. Declaration public CilRegisterAllocator(HashSet<ValueTag> usedValues, Dictionary<ValueTag, ParameterDefinition> paramRegisters, ModuleDefinition module) Parameters Type Name Description System.Collections.Generic.HashSet < ValueTag > usedValues The values to allocate registers to. System.Collections.Generic.Dictionary < ValueTag , Mono.Cecil.ParameterDefinition > paramRegisters The registers assigned to the method's parameters. Mono.Cecil.ModuleDefinition module The module to use for importing CLR types. Methods | Improve this Doc View Source CreateRegister(IType) Declaration protected override CilCodegenRegister CreateRegister(IType type) Parameters Type Name Description IType type Returns Type Description CilCodegenRegister Overrides Flame.Compiler.Analysis.GreedyRegisterAllocator<Flame.Clr.Emit.CilCodegenRegister>.CreateRegister(Flame.IType) | Improve this Doc View Source RequiresRegister(ValueTag, FlowGraph) Declaration protected override bool RequiresRegister(ValueTag value, FlowGraph graph) Parameters Type Name Description ValueTag value FlowGraph graph Returns Type Description System.Boolean Overrides Flame.Compiler.Analysis.GreedyRegisterAllocator<Flame.Clr.Emit.CilCodegenRegister>.RequiresRegister(Flame.Compiler.ValueTag, Flame.Compiler.FlowGraph) | Improve this Doc View Source TryGetPreallocatedRegister(ValueTag, FlowGraph, out CilCodegenRegister) Declaration protected override bool TryGetPreallocatedRegister(ValueTag value, FlowGraph graph, out CilCodegenRegister register) Parameters Type Name Description ValueTag value FlowGraph graph CilCodegenRegister register Returns Type Description System.Boolean Overrides Flame.Compiler.Analysis.GreedyRegisterAllocator<Flame.Clr.Emit.CilCodegenRegister>.TryGetPreallocatedRegister(Flame.Compiler.ValueTag, Flame.Compiler.FlowGraph, Flame.Clr.Emit.CilCodegenRegister) | Improve this Doc View Source TryRecycleRegister(IType, IEnumerable<CilCodegenRegister>, out CilCodegenRegister) Declaration protected override bool TryRecycleRegister(IType type, IEnumerable<CilCodegenRegister> registers, out CilCodegenRegister result) Parameters Type Name Description IType type System.Collections.Generic.IEnumerable < CilCodegenRegister > registers CilCodegenRegister result Returns Type Description System.Boolean Overrides Flame.Compiler.Analysis.GreedyRegisterAllocator<Flame.Clr.Emit.CilCodegenRegister>.TryRecycleRegister(Flame.IType, System.Collections.Generic.IEnumerable<Flame.Clr.Emit.CilCodegenRegister>, Flame.Clr.Emit.CilCodegenRegister) Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Clr.Emit.CilMarkTargetInstruction.html": {
    "href": "api/Flame.Clr.Emit.CilMarkTargetInstruction.html",
    "title": "Class CilMarkTargetInstruction | Flame",
    "keywords": "Class CilMarkTargetInstruction An instruction that marks an instruction as a branch target. Inheritance System.Object CilCodegenInstruction CilMarkTargetInstruction Inherited Members CilCodegenInstruction.Traversal CilCodegenInstruction.Children System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilMarkTargetInstruction : CilCodegenInstruction Constructors | Improve this Doc View Source CilMarkTargetInstruction(BasicBlockTag) Creates an instruction that marks a branch target. Declaration public CilMarkTargetInstruction(BasicBlockTag target) Parameters Type Name Description BasicBlockTag target The branch target to mark. Properties | Improve this Doc View Source Target Gets the tag marked by this instruction. Declaration public BasicBlockTag Target { get; } Property Value Type Description BasicBlockTag A basic block tag."
  },
  "api/Flame.Clr.Emit.CilLoadRegisterInstruction.html": {
    "href": "api/Flame.Clr.Emit.CilLoadRegisterInstruction.html",
    "title": "Class CilLoadRegisterInstruction | Flame",
    "keywords": "Class CilLoadRegisterInstruction An instruction that reads from a virtual register. Inheritance System.Object CilCodegenInstruction CilLoadRegisterInstruction Inherited Members CilCodegenInstruction.Traversal CilCodegenInstruction.Children System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilLoadRegisterInstruction : CilCodegenInstruction Constructors | Improve this Doc View Source CilLoadRegisterInstruction(ValueTag) Creates an instruction that reads from a virtual register. Declaration public CilLoadRegisterInstruction(ValueTag value) Parameters Type Name Description ValueTag value The value to load. Properties | Improve this Doc View Source Value Gets the value loaded by this instruction. Declaration public ValueTag Value { get; } Property Value Type Description ValueTag A value tag."
  },
  "api/Flame.Clr.Emit.CilCodegenRegister.html": {
    "href": "api/Flame.Clr.Emit.CilCodegenRegister.html",
    "title": "Struct CilCodegenRegister | Flame",
    "keywords": "Struct CilCodegenRegister A register as produced by the CIL register allocator. Implements System.IEquatable < CilCodegenRegister > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public struct CilCodegenRegister : IEquatable<CilCodegenRegister> Constructors | Improve this Doc View Source CilCodegenRegister(VariableDefinition, IType) Creates a register from a variable definition. Declaration public CilCodegenRegister(VariableDefinition variable, IType type) Parameters Type Name Description Mono.Cecil.Cil.VariableDefinition variable A variable definition. IType type The register's type. | Improve this Doc View Source CilCodegenRegister(ParameterDefinition, IType) Creates a register from a parameter definition. Declaration public CilCodegenRegister(ParameterDefinition parameter, IType type) Parameters Type Name Description Mono.Cecil.ParameterDefinition parameter A parameter definition. IType type The register's type. Properties | Improve this Doc View Source IsParameter Declaration public bool IsParameter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVariable Declaration public bool IsVariable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ParameterOrNull Declaration public ParameterDefinition ParameterOrNull { get; } Property Value Type Description Mono.Cecil.ParameterDefinition | Improve this Doc View Source Type Declaration public IType Type { get; } Property Value Type Description IType | Improve this Doc View Source VariableOrNull Declaration public VariableDefinition VariableOrNull { get; } Property Value Type Description Mono.Cecil.Cil.VariableDefinition Methods | Improve this Doc View Source Equals(CilCodegenRegister) Declaration public bool Equals(CilCodegenRegister other) Parameters Type Name Description CilCodegenRegister other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Implements System.IEquatable<T>"
  },
  "api/Flame.Clr.Emit.CilCodegenInstruction.html": {
    "href": "api/Flame.Clr.Emit.CilCodegenInstruction.html",
    "title": "Class CilCodegenInstruction | Flame",
    "keywords": "Class CilCodegenInstruction An instruction type for CIL instruction selection. Inheritance System.Object CilCodegenInstruction CilAddressOfRegisterInstruction CilExceptionHandlerInstruction CilLoadRegisterInstruction CilMarkTargetInstruction CilOpInstruction CilStoreRegisterInstruction Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public abstract class CilCodegenInstruction Properties | Improve this Doc View Source Children Gets this CIL codegen instruction's immediate children. Declaration public virtual IEnumerable<CilCodegenInstruction> Children { get; } Property Value Type Description System.Collections.Generic.IEnumerable < CilCodegenInstruction > A sequence of child instructions. | Improve this Doc View Source Traversal Gets a sequence that represents a preorder traversal of this CIL instruction and all of its children, immediate or otherwise. Declaration public IEnumerable<CilCodegenInstruction> Traversal { get; } Property Value Type Description System.Collections.Generic.IEnumerable < CilCodegenInstruction > A pre-order traversal."
  },
  "api/Flame.Clr.ClrTypeDefinition.html": {
    "href": "api/Flame.Clr.ClrTypeDefinition.html",
    "title": "Class ClrTypeDefinition | Flame",
    "keywords": "Class ClrTypeDefinition A Flame type that wraps an IL type definition. Inheritance System.Object ClrTypeDefinition Implements IType IGenericMember IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrTypeDefinition : IType, IGenericMember, IMember Constructors | Improve this Doc View Source ClrTypeDefinition(TypeDefinition, ClrAssembly) Creates a Flame type that wraps a particular type definition. Declaration public ClrTypeDefinition(TypeDefinition definition, ClrAssembly assembly) Parameters Type Name Description Mono.Cecil.TypeDefinition definition The definition to wrap. ClrAssembly assembly The assembly that directly defines this type. | Improve this Doc View Source ClrTypeDefinition(TypeDefinition, ClrTypeDefinition) Creates a Flame type that wraps a particular nested type definition. Declaration public ClrTypeDefinition(TypeDefinition definition, ClrTypeDefinition parentType) Parameters Type Name Description Mono.Cecil.TypeDefinition definition The definition to wrap. ClrTypeDefinition parentType The type that directly defines this type. Properties | Improve this Doc View Source Assembly Gets the assembly that directly or indirectly defines this type. Declaration public ClrAssembly Assembly { get; } Property Value Type Description ClrAssembly The assembly. | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Definition Gets the type definition this type is based on. Declaration public TypeDefinition Definition { get; } Property Value Type Description Mono.Cecil.TypeDefinition The type definition. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IType IGenericMember IMember"
  },
  "api/Flame.Clr.ClrSubtypingRules.html": {
    "href": "api/Flame.Clr.ClrSubtypingRules.html",
    "title": "Class ClrSubtypingRules | Flame",
    "keywords": "Class ClrSubtypingRules Subtyping rules for the CLR's type system. Inheritance System.Object SubtypingRules ClrSubtypingRules Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrSubtypingRules : SubtypingRules Fields | Improve this Doc View Source Instance An instance of the CLR subtyping rules. Declaration public static readonly ClrSubtypingRules Instance Field Value Type Description ClrSubtypingRules Methods | Improve this Doc View Source IsSubtypeOf(IType, IType) Tells if a type is a subtype of another type. Declaration public override ImpreciseBoolean IsSubtypeOf(IType subtype, IType supertype) Parameters Type Name Description IType subtype The type to test for subtype-ness. IType supertype The type to test subtype against for subtype-ness. Returns Type Description ImpreciseBoolean ImpreciseBoolean.True if subtype is definitely a subtype of supertype ; ImpreciseBoolean.False if subtype is definitely not a subtype of supertype ; otherwise, ImpreciseBoolean.Maybe . Overrides SubtypingRules.IsSubtypeOf(IType, IType)"
  },
  "api/Flame.Clr.ClrPropertySignature.html": {
    "href": "api/Flame.Clr.ClrPropertySignature.html",
    "title": "Struct ClrPropertySignature | Flame",
    "keywords": "Struct ClrPropertySignature A data structure that represents the parts of an IL property signature that are relevant to property reference resolution. Implements System.IEquatable < ClrPropertySignature > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public struct ClrPropertySignature : IEquatable<ClrPropertySignature> Properties | Improve this Doc View Source IndexerParameterTypes Gets the parameter types of the property signature. Declaration public ImmutableArray<IType> IndexerParameterTypes { get; } Property Value Type Description System.Collections.Immutable.ImmutableArray < IType > The parameter types. | Improve this Doc View Source Name Gets the name of the property signature. Declaration public string Name { get; } Property Value Type Description System.String The property signature's name. | Improve this Doc View Source PropertyType Gets the return type of the property signature. Declaration public IType PropertyType { get; } Property Value Type Description IType The return type. Methods | Improve this Doc View Source Create(IProperty) Creates a property signature for a property. Declaration public static ClrPropertySignature Create(IProperty property) Parameters Type Name Description IProperty property The property to describe using a signature. Returns Type Description ClrPropertySignature A property signature. | Improve this Doc View Source Create(String, IType, ImmutableArray<IType>) Creates a property signature from a property's name, its property type and its indexer parameter types. Declaration public static ClrPropertySignature Create(string name, IType propertyType, ImmutableArray<IType> indexerParameterTypes) Parameters Type Name Description System.String name The name of the property signature. IType propertyType The return type of the property signature. System.Collections.Immutable.ImmutableArray < IType > indexerParameterTypes The types of the property signature's indexer parameters. Returns Type Description ClrPropertySignature A property signature. | Improve this Doc View Source Equals(ClrPropertySignature) Tests if this property signature equals another property signature. Declaration public bool Equals(ClrPropertySignature other) Parameters Type Name Description ClrPropertySignature other The signature to compare this one to. Returns Type Description System.Boolean true if the signatures are the same; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Implements System.IEquatable<T>"
  },
  "api/Flame.Clr.ClrGenericParameter.html": {
    "href": "api/Flame.Clr.ClrGenericParameter.html",
    "title": "Class ClrGenericParameter | Flame",
    "keywords": "Class ClrGenericParameter A Flame type that wraps an IL generic parameter. Inheritance System.Object ClrGenericParameter Implements IGenericParameter IType IGenericMember IMember Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrGenericParameter : IGenericParameter, IType, IGenericMember, IMember Constructors | Improve this Doc View Source ClrGenericParameter(GenericParameter, ClrMethodDefinition) Creates a Flame type definition that wraps around an IL generic parameter. Declaration public ClrGenericParameter(GenericParameter definition, ClrMethodDefinition parentMethod) Parameters Type Name Description Mono.Cecil.GenericParameter definition The IL type definition to wrap. ClrMethodDefinition parentMethod The parent method that defines the generic parameter. | Improve this Doc View Source ClrGenericParameter(GenericParameter, ClrTypeDefinition) Creates a Flame type definition that wraps around an IL generic parameter. Declaration public ClrGenericParameter(GenericParameter definition, ClrTypeDefinition parentType) Parameters Type Name Description Mono.Cecil.GenericParameter definition The IL type definition to wrap. ClrTypeDefinition parentType The parent type that defines the generic parameter. Properties | Improve this Doc View Source Assembly Gets the assembly that directly or indirectly defines this type. Declaration public ClrAssembly Assembly { get; } Property Value Type Description ClrAssembly The assembly. | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseTypes Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > | Improve this Doc View Source Definition Gets the generic parameter this type is based on. Declaration public GenericParameter Definition { get; } Property Value Type Description Mono.Cecil.GenericParameter The generic parameter. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source ParentMember Gets the generic member that defines this generic parameter. Declaration public IGenericMember ParentMember { get; } Property Value Type Description IGenericMember | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Implements IGenericParameter IType IGenericMember IMember"
  },
  "api/Flame.Clr.ClrArrayType.html": {
    "href": "api/Flame.Clr.ClrArrayType.html",
    "title": "Class ClrArrayType | Flame",
    "keywords": "Class ClrArrayType An IL array type of a particular rank. Inheritance System.Object ClrArrayType Implements IType IGenericMember IMember Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrArrayType : IType, IGenericMember, IMember Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. | Improve this Doc View Source Rank Gets the rank of this array type. Declaration public int Rank { get; } Property Value Type Description System.Int32 The array type's rank. Methods | Improve this Doc View Source IsArrayType(IType) Determines if a type is a CLR array type. Declaration public static bool IsArrayType(IType type) Parameters Type Name Description IType type A type to examine. Returns Type Description System.Boolean true if type is an array type; otherwise, false . | Improve this Doc View Source TryGetArrayElementType(IType, out IType) Gets a CLR array type's element type, provided that a CLR array type was indeed provided. Declaration public static bool TryGetArrayElementType(IType arrayType, out IType elementType) Parameters Type Name Description IType arrayType The type to inspect, which might be a CLR array type. IType elementType An output value that is set to the type of element stored in the array, provided that arrayType is a CLR array type. Returns Type Description System.Boolean true if arrayType is a CLR array type; otherwise, false . | Improve this Doc View Source TryGetArrayRank(IType, out Int32) Gets a CLR array type's rank, provided that a CLR array type was indeed provided. Declaration public static bool TryGetArrayRank(IType arrayType, out int rank) Parameters Type Name Description IType arrayType The type to inspect, which might be a CLR array type. System.Int32 rank An output value that is set to the array type's rank, provided that arrayType is a CLR array type. Returns Type Description System.Boolean true if arrayType is a CLR array type; otherwise, false . Implements IType IGenericMember IMember"
  },
  "api/Flame.Clr.CecilAssemblyResolver.html": {
    "href": "api/Flame.Clr.CecilAssemblyResolver.html",
    "title": "Class CecilAssemblyResolver | Flame",
    "keywords": "Class CecilAssemblyResolver An assembly resolver implementation that forwards assembly resolution requests to Mono.Cecil assembly resolver. Inheritance System.Object AssemblyResolver CecilAssemblyResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class CecilAssemblyResolver : AssemblyResolver Constructors | Improve this Doc View Source CecilAssemblyResolver(IAssemblyResolver, TypeEnvironment) Creates a Flame assembly resolver that forwards requests to a Mono.Cecil assembly resolver. Declaration public CecilAssemblyResolver(IAssemblyResolver resolver, TypeEnvironment typeEnvironment) Parameters Type Name Description Mono.Cecil.IAssemblyResolver resolver The Mono.Cecil assembly resolver to use. TypeEnvironment typeEnvironment The Flame type environment to use when analyzing assemblies. | Improve this Doc View Source CecilAssemblyResolver(IAssemblyResolver, TypeEnvironment, ReaderParameters) Creates a Flame assembly resolver that forwards requests to a Mono.Cecil assembly resolver. Declaration public CecilAssemblyResolver(IAssemblyResolver resolver, TypeEnvironment typeEnvironment, ReaderParameters parameters) Parameters Type Name Description Mono.Cecil.IAssemblyResolver resolver The Mono.Cecil assembly resolver to use. TypeEnvironment typeEnvironment The Flame type environment to use when analyzing assemblies. Mono.Cecil.ReaderParameters parameters The Mono.Cecil reader parameters to use. Properties | Improve this Doc View Source Parameters Gets the Mono.Cecil reader parameters to use. Declaration public ReaderParameters Parameters { get; } Property Value Type Description Mono.Cecil.ReaderParameters | Improve this Doc View Source ReferenceResolver Gets the Flame reference resolver for this assembly resolver. Declaration public ReferenceResolver ReferenceResolver { get; } Property Value Type Description ReferenceResolver | Improve this Doc View Source Resolver Gets the Mono.Cecil assembly resolver to which requests are forwarded. Declaration public IAssemblyResolver Resolver { get; } Property Value Type Description Mono.Cecil.IAssemblyResolver | Improve this Doc View Source TypeEnvironment Gets the Flame type environment to use when analyzing assemblies. Declaration public TypeEnvironment TypeEnvironment { get; } Property Value Type Description TypeEnvironment Methods | Improve this Doc View Source TryResolve(AssemblyIdentity, out IAssembly) Tries to resolve an assembly based on an identity. Declaration public override bool TryResolve(AssemblyIdentity identity, out IAssembly assembly) Parameters Type Name Description AssemblyIdentity identity An assembly identity that references the assembly to resolve. IAssembly assembly The assembly that is referenced by assembly . Returns Type Description System.Boolean true if a match could be found for assembly ; otherwise, false . Overrides AssemblyResolver.TryResolve(AssemblyIdentity, out IAssembly)"
  },
  "api/Flame.Clr.Analysis.ClrInstructionSimplifier.html": {
    "href": "api/Flame.Clr.Analysis.ClrInstructionSimplifier.html",
    "title": "Class ClrInstructionSimplifier | Flame",
    "keywords": "Class ClrInstructionSimplifier Simplifies CIL instructions by rewriting them. Inheritance System.Object ClrInstructionSimplifier Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Analysis Assembly : Flame.Clr.dll Syntax public static class ClrInstructionSimplifier Methods | Improve this Doc View Source GetParameter(MethodBody, Int32) Gets the parameter at index index of a method body. Declaration public static ParameterDefinition GetParameter(this MethodBody self, int index) Parameters Type Name Description Mono.Cecil.Cil.MethodBody self The method body to inspect. System.Int32 index The index of the parameter to retrieve. Returns Type Description Mono.Cecil.ParameterDefinition A parameter definition. | Improve this Doc View Source TrySimplify(Instruction, MethodBody, out IEnumerable<Instruction>) Tries to \"simplify\" an instruction by decomposing it into its parts. Declaration public static bool TrySimplify(Instruction instruction, MethodBody body, out IEnumerable<Instruction> simplified) Parameters Type Name Description Mono.Cecil.Cil.Instruction instruction The instruction to simplify. Mono.Cecil.Cil.MethodBody body The method body that defines the instruction. System.Collections.Generic.IEnumerable < Mono.Cecil.Cil.Instruction > simplified The simplified instruction. Returns Type Description System.Boolean true if the instruction can be simplified; otherwise, false ."
  },
  "api/Flame.Clr.Analysis.CilFinallyHandler.html": {
    "href": "api/Flame.Clr.Analysis.CilFinallyHandler.html",
    "title": "Class CilFinallyHandler | Flame",
    "keywords": "Class CilFinallyHandler A CIL exception handler that has typical 'finally' behavior: it intercepts 'leave' branches. Inheritance System.Object CilExceptionHandler CilFinallyHandler Inherited Members CilExceptionHandler.IsCatchAll System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Analysis Assembly : Flame.Clr.dll Syntax public sealed class CilFinallyHandler : CilExceptionHandler Constructors | Improve this Doc View Source CilFinallyHandler(BasicBlockTag, BasicBlockTag) Declaration public CilFinallyHandler(BasicBlockTag landingPad, BasicBlockTag leavePad) Parameters Type Name Description BasicBlockTag landingPad BasicBlockTag leavePad Properties | Improve this Doc View Source HandledExceptionTypes Gets the list of types supported by this exception handler. This property is null if the handler catches all exceptions. Declaration public override IReadOnlyList<IType> HandledExceptionTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A list of exception types or null . Overrides CilExceptionHandler.HandledExceptionTypes | Improve this Doc View Source LandingPad Gets the landing pad basic block to which flow is redirected when an exception is thrown. Declaration public override BasicBlockTag LandingPad { get; } Property Value Type Description BasicBlockTag A basic block tag. Overrides CilExceptionHandler.LandingPad | Improve this Doc View Source LeavePad A special landing pad with zero parameters that is jumped to when the finally handler is to be run in the absence of an exception. The leave pad corresponds to the happy path. Declaration public BasicBlockTag LeavePad { get; } Property Value Type Description BasicBlockTag The leave pad."
  },
  "api/Flame.TypeSystem.AssemblyResolver.html": {
    "href": "api/Flame.TypeSystem.AssemblyResolver.html",
    "title": "Class AssemblyResolver | Flame",
    "keywords": "Class AssemblyResolver Resolves assemblies based on assembly identities. Inheritance System.Object AssemblyResolver CecilAssemblyResolver NullAssemblyResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class AssemblyResolver Methods | Improve this Doc View Source TryResolve(AssemblyIdentity, out IAssembly) Tries to resolve an assembly based on an identity. Declaration public abstract bool TryResolve(AssemblyIdentity identity, out IAssembly assembly) Parameters Type Name Description AssemblyIdentity identity An assembly identity that references the assembly to resolve. IAssembly assembly The assembly that is referenced by assembly . Returns Type Description System.Boolean true if a match could be found for assembly ; otherwise, false ."
  },
  "api/Flame.TypeParent.html": {
    "href": "api/Flame.TypeParent.html",
    "title": "Struct TypeParent | Flame",
    "keywords": "Struct TypeParent Gets a type's parent, that is, the entity that defines the type. A type parent can be either an assembly, another type, a method (for generic parameters only), or nothing at all. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame Assembly : Flame.dll Syntax public struct TypeParent Constructors | Improve this Doc View Source TypeParent(IAssembly) Creates a type parent that wraps around an assembly. Declaration public TypeParent(IAssembly assembly) Parameters Type Name Description IAssembly assembly The assembly that defines a type. | Improve this Doc View Source TypeParent(IMethod) Creates a type parent that wraps around a method. Declaration public TypeParent(IMethod method) Parameters Type Name Description IMethod method The method that defines a type. | Improve this Doc View Source TypeParent(IType) Creates a type parent that wraps around a type. Declaration public TypeParent(IType type) Parameters Type Name Description IType type The type that defines another type. Properties | Improve this Doc View Source Assembly Gets the assembly that is this type parent. Throws if this type parent is not an assembly. Declaration public IAssembly Assembly { get; } Property Value Type Description IAssembly An assembly. | Improve this Doc View Source AssemblyOrNull Gets the assembly that is this type parent. If this type parent is not an assembly, then null is returned. Declaration public IAssembly AssemblyOrNull { get; } Property Value Type Description IAssembly An assembly or null . | Improve this Doc View Source IsAssembly Checks if this type parent is an assembly. Declaration public bool IsAssembly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMethod Checks if this type parent is a method. Declaration public bool IsMethod { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNothing Checks if this type parent is nothing at all, that is, no entity directly \"defines\" the type. Declaration public bool IsNothing { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsType Checks if this type parent is a type. Declaration public bool IsType { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Member Gets the assembly, type or method that is this type parent. Throws if this type parent is not an assembly, type or method. Declaration public IMember Member { get; } Property Value Type Description IMember A member. | Improve this Doc View Source MemberOrNull Gets the assembly, type or method that is this type parent as a member. If this type parent is nothing, then null is returned. Declaration public IMember MemberOrNull { get; } Property Value Type Description IMember A member or null . | Improve this Doc View Source Method Gets the method that is this type parent. Throws if this type parent is not a method. Declaration public IMethod Method { get; } Property Value Type Description IMethod A method. | Improve this Doc View Source MethodOrNull Gets the method that is this type parent. If this type parent is not a method, then null is returned. Declaration public IMethod MethodOrNull { get; } Property Value Type Description IMethod A method or null . | Improve this Doc View Source Nothing Gets a type parent that indicates that a type has no parent. Declaration public static TypeParent Nothing { get; } Property Value Type Description TypeParent | Improve this Doc View Source Type Gets the type that is this type parent. Throws if this type parent is not a type. Declaration public IType Type { get; } Property Value Type Description IType A type. | Improve this Doc View Source TypeOrNull Gets the type that is this type parent. If this type parent is not a type, then null is returned. Declaration public IType TypeOrNull { get; } Property Value Type Description IType A type or null ."
  },
  "api/Flame.Ir.IrField.html": {
    "href": "api/Flame.Ir.IrField.html",
    "title": "Class IrField | Flame",
    "keywords": "Class IrField A field that is decoded from a Flame IR field LNode. Inheritance System.Object IrMember IrField Implements IField ITypeMember IMember Inherited Members IrMember.Node IrMember.Decoder IrMember.QualifyName(QualifiedName) IrMember.FullName IrMember.Name IrMember.Attributes System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class IrField : IrMember, IField, ITypeMember, IMember Properties | Improve this Doc View Source FieldType Gets the type of value stored in this field. Declaration public IType FieldType { get; } Property Value Type Description IType The type of value stored in this field. | Improve this Doc View Source IsStatic Tells if this field is static. The storage for static fields is shared by the entire application, whereas the storage for instance (i.e., non-static) fields is specific to an instance of a type. Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean true if this field is static; otherwise, false . | Improve this Doc View Source ParentType Gets the type that defines this member, if any. Declaration public IType ParentType { get; } Property Value Type Description IType The parent type. Methods | Improve this Doc View Source Decode(LNode, DecoderState) Decodes a field from an LNode. Declaration public static IField Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data The LNode to decode. DecoderState state The decoder to use. Returns Type Description IField A decoded field if the node can be decoded; otherwise, null . | Improve this Doc View Source Encode(IField, EncoderState) Encodes a field as an LNode. Declaration public static LNode Encode(IField value, EncoderState state) Parameters Type Name Description IField value The field to encode. EncoderState state The encoder to use. Returns Type Description Loyc.Syntax.LNode An LNode that represents the field. Implements IField ITypeMember IMember"
  },
  "api/Flame.Ir.IrCodec.html": {
    "href": "api/Flame.Ir.IrCodec.html",
    "title": "Struct IrCodec | Flame",
    "keywords": "Struct IrCodec An encoder/decoder for every configurable element of Flame's intermediate representation. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public struct IrCodec Constructors | Improve this Doc View Source IrCodec(Codec<Constant, LNode>, Codec<InstructionPrototype, LNode>, Codec<IType, LNode>, Codec<ITypeMember, LNode>, Codec<ITypeMember, LNode>, Codec<IType, LNode>, Codec<IAttribute, LNode>) Creates a codec for Flame IR from a number of sub-codecs. Declaration public IrCodec(Codec<Constant, LNode> constants, Codec<InstructionPrototype, LNode> instructionCodec, Codec<IType, LNode> typeCodec, Codec<ITypeMember, LNode> typeMemberCodec, Codec<ITypeMember, LNode> typeMemberDefinitionCodec, Codec<IType, LNode> typeDefinitionCodec, Codec<IAttribute, LNode> attributeCodec) Parameters Type Name Description Codec < Constant , Loyc.Syntax.LNode > constants A codec for constants. Codec < InstructionPrototype , Loyc.Syntax.LNode > instructionCodec An instruction prototype codec. Codec < IType , Loyc.Syntax.LNode > typeCodec A codec for type references. Codec < ITypeMember , Loyc.Syntax.LNode > typeMemberCodec A codec for type member references. Codec < ITypeMember , Loyc.Syntax.LNode > typeMemberDefinitionCodec A codec for type member definitions. Codec < IType , Loyc.Syntax.LNode > typeDefinitionCodec A codec for method definitions. Codec < IAttribute , Loyc.Syntax.LNode > attributeCodec A codec for attributes. Fields | Improve this Doc View Source Default The default codec for Flame IR as used by unmodified versions of Flame. Declaration public static IrCodec Default Field Value Type Description IrCodec Properties | Improve this Doc View Source Attributes Gets the encoder/decoder for attributes. Declaration public Codec<IAttribute, LNode> Attributes { get; } Property Value Type Description Codec < IAttribute , Loyc.Syntax.LNode > The attribute codec. | Improve this Doc View Source Constants Gets the encoder for constants. Declaration public Codec<Constant, LNode> Constants { get; } Property Value Type Description Codec < Constant , Loyc.Syntax.LNode > The constant codec. | Improve this Doc View Source Instructions Gets the encoder for instruction prototypes. Declaration public Codec<InstructionPrototype, LNode> Instructions { get; } Property Value Type Description Codec < InstructionPrototype , Loyc.Syntax.LNode > The instruction prototype codec. | Improve this Doc View Source TypeDefinitions Gets the encoder/decoder for type definitions. Declaration public Codec<IType, LNode> TypeDefinitions { get; } Property Value Type Description Codec < IType , Loyc.Syntax.LNode > The type definition codec. | Improve this Doc View Source TypeMemberDefinitions Gets the encoder/decoder for type member definitions. Declaration public Codec<ITypeMember, LNode> TypeMemberDefinitions { get; } Property Value Type Description Codec < ITypeMember , Loyc.Syntax.LNode > The type member definition codec. | Improve this Doc View Source TypeMembers Gets the encoder/decoder for type member references. Declaration public Codec<ITypeMember, LNode> TypeMembers { get; } Property Value Type Description Codec < ITypeMember , Loyc.Syntax.LNode > The type member reference codec. | Improve this Doc View Source Types Gets the encoder/decoder for type references. Declaration public Codec<IType, LNode> Types { get; } Property Value Type Description Codec < IType , Loyc.Syntax.LNode > The type reference codec. Methods | Improve this Doc View Source WithTypes(Codec<IType, LNode>) Creates an IR codec with a particular type codec. All other fields are copied from this codec. Declaration public IrCodec WithTypes(Codec<IType, LNode> typeCodec) Parameters Type Name Description Codec < IType , Loyc.Syntax.LNode > typeCodec A type codec. Returns Type Description IrCodec An IR codec."
  },
  "api/Flame.Ir.IrAssembly.html": {
    "href": "api/Flame.Ir.IrAssembly.html",
    "title": "Class IrAssembly | Flame",
    "keywords": "Class IrAssembly An assembly that is decoded from a Flame IR field LNode. Inheritance System.Object IrMember IrAssembly Implements IAssembly IMember Inherited Members IrMember.Node IrMember.Decoder IrMember.QualifyName(QualifiedName) IrMember.FullName IrMember.Name IrMember.Attributes System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class IrAssembly : IrMember, IAssembly, IMember Constructors | Improve this Doc View Source IrAssembly(LNode, DecoderState) Creates a Flame IR assembly from an appropriately-encoded LNode. Declaration public IrAssembly(LNode node, DecoderState decoder) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. DecoderState decoder The decoder to use. Properties | Improve this Doc View Source Types Gets a list of all top-level types defined in this assembly. Declaration public IReadOnlyList<IType> Types { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined in this assembly. Methods | Improve this Doc View Source Decode(LNode, DecoderState) Decodes an assembly from an LNode. Declaration public static IrAssembly Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data The LNode to decode. DecoderState state The decoder to use. Returns Type Description IrAssembly A decoded assembly if the node can be decoded; otherwise, null . | Improve this Doc View Source Encode(IAssembly, EncoderState) Encodes an assembly as an LNode. Declaration public static LNode Encode(IAssembly value, EncoderState state) Parameters Type Name Description IAssembly value The assembly to encode. EncoderState state The encoder to use. Returns Type Description Loyc.Syntax.LNode An LNode that represents the assembly. Implements IAssembly IMember"
  },
  "api/Flame.Ir.InstructionCodecElements.html": {
    "href": "api/Flame.Ir.InstructionCodecElements.html",
    "title": "Class InstructionCodecElements | Flame",
    "keywords": "Class InstructionCodecElements Defines codec elements for instruction prototypes. Inheritance System.Object InstructionCodecElements Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public static class InstructionCodecElements Fields | Improve this Doc View Source Alloca A codec element for alloca instruction prototypes. Declaration public static readonly CodecElement<AllocaPrototype, IReadOnlyList<LNode>> Alloca Field Value Type Description CodecElement < AllocaPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source AllocaArray A codec element for alloca-array instruction prototypes. Declaration public static readonly CodecElement<AllocaArrayPrototype, IReadOnlyList<LNode>> AllocaArray Field Value Type Description CodecElement < AllocaArrayPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Box A codec element for box instruction prototypes. Declaration public static readonly CodecElement<BoxPrototype, IReadOnlyList<LNode>> Box Field Value Type Description CodecElement < BoxPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Call A codec element for call instruction prototypes. Declaration public static readonly CodecElement<CallPrototype, IReadOnlyList<LNode>> Call Field Value Type Description CodecElement < CallPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Constant A codec element for constant instruction prototypes. Declaration public static readonly CodecElement<ConstantPrototype, IReadOnlyList<LNode>> Constant Field Value Type Description CodecElement < ConstantPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source ConstrainedCall A codec element for constrained call instruction prototypes. Declaration public static readonly CodecElement<ConstrainedCallPrototype, IReadOnlyList<LNode>> ConstrainedCall Field Value Type Description CodecElement < ConstrainedCallPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Copy A codec element for copy instruction prototypes. Declaration public static readonly CodecElement<CopyPrototype, IReadOnlyList<LNode>> Copy Field Value Type Description CodecElement < CopyPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source DynamicCast A codec element for dynamic cast instruction prototypes. Declaration public static readonly CodecElement<DynamicCastPrototype, IReadOnlyList<LNode>> DynamicCast Field Value Type Description CodecElement < DynamicCastPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source GetFieldPointer A codec element for get-field-pointer instruction prototypes. Declaration public static readonly CodecElement<GetFieldPointerPrototype, IReadOnlyList<LNode>> GetFieldPointer Field Value Type Description CodecElement < GetFieldPointerPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source GetStaticFieldPointer A codec element for get-static-field-pointer instruction prototypes. Declaration public static readonly CodecElement<GetStaticFieldPointerPrototype, IReadOnlyList<LNode>> GetStaticFieldPointer Field Value Type Description CodecElement < GetStaticFieldPointerPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source IndirectCall A codec element for indirect call instruction prototypes. Declaration public static readonly CodecElement<IndirectCallPrototype, IReadOnlyList<LNode>> IndirectCall Field Value Type Description CodecElement < IndirectCallPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Intrinsic A codec element for intrinsic instruction prototypes. Declaration public static readonly CodecElement<IntrinsicPrototype, IReadOnlyList<LNode>> Intrinsic Field Value Type Description CodecElement < IntrinsicPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Load A codec element for load instruction prototypes. Declaration public static readonly CodecElement<LoadPrototype, IReadOnlyList<LNode>> Load Field Value Type Description CodecElement < LoadPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source LoadField A codec element for fused load-field instruction prototypes. Declaration public static readonly CodecElement<LoadFieldPrototype, IReadOnlyList<LNode>> LoadField Field Value Type Description CodecElement < LoadFieldPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source NewDelegate A codec element for new-delegate instruction prototypes. Declaration public static readonly CodecElement<NewDelegatePrototype, IReadOnlyList<LNode>> NewDelegate Field Value Type Description CodecElement < NewDelegatePrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source NewObject A codec element for new-delegate instruction prototypes. Declaration public static readonly CodecElement<NewObjectPrototype, IReadOnlyList<LNode>> NewObject Field Value Type Description CodecElement < NewObjectPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source ReinterpretCast A codec element for reinterpret cast instruction prototypes. Declaration public static readonly CodecElement<ReinterpretCastPrototype, IReadOnlyList<LNode>> ReinterpretCast Field Value Type Description CodecElement < ReinterpretCastPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Store A codec element for store instruction prototypes. Declaration public static readonly CodecElement<StorePrototype, IReadOnlyList<LNode>> Store Field Value Type Description CodecElement < StorePrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source StoreField A codec element for fused store-field instruction prototypes. Declaration public static readonly CodecElement<StoreFieldPrototype, IReadOnlyList<LNode>> StoreField Field Value Type Description CodecElement < StoreFieldPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. | Improve this Doc View Source Unbox A codec element for unbox instruction prototypes. Declaration public static readonly CodecElement<UnboxPrototype, IReadOnlyList<LNode>> Unbox Field Value Type Description CodecElement < UnboxPrototype , System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> A codec element. Properties | Improve this Doc View Source All Gets a codec that contains all sub-codecs defined in this class. Declaration public static Codec<InstructionPrototype, LNode> All { get; } Property Value Type Description Codec < InstructionPrototype , Loyc.Syntax.LNode > A codec."
  },
  "api/Flame.Ir.FeedbackHelpers.html": {
    "href": "api/Flame.Ir.FeedbackHelpers.html",
    "title": "Class FeedbackHelpers | Flame",
    "keywords": "Class FeedbackHelpers A collection of functions that help produce wonderful diagnostics, geared particularly toward LNodes. Inheritance System.Object FeedbackHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public static class FeedbackHelpers Methods | Improve this Doc View Source AssertArgCount(LNode, Int32, ILog) Asserts that a node has a particular number of arguments. Declaration public static bool AssertArgCount(LNode node, int argCount, ILog log) Parameters Type Name Description Loyc.Syntax.LNode node A node to inspect. System.Int32 argCount The number of arguments to expect. Pixie.ILog log A log to send error and warning messages to. Returns Type Description System.Boolean true if the node has the desired number of arguments; otherwise, false . | Improve this Doc View Source AssertIsCall(LNode, ILog) Asserts that a node is a call. If it is not, then a message is sent to a log. Declaration public static bool AssertIsCall(LNode node, ILog log) Parameters Type Name Description Loyc.Syntax.LNode node A node to inspect. Pixie.ILog log A log to send error and warning messages to. Returns Type Description System.Boolean true if the node is a call; otherwise, false . | Improve this Doc View Source AssertIsId(LNode, ILog) Asserts that a node is an id. If it is not, then a message is sent to a log. Declaration public static bool AssertIsId(LNode node, ILog log) Parameters Type Name Description Loyc.Syntax.LNode node A node to inspect. Pixie.ILog log A log to send error and warning messages to. Returns Type Description System.Boolean true if the node is an id; otherwise, false . | Improve this Doc View Source AssertIsLiteral(LNode, ILog) Asserts that a node is a literal. If it is not, then a message is sent to a log. Declaration public static bool AssertIsLiteral(LNode node, ILog log) Parameters Type Name Description Loyc.Syntax.LNode node A node to inspect. Pixie.ILog log A log to send error and warning messages to. Returns Type Description System.Boolean true if the node is a literal; otherwise, false . | Improve this Doc View Source AssertMinArgCount(LNode, Int32, ILog) Asserts that a node has at least a particular number of arguments. Declaration public static bool AssertMinArgCount(LNode node, int argCount, ILog log) Parameters Type Name Description Loyc.Syntax.LNode node A node to inspect. System.Int32 argCount The minumum number of arguments to expect. Pixie.ILog log A log to send error and warning messages to. Returns Type Description System.Boolean true if the node has at least the desired number of arguments; otherwise, false . | Improve this Doc View Source AssertOfKind(LNode, LNodeKind, ILog) Asserts that a node has a particular kind. If it does not, then a message is sent to a log. Declaration public static bool AssertOfKind(LNode node, LNodeKind kind, ILog log) Parameters Type Name Description Loyc.Syntax.LNode node A node to inspect. Loyc.Syntax.LNodeKind kind The expected node kind for node . Pixie.ILog log A log to send error and warning messages to. Returns Type Description System.Boolean true if the node is of the specified kind; otherwise, false . | Improve this Doc View Source LogSyntaxError(ILog, LNode, MarkupNode) Reports a syntax error. Declaration public static void LogSyntaxError(this ILog log, LNode node, MarkupNode message) Parameters Type Name Description Pixie.ILog log The log to which the error is sent. Loyc.Syntax.LNode node The offending node. Pixie.MarkupNode message The error message that specifies what went wrong. | Improve this Doc View Source Print(LNode) Gets a pretty string representation for a node. Declaration public static string Print(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node The node to print. Returns Type Description System.String A string representation. | Improve this Doc View Source QuoteEven(MarkupNode[]) Quotes even (second, fourth, sixth, ...) markup elements in bold and wraps the result in a sequence node. Declaration public static Sequence QuoteEven(params MarkupNode[] nodes) Parameters Type Name Description Pixie.MarkupNode [] nodes The nodes to process. Returns Type Description Pixie.Markup.Sequence A sequence container node. | Improve this Doc View Source SpellNodeKind(LNode) Gets a human-readable string that identifies a node's kind. Declaration public static string SpellNodeKind(LNode node) Parameters Type Name Description Loyc.Syntax.LNode node A node whose kind will be spelled out. Returns Type Description System.String A string that identifies the node's kind. | Improve this Doc View Source SpellNodeKind(LNodeKind) Gets a human-readable string that identifies a node kind. Declaration public static string SpellNodeKind(LNodeKind node) Parameters Type Name Description Loyc.Syntax.LNodeKind node Returns Type Description System.String A string that identifies the node kind."
  },
  "api/Flame.Ir.EncoderState.html": {
    "href": "api/Flame.Ir.EncoderState.html",
    "title": "Class EncoderState | Flame",
    "keywords": "Class EncoderState Encodes Flame's intermediate representation as Loyc LNodes. Inheritance System.Object EncoderState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class EncoderState Constructors | Improve this Doc View Source EncoderState() Instantiates a Flame IR encoder. Declaration public EncoderState() | Improve this Doc View Source EncoderState(IrCodec) Instantiates a Flame IR encoder. Declaration public EncoderState(IrCodec codec) Parameters Type Name Description IrCodec codec The codec to use for encoding. | Improve this Doc View Source EncoderState(IrCodec, LNodeFactory) Instantiates a Flame IR encoder. Declaration public EncoderState(IrCodec codec, LNodeFactory factory) Parameters Type Name Description IrCodec codec The codec to use for encoding. Loyc.Syntax.LNodeFactory factory The node factory to use for creating nodes. Properties | Improve this Doc View Source Codec Gets the codec used by this encoder. Declaration public IrCodec Codec { get; } Property Value Type Description IrCodec A Flame IR codec. | Improve this Doc View Source Factory Gets the node factory for this encoder. Declaration public LNodeFactory Factory { get; } Property Value Type Description Loyc.Syntax.LNodeFactory A node factory. Methods | Improve this Doc View Source Encode(AttributeMap) Encodes an attribute map as a sequence of LNodes. Declaration public IEnumerable<LNode> Encode(AttributeMap attributes) Parameters Type Name Description AttributeMap attributes The attribute map to encode. Returns Type Description System.Collections.Generic.IEnumerable < Loyc.Syntax.LNode > A list of attribute nodes. | Improve this Doc View Source Encode(FlowGraph) Encodes a control-flow graph. Declaration public LNode Encode(FlowGraph graph) Parameters Type Name Description FlowGraph graph The control-flow graph to encode. Returns Type Description Loyc.Syntax.LNode An LNode that represents the control-flow graph. | Improve this Doc View Source Encode(InstructionPrototype) Encodes an instruction prototype. Declaration public LNode Encode(InstructionPrototype prototype) Parameters Type Name Description InstructionPrototype prototype The instruction prototype to encode. Returns Type Description Loyc.Syntax.LNode An encoded instruction prototype. | Improve this Doc View Source Encode(MethodLookup) Encodes a method lookup strategy as an LNode. Declaration public LNode Encode(MethodLookup lookup) Parameters Type Name Description MethodLookup lookup A method lookup strategy. Returns Type Description Loyc.Syntax.LNode An LNode that represents lookup . | Improve this Doc View Source Encode(Constant) Encodes a constant value. Declaration public LNode Encode(Constant value) Parameters Type Name Description Constant value The value to encode. Returns Type Description Loyc.Syntax.LNode An encoded constant value. | Improve this Doc View Source Encode(IAttribute) Encodes an attribute as an LNode. Declaration public LNode Encode(IAttribute attribute) Parameters Type Name Description IAttribute attribute The attribute to encode. Returns Type Description Loyc.Syntax.LNode An encoded node. | Improve this Doc View Source Encode(IField) Encodes a field reference. Declaration public LNode Encode(IField field) Parameters Type Name Description IField field The field reference to encode. Returns Type Description Loyc.Syntax.LNode An encoded field reference. | Improve this Doc View Source Encode(IGenericMember) Declaration public LNode Encode(IGenericMember genericMember) Parameters Type Name Description IGenericMember genericMember Returns Type Description Loyc.Syntax.LNode | Improve this Doc View Source Encode(IMethod) Encodes a method reference. Declaration public LNode Encode(IMethod method) Parameters Type Name Description IMethod method The method reference to encode. Returns Type Description Loyc.Syntax.LNode An encoded method reference. | Improve this Doc View Source Encode(IProperty) Encodes a property reference. Declaration public LNode Encode(IProperty property) Parameters Type Name Description IProperty property The property reference to encode. Returns Type Description Loyc.Syntax.LNode An encoded property reference. | Improve this Doc View Source Encode(IType) Encodes a type reference. Declaration public LNode Encode(IType type) Parameters Type Name Description IType type The type reference to encode. Returns Type Description Loyc.Syntax.LNode An encoded type reference. | Improve this Doc View Source Encode(QualifiedName) Encodes a qualified name as a sequence of simple names. Declaration public LNode Encode(QualifiedName name) Parameters Type Name Description QualifiedName name A qualified name to encode. Simple names in the qualified name are encoded as such. Other names are encoded as simple names by taking their string representation. Returns Type Description Loyc.Syntax.LNode An encoded node. | Improve this Doc View Source Encode(UnqualifiedName) Encodes an unqualified name as a simple name. Declaration public LNode Encode(UnqualifiedName name) Parameters Type Name Description UnqualifiedName name An unqualified name to encode. Simple names are encoded as such. Other names are encoded as simple names by taking their string representation. Returns Type Description Loyc.Syntax.LNode An encoded node. | Improve this Doc View Source Encode(Boolean) Encodes a Boolean constant. Declaration public LNode Encode(bool value) Parameters Type Name Description System.Boolean value A Boolean constant to encode. Returns Type Description Loyc.Syntax.LNode The encoded Boolean constant. | Improve this Doc View Source EncodeDefinition(IAssembly) Encodes an assembly definition. Declaration public LNode EncodeDefinition(IAssembly assembly) Parameters Type Name Description IAssembly assembly The assembly definition to encode. Returns Type Description Loyc.Syntax.LNode An LNode that represents the assembly definition. | Improve this Doc View Source EncodeDefinition(IType) Encodes a type definition. Declaration public LNode EncodeDefinition(IType typeDefinition) Parameters Type Name Description IType typeDefinition The type definition to encode. Returns Type Description Loyc.Syntax.LNode An LNode that represents the type definition. | Improve this Doc View Source EncodeDefinition(ITypeMember) Encodes a type member definition. Declaration public LNode EncodeDefinition(ITypeMember memberDefinition) Parameters Type Name Description ITypeMember memberDefinition The type member definition to encode. Returns Type Description Loyc.Syntax.LNode An LNode that represents the type member definition. | Improve this Doc View Source EncodeDefinition(Parameter) Encodes a parameter definition as an LNode. Declaration public LNode EncodeDefinition(Parameter parameter) Parameters Type Name Description Parameter parameter The parameter to encode. Returns Type Description Loyc.Syntax.LNode An encoded node. | Improve this Doc View Source WithCodec(IrCodec) Creates an encoder state that uses a particular codec but retains all other fields. Declaration public EncoderState WithCodec(IrCodec newCodec) Parameters Type Name Description IrCodec newCodec The new codec to use. Returns Type Description EncoderState An encoder state that uses newCodec ."
  },
  "api/Flame.TypeSystem.ReadOnlyTypeResolver.html": {
    "href": "api/Flame.TypeSystem.ReadOnlyTypeResolver.html",
    "title": "Struct ReadOnlyTypeResolver | Flame",
    "keywords": "Struct ReadOnlyTypeResolver A read-only view of a type resolver. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public struct ReadOnlyTypeResolver Constructors | Improve this Doc View Source ReadOnlyTypeResolver(IAssembly) Creates a read-only type resolver that resolves types from a particular assembly. Declaration public ReadOnlyTypeResolver(IAssembly assembly) Parameters Type Name Description IAssembly assembly The assembly to resolve types from. | Improve this Doc View Source ReadOnlyTypeResolver(TypeResolver) Creates a read-only view of a type resolver from a type resolver. Declaration public ReadOnlyTypeResolver(TypeResolver resolver) Parameters Type Name Description TypeResolver resolver The type resolver to create a read-only view of. Properties | Improve this Doc View Source Assemblies Gets a list of all assemblies that are taken into consideration by this type resolver when resolving a type name. Declaration public IEnumerable<IAssembly> Assemblies { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IAssembly > | Improve this Doc View Source RootNamespace Gets the root namespace for this type resolver. Declaration public TypeResolverNamespace RootNamespace { get; } Property Value Type Description TypeResolverNamespace The root namespace. Methods | Improve this Doc View Source CreateMutableCopy() Creates a mutable copy of this read-only view of a type resolver. Declaration public TypeResolver CreateMutableCopy() Returns Type Description TypeResolver A mutable copy. | Improve this Doc View Source ResolveGenericParameters(IGenericMember, UnqualifiedName) Finds all generic parameters defined by a particular member that have a specific unqualified name. Declaration public IReadOnlyList<IType> ResolveGenericParameters(IGenericMember parentMember, UnqualifiedName name) Parameters Type Name Description IGenericMember parentMember The generic member that defines the generic parameters. UnqualifiedName name The unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of generic parameters that are defined by parentMember and have name name . | Improve this Doc View Source ResolveGenericParameters(IGenericMember, String) Finds all generic parameters defined by a particular member that have a specific imprecise unqualified name. Declaration public IReadOnlyList<IType> ResolveGenericParameters(IGenericMember parentMember, string name) Parameters Type Name Description IGenericMember parentMember The generic member that defines the generic parameters. System.String name The imprecise unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of generic parameters that are defined by parentMember and have name name . This includes all simply named types with name name , regardless of the number of type parameters in the type's name. | Improve this Doc View Source ResolveNestedTypes(IType, UnqualifiedName) Finds all nested types defined by a particular type that have a specific unqualified name. Declaration public IReadOnlyList<IType> ResolveNestedTypes(IType parentType, UnqualifiedName name) Parameters Type Name Description IType parentType The type that defines the nested types. UnqualifiedName name The unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined by parentType and have name name . | Improve this Doc View Source ResolveNestedTypes(IType, String) Finds all nested types defined by a particular type that have a specific imprecise unqualified name. Declaration public IReadOnlyList<IType> ResolveNestedTypes(IType parentType, string name) Parameters Type Name Description IType parentType The type that defines the nested types. System.String name The imprecise unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined by parentType and have name name . This includes all simply named types with name name , regardless of the number of type parameters in the type's name. | Improve this Doc View Source ResolveTypes(QualifiedName) Resolves all types with a particular full name. Declaration public IReadOnlyList<IType> ResolveTypes(QualifiedName fullName) Parameters Type Name Description QualifiedName fullName The full name of the types to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types with name fullName . | Improve this Doc View Source TryResolveNamespace(QualifiedName, out TypeResolverNamespace) Tries to find a namespace with a particular full name. Declaration public bool TryResolveNamespace(QualifiedName fullName, out TypeResolverNamespace result) Parameters Type Name Description QualifiedName fullName The name to look for. TypeResolverNamespace result A namespace with name fullName , if one can be found. Returns Type Description System.Boolean true if a (non-empty) namespace with name fullName can be found; otherwise, false . | Improve this Doc View Source WithAssembly(IAssembly) Creates a new read-only type resolver that includes a particular assembly. Declaration public ReadOnlyTypeResolver WithAssembly(IAssembly assembly) Parameters Type Name Description IAssembly assembly The assembly to include. Returns Type Description ReadOnlyTypeResolver A new read-only type resolver."
  },
  "api/Flame.TypeSystem.PointerType.html": {
    "href": "api/Flame.TypeSystem.PointerType.html",
    "title": "Class PointerType | Flame",
    "keywords": "Class PointerType A type for pointers or references to values. Inheritance System.Object ContainerType PointerType Implements IType IGenericMember IMember Inherited Members ContainerType.Initialize(UnqualifiedName, QualifiedName, AttributeMap) ContainerType.ElementType ContainerType.Parent ContainerType.BaseTypes ContainerType.Fields ContainerType.Methods ContainerType.Properties ContainerType.GenericParameters ContainerType.NestedTypes ContainerType.Name ContainerType.FullName ContainerType.Attributes ContainerType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class PointerType : ContainerType, IType, IGenericMember, IMember Properties | Improve this Doc View Source Kind Gets this pointer type's kind. Declaration public PointerKind Kind { get; } Property Value Type Description PointerKind The pointer kind. Methods | Improve this Doc View Source WithElementType(IType) Creates a container type that is identical to this one except for its element type, which is set to a given type. Declaration public override ContainerType WithElementType(IType newElementType) Parameters Type Name Description IType newElementType The element type of the new container type. Returns Type Description ContainerType Another container type. Overrides ContainerType.WithElementType(IType) Implements IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.PointerKind.html": {
    "href": "api/Flame.TypeSystem.PointerKind.html",
    "title": "Class PointerKind | Flame",
    "keywords": "Class PointerKind Identifies a particular kind of pointer. Inheritance System.Object PointerKind Implements System.IEquatable < PointerKind > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class PointerKind : IEquatable<PointerKind> Fields | Improve this Doc View Source Box The pointer kind for box pointers. This kind of pointers is used both for boxed 'struct' values and for references to 'class' values. Declaration public static readonly PointerKind Box Field Value Type Description PointerKind | Improve this Doc View Source Reference The pointer kind for reference pointers, which are pointers to a value that may or may not be tracked by the garbage collection runtime. As a rule, reference pointers should never be used as the type of a field or as the element type of a container. Declaration public static readonly PointerKind Reference Field Value Type Description PointerKind | Improve this Doc View Source Transient The pointer kind for transient pointers. Declaration public static readonly PointerKind Transient Field Value Type Description PointerKind Methods | Improve this Doc View Source Equals(PointerKind) Checks if this pointer kind equals another pointer kind. Declaration public abstract bool Equals(PointerKind other) Parameters Type Name Description PointerKind other The other pointer kind. Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public abstract override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.TypeSystem.NullAssemblyResolver.html": {
    "href": "api/Flame.TypeSystem.NullAssemblyResolver.html",
    "title": "Class NullAssemblyResolver | Flame",
    "keywords": "Class NullAssemblyResolver An assembly resolver implementation that never successfully resolves an assembly. Useful for testing and building composite assembly resolvers. Inheritance System.Object AssemblyResolver NullAssemblyResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class NullAssemblyResolver : AssemblyResolver Fields | Improve this Doc View Source Instance An assembly resolver that never successfully resolves an assembly. Declaration public static readonly AssemblyResolver Instance Field Value Type Description AssemblyResolver Methods | Improve this Doc View Source TryResolve(AssemblyIdentity, out IAssembly) Tries to resolve an assembly based on an identity. Declaration public override bool TryResolve(AssemblyIdentity identity, out IAssembly assembly) Parameters Type Name Description AssemblyIdentity identity An assembly identity that references the assembly to resolve. IAssembly assembly The assembly that is referenced by assembly . Returns Type Description System.Boolean true if a match could be found for assembly ; otherwise, false . Overrides AssemblyResolver.TryResolve(AssemblyIdentity, out IAssembly)"
  },
  "api/Flame.TypeSystem.MutableTypeEnvironment.html": {
    "href": "api/Flame.TypeSystem.MutableTypeEnvironment.html",
    "title": "Class MutableTypeEnvironment | Flame",
    "keywords": "Class MutableTypeEnvironment A type environment that wraps an inner type environment that can be changed at will. The main use-case for this kind of environment is a situation where the type environment for an assembly is defined by that assembly itself but the assembly does not allow for the type environment to change. Inheritance System.Object TypeEnvironment MutableTypeEnvironment Inherited Members TypeEnvironment.Boolean TypeEnvironment.Int8 TypeEnvironment.UInt8 TypeEnvironment.Int16 TypeEnvironment.UInt16 TypeEnvironment.Int32 TypeEnvironment.UInt32 TypeEnvironment.Int64 TypeEnvironment.UInt64 TypeEnvironment.MakeSignedIntegerType(Int32) TypeEnvironment.MakeUnsignedIntegerType(Int32) TypeEnvironment.MakeArrayType(IType, Int32) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class MutableTypeEnvironment : TypeEnvironment Constructors | Improve this Doc View Source MutableTypeEnvironment(TypeEnvironment) Creates a mutable type environment. Declaration public MutableTypeEnvironment(TypeEnvironment innerEnvironment) Parameters Type Name Description TypeEnvironment innerEnvironment An inner environment to forward requests to. Properties | Improve this Doc View Source CapturedException Gets the canonical type of a captured exception in this environment. Declaration public override IType CapturedException { get; } Property Value Type Description IType The captured exception type. Overrides TypeEnvironment.CapturedException | Improve this Doc View Source Char Gets the character type in this type environment. Declaration public override IType Char { get; } Property Value Type Description IType The character type. Overrides TypeEnvironment.Char | Improve this Doc View Source FieldToken Gets the canonical type of a field token in this environment, if there is such a type. Declaration public override IType FieldToken { get; } Property Value Type Description IType The field token type. Overrides TypeEnvironment.FieldToken | Improve this Doc View Source Float32 Gets the 32-bit floating point type in this type environment. Declaration public override IType Float32 { get; } Property Value Type Description IType A 32-bit floating point type. Overrides TypeEnvironment.Float32 | Improve this Doc View Source Float64 Gets the 64-bit floating point type in this type environment. Declaration public override IType Float64 { get; } Property Value Type Description IType A 64-bit floating point type. Overrides TypeEnvironment.Float64 | Improve this Doc View Source InnerEnvironment Gets or sets the inner environment, to which all requests are forwarded by this type environment. Declaration public TypeEnvironment InnerEnvironment { get; set; } Property Value Type Description TypeEnvironment The inner type environment. | Improve this Doc View Source MethodToken Gets the canonical type of a method token in this environment, if there is such a type. Declaration public override IType MethodToken { get; } Property Value Type Description IType The method token type. Overrides TypeEnvironment.MethodToken | Improve this Doc View Source NaturalInt Gets the natural signed integer type in this type environment. Declaration public override IType NaturalInt { get; } Property Value Type Description IType The natural signed integer type. Overrides TypeEnvironment.NaturalInt | Improve this Doc View Source NaturalUInt Gets the natural unsigned integer type in this type environment. Declaration public override IType NaturalUInt { get; } Property Value Type Description IType The natural unsigned integer type. Overrides TypeEnvironment.NaturalUInt | Improve this Doc View Source Object Gets the root type for this environment, if there is a root type. Declaration public override IType Object { get; } Property Value Type Description IType The root type. Overrides TypeEnvironment.Object | Improve this Doc View Source String Gets the character string type in this type environment. Declaration public override IType String { get; } Property Value Type Description IType The character string type. Overrides TypeEnvironment.String | Improve this Doc View Source Subtyping Gets the subtyping rules for this type environment. Declaration public override SubtypingRules Subtyping { get; } Property Value Type Description SubtypingRules The subtyping rules. Overrides TypeEnvironment.Subtyping | Improve this Doc View Source TypeToken Gets the canonical type of a type token in this environment, if there is such a type. Declaration public override IType TypeToken { get; } Property Value Type Description IType The type token type. Overrides TypeEnvironment.TypeToken | Improve this Doc View Source Void Gets the Void type in this type environment. Declaration public override IType Void { get; } Property Value Type Description IType The Void type. Overrides TypeEnvironment.Void Methods | Improve this Doc View Source TryMakeArrayType(IType, Int32, out IType) Tries to create an array type with a particular element type and rank. Declaration public override bool TryMakeArrayType(IType elementType, int rank, out IType arrayType) Parameters Type Name Description IType elementType The type of value to store in the array. System.Int32 rank The rank of the array, that is, the number of dimensions in the array. IType arrayType An array with the specified element type and rank. Returns Type Description System.Boolean true if the environment can create such an array type; otherwise, false . Overrides TypeEnvironment.TryMakeArrayType(IType, Int32, out IType) | Improve this Doc View Source TryMakeSignedIntegerType(Int32, out IType) Tries to create a signed integer type with a particular number of bits of storage. Declaration public override bool TryMakeSignedIntegerType(int sizeInBits, out IType integerType) Parameters Type Name Description System.Int32 sizeInBits The size in bits of the integer type to create. IType integerType The integer type. Returns Type Description System.Boolean true if the environment can create such an integer type; otherwise, false . Overrides TypeEnvironment.TryMakeSignedIntegerType(Int32, out IType) | Improve this Doc View Source TryMakeUnsignedIntegerType(Int32, out IType) Tries to create an unsigned integer type with a particular number of bits of storage. Declaration public override bool TryMakeUnsignedIntegerType(int sizeInBits, out IType integerType) Parameters Type Name Description System.Int32 sizeInBits The size in bits of the integer type to create. IType integerType The integer type. Returns Type Description System.Boolean true if the environment can create such an integer type; otherwise, false . Overrides TypeEnvironment.TryMakeUnsignedIntegerType(Int32, out IType)"
  },
  "api/Flame.TypeSystem.MethodSpecialization.html": {
    "href": "api/Flame.TypeSystem.MethodSpecialization.html",
    "title": "Class MethodSpecialization | Flame",
    "keywords": "Class MethodSpecialization A base type for method specializations. Inheritance System.Object MethodSpecialization DirectMethodSpecialization IndirectMethodSpecialization Implements IMethod ITypeMember IGenericMember IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class MethodSpecialization : IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source MethodSpecialization(IMethod) Creates an uninitialized generic method specialization from a generic declaration. Declaration public MethodSpecialization(IMethod declaration) Parameters Type Name Description IMethod declaration A generic method declaration. Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseMethods Gets the method's base methods. Declaration public IReadOnlyList<IMethod> BaseMethods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > | Improve this Doc View Source Declaration Gets the method declaration of which this method is a specialization. Declaration public IMethod Declaration { get; } Property Value Type Description IMethod The method declaration. | Improve this Doc View Source FullName Gets the member's full name. Declaration public abstract QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public abstract IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source IsConstructor Indicates if this method is a constructor. Declaration public bool IsConstructor { get; } Property Value Type Description System.Boolean true if this method is a constructor; otherwise, false . | Improve this Doc View Source IsStatic Tells if this is a static method. Non-static methods take a non-null pointer to their parent type as an implicit first arguments. Static methods do not. Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean true if this method is a static method; otherwise, false . | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public abstract UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source Parameters Gets the method's parameters. Declaration public IReadOnlyList<Parameter> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > | Improve this Doc View Source ParentType Gets the parent type specialization that defines this method specialization. Declaration public abstract IType ParentType { get; } Property Value Type Description IType The parent type specialization. | Improve this Doc View Source ReturnParameter Gets the method's return parameter. Declaration public Parameter ReturnParameter { get; } Property Value Type Description Parameter Methods | Improve this Doc View Source InitializeInstance(MethodSpecialization) Initializes a method specialization instance. Declaration protected static MethodSpecialization InitializeInstance(MethodSpecialization instance) Parameters Type Name Description MethodSpecialization instance The instance to initialize. Returns Type Description MethodSpecialization instance itself. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IMethod ITypeMember IGenericMember IMember Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.TypeSystem.MemberMapping.html": {
    "href": "api/Flame.TypeSystem.MemberMapping.html",
    "title": "Class MemberMapping | Flame",
    "keywords": "Class MemberMapping A (type mapping, method mapping, field mapping) triple. Inheritance System.Object MemberMapping Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class MemberMapping Constructors | Improve this Doc View Source MemberMapping(Func<IType, IType>) Creates a member mapping from a type mapping. Declaration public MemberMapping(Func<IType, IType> mapType) Parameters Type Name Description System.Func < IType , IType > mapType A type-to-type mapping. | Improve this Doc View Source MemberMapping(Func<IType, IType>, Func<IMethod, IMethod>, Func<IField, IField>) Creates a member mapping. Declaration public MemberMapping(Func<IType, IType> mapType, Func<IMethod, IMethod> mapMethod, Func<IField, IField> mapField) Parameters Type Name Description System.Func < IType , IType > mapType A type-to-type mapping. System.Func < IMethod , IMethod > mapMethod A method-to-method mapping. System.Func < IField , IField > mapField A field-to-field mapping. Properties | Improve this Doc View Source MapField Gets a field-to-field mapping. Declaration public Func<IField, IField> MapField { get; } Property Value Type Description System.Func < IField , IField > A field-to-field mapping. | Improve this Doc View Source MapMethod Gets a method-to-method mapping. Declaration public Func<IMethod, IMethod> MapMethod { get; } Property Value Type Description System.Func < IMethod , IMethod > A method-to-method mapping. | Improve this Doc View Source MapType Gets a type-to-type mapping. Declaration public Func<IType, IType> MapType { get; } Property Value Type Description System.Func < IType , IType > A type-to-type mapping."
  },
  "api/Flame.TypeSystem.IntrinsicAttribute.html": {
    "href": "api/Flame.TypeSystem.IntrinsicAttribute.html",
    "title": "Class IntrinsicAttribute | Flame",
    "keywords": "Class IntrinsicAttribute Describes a named attribute that is well-understood by the compiler. Inheritance System.Object IntrinsicAttribute Implements IAttribute Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class IntrinsicAttribute : IAttribute Constructors | Improve this Doc View Source IntrinsicAttribute(String) Creates an intrinsic attribute with the given name and an empty argument list. Declaration public IntrinsicAttribute(string name) Parameters Type Name Description System.String name The attribute's name. | Improve this Doc View Source IntrinsicAttribute(String, IReadOnlyList<Constant>) Creates an intrinsic attribute with the given name and argument list. Declaration public IntrinsicAttribute(string name, IReadOnlyList<Constant> arguments) Parameters Type Name Description System.String name The attribute's name. System.Collections.Generic.IReadOnlyList < Constant > arguments The attribute's list of arguments. Properties | Improve this Doc View Source Arguments Gets the list of arguments that is supplied to this intrinsic attribute. Declaration public IReadOnlyList<Constant> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Constant > The argument list. | Improve this Doc View Source AttributeType Gets the type for this attribute. Declaration public IType AttributeType { get; } Property Value Type Description IType The attribute type. | Improve this Doc View Source Name Gets the name of this intrinsic attribute. Declaration public string Name { get; } Property Value Type Description System.String The name of the intrinsic attribute. Methods | Improve this Doc View Source GetIntrinsicAttributeType(String) Gets the intrinsic attribute type for a particular intrinsic attribute name. Declaration public static IType GetIntrinsicAttributeType(string name) Parameters Type Name Description System.String name The name to find an intrinsic attribute type for. Returns Type Description IType An intrinsic attribute type. Implements IAttribute"
  },
  "api/Flame.TypeSystem.IntegerSpecAttribute.html": {
    "href": "api/Flame.TypeSystem.IntegerSpecAttribute.html",
    "title": "Class IntegerSpecAttribute | Flame",
    "keywords": "Class IntegerSpecAttribute A collection of constants and methods that relate to integer specification attributes. Inheritance System.Object IntegerSpecAttribute Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public static class IntegerSpecAttribute Fields | Improve this Doc View Source AttributeName The attribute name for integer specification attributes. Declaration public const string AttributeName = \"IntegerSpec\" Field Value Type Description System.String Methods | Improve this Doc View Source Create(IntegerSpec) Creates an intrinsic attribute that encodes an integer spec. Declaration public static IntrinsicAttribute Create(IntegerSpec specification) Parameters Type Name Description IntegerSpec specification An integer specification. Returns Type Description IntrinsicAttribute An intrinsic attribute. | Improve this Doc View Source GetIntegerSpecOrNull(IType) Gets a type's integer spec if it has one. Declaration public static IntegerSpec GetIntegerSpecOrNull(this IType type) Parameters Type Name Description IType type The type to examine. Returns Type Description IntegerSpec An integer spec if type has one; otherwise, null . | Improve this Doc View Source IsIntegerType(IType) Tests if a particular type is an integer type. Declaration public static bool IsIntegerType(this IType type) Parameters Type Name Description IType type The type to examine. Returns Type Description System.Boolean true if type has an integer spec; otherwise, false . | Improve this Doc View Source IsSignedIntegerType(IType) Tests if a particular type is a signed integer type. Declaration public static bool IsSignedIntegerType(this IType type) Parameters Type Name Description IType type The type to examine. Returns Type Description System.Boolean true if type has a signed integer spec; otherwise, false . | Improve this Doc View Source IsUnsignedIntegerType(IType) Tests if a particular type is an unsigned integer type. Declaration public static bool IsUnsignedIntegerType(this IType type) Parameters Type Name Description IType type The type to examine. Returns Type Description System.Boolean true if type has an unsigned integer spec; otherwise, false . | Improve this Doc View Source Read(IntrinsicAttribute) Reads out an integer spec attribute as an integer spec. Declaration public static IntegerSpec Read(IntrinsicAttribute attribute) Parameters Type Name Description IntrinsicAttribute attribute The integer spec attribute to read. Returns Type Description IntegerSpec The integer spec described by the attribute."
  },
  "api/Flame.TypeSystem.IndirectTypeSpecialization.html": {
    "href": "api/Flame.TypeSystem.IndirectTypeSpecialization.html",
    "title": "Class IndirectTypeSpecialization | Flame",
    "keywords": "Class IndirectTypeSpecialization A type that is defined in an instantiated generic type. Inheritance System.Object TypeSpecialization IndirectTypeSpecialization Implements IType IGenericMember IMember Inherited Members TypeSpecialization.Initialize() TypeSpecialization.Declaration TypeSpecialization.BaseTypes TypeSpecialization.Fields TypeSpecialization.Methods TypeSpecialization.Properties TypeSpecialization.Attributes TypeSpecialization.NestedTypes TypeSpecialization.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class IndirectTypeSpecialization : TypeSpecialization, IType, IGenericMember, IMember Properties | Improve this Doc View Source FullName Gets the member's full name. Declaration public override QualifiedName FullName { get; } Property Value Type Description QualifiedName Overrides TypeSpecialization.FullName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public override IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. Overrides TypeSpecialization.GenericParameters | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public override UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName Overrides TypeSpecialization.Name | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public override TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. Overrides TypeSpecialization.Parent | Improve this Doc View Source ParentType Gets the parent type of this generic instance type. Declaration public TypeSpecialization ParentType { get; } Property Value Type Description TypeSpecialization The parent type. Implements IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.IndirectPropertySpecialization.html": {
    "href": "api/Flame.TypeSystem.IndirectPropertySpecialization.html",
    "title": "Class IndirectPropertySpecialization | Flame",
    "keywords": "Class IndirectPropertySpecialization A specialization of a property that is obtained by observing a property of a generic type specialization, direct or otherwise. Inheritance System.Object IndirectPropertySpecialization Implements IProperty ITypeMember IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class IndirectPropertySpecialization : IProperty, ITypeMember, IMember Properties | Improve this Doc View Source Accessors Gets this property's accessors. Each property can have at most one accessor any given kind. Declaration public IReadOnlyList<IAccessor> Accessors { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IAccessor > A read-only list of accessors. | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source Declaration Gets the property's generic declaration. Declaration public IProperty Declaration { get; } Property Value Type Description IProperty The property's declaration. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source IndexerParameters Gets this property's indexer parameters, i.e., an additional list of parameters that each accessor takes. Declaration public IReadOnlyList<Parameter> IndexerParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > The indexer parameters. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source ParentType Gets the type that defines this member, if any. Declaration public IType ParentType { get; } Property Value Type Description IType The parent type. | Improve this Doc View Source PropertyType Gets this property's type. Declaration public IType PropertyType { get; } Property Value Type Description IType The property's type. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IProperty ITypeMember IMember"
  },
  "api/Flame.TypeSystem.IndirectMethodSpecialization.html": {
    "href": "api/Flame.TypeSystem.IndirectMethodSpecialization.html",
    "title": "Class IndirectMethodSpecialization | Flame",
    "keywords": "Class IndirectMethodSpecialization A specialization of a method that is obtained by specializing the method's parent type. Inheritance System.Object MethodSpecialization IndirectMethodSpecialization IndirectAccessorSpecialization Implements IMethod ITypeMember IGenericMember IMember Inherited Members MethodSpecialization.InitializeInstance(MethodSpecialization) MethodSpecialization.Declaration MethodSpecialization.IsConstructor MethodSpecialization.IsStatic MethodSpecialization.ReturnParameter MethodSpecialization.Parameters MethodSpecialization.BaseMethods MethodSpecialization.Attributes MethodSpecialization.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public class IndirectMethodSpecialization : MethodSpecialization, IMethod, ITypeMember, IGenericMember, IMember Properties | Improve this Doc View Source FullName Gets the member's full name. Declaration public override QualifiedName FullName { get; } Property Value Type Description QualifiedName Overrides MethodSpecialization.FullName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public override IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. Overrides MethodSpecialization.GenericParameters | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public override UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName Overrides MethodSpecialization.Name | Improve this Doc View Source ParentType Gets the parent type specialization that defines this method specialization. Declaration public override IType ParentType { get; } Property Value Type Description IType The parent type specialization. Overrides MethodSpecialization.ParentType Implements IMethod ITypeMember IGenericMember IMember Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.TypeSystem.IndirectGenericParameterSpecialization.html": {
    "href": "api/Flame.TypeSystem.IndirectGenericParameterSpecialization.html",
    "title": "Class IndirectGenericParameterSpecialization | Flame",
    "keywords": "Class IndirectGenericParameterSpecialization A generic specialization of a generic parameter that is obtained by specializing the declaring member of a generic parameter definition. Inheritance System.Object TypeSpecialization IndirectGenericParameterSpecialization Implements IGenericParameter IType IGenericMember IMember Inherited Members TypeSpecialization.Initialize() TypeSpecialization.Declaration TypeSpecialization.BaseTypes TypeSpecialization.Fields TypeSpecialization.Methods TypeSpecialization.Properties TypeSpecialization.Attributes TypeSpecialization.NestedTypes TypeSpecialization.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class IndirectGenericParameterSpecialization : TypeSpecialization, IGenericParameter, IType, IGenericMember, IMember Properties | Improve this Doc View Source FullName Gets the member's full name. Declaration public override QualifiedName FullName { get; } Property Value Type Description QualifiedName Overrides TypeSpecialization.FullName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public override IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. Overrides TypeSpecialization.GenericParameters | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public override UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName Overrides TypeSpecialization.Name | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public override TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. Overrides TypeSpecialization.Parent | Improve this Doc View Source ParentMember Gets the generic member that defines this generic parameter. Declaration public IGenericMember ParentMember { get; } Property Value Type Description IGenericMember Implements IGenericParameter IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.IndirectFieldSpecialization.html": {
    "href": "api/Flame.TypeSystem.IndirectFieldSpecialization.html",
    "title": "Class IndirectFieldSpecialization | Flame",
    "keywords": "Class IndirectFieldSpecialization A specialization of a field belonging to a recursively generic type. Inheritance System.Object IndirectFieldSpecialization Implements IField ITypeMember IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class IndirectFieldSpecialization : IField, ITypeMember, IMember Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source Declaration Gets the generic declaration of which this field is a specialization. Declaration public IField Declaration { get; } Property Value Type Description IField A generic field declaration. | Improve this Doc View Source FieldType Gets the type of value stored in this field. Declaration public IType FieldType { get; } Property Value Type Description IType The type of value stored in this field. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source IsStatic Tells if this field is static. The storage for static fields is shared by the entire application, whereas the storage for instance (i.e., non-static) fields is specific to an instance of a type. Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean true if this field is static; otherwise, false . | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source ParentType Gets the type that defines this member, if any. Declaration public IType ParentType { get; } Property Value Type Description IType The parent type. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IField ITypeMember IMember Extension Methods TypeExtensions.GetRecursiveGenericDeclaration(IField)"
  },
  "api/Flame.TypeSystem.IndirectAccessorSpecialization.html": {
    "href": "api/Flame.TypeSystem.IndirectAccessorSpecialization.html",
    "title": "Class IndirectAccessorSpecialization | Flame",
    "keywords": "Class IndirectAccessorSpecialization An accessor specialization that is obtained by observing an accessor of an indirect property specialization. Inheritance System.Object MethodSpecialization IndirectMethodSpecialization IndirectAccessorSpecialization Implements IAccessor IMethod ITypeMember IGenericMember IMember Inherited Members IndirectMethodSpecialization.ParentType IndirectMethodSpecialization.Name IndirectMethodSpecialization.FullName IndirectMethodSpecialization.GenericParameters MethodSpecialization.InitializeInstance(MethodSpecialization) MethodSpecialization.Declaration MethodSpecialization.IsConstructor MethodSpecialization.IsStatic MethodSpecialization.ReturnParameter MethodSpecialization.Parameters MethodSpecialization.BaseMethods MethodSpecialization.Attributes MethodSpecialization.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class IndirectAccessorSpecialization : IndirectMethodSpecialization, IAccessor, IMethod, ITypeMember, IGenericMember, IMember Properties | Improve this Doc View Source Kind Gets this accessor's kind. Declaration public AccessorKind Kind { get; } Property Value Type Description AccessorKind The accessor's kind. | Improve this Doc View Source ParentProperty Gets this accessor's parent property: the property that defines it. Declaration public IProperty ParentProperty { get; } Property Value Type Description IProperty The accessor's parent property. Implements IAccessor IMethod ITypeMember IGenericMember IMember Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.TypeSystem.ImpreciseBoolean.html": {
    "href": "api/Flame.TypeSystem.ImpreciseBoolean.html",
    "title": "Enum ImpreciseBoolean | Flame",
    "keywords": "Enum ImpreciseBoolean A three-valued \"Boolean\" type that allows Boolean property analyses to express uncertainty. Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public enum ImpreciseBoolean Fields Name Description False The false constant, which indicates that a property definitely doesn't hold. Maybe A value that expresses uncertainty about whether a property holds or not: it may hold or it may not. True The true constant, which indicates that a property holds."
  },
  "api/Flame.TypeSystem.FlagAttribute.html": {
    "href": "api/Flame.TypeSystem.FlagAttribute.html",
    "title": "Class FlagAttribute | Flame",
    "keywords": "Class FlagAttribute A collection of constants and methods that relate to simple flag attributes. Inheritance System.Object FlagAttribute Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public static class FlagAttribute Fields | Improve this Doc View Source Abstract An attribute that identifies a type or method as abstract. Declaration public static readonly IntrinsicAttribute Abstract Field Value Type Description IntrinsicAttribute An intrinsic attribute. | Improve this Doc View Source ReferenceType An attribute that identifies types as reference types. Declaration public static readonly IntrinsicAttribute ReferenceType Field Value Type Description IntrinsicAttribute An intrinsic attribute. | Improve this Doc View Source Virtual An attribute that identifies a type or method as virtual, that is, eligible for inheritance and overriding, respectively. Declaration public static readonly IntrinsicAttribute Virtual Field Value Type Description IntrinsicAttribute An intrinsic attribute. Methods | Improve this Doc View Source IsAbstract(IMethod) Tests if a particular method is abstract. Declaration public static bool IsAbstract(this IMethod method) Parameters Type Name Description IMethod method The method to test. Returns Type Description System.Boolean true if the method is abstract; otherwise, false . | Improve this Doc View Source IsAbstract(IType) Tests if a particular type is abstract. Declaration public static bool IsAbstract(this IType type) Parameters Type Name Description IType type The type to test. Returns Type Description System.Boolean true if the type is abstract; otherwise, false . | Improve this Doc View Source IsReferenceType(IType) Tests if a particular type is definitely a reference type. Declaration public static bool IsReferenceType(this IType type) Parameters Type Name Description IType type The type to test. Returns Type Description System.Boolean true if the type is definitely a reference type; otherwise, false . | Improve this Doc View Source IsVirtual(IMethod) Tests if a particular method is virtual. Declaration public static bool IsVirtual(this IMethod method) Parameters Type Name Description IMethod method The method to test. Returns Type Description System.Boolean true if the method is virtual; otherwise, false . | Improve this Doc View Source IsVirtual(IType) Tests if a particular type is virtual. Declaration public static bool IsVirtual(this IType type) Parameters Type Name Description IType type The type to test. Returns Type Description System.Boolean true if the type is virtual; otherwise, false ."
  },
  "api/Flame.TypeExtensions.html": {
    "href": "api/Flame.TypeExtensions.html",
    "title": "Class TypeExtensions | Flame",
    "keywords": "Class TypeExtensions A collection of extension and helper methods that simplify working with types. Inheritance System.Object TypeExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public static class TypeExtensions Methods | Improve this Doc View Source GetGenericArguments(IMethod) Gets the generic arguments given to a particular method, if any. The list returned by this method does not include arguments given to parent types of the provided method. Declaration public static IReadOnlyList<IType> GetGenericArguments(this IMethod method) Parameters Type Name Description IMethod method Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of generic argument types. | Improve this Doc View Source GetGenericArguments(IType) Gets the generic arguments given to a particular type, if any. The list returned by this method does not include arguments given to parent types of the provided type. Declaration public static IReadOnlyList<IType> GetGenericArguments(this IType type) Parameters Type Name Description IType type Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of generic argument types. | Improve this Doc View Source GetRecursiveGenericArgumentMapping(IMethod) Creates a dictionary that maps a method's recursive generic parameters to their arguments. Additionally, original generic parameters are also mapped to modified generic parameters. Declaration public static IReadOnlyDictionary<IType, IType> GetRecursiveGenericArgumentMapping(this IMethod method) Parameters Type Name Description IMethod method The method to create the mapping for. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < IType , IType > A mapping of generic parameters to their arguments. | Improve this Doc View Source GetRecursiveGenericArgumentMapping(IType) Creates a dictionary that maps a type's recursive generic parameters to their arguments. Additionally, original generic parameters are also mapped to modified generic parameters. Declaration public static IReadOnlyDictionary<IType, IType> GetRecursiveGenericArgumentMapping(this IType type) Parameters Type Name Description IType type The type to create the mapping for. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < IType , IType > A mapping of generic parameters to their arguments. | Improve this Doc View Source GetRecursiveGenericArguments(IType) Gets the recursive generic arguments for a particular type. Declaration public static IReadOnlyList<IType> GetRecursiveGenericArguments(this IType type) Parameters Type Name Description IType type A type to examine. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > The type's list of recursive generic arguments. | Improve this Doc View Source GetRecursiveGenericDeclaration(IField) Gets the recursive generic declaration of a field. If the field is not a recursive generic instance, the field itself is returned. If the field is a recursive generic instance, the recursive generic declaration of the field's generic declaration is returned. Declaration public static IField GetRecursiveGenericDeclaration(this IField field) Parameters Type Name Description IField field A field to examine. Returns Type Description IField The field's recursive generic declaration. | Improve this Doc View Source GetRecursiveGenericDeclaration(IMethod) Gets the recursive generic declaration of a method. If the method is not a recursive generic instance, the method itself is returned. If the method is a recursive generic instance, the recursive generic declaration of the method's generic declaration is returned. Declaration public static IMethod GetRecursiveGenericDeclaration(this IMethod method) Parameters Type Name Description IMethod method A method to examine. Returns Type Description IMethod The method's recursive generic declaration. | Improve this Doc View Source GetRecursiveGenericDeclaration(IType) Gets the recursive generic declaration of a type. If the type is not a recursive generic instance, the type itself is returned. If the type is a recursive generic instance, the recursive generic declaration of the type's generic declaration is returned. Declaration public static IType GetRecursiveGenericDeclaration(this IType type) Parameters Type Name Description IType type A type to examine. Returns Type Description IType The type's recursive generic declaration. | Improve this Doc View Source GetRecursiveGenericParameters(IType) Gets the recursive generic parameters for a particular type. Declaration public static IReadOnlyList<IGenericParameter> GetRecursiveGenericParameters(this IType type) Parameters Type Name Description IType type A type to examine. Returns Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The type's list of recursive generic parameters. | Improve this Doc View Source IsPointerType(IType) Tests if a type is a pointer type. Declaration public static bool IsPointerType(this IType type) Parameters Type Name Description IType type The type to inspect. Returns Type Description System.Boolean true if the type is a pointer type; otherwise, false . | Improve this Doc View Source IsPointerType(IType, PointerKind) Tests if a type is a pointer type of a particular kind. Declaration public static bool IsPointerType(this IType type, PointerKind kind) Parameters Type Name Description IType type The type to inspect. PointerKind kind The kind of pointer to test for. Returns Type Description System.Boolean true if the type is a pointer type of the specified kind; otherwise, false . | Improve this Doc View Source IsRecursiveGenericInstance(IType) Tells if a particular type is either a generic instance or a nested type of a generic instance. Declaration public static bool IsRecursiveGenericInstance(this IType type) Parameters Type Name Description IType type A type to examine. Returns Type Description System.Boolean true if the type is a recursive generic instance; otherwise, false . | Improve this Doc View Source MakeGenericMethod(IMethod, IType[]) Creates a generic specialization of a particular generic method declaration Declaration public static DirectMethodSpecialization MakeGenericMethod(this IMethod declaration, params IType[] genericArguments) Parameters Type Name Description IMethod declaration The generic method declaration that is specialized into a concrete method. IType [] genericArguments The type arguments with which the generic method is specialized. Returns Type Description DirectMethodSpecialization A generic specialization. | Improve this Doc View Source MakeGenericMethod(IMethod, IReadOnlyList<IType>) Creates a generic specialization of a particular generic method declaration Declaration public static DirectMethodSpecialization MakeGenericMethod(this IMethod declaration, IReadOnlyList<IType> genericArguments) Parameters Type Name Description IMethod declaration The generic method declaration that is specialized into a concrete method. System.Collections.Generic.IReadOnlyList < IType > genericArguments The type arguments with which the generic method is specialized. Returns Type Description DirectMethodSpecialization A generic specialization. | Improve this Doc View Source MakeGenericType(IType, IType[]) Creates a generic specialization of a particular generic type declaration Declaration public static DirectTypeSpecialization MakeGenericType(this IType declaration, params IType[] genericArguments) Parameters Type Name Description IType declaration The generic type declaration that is specialized into a concrete type. IType [] genericArguments The type arguments with which the generic type is specialized. Returns Type Description DirectTypeSpecialization A generic specialization. | Improve this Doc View Source MakeGenericType(IType, IReadOnlyList<IType>) Creates a generic specialization of a particular generic type declaration Declaration public static DirectTypeSpecialization MakeGenericType(this IType declaration, IReadOnlyList<IType> genericArguments) Parameters Type Name Description IType declaration The generic type declaration that is specialized into a concrete type. System.Collections.Generic.IReadOnlyList < IType > genericArguments The type arguments with which the generic type is specialized. Returns Type Description DirectTypeSpecialization A generic specialization. | Improve this Doc View Source MakePointerType(IType, PointerKind) Creates a pointer type of a particular kind that has a type as element. Declaration public static PointerType MakePointerType(this IType type, PointerKind kind) Parameters Type Name Description IType type The type of values referred to by the pointer type. PointerKind kind The kind of the pointer type. Returns Type Description PointerType A pointer type. | Improve this Doc View Source MakeRecursiveGenericType(IType, IReadOnlyList<IType>) Turns a recursive generic declaration into a recursive generic instance with a particular list of recursive generic arguments. Declaration public static IType MakeRecursiveGenericType(this IType type, IReadOnlyList<IType> recursiveGenericArguments) Parameters Type Name Description IType type The type to recursively instantiate. System.Collections.Generic.IReadOnlyList < IType > recursiveGenericArguments A list of recursive generic arguments for the type. Returns Type Description IType A recursive generic instance type."
  },
  "api/Flame.SimpleName.html": {
    "href": "api/Flame.SimpleName.html",
    "title": "Class SimpleName | Flame",
    "keywords": "Class SimpleName Defines a simple name: a name and the number of type parameters it takes. Inheritance System.Object UnqualifiedName SimpleName Implements System.IEquatable < UnqualifiedName > System.IEquatable < SimpleName > Inherited Members UnqualifiedName.Qualify() UnqualifiedName.Qualify(QualifiedName) UnqualifiedName.Qualify(UnqualifiedName) UnqualifiedName.Qualify(String) UnqualifiedName.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public class SimpleName : UnqualifiedName, IEquatable<UnqualifiedName>, IEquatable<SimpleName> Constructors | Improve this Doc View Source SimpleName(String) Creates a new simple name from a string. The resulting name has zero type parameters. Declaration public SimpleName(string name) Parameters Type Name Description System.String name | Improve this Doc View Source SimpleName(String, Int32) Creates a new simple name from a string and a number of type parameters. Declaration public SimpleName(string name, int typeParameterCount) Parameters Type Name Description System.String name System.Int32 typeParameterCount Properties | Improve this Doc View Source Name Gets this simple name's actual name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source TypeParameterCount Gets the number of type parameters for this simple name. Declaration public int TypeParameterCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(SimpleName) Declaration public bool Equals(SimpleName other) Parameters Type Name Description SimpleName other Returns Type Description System.Boolean | Improve this Doc View Source Equals(UnqualifiedName) Checks if this unqualified name equals another unqualified name. Declaration public override bool Equals(UnqualifiedName other) Parameters Type Name Description UnqualifiedName other An unqualified name to compare this unqualified name to. Returns Type Description System.Boolean true if this unqualified name equals the object; otherwise, false . Overrides UnqualifiedName.Equals(UnqualifiedName) | Improve this Doc View Source GetHashCode() Gets a hash code for this unqualified name. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code. Overrides UnqualifiedName.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation for this unqualified name. Declaration public override string ToString() Returns Type Description System.String A string representation. Overrides UnqualifiedName.ToString() Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Flame.QualifiedName.html": {
    "href": "api/Flame.QualifiedName.html",
    "title": "Struct QualifiedName | Flame",
    "keywords": "Struct QualifiedName A data structure that represents a qualified name. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame Assembly : Flame.dll Syntax public struct QualifiedName Constructors | Improve this Doc View Source QualifiedName(UnqualifiedName) Creates a qualified name from an unqualified name. Declaration public QualifiedName(UnqualifiedName name) Parameters Type Name Description UnqualifiedName name An unqualified name to qualify. | Improve this Doc View Source QualifiedName(UnqualifiedName, QualifiedName) Creates a qualified name by prepending a qualifier to another qualified name. Declaration public QualifiedName(UnqualifiedName qualifier, QualifiedName name) Parameters Type Name Description UnqualifiedName qualifier A qualifier to prepend to a name. QualifiedName name A qualified name to prepend the qualifier to. | Improve this Doc View Source QualifiedName(IReadOnlyList<UnqualifiedName>) Creates a qualified name from a sequence of qualifiers. Declaration public QualifiedName(IReadOnlyList<UnqualifiedName> qualifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < UnqualifiedName > qualifiers The qualified name's qualifiers. | Improve this Doc View Source QualifiedName(IReadOnlyList<String>) Creates a qualified name from a sequence of strings that are interpreted as simple names. Declaration public QualifiedName(IReadOnlyList<string> names) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < System.String > names A list of strings, each of which is interpreted as a simple name. | Improve this Doc View Source QualifiedName(String) Creates a qualified name from a string that is interpreted as a simple name. Declaration public QualifiedName(string name) Parameters Type Name Description System.String name A string to create a simple name from, which is subsequently qualified. | Improve this Doc View Source QualifiedName(String, QualifiedName) Creates a qualified name from a qualifier and an unqualified name. Declaration public QualifiedName(string qualifier, QualifiedName name) Parameters Type Name Description System.String qualifier A qualifier to prepend to the unqualified name. QualifiedName name An unqualified name to qualify. | Improve this Doc View Source QualifiedName(String[]) Creates a qualified name from an array of strings that are interpreted as simple names. Declaration public QualifiedName(params string[] names) Parameters Type Name Description System.String [] names A list of strings, each of which is interpreted as a simple name. Properties | Improve this Doc View Source FullName Gets this qualified name's full name. Declaration public string FullName { get; } Property Value Type Description System.String | Improve this Doc View Source FullyUnqualifiedName Gets the fully unqualified version of this qualified name, i.e., the last element in the qualifier path. Declaration public UnqualifiedName FullyUnqualifiedName { get; } Property Value Type Description UnqualifiedName The fully unqualified name. | Improve this Doc View Source IsEmpty Gets a value indicating whether this name is empty: it is both unqualified, and its name null. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if this name is empty; otherwise, false . | Improve this Doc View Source IsQualified Gets a value indicating whether this name is a qualified name, rather than an unqualified name. Declaration public bool IsQualified { get; } Property Value Type Description System.Boolean true if this name is qualified; otherwise, false . | Improve this Doc View Source Item[Int32] Gets the unqualified name at the given index in this path representation of this qualified name. Declaration public UnqualifiedName this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description UnqualifiedName | Improve this Doc View Source Name Gets the name that is qualified by the qualifier. This corresponds to the tail of this qualified name's path representation. Declaration public QualifiedName Name { get; } Property Value Type Description QualifiedName | Improve this Doc View Source Path Describes this qualified name as a \"path\": a sequence of unqualified names that spell this qualified name. Declaration public IReadOnlyList<UnqualifiedName> Path { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < UnqualifiedName > | Improve this Doc View Source PathLength Gets the number of elements in the path representation of this qualified name. Declaration public int PathLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Qualifier Gets this qualified name's qualifier, or the unqualified name, if this name is not qualified. This corresponds to the first element of the qualified name's path representation. Declaration public UnqualifiedName Qualifier { get; } Property Value Type Description UnqualifiedName Methods | Improve this Doc View Source Drop(Int32) Drops the given number of qualifiers from this qualified name. If this drops all qualifiers, then the empty name is returned. Declaration public QualifiedName Drop(int count) Parameters Type Name Description System.Int32 count Returns Type Description QualifiedName Remarks This is equivalent to accessing 'Name' multiple times. | Improve this Doc View Source Equals(QualifiedName) Tests if this qualified name equals another qualified name. Declaration public bool Equals(QualifiedName other) Parameters Type Name Description QualifiedName other A qualified name to compare this name to. Returns Type Description System.Boolean true if this name equals the other name; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Qualify(QualifiedName) Qualifies this name with an additional qualifier. A new instance is returned that represents the concatenation of said qualifier and this qualified name. Declaration public QualifiedName Qualify(QualifiedName preQualifier) Parameters Type Name Description QualifiedName preQualifier Returns Type Description QualifiedName | Improve this Doc View Source Qualify(UnqualifiedName) Qualifies this name with an additional qualifier. A new instance is returned that represents the concatenation of said qualifier and this qualified name. Declaration public QualifiedName Qualify(UnqualifiedName preQualifier) Parameters Type Name Description UnqualifiedName preQualifier Returns Type Description QualifiedName | Improve this Doc View Source Qualify(String) Qualifies this name with an additional qualifier. A new instance is returned that represents the concatenation of said qualifier and this qualified name. Declaration public QualifiedName Qualify(string preQualifier) Parameters Type Name Description System.String preQualifier Returns Type Description QualifiedName | Improve this Doc View Source Slice(Int32) Creates a slice of the path representation of this qualified name and returns that slice as a new qualified name. The slice starts at a particular offset and ends at the end of this qualified name. Declaration public QualifiedName Slice(int offset) Parameters Type Name Description System.Int32 offset The offset in the path at which the slice begins. Returns Type Description QualifiedName A qualified name. | Improve this Doc View Source Slice(Int32, Int32) Creates a slice of the path representation of this qualified name and returns that slice as a new qualified name. Both the offset and length must be greater than zero, and will be clamped to this qualified name's bounds. Declaration public QualifiedName Slice(int offset, int length) Parameters Type Name Description System.Int32 offset System.Int32 length Returns Type Description QualifiedName | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/Flame.PointerName.html": {
    "href": "api/Flame.PointerName.html",
    "title": "Class PointerName | Flame",
    "keywords": "Class PointerName Defines a poiner name: a qualified name that is turned into a pointer. Inheritance System.Object UnqualifiedName PointerName Implements System.IEquatable < UnqualifiedName > System.IEquatable < PointerName > Inherited Members UnqualifiedName.Qualify() UnqualifiedName.Qualify(QualifiedName) UnqualifiedName.Qualify(UnqualifiedName) UnqualifiedName.Qualify(String) UnqualifiedName.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public class PointerName : UnqualifiedName, IEquatable<UnqualifiedName>, IEquatable<PointerName> Constructors | Improve this Doc View Source PointerName(QualifiedName, PointerKind) Creates a pointer name from a qualified name and a pointer kind. Declaration public PointerName(QualifiedName elementName, PointerKind kind) Parameters Type Name Description QualifiedName elementName The name of the element type in this pointer name. PointerKind kind The kind of pointer named by this pointer name. Properties | Improve this Doc View Source ElementName Gets the qualified name that is turned into a pointer. Declaration public QualifiedName ElementName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source Kind Gets this pointer name's pointer kind. Declaration public PointerKind Kind { get; } Property Value Type Description PointerKind Methods | Improve this Doc View Source Equals(PointerName) Declaration public bool Equals(PointerName other) Parameters Type Name Description PointerName other Returns Type Description System.Boolean | Improve this Doc View Source Equals(UnqualifiedName) Checks if this unqualified name equals another unqualified name. Declaration public override bool Equals(UnqualifiedName Other) Parameters Type Name Description UnqualifiedName Other Returns Type Description System.Boolean true if this unqualified name equals the object; otherwise, false . Overrides UnqualifiedName.Equals(UnqualifiedName) | Improve this Doc View Source GetHashCode() Gets a hash code for this unqualified name. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code. Overrides UnqualifiedName.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation for this unqualified name. Declaration public override string ToString() Returns Type Description System.String A string representation. Overrides UnqualifiedName.ToString() Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Flame.Parameter.html": {
    "href": "api/Flame.Parameter.html",
    "title": "Struct Parameter | Flame",
    "keywords": "Struct Parameter Describes a parameter to a method. Implements IMember Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame Assembly : Flame.dll Syntax public struct Parameter : IMember Constructors | Improve this Doc View Source Parameter(IType) Creates a parameter from a type. Declaration public Parameter(IType type) Parameters Type Name Description IType type The parameter's type. | Improve this Doc View Source Parameter(IType, UnqualifiedName) Creates a parameter from a type and a name. Declaration public Parameter(IType type, UnqualifiedName name) Parameters Type Name Description IType type The parameter's type. UnqualifiedName name The parameter's name. | Improve this Doc View Source Parameter(IType, UnqualifiedName, AttributeMap) Creates a parameter from a type, a name and an attribute map. Declaration public Parameter(IType type, UnqualifiedName name, AttributeMap attributes) Parameters Type Name Description IType type The parameter's type. UnqualifiedName name The parameter's name. AttributeMap attributes The parameter's attributes. | Improve this Doc View Source Parameter(IType, String) Creates a parameter from a type and a name. Declaration public Parameter(IType type, string name) Parameters Type Name Description IType type The parameter's type. System.String name The parameter's name. | Improve this Doc View Source Parameter(IType, String, AttributeMap) Creates a parameter from a type, a name and an attribute map. Declaration public Parameter(IType type, string name, AttributeMap attributes) Parameters Type Name Description IType type The parameter's type. System.String name The parameter's name. AttributeMap attributes The parameter's attributes. Properties | Improve this Doc View Source Attributes Gets this parameter's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap The attributes for this parameter. | Improve this Doc View Source FullName Gets this parameter's full name, which is just a qualified version of its unqualified name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName The parameter's full name. | Improve this Doc View Source Name Gets the parameter's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName The unqualified name. | Improve this Doc View Source Type Gets this parameter's type. Declaration public IType Type { get; } Property Value Type Description IType The parameter's type. Methods | Improve this Doc View Source CreateThisParameter(IType) Creates a 'this' parameter for a particular type. Declaration public static Parameter CreateThisParameter(IType parentType) Parameters Type Name Description IType parentType The type to create a 'this' parameter for. Returns Type Description Parameter A 'this' parameter. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this parameter's type. The result is returned as a new parameter. Declaration public Parameter Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping The member mapping to apply. Returns Type Description Parameter A new parameter. | Improve this Doc View Source MapAll(IReadOnlyList<Parameter>, MemberMapping) Applies a member mapping to every element of a read-only list. Declaration public static IReadOnlyList<Parameter> MapAll(IReadOnlyList<Parameter> parameters, MemberMapping mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Parameter > parameters The elements to map on. MemberMapping mapping The member mapping to apply to each member. Returns Type Description System.Collections.Generic.IReadOnlyList < Parameter > A list of transformed parameters. | Improve this Doc View Source WithAttributes(AttributeMap) Creates a new parameter that retains all characteristics from this parameter except for its attributes, which are replaced by a new attribute map. Declaration public Parameter WithAttributes(AttributeMap attributes) Parameters Type Name Description AttributeMap attributes The attribute map for the new parameter. Returns Type Description Parameter The new parameter. | Improve this Doc View Source WithType(IType) Creates a new parameter that retains all characteristics from this parameter except for its type, which is replaced by the given type. Declaration public Parameter WithType(IType type) Parameters Type Name Description IType type The type of the new parameter. Returns Type Description Parameter The new parameter. Implements IMember"
  },
  "api/Flame.ITypeMember.html": {
    "href": "api/Flame.ITypeMember.html",
    "title": "Interface ITypeMember | Flame",
    "keywords": "Interface ITypeMember Defines a common interface for members that may be defined inside types. Inherited Members IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface ITypeMember : IMember Properties | Improve this Doc View Source ParentType Gets the type that defines this member, if any. Declaration IType ParentType { get; } Property Value Type Description IType The parent type."
  },
  "api/Flame.IType.html": {
    "href": "api/Flame.IType.html",
    "title": "Interface IType | Flame",
    "keywords": "Interface IType Defines a type of value. Inherited Members IGenericMember.GenericParameters IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IType : IGenericMember, IMember Properties | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Fields Gets this type's fields. Declaration IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source Methods Gets this type's methods. Declaration IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.Ir.html": {
    "href": "api/Flame.Ir.html",
    "title": "Namespace Flame.Ir | Flame",
    "keywords": "Namespace Flame.Ir Classes Codec<TObj, TEnc> An encoder/decoder for values. ConstantCodec A codec for constants. DecoderState Decodes Loyc LNodes to Flame's intermediate representation. EncoderState Encodes Flame's intermediate representation as Loyc LNodes. FeedbackHelpers A collection of functions that help produce wonderful diagnostics, geared particularly toward LNodes. InstructionCodecElements Defines codec elements for instruction prototypes. IrAssembly An assembly that is decoded from a Flame IR field LNode. IrField A field that is decoded from a Flame IR field LNode. IrMember A base class for members that are decoded from LNodes. IrMethod A method that is decoded from a Flame IR method LNode. IrType A type that is decoded from a Flame IR type LNode. PiecewiseCodec<TObj> An encoder/decoder for a broad class of values that uses identifiers to differentiate between different types of encoded objects. TypeCodec A codec for type references. TypeDefinitionCodec A codec for type definitions. TypeMemberCodec A codec for type member references. TypeMemberDefinitionCodec A codec for type member definitions. Structs CodecElement<TObj, TEnc> An encoder/decoder for a specific type of object. IrCodec An encoder/decoder for every configurable element of Flame's intermediate representation."
  },
  "api/Flame.Ir.TypeMemberDefinitionCodec.html": {
    "href": "api/Flame.Ir.TypeMemberDefinitionCodec.html",
    "title": "Class TypeMemberDefinitionCodec | Flame",
    "keywords": "Class TypeMemberDefinitionCodec A codec for type member definitions. Inheritance System.Object Codec < ITypeMember , Loyc.Syntax.LNode > TypeMemberDefinitionCodec Inherited Members Codec<ITypeMember, LNode>.Encode(ITypeMember, EncoderState) Codec<ITypeMember, LNode>.Decode(LNode, DecoderState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class TypeMemberDefinitionCodec : Codec<ITypeMember, LNode> Fields | Improve this Doc View Source Instance Gets an instance of the default type member definition codec. Declaration public static readonly Codec<ITypeMember, LNode> Instance Field Value Type Description Codec < ITypeMember , Loyc.Syntax.LNode > A type member definition codec. Methods | Improve this Doc View Source Decode(LNode, DecoderState) Declaration public override ITypeMember Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data DecoderState state Returns Type Description ITypeMember Overrides Flame.Ir.Codec<Flame.ITypeMember, Loyc.Syntax.LNode>.Decode(Loyc.Syntax.LNode, Flame.Ir.DecoderState) | Improve this Doc View Source Encode(ITypeMember, EncoderState) Declaration public override LNode Encode(ITypeMember value, EncoderState state) Parameters Type Name Description ITypeMember value EncoderState state Returns Type Description Loyc.Syntax.LNode Overrides Flame.Ir.Codec<Flame.ITypeMember, Loyc.Syntax.LNode>.Encode(Flame.ITypeMember, Flame.Ir.EncoderState)"
  },
  "api/Flame.Ir.TypeMemberCodec.html": {
    "href": "api/Flame.Ir.TypeMemberCodec.html",
    "title": "Class TypeMemberCodec | Flame",
    "keywords": "Class TypeMemberCodec A codec for type member references. Inheritance System.Object Codec < ITypeMember , Loyc.Syntax.LNode > TypeMemberCodec Inherited Members Codec<ITypeMember, LNode>.Encode(ITypeMember, EncoderState) Codec<ITypeMember, LNode>.Decode(LNode, DecoderState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class TypeMemberCodec : Codec<ITypeMember, LNode> Fields | Improve this Doc View Source Instance A type member reference codec instance. Declaration public static readonly Codec<ITypeMember, LNode> Instance Field Value Type Description Codec < ITypeMember , Loyc.Syntax.LNode > Methods | Improve this Doc View Source Decode(LNode, DecoderState) Declaration public override ITypeMember Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data DecoderState state Returns Type Description ITypeMember Overrides Flame.Ir.Codec<Flame.ITypeMember, Loyc.Syntax.LNode>.Decode(Loyc.Syntax.LNode, Flame.Ir.DecoderState) | Improve this Doc View Source Encode(ITypeMember, EncoderState) Declaration public override LNode Encode(ITypeMember value, EncoderState state) Parameters Type Name Description ITypeMember value EncoderState state Returns Type Description Loyc.Syntax.LNode Overrides Flame.Ir.Codec<Flame.ITypeMember, Loyc.Syntax.LNode>.Encode(Flame.ITypeMember, Flame.Ir.EncoderState)"
  },
  "api/Flame.Ir.TypeDefinitionCodec.html": {
    "href": "api/Flame.Ir.TypeDefinitionCodec.html",
    "title": "Class TypeDefinitionCodec | Flame",
    "keywords": "Class TypeDefinitionCodec A codec for type definitions. Inheritance System.Object Codec < IType , Loyc.Syntax.LNode > TypeDefinitionCodec Inherited Members Codec<IType, LNode>.Encode(IType, EncoderState) Codec<IType, LNode>.Decode(LNode, DecoderState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class TypeDefinitionCodec : Codec<IType, LNode> Fields | Improve this Doc View Source Instance Gets an instance of the default type definition codec. Declaration public static readonly Codec<IType, LNode> Instance Field Value Type Description Codec < IType , Loyc.Syntax.LNode > A type definition codec. Methods | Improve this Doc View Source Decode(LNode, DecoderState) Declaration public override IType Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data DecoderState state Returns Type Description IType Overrides Flame.Ir.Codec<Flame.IType, Loyc.Syntax.LNode>.Decode(Loyc.Syntax.LNode, Flame.Ir.DecoderState) | Improve this Doc View Source Encode(IType, EncoderState) Declaration public override LNode Encode(IType value, EncoderState state) Parameters Type Name Description IType value EncoderState state Returns Type Description Loyc.Syntax.LNode Overrides Flame.Ir.Codec<Flame.IType, Loyc.Syntax.LNode>.Encode(Flame.IType, Flame.Ir.EncoderState)"
  },
  "api/Flame.Ir.TypeCodec.html": {
    "href": "api/Flame.Ir.TypeCodec.html",
    "title": "Class TypeCodec | Flame",
    "keywords": "Class TypeCodec A codec for type references. Inheritance System.Object Codec < IType , Loyc.Syntax.LNode > TypeCodec Inherited Members Codec<IType, LNode>.Encode(IType, EncoderState) Codec<IType, LNode>.Decode(LNode, DecoderState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public class TypeCodec : Codec<IType, LNode> Fields | Improve this Doc View Source Instance An instance of the type codec. Declaration public static readonly TypeCodec Instance Field Value Type Description TypeCodec Methods | Improve this Doc View Source Decode(LNode, DecoderState) Declaration public override IType Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data DecoderState state Returns Type Description IType Overrides Flame.Ir.Codec<Flame.IType, Loyc.Syntax.LNode>.Decode(Loyc.Syntax.LNode, Flame.Ir.DecoderState) | Improve this Doc View Source Encode(IType, EncoderState) Declaration public override LNode Encode(IType value, EncoderState state) Parameters Type Name Description IType value EncoderState state Returns Type Description Loyc.Syntax.LNode Overrides Flame.Ir.Codec<Flame.IType, Loyc.Syntax.LNode>.Encode(Flame.IType, Flame.Ir.EncoderState)"
  },
  "api/Flame.Ir.PiecewiseCodec-1.html": {
    "href": "api/Flame.Ir.PiecewiseCodec-1.html",
    "title": "Class PiecewiseCodec<TObj> | Flame",
    "keywords": "Class PiecewiseCodec<TObj> An encoder/decoder for a broad class of values that uses identifiers to differentiate between different types of encoded objects. Inheritance System.Object Codec <TObj, Loyc.Syntax.LNode > PiecewiseCodec<TObj> Inherited Members Codec<TObj, LNode>.Encode(TObj, EncoderState) Codec<TObj, LNode>.Decode(LNode, DecoderState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public sealed class PiecewiseCodec<TObj> : Codec<TObj, LNode> Type Parameters Name Description TObj Constructors | Improve this Doc View Source PiecewiseCodec() Creates an empty codec. Declaration public PiecewiseCodec() Methods | Improve this Doc View Source Add<T>(CodecElement<T, LNode>) Adds an encoder for a specific type of element to this more general codec. Declaration public PiecewiseCodec<TObj> Add<T>(CodecElement<T, LNode> element) where T : TObj Parameters Type Name Description CodecElement <T, Loyc.Syntax.LNode > element A codec for a particular type of element. Returns Type Description PiecewiseCodec <TObj> A new codec that can encode and decode elements of type T . Type Parameters Name Description T | Improve this Doc View Source Add<T>(CodecElement<T, IReadOnlyList<LNode>>) Adds an encoder for a specific type of element to this more general codec. Declaration public PiecewiseCodec<TObj> Add<T>(CodecElement<T, IReadOnlyList<LNode>> element) where T : TObj Parameters Type Name Description CodecElement <T, System.Collections.Generic.IReadOnlyList < Loyc.Syntax.LNode >> element A codec for a particular type of element. Returns Type Description PiecewiseCodec <TObj> A new codec that can encode and decode elements of type T . Type Parameters Name Description T | Improve this Doc View Source Decode(LNode, DecoderState) Decodes a particular piece of data. Declaration public override TObj Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data Encoded data to decode. DecoderState state The decoder's state. Returns Type Description TObj A decoded object. Overrides Flame.Ir.Codec<TObj, Loyc.Syntax.LNode>.Decode(Loyc.Syntax.LNode, Flame.Ir.DecoderState) | Improve this Doc View Source Encode(TObj, EncoderState) Encodes a value. Declaration public override LNode Encode(TObj value, EncoderState state) Parameters Type Name Description TObj value The value to encode. EncoderState state The state of the encoder. Returns Type Description Loyc.Syntax.LNode The encoded value. Overrides Flame.Ir.Codec<TObj, Loyc.Syntax.LNode>.Encode(TObj, Flame.Ir.EncoderState)"
  },
  "api/Flame.Ir.IrType.html": {
    "href": "api/Flame.Ir.IrType.html",
    "title": "Class IrType | Flame",
    "keywords": "Class IrType A type that is decoded from a Flame IR type LNode. Inheritance System.Object IrMember IrType Implements IType IGenericMember IMember Inherited Members IrMember.Node IrMember.Decoder IrMember.QualifyName(QualifiedName) IrMember.FullName IrMember.Name IrMember.Attributes System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public class IrType : IrMember, IType, IGenericMember, IMember Properties | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Methods | Improve this Doc View Source Decode(LNode, DecoderState) Decodes an LNode as a type definition. Declaration public static IrType Decode(LNode node, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. DecoderState state The decoder's state. Returns Type Description IrType A decoded type. | Improve this Doc View Source Encode(IType, EncoderState) Encodes a type definition as an LNode. Declaration public static LNode Encode(IType value, EncoderState state) Parameters Type Name Description IType value The type definition to encode. EncoderState state The encoder state. Returns Type Description Loyc.Syntax.LNode An LNode that represents the type definition. Implements IType IGenericMember IMember"
  },
  "api/Flame.Ir.IrMethod.html": {
    "href": "api/Flame.Ir.IrMethod.html",
    "title": "Class IrMethod | Flame",
    "keywords": "Class IrMethod A method that is decoded from a Flame IR method LNode. Inheritance System.Object IrMember IrMethod Implements IBodyMethod IMethod ITypeMember IGenericMember IMember Inherited Members IrMember.Node IrMember.Decoder IrMember.QualifyName(QualifiedName) IrMember.FullName IrMember.Name IrMember.Attributes System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public class IrMethod : IrMember, IBodyMethod, IMethod, ITypeMember, IGenericMember, IMember Properties | Improve this Doc View Source BaseMethods Gets the method's base methods. Declaration public IReadOnlyList<IMethod> BaseMethods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > | Improve this Doc View Source Body Gets the method body for this method. Declaration public MethodBody Body { get; } Property Value Type Description MethodBody A method body. | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source IsConstructor Indicates if this method is a constructor. Declaration public bool IsConstructor { get; } Property Value Type Description System.Boolean true if this method is a constructor; otherwise, false . | Improve this Doc View Source IsStatic Tells if this is a static method. Non-static methods take a non-null pointer to their parent type as an implicit first arguments. Static methods do not. Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean true if this method is a static method; otherwise, false . | Improve this Doc View Source Parameters Gets the method's parameters. Declaration public IReadOnlyList<Parameter> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > | Improve this Doc View Source ParentType Gets the type that defines this member, if any. Declaration public IType ParentType { get; } Property Value Type Description IType The parent type. | Improve this Doc View Source ReturnParameter Gets the method's return parameter. Declaration public Parameter ReturnParameter { get; } Property Value Type Description Parameter Methods | Improve this Doc View Source Decode(LNode, DecoderState) Decodes a method from an LNode. Declaration public static IMethod Decode(LNode data, DecoderState state) Parameters Type Name Description Loyc.Syntax.LNode data The LNode to decode. DecoderState state The decoder to use. Returns Type Description IMethod A decoded method if the node can be decoded; otherwise, null . | Improve this Doc View Source Encode(IMethod, EncoderState) Encodes a method as an LNode. Declaration public static LNode Encode(IMethod value, EncoderState state) Parameters Type Name Description IMethod value The method to encode. EncoderState state The encoder to use. Returns Type Description Loyc.Syntax.LNode An LNode that represents the method. Implements IBodyMethod IMethod ITypeMember IGenericMember IMember"
  },
  "api/Flame.Ir.IrMember.html": {
    "href": "api/Flame.Ir.IrMember.html",
    "title": "Class IrMember | Flame",
    "keywords": "Class IrMember A base class for members that are decoded from LNodes. Inheritance System.Object IrMember IrAssembly IrField IrMethod IrType Implements IMember Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Ir Assembly : Flame.Ir.dll Syntax public abstract class IrMember : IMember Constructors | Improve this Doc View Source IrMember(LNode, DecoderState) Creates a member that is the decoded version of a node. Declaration public IrMember(LNode node, DecoderState decoder) Parameters Type Name Description Loyc.Syntax.LNode node The node to decode. DecoderState decoder The decoder to use. Properties | Improve this Doc View Source Attributes Gets this member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source Decoder Gets the decoder that is used for decoding this member. Declaration public DecoderState Decoder { get; } Property Value Type Description DecoderState The decoder. | Improve this Doc View Source FullName Gets this member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName The full name. | Improve this Doc View Source Name Gets this member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source Node Gets the encoded version of this member. Declaration public LNode Node { get; } Property Value Type Description Loyc.Syntax.LNode The encoded version. Methods | Improve this Doc View Source QualifyName(QualifiedName) Qualifies this member's name. Declaration protected virtual QualifiedName QualifyName(QualifiedName name) Parameters Type Name Description QualifiedName name The name to qualify. Returns Type Description QualifiedName The qualified name. Implements IMember"
  },
  "api/Flame.IAttribute.html": {
    "href": "api/Flame.IAttribute.html",
    "title": "Interface IAttribute | Flame",
    "keywords": "Interface IAttribute Defines common functionality for member attributes. Namespace : Flame Assembly : Flame.dll Syntax public interface IAttribute Properties | Improve this Doc View Source AttributeType Gets the attribute's type. Declaration IType AttributeType { get; } Property Value Type Description IType"
  },
  "api/Flame.IAssembly.html": {
    "href": "api/Flame.IAssembly.html",
    "title": "Interface IAssembly | Flame",
    "keywords": "Interface IAssembly Defines a common interface for assemblies: collections of types. Inherited Members IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IAssembly : IMember Properties | Improve this Doc View Source Types Gets a list of all top-level types defined in this assembly. Declaration IReadOnlyList<IType> Types { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined in this assembly."
  },
  "api/Flame.IAccessor.html": {
    "href": "api/Flame.IAccessor.html",
    "title": "Interface IAccessor | Flame",
    "keywords": "Interface IAccessor Describes an accessor. Inherited Members IMethod.IsConstructor IMethod.IsStatic IMethod.ReturnParameter IMethod.Parameters IMethod.BaseMethods ITypeMember.ParentType IGenericMember.GenericParameters IMember.Name IMember.FullName IMember.Attributes Namespace : Flame Assembly : Flame.dll Syntax public interface IAccessor : IMethod, ITypeMember, IGenericMember, IMember Properties | Improve this Doc View Source Kind Gets this accessor's kind. Declaration AccessorKind Kind { get; } Property Value Type Description AccessorKind The accessor's kind. | Improve this Doc View Source ParentProperty Gets this accessor's parent property: the property that defines it. Declaration IProperty ParentProperty { get; } Property Value Type Description IProperty The accessor's parent property. Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.GenericName.html": {
    "href": "api/Flame.GenericName.html",
    "title": "Class GenericName | Flame",
    "keywords": "Class GenericName Defines a generic name; a simple name that is instantiated by a number of generic type arguments. Inheritance System.Object UnqualifiedName GenericName Implements System.IEquatable < UnqualifiedName > System.IEquatable < GenericName > Inherited Members UnqualifiedName.Qualify() UnqualifiedName.Qualify(QualifiedName) UnqualifiedName.Qualify(UnqualifiedName) UnqualifiedName.Qualify(String) UnqualifiedName.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public class GenericName : UnqualifiedName, IEquatable<UnqualifiedName>, IEquatable<GenericName> Constructors | Improve this Doc View Source GenericName(QualifiedName, IReadOnlyList<QualifiedName>) Creates a new generic name from the given declaration name and a number of type arguments names. Declaration public GenericName(QualifiedName declarationName, IReadOnlyList<QualifiedName> typeArgumentNames) Parameters Type Name Description QualifiedName declarationName System.Collections.Generic.IReadOnlyList < QualifiedName > typeArgumentNames | Improve this Doc View Source GenericName(UnqualifiedName, IReadOnlyList<QualifiedName>) Creates a new generic name from the given declaration name and a number of type arguments names. Declaration public GenericName(UnqualifiedName declarationName, IReadOnlyList<QualifiedName> typeArgumentNames) Parameters Type Name Description UnqualifiedName declarationName System.Collections.Generic.IReadOnlyList < QualifiedName > typeArgumentNames Properties | Improve this Doc View Source DeclarationName Gets this generic name's instantiated name, Declaration public QualifiedName DeclarationName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source TypeArgumentNames Gets this generic name's type arguments. Declaration public IReadOnlyList<QualifiedName> TypeArgumentNames { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < QualifiedName > Methods | Improve this Doc View Source Equals(GenericName) Declaration public bool Equals(GenericName other) Parameters Type Name Description GenericName other Returns Type Description System.Boolean | Improve this Doc View Source Equals(UnqualifiedName) Checks if this unqualified name equals another unqualified name. Declaration public override bool Equals(UnqualifiedName other) Parameters Type Name Description UnqualifiedName other An unqualified name to compare this unqualified name to. Returns Type Description System.Boolean true if this unqualified name equals the object; otherwise, false . Overrides UnqualifiedName.Equals(UnqualifiedName) | Improve this Doc View Source GetHashCode() Gets a hash code for this unqualified name. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code. Overrides UnqualifiedName.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation for this unqualified name. Declaration public override string ToString() Returns Type Description System.String A string representation. Overrides UnqualifiedName.ToString() Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Flame.ExceptionSpecification.html": {
    "href": "api/Flame.ExceptionSpecification.html",
    "title": "Class ExceptionSpecification | Flame",
    "keywords": "Class ExceptionSpecification Specifies the exception throwing behavior of a method or instruction. Inheritance System.Object ExceptionSpecification NullCheckExceptionSpecification ExactExceptionSpecification UnionExceptionSpecification Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public abstract class ExceptionSpecification Fields | Improve this Doc View Source NoThrow An exception specification that does not allow for any exceptions to be thrown. Declaration public static readonly ExceptionSpecification NoThrow Field Value Type Description ExceptionSpecification A no-throw exception specification. | Improve this Doc View Source ThrowAny An exception specification that allows for an exception of any type to be thrown. Declaration public static readonly ExceptionSpecification ThrowAny Field Value Type Description ExceptionSpecification A throw-any exception specification. Properties | Improve this Doc View Source CanThrowSomething Tells if this exception specification allows for any exceptions at all to be thrown. Declaration public abstract bool CanThrowSomething { get; } Property Value Type Description System.Boolean true if this exception specification allows for at least one type of exception to be thrown; otherwise, false . Methods | Improve this Doc View Source CanThrow(IType) Tells if this exception specification allows for an exception of a particular type or a derived type to be thrown. Declaration public abstract bool CanThrow(IType exceptionType) Parameters Type Name Description IType exceptionType The type of exception to examine. Returns Type Description System.Boolean true if an exception of type exceptionType or a derived type can be thrown; otherwise, false . | Improve this Doc View Source Exactly(IType) Creates an exception specification that can throw exactly one type of exception. Declaration public static ExactExceptionSpecification Exactly(IType exceptionType) Parameters Type Name Description IType exceptionType The single exception type that can be thrown. Returns Type Description ExactExceptionSpecification | Improve this Doc View Source Union(ExceptionSpecification[]) Takes the union of a sequence of exception specifications. The union can throw an exception iff said exception is throwable by any of the operands. Declaration public static UnionExceptionSpecification Union(params ExceptionSpecification[] operands) Parameters Type Name Description ExceptionSpecification [] operands The exception specifications to which the union operator is applied. Returns Type Description UnionExceptionSpecification A union exception specification."
  },
  "api/Flame.ExactExceptionSpecification.html": {
    "href": "api/Flame.ExactExceptionSpecification.html",
    "title": "Class ExactExceptionSpecification | Flame",
    "keywords": "Class ExactExceptionSpecification An exception specification that can throw an exception of exactly one type. Inheritance System.Object ExceptionSpecification ExactExceptionSpecification Inherited Members ExceptionSpecification.NoThrow ExceptionSpecification.ThrowAny ExceptionSpecification.Exactly(IType) ExceptionSpecification.Union(ExceptionSpecification[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public sealed class ExactExceptionSpecification : ExceptionSpecification Properties | Improve this Doc View Source CanThrowSomething Tells if this exception specification allows for any exceptions at all to be thrown. Declaration public override bool CanThrowSomething { get; } Property Value Type Description System.Boolean true if this exception specification allows for at least one type of exception to be thrown; otherwise, false . Overrides ExceptionSpecification.CanThrowSomething | Improve this Doc View Source ExceptionType Gets the type of exception that can be thrown by this exception specification. Declaration public IType ExceptionType { get; } Property Value Type Description IType The type of exception that can be thrown. Methods | Improve this Doc View Source CanThrow(IType) Tells if this exception specification allows for an exception of a particular type or a derived type to be thrown. Declaration public override bool CanThrow(IType exceptionType) Parameters Type Name Description IType exceptionType The type of exception to examine. Returns Type Description System.Boolean true if an exception of type exceptionType or a derived type can be thrown; otherwise, false . Overrides ExceptionSpecification.CanThrow(IType)"
  },
  "api/Flame.Compiler.Transforms.ConstantPropagation.html": {
    "href": "api/Flame.Compiler.Transforms.ConstantPropagation.html",
    "title": "Class ConstantPropagation | Flame",
    "keywords": "Class ConstantPropagation A transform that evaluates non-effectful instructions at compile-time and propagates their results. Essentially just an implementation of sparse conditional constant propagation. Inheritance System.Object Optimization IntraproceduralOptimization ConstantPropagation Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class ConstantPropagation : IntraproceduralOptimization Constructors | Improve this Doc View Source ConstantPropagation() Creates a constant propagation transform that uses the default evaluation function. Declaration public ConstantPropagation() | Improve this Doc View Source ConstantPropagation(Func<InstructionPrototype, IReadOnlyList<Constant>, Constant>) Creates a constant propagation transform that uses a particular evaluation function. Declaration public ConstantPropagation(Func<InstructionPrototype, IReadOnlyList<Constant>, Constant> evaluate) Parameters Type Name Description System.Func < InstructionPrototype , System.Collections.Generic.IReadOnlyList < Constant >, Constant > evaluate The evaluation function to use. It evaluates an instruction that takes a list of constant arguments. It returns null if the instruction cannot be evaluated; otherwise, it returns the constant to which it was evaluated. Properties | Improve this Doc View Source Evaluate Evaluates an instruction that takes a list of constant arguments. Returns null if the instruction cannot be evaluated. Declaration public Func<InstructionPrototype, IReadOnlyList<Constant>, Constant> Evaluate { get; } Property Value Type Description System.Func < InstructionPrototype , System.Collections.Generic.IReadOnlyList < Constant >, Constant > Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph) | Improve this Doc View Source EvaluateDefault(InstructionPrototype, IReadOnlyList<Constant>) The default constant instruction evaluation function. Declaration public static Constant EvaluateDefault(InstructionPrototype prototype, IReadOnlyList<Constant> arguments) Parameters Type Name Description InstructionPrototype prototype The prorotype of the instruction to evaluate. System.Collections.Generic.IReadOnlyList < Constant > arguments A list of arguments to the instruction, all of which must be constants. Returns Type Description Constant null if the instruction cannot be evaluated; otherwise, the constant to which the instruction evaluates."
  },
  "api/Flame.Compiler.Transforms.BoxToAlloca.html": {
    "href": "api/Flame.Compiler.Transforms.BoxToAlloca.html",
    "title": "Class BoxToAlloca | Flame",
    "keywords": "Class BoxToAlloca A transform that looks for box instructions that are only ever unboxed and replaces them with alloca instructions. The transform is only applied to box instructions for which the unboxed pointers do not escape. Inheritance System.Object Optimization IntraproceduralOptimization BoxToAlloca Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class BoxToAlloca : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the box-to-alloca transform. Declaration public static readonly BoxToAlloca Instance Field Value Type Description BoxToAlloca Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Pipeline.html": {
    "href": "api/Flame.Compiler.Pipeline.html",
    "title": "Namespace Flame.Compiler.Pipeline | Flame",
    "keywords": "Namespace Flame.Compiler.Pipeline Classes AssemblyContentDescription A description of a target assembly's contents. OnDemandOptimizer An optimizer that computes optimized method bodies on an on-demand basis: method bodies are not optimized until they are requested. Optimized method bodies are cached, so method bodies are never optimized twice. Optimization Describes a method body optimization. OptimizationState A container for shared optimization state. Optimizer A base class for optimizers: objects that manage method bodies as they are being optimized and respond to method body queries. Interfaces ITarget A common interface for interacting with back-ends. ITargetAssembly An assembly generated by a back-end."
  },
  "api/Flame.Compiler.Pipeline.Optimizer.html": {
    "href": "api/Flame.Compiler.Pipeline.Optimizer.html",
    "title": "Class Optimizer | Flame",
    "keywords": "Class Optimizer A base class for optimizers: objects that manage method bodies as they are being optimized and respond to method body queries. Inheritance System.Object Optimizer OnDemandOptimizer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Pipeline Assembly : Flame.Compiler.dll Syntax public abstract class Optimizer Methods | Improve this Doc View Source GetBodyAsync(IMethod) Asynchronously requests a method's body. This method should only used by external entities: if methods that are being optimized call this method, then they might cause a deadlock. Declaration public abstract Task<MethodBody> GetBodyAsync(IMethod requested) Parameters Type Name Description IMethod requested The method whose body is requested. Returns Type Description System.Threading.Tasks.Task < MethodBody > The method's body. Remarks The optimizer is free to return any method body that is semantically equivalent to requested 's body. This ranges from requested 's initial method body to its final optimized body. Which version of requested 's body is returned depends on the optimizer. The optimizer is expected to return a method body that is as optimized as possible given the constraints imposed by the optimizer's implementation. | Improve this Doc View Source GetBodyAsync(IMethod, IMethod) Asynchronously requests a method's body. This method will never cause a deadlock, even when methods cyclically request each other's method bodies. Declaration public abstract Task<MethodBody> GetBodyAsync(IMethod requested, IMethod requesting) Parameters Type Name Description IMethod requested The method whose body is requested. IMethod requesting The method that requests requested 's method body. Returns Type Description System.Threading.Tasks.Task < MethodBody > The method's body. Remarks The optimizer is free to return any method body that is semantically equivalent to requested 's body. This ranges from requested 's initial method body to its final optimized body. Which version of requested 's body is returned depends on the optimizer. The optimizer is expected to return a method body that is as optimized as possible given the constraints imposed by the optimizer's implementation."
  },
  "api/Flame.Compiler.Pipeline.OptimizationState.html": {
    "href": "api/Flame.Compiler.Pipeline.OptimizationState.html",
    "title": "Class OptimizationState | Flame",
    "keywords": "Class OptimizationState A container for shared optimization state. Inheritance System.Object OptimizationState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Pipeline Assembly : Flame.Compiler.dll Syntax public sealed class OptimizationState Constructors | Improve this Doc View Source OptimizationState(IMethod, Optimizer) Creates optimization state for a method. Declaration public OptimizationState(IMethod method, Optimizer optimizer) Parameters Type Name Description IMethod method The method to create the optimization state for. Optimizer optimizer The optimizer that is optimizing the method. Properties | Improve this Doc View Source Method Gets the method that is being optimized. Declaration public IMethod Method { get; } Property Value Type Description IMethod A method. | Improve this Doc View Source Optimizer Gets the optimizer that triggered the optimization. Declaration public Optimizer Optimizer { get; } Property Value Type Description Optimizer A method optimizer. Methods | Improve this Doc View Source GetBodyAsync(IMethod) Asynchronously requests a method's body. Declaration public Task<MethodBody> GetBodyAsync(IMethod method) Parameters Type Name Description IMethod method The method whose body is requested. Returns Type Description System.Threading.Tasks.Task < MethodBody > The method's body. Remarks The optimizer is free to return any method body that is semantically equivalent to method 's body. This ranges from method 's initial method body to its final optimized body. Which version of method 's body is returned depends on the optimizer. The optimizer is expected to return a method body that is as optimized as possible given the constraints imposed by the optimizer's implementation."
  },
  "api/Flame.Compiler.Pipeline.Optimization.html": {
    "href": "api/Flame.Compiler.Pipeline.Optimization.html",
    "title": "Class Optimization | Flame",
    "keywords": "Class Optimization Describes a method body optimization. Inheritance System.Object Optimization IntraproceduralOptimization Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Pipeline Assembly : Flame.Compiler.dll Syntax public abstract class Optimization Properties | Improve this Doc View Source IsCheckpoint Tells if this optimization checkpoints its result. The optimizer takes care to always return the latest checkpointed method body is returned when a method's optimized method body is requested. Declaration public abstract bool IsCheckpoint { get; } Property Value Type Description System.Boolean Tells if this optimization performs a checkpoint. Methods | Improve this Doc View Source ApplyAsync(MethodBody, OptimizationState) Applies the optimization to a method body. Declaration public abstract Task<MethodBody> ApplyAsync(MethodBody body, OptimizationState state) Parameters Type Name Description MethodBody body A method body holder to optimize. OptimizationState state State associated with optimizations. Returns Type Description System.Threading.Tasks.Task < MethodBody > A task that produces an optimized method body."
  },
  "api/Flame.Compiler.Pipeline.OnDemandOptimizer.html": {
    "href": "api/Flame.Compiler.Pipeline.OnDemandOptimizer.html",
    "title": "Class OnDemandOptimizer | Flame",
    "keywords": "Class OnDemandOptimizer An optimizer that computes optimized method bodies on an on-demand basis: method bodies are not optimized until they are requested. Optimized method bodies are cached, so method bodies are never optimized twice. Inheritance System.Object Optimizer OnDemandOptimizer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Pipeline Assembly : Flame.Compiler.dll Syntax public sealed class OnDemandOptimizer : Optimizer Constructors | Improve this Doc View Source OnDemandOptimizer(IReadOnlyList<Optimization>) Creates a method body optimizer. Declaration public OnDemandOptimizer(IReadOnlyList<Optimization> pipeline) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Optimization > pipeline A pass pipeline: a sequence of optimizations to apply to every method body. | Improve this Doc View Source OnDemandOptimizer(IReadOnlyList<Optimization>, Func<IMethod, MethodBody>) Creates a method body optimizer. Declaration public OnDemandOptimizer(IReadOnlyList<Optimization> pipeline, Func<IMethod, MethodBody> getInitialMethodBody) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Optimization > pipeline A pass pipeline: a sequence of optimizations to apply to every method body. System.Func < IMethod , MethodBody > getInitialMethodBody A delegate that tries to find an initial method body for a method. This initial method body is is the starting point for further optimizations, both interprocedural and intraprocedural. Methods | Improve this Doc View Source Complete(IMethod, MethodBody) Marks a method body as being finished with regard to its optimization. Declaration public void Complete(IMethod method, MethodBody body) Parameters Type Name Description IMethod method The method that is finished. MethodBody body method 's fully optimized body. | Improve this Doc View Source GetBodyAsync(IMethod) Asynchronously requests a method's body. This method should only used by external entities: if methods that are being optimized call this method, then they might cause a deadlock. Declaration public override Task<MethodBody> GetBodyAsync(IMethod requested) Parameters Type Name Description IMethod requested The method whose body is requested. Returns Type Description System.Threading.Tasks.Task < MethodBody > The method's body. Overrides Optimizer.GetBodyAsync(IMethod) Remarks The optimizer is free to return any method body that is semantically equivalent to requested 's body. This ranges from requested 's initial method body to its final optimized body. Which version of requested 's body is returned depends on the optimizer. The optimizer is expected to return a method body that is as optimized as possible given the constraints imposed by the optimizer's implementation. | Improve this Doc View Source GetBodyAsync(IMethod, IMethod) Asynchronously requests a method's body. This method will never cause a deadlock, even when methods cyclically request each other's method bodies. Declaration public override Task<MethodBody> GetBodyAsync(IMethod requested, IMethod requesting) Parameters Type Name Description IMethod requested The method whose body is requested. IMethod requesting The method that requests requested 's method body. Returns Type Description System.Threading.Tasks.Task < MethodBody > The method's body. Overrides Optimizer.GetBodyAsync(IMethod, IMethod) Remarks The optimizer is free to return any method body that is semantically equivalent to requested 's body. This ranges from requested 's initial method body to its final optimized body. Which version of requested 's body is returned depends on the optimizer. The optimizer is expected to return a method body that is as optimized as possible given the constraints imposed by the optimizer's implementation."
  },
  "api/Flame.Compiler.Pipeline.ITargetAssembly.html": {
    "href": "api/Flame.Compiler.Pipeline.ITargetAssembly.html",
    "title": "Interface ITargetAssembly | Flame",
    "keywords": "Interface ITargetAssembly An assembly generated by a back-end. Namespace : Flame.Compiler.Pipeline Assembly : Flame.Compiler.dll Syntax public interface ITargetAssembly Methods | Improve this Doc View Source WriteTo(Stream) Writes this target assembly to a stream. Declaration void WriteTo(Stream output) Parameters Type Name Description System.IO.Stream output An output stream."
  },
  "api/Flame.Compiler.Pipeline.ITarget.html": {
    "href": "api/Flame.Compiler.Pipeline.ITarget.html",
    "title": "Interface ITarget | Flame",
    "keywords": "Interface ITarget A common interface for interacting with back-ends. Namespace : Flame.Compiler.Pipeline Assembly : Flame.Compiler.dll Syntax public interface ITarget Properties | Improve this Doc View Source Name Gets this target's name. Declaration string Name { get; } Property Value Type Description System.String The target's name. Methods | Improve this Doc View Source Compile(AssemblyContentDescription) Compiles an assembly content description to a target assembly. Declaration ITargetAssembly Compile(AssemblyContentDescription contents) Parameters Type Name Description AssemblyContentDescription contents An assembly content description. Returns Type Description ITargetAssembly A target assembly."
  },
  "api/Flame.Compiler.Pipeline.AssemblyContentDescription.html": {
    "href": "api/Flame.Compiler.Pipeline.AssemblyContentDescription.html",
    "title": "Class AssemblyContentDescription | Flame",
    "keywords": "Class AssemblyContentDescription A description of a target assembly's contents. Inheritance System.Object AssemblyContentDescription Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Pipeline Assembly : Flame.Compiler.dll Syntax public sealed class AssemblyContentDescription Constructors | Improve this Doc View Source AssemblyContentDescription(QualifiedName, AttributeMap, ImmutableHashSet<IType>, ImmutableHashSet<ITypeMember>, IReadOnlyDictionary<IMethod, MethodBody>, IMethod) Creates an assembly content description. Declaration public AssemblyContentDescription(QualifiedName fullName, AttributeMap attributes, ImmutableHashSet<IType> types, ImmutableHashSet<ITypeMember> typeMembers, IReadOnlyDictionary<IMethod, MethodBody> methodBodies, IMethod entryPoint) Parameters Type Name Description QualifiedName fullName The assembly's full name. AttributeMap attributes The assembly's attribute map. System.Collections.Immutable.ImmutableHashSet < IType > types The list of types to include in the assembly. System.Collections.Immutable.ImmutableHashSet < ITypeMember > typeMembers The type members to include in the assembly. System.Collections.Generic.IReadOnlyDictionary < IMethod , MethodBody > methodBodies A mapping of methods to method bodies. IMethod entryPoint An optional entry point method. null means that the assembly has no entry point. Properties | Improve this Doc View Source Attributes Gets the attribute map for the assembly to build. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap An attribute map. | Improve this Doc View Source EntryPoint Gets the assembly's entry point. Returns null if the assembly has no entry point. Declaration public IMethod EntryPoint { get; } Property Value Type Description IMethod The assembly's entry point. | Improve this Doc View Source FullName Gets the full name of the assembly to build. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName A fully qualified name. | Improve this Doc View Source MethodBodies Gets a dictionary that maps method in this assembly to their method bodies. Declaration public IReadOnlyDictionary<IMethod, MethodBody> MethodBodies { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < IMethod , MethodBody > The method bodies dictionary. | Improve this Doc View Source TypeMembers Gets the set of type members to compile and include in the assembly. Declaration public ImmutableHashSet<ITypeMember> TypeMembers { get; } Property Value Type Description System.Collections.Immutable.ImmutableHashSet < ITypeMember > A set of type members. | Improve this Doc View Source Types Gets the set of types to compile and include in the assembly. Declaration public ImmutableHashSet<IType> Types { get; } Property Value Type Description System.Collections.Immutable.ImmutableHashSet < IType > A set of types."
  },
  "api/Flame.Compiler.NamedInstructionBuilder.html": {
    "href": "api/Flame.Compiler.NamedInstructionBuilder.html",
    "title": "Class NamedInstructionBuilder | Flame",
    "keywords": "Class NamedInstructionBuilder A named instruction in a mutable control-flow graph builder. Inheritance System.Object InstructionBuilder NamedInstructionBuilder Implements System.IEquatable < NamedInstructionBuilder > Inherited Members InstructionBuilder.ReplaceInstruction(FlowGraph) InstructionBuilder.ResultType InstructionBuilder.Prototype InstructionBuilder.Arguments System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class NamedInstructionBuilder : InstructionBuilder, IEquatable<NamedInstructionBuilder> Properties | Improve this Doc View Source Block Gets the basic block that defines this instruction. Declaration public override BasicBlockBuilder Block { get; } Property Value Type Description BasicBlockBuilder A basic block builder. Overrides InstructionBuilder.Block | Improve this Doc View Source Graph Gets the control-flow graph builder that defines this instruction. Declaration public override FlowGraphBuilder Graph { get; } Property Value Type Description FlowGraphBuilder A control-flow graph builder. Overrides InstructionBuilder.Graph | Improve this Doc View Source Instruction Gets the actual instruction behind this instruction selector. Declaration public override Instruction Instruction { get; set; } Property Value Type Description Instruction The instruction. Overrides InstructionBuilder.Instruction | Improve this Doc View Source InstructionIndex Gets the index of this instruction in the defining block's list of instructions. Declaration public int InstructionIndex { get; } Property Value Type Description System.Int32 The instruction index. | Improve this Doc View Source IsValid Tells if this instruction builder is still valid, that is, it has not been removed from its control-flow graph builder's set of instructions. Declaration public override bool IsValid { get; } Property Value Type Description System.Boolean true if this instruction builder is still valid; otherwise, false . Overrides InstructionBuilder.IsValid | Improve this Doc View Source NextInstructionOrNull Gets the next instruction in the basic block that defines this instruction. Returns null if there is no such instruction. Declaration public NamedInstructionBuilder NextInstructionOrNull { get; } Property Value Type Description NamedInstructionBuilder The next instruction or null. | Improve this Doc View Source PreviousInstructionOrNull Gets the previous instruction in the basic block that defines this instruction. Returns null if there is no such instruction. Declaration public NamedInstructionBuilder PreviousInstructionOrNull { get; } Property Value Type Description NamedInstructionBuilder The previous instruction or null. | Improve this Doc View Source Tag Gets this instruction's tag. Declaration public ValueTag Tag { get; } Property Value Type Description ValueTag The instruction's tag. Methods | Improve this Doc View Source Equals(NamedInstructionBuilder) Tests if this instruction builder is the same instruction as another instruction builder. Declaration public bool Equals(NamedInstructionBuilder other) Parameters Type Name Description NamedInstructionBuilder other The other instruction builder. Returns Type Description System.Boolean true if this instruction builder is the same as the other instruction builder; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source InsertAfter(Instruction) Inserts a particular instruction just after this instruction. Returns the inserted instruction builder. Declaration public NamedInstructionBuilder InsertAfter(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to insert. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source InsertAfter(Instruction, ValueTag) Inserts a particular instruction just after this instruction. Returns the inserted instruction builder. Declaration public NamedInstructionBuilder InsertAfter(Instruction instruction, ValueTag tag) Parameters Type Name Description Instruction instruction The instruction to insert. ValueTag tag The tag to assign to the instruction. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source InsertAfter(Instruction, String) Inserts a particular instruction just after this instruction. Returns the inserted instruction builder. Declaration public NamedInstructionBuilder InsertAfter(Instruction instruction, string name) Parameters Type Name Description Instruction instruction The instruction to insert. System.String name The preferred name for the instruction. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source InsertBefore(Instruction) Inserts a particular instruction just before this instruction. Returns the inserted instruction builder. Declaration public NamedInstructionBuilder InsertBefore(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to insert. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source InsertBefore(Instruction, ValueTag) Inserts a particular instruction just before this instruction. Returns the inserted instruction builder. Declaration public NamedInstructionBuilder InsertBefore(Instruction instruction, ValueTag tag) Parameters Type Name Description Instruction instruction The instruction to insert. ValueTag tag The tag to assign to the instruction. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source InsertBefore(Instruction, String) Inserts a particular instruction just before this instruction. Returns the inserted instruction builder. Declaration public NamedInstructionBuilder InsertBefore(Instruction instruction, string name) Parameters Type Name Description Instruction instruction The instruction to insert. System.String name The preferred name for the instruction. Returns Type Description NamedInstructionBuilder The inserted instruction. | Improve this Doc View Source MoveTo(BasicBlockTag) Moves this instruction from its current location to a the end of a basic block. Declaration public void MoveTo(BasicBlockTag block) Parameters Type Name Description BasicBlockTag block The block to move this instruction to. | Improve this Doc View Source MoveTo(Int32, BasicBlockTag) Moves this instruction from its current location to a particular position in a block. Declaration public void MoveTo(int index, BasicBlockTag block) Parameters Type Name Description System.Int32 index The position in block at which to insert this instruction. BasicBlockTag block The block to move this instruction to. | Improve this Doc View Source ReplaceInstruction(FlowGraph, IReadOnlyList<ValueTag>) Replaces this instruction with a control-flow graph that implements this instruction. Declaration public override void ReplaceInstruction(FlowGraph implementation, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description FlowGraph implementation A control-flow graph that implements the instruction. System.Collections.Generic.IReadOnlyList < ValueTag > arguments A list of arguments to pass to implementation 's entry point block. Overrides InstructionBuilder.ReplaceInstruction(FlowGraph, IReadOnlyList<ValueTag>) | Improve this Doc View Source ToImmutable() Gets an immutable version of this instruction, that is, this instruction but selected in an immutable version of the current state of the IR builder. Declaration public NamedInstruction ToImmutable() Returns Type Description NamedInstruction An immutable version. Operators | Improve this Doc View Source Implicit(NamedInstructionBuilder to ValueTag) Implicitly converts an instruction to its tag. Declaration public static implicit operator ValueTag(NamedInstructionBuilder instruction) Parameters Type Name Description NamedInstructionBuilder instruction The instruction to convert. Returns Type Description ValueTag Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.NamedInstruction.html": {
    "href": "api/Flame.Compiler.NamedInstruction.html",
    "title": "Class NamedInstruction | Flame",
    "keywords": "Class NamedInstruction A named instruction in the context of a control-flow graph. Inheritance System.Object NamedInstruction Implements System.IEquatable < NamedInstruction > Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class NamedInstruction : IEquatable<NamedInstruction> Properties | Improve this Doc View Source Arguments Gets the list of values this instruction takes as arguments. Declaration public IReadOnlyList<ValueTag> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ValueTag > | Improve this Doc View Source Block Gets the basic block that defines this named instruction. Declaration public BasicBlock Block { get; } Property Value Type Description BasicBlock The basic block. | Improve this Doc View Source Instruction Gets the actual instruction behind this instruction selector. Declaration public Instruction Instruction { get; } Property Value Type Description Instruction The instruction. | Improve this Doc View Source InstructionIndex Gets the index of this instruction in the defining block's list of instructions. Declaration public int InstructionIndex { get; } Property Value Type Description System.Int32 The instruction index. | Improve this Doc View Source NextInstructionOrNull Gets the next instruction in the basic block that defines this instruction. Returns null if there is no such instruction. Declaration public NamedInstruction NextInstructionOrNull { get; } Property Value Type Description NamedInstruction The next instruction or null. | Improve this Doc View Source PreviousInstructionOrNull Gets the previous instruction in the basic block that defines this instruction. Returns null if there is no such instruction. Declaration public NamedInstruction PreviousInstructionOrNull { get; } Property Value Type Description NamedInstruction The previous instruction or null. | Improve this Doc View Source Prototype Gets the named instruction's prototype. Declaration public InstructionPrototype Prototype { get; } Property Value Type Description InstructionPrototype | Improve this Doc View Source ResultType Gets the named instruction's result type. Declaration public IType ResultType { get; } Property Value Type Description IType | Improve this Doc View Source Tag Gets the tag assigned to this instruction. Declaration public ValueTag Tag { get; } Property Value Type Description ValueTag The instruction's tag. Methods | Improve this Doc View Source Equals(NamedInstruction) Tests if this named instruction is the same instruction as another named instruction. Declaration public bool Equals(NamedInstruction other) Parameters Type Name Description NamedInstruction other The other named instruction. Returns Type Description System.Boolean true if this named instruction is the same as the other named instruction; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source InsertAfter(Instruction) Inserts a particular instruction just after this instruction. Returns the new instruction in a new control-flow graph. Declaration public NamedInstruction InsertAfter(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to insert. Returns Type Description NamedInstruction The inserted instruction in a new control-flow graph. | Improve this Doc View Source InsertAfter(Instruction, ValueTag) Inserts a particular instruction just after this instruction. Returns the new instruction in a new control-flow graph. Declaration public NamedInstruction InsertAfter(Instruction instruction, ValueTag tag) Parameters Type Name Description Instruction instruction The instruction to insert. ValueTag tag The instruction's tag. Returns Type Description NamedInstruction The inserted instruction in a new control-flow graph. | Improve this Doc View Source InsertAfter(Instruction, String) Inserts a particular instruction just after this instruction. Returns the new instruction in a new control-flow graph. Declaration public NamedInstruction InsertAfter(Instruction instruction, string name) Parameters Type Name Description Instruction instruction The instruction to insert. System.String name The preferred name for the instruction. Returns Type Description NamedInstruction The inserted instruction in a new control-flow graph. | Improve this Doc View Source InsertBefore(Instruction) Inserts a particular instruction just before this instruction. Returns the new instruction in a new control-flow graph. Declaration public NamedInstruction InsertBefore(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to insert. Returns Type Description NamedInstruction The inserted instruction in a new control-flow graph. | Improve this Doc View Source InsertBefore(Instruction, ValueTag) Inserts a particular instruction just before this instruction. Returns the new instruction in a new control-flow graph. Declaration public NamedInstruction InsertBefore(Instruction instruction, ValueTag tag) Parameters Type Name Description Instruction instruction The instruction to insert. ValueTag tag The instruction's tag. Returns Type Description NamedInstruction The inserted instruction in a new control-flow graph. | Improve this Doc View Source InsertBefore(Instruction, String) Inserts a particular instruction just before this instruction. Returns the new instruction in a new control-flow graph. Declaration public NamedInstruction InsertBefore(Instruction instruction, string name) Parameters Type Name Description Instruction instruction The instruction to insert. System.String name The preferred name for the instruction. Returns Type Description NamedInstruction The inserted instruction in a new control-flow graph. | Improve this Doc View Source ReplaceInstruction(FlowGraph) Replaces this instruction with a control-flow graph that implements this instruction. The arity of the control-flow graph's entry point block must match this instruction's arity. Declaration public NamedInstruction ReplaceInstruction(FlowGraph implementation) Parameters Type Name Description FlowGraph implementation A control-flow graph that implements the instruction. Returns Type Description NamedInstruction A new instruction in a new control-flow graph. | Improve this Doc View Source ReplaceInstruction(Instruction) Replaces this instruction with another instruction. Returns the new instruction in a new control-flow graph. Declaration public NamedInstruction ReplaceInstruction(Instruction instruction) Parameters Type Name Description Instruction instruction The other instruction to replace this instruction with. Returns Type Description NamedInstruction A new instruction in a new control-flow graph. Operators | Improve this Doc View Source Implicit(NamedInstruction to ValueTag) Implicitly converts an instruction to its tag. Declaration public static implicit operator ValueTag(NamedInstruction instruction) Parameters Type Name Description NamedInstruction instruction The instruction to convert. Returns Type Description ValueTag Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.MethodBody.html": {
    "href": "api/Flame.Compiler.MethodBody.html",
    "title": "Class MethodBody | Flame",
    "keywords": "Class MethodBody A method body: a method implementation represented as a control-flow graph along with a private copy of the return parameter, 'this' parameter and input parameters. Inheritance System.Object MethodBody Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class MethodBody Constructors | Improve this Doc View Source MethodBody(Parameter, Parameter, IReadOnlyList<Parameter>, FlowGraph) Creates a method implementation. Declaration public MethodBody(Parameter returnParameter, Parameter thisParameter, IReadOnlyList<Parameter> parameters, FlowGraph implementation) Parameters Type Name Description Parameter returnParameter The method implementation's return parameter. Parameter thisParameter The method implementation's 'this' parameter. System.Collections.Generic.IReadOnlyList < Parameter > parameters The method implementation's input parameters. FlowGraph implementation The method implementation, represented as a control-flow graph. Properties | Improve this Doc View Source Implementation Gets the control-flow graph that constitutes the method implementation. Declaration public FlowGraph Implementation { get; } Property Value Type Description FlowGraph The method implementation. | Improve this Doc View Source Parameters Gets the method implementation's input parameter list. Declaration public IReadOnlyList<Parameter> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > The parameter list. | Improve this Doc View Source ReturnParameter Gets the method implementation's return parameter. Declaration public Parameter ReturnParameter { get; } Property Value Type Description Parameter The return parameter. | Improve this Doc View Source ThisParameter Gets the method implementation's 'this' parameter, if any. Declaration public Parameter ThisParameter { get; } Property Value Type Description Parameter The 'this' parameter. Methods | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this method body's implementation, 'this' parameter, parameter list and return parameter. The result is returned as a new method body. Declaration public MethodBody Map(MemberMapping memberMapping) Parameters Type Name Description MemberMapping memberMapping The member mapping to apply. Returns Type Description MethodBody A new method body. | Improve this Doc View Source Validate() Validates this method body and returns a list of error messages. Declaration public IReadOnlyList<string> Validate() Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of error messages. | Improve this Doc View Source WithImplementation(FlowGraph) Creates a method body based on this method body, but with a different implementation. Declaration public MethodBody WithImplementation(FlowGraph newImplementation) Parameters Type Name Description FlowGraph newImplementation The implementation of the method body to create. Returns Type Description MethodBody A new method body."
  },
  "api/Flame.Compiler.Instructions.html": {
    "href": "api/Flame.Compiler.Instructions.html",
    "title": "Namespace Flame.Compiler.Instructions | Flame",
    "keywords": "Namespace Flame.Compiler.Instructions Classes AllocaArrayPrototype A prototype for alloca-array instructions, which allocate a variable-length array of values on the stack. AllocaPrototype A prototype for alloca instructions, which allocate a single value on the stack. ArithmeticIntrinsics Supports creating, recognizing and parsing arithmetic intrinsics. ArithmeticIntrinsics.Operators A collection of names for arithmetic operations. ArrayIntrinsics Supports creating, recognizing and parsing array-related intrinsics. ArrayIntrinsics.Operators A collection of names for array operations. BoxPrototype A prototype for instructions that box value types. CallPrototype An instruction prototype for call instructions: instructions that call a method. ConstantPrototype A prototype for instructions that produce a constant value. ConstrainedCallPrototype An instruction prototype for constrained call instructions: instructions that call a method using virtual lookup in a way that is suitable for both reference and value types. CopyPrototype The prototype for copy instructions. DynamicCastPrototype A prototype for dynamic cast instructions: instructions that convert one pointer type to another but check that this conversion is indeed legal; if it is not, then a null pointer is produced. ExceptionIntrinsics Supports creating, recognizing and parsing exception handling intrinsics. ExceptionIntrinsics.Operators A collection of names for exception handling operations. GetFieldPointerPrototype A prototype for instructions that compute the address of a field from a base address. GetStaticFieldPointerPrototype A prototype for instructions that compute the address of a field from a base address. IndirectCallPrototype An instruction prototype for indirect call instructions: instructions that call a delegate or function pointer. IntrinsicPrototype An instruction prototype for intrinsics: instructions that behave like calls but are not (necessarily) implemented as calls. Various parts of a compiler recognize intrinsics relevant to them and ignore the others. LoadPrototype A prototype for load instructions that dereference pointers. NewDelegatePrototype A prototype for an instruction that creates a delegate from a method. NewObjectPrototype A prototype for instructions that allocate storage on the heap for an object and initialize it using a constructor. ObjectIntrinsics Supports creating, recognizing and parsing object-oriented intrinsics. ObjectIntrinsics.Operators A collection of names for object-oriented operations. ReinterpretCastPrototype A prototype for reinterpret cast instructions: instructions that convert one pointer type to another and are free to assume that this conversion will always succeed. StorePrototype A prototype for store instructions that set the value of a pointer's pointee. UnboxPrototype A prototype for instructions that unbox boxed value types. Unbox instructions take box pointers and turn them into reference pointers to their contents. Structs IntrinsicNamespace Represents a namespace of intrinsics. Enums MethodLookup An enumeration of method lookup strategies."
  },
  "api/Flame.Compiler.Instructions.UnboxPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.UnboxPrototype.html",
    "title": "Class UnboxPrototype | Flame",
    "keywords": "Class UnboxPrototype A prototype for instructions that unbox boxed value types. Unbox instructions take box pointers and turn them into reference pointers to their contents. Inheritance System.Object InstructionPrototype UnboxPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class UnboxPrototype : InstructionPrototype Properties | Improve this Doc View Source ElementType Gets the type of value to unbox. Declaration public IType ElementType { get; } Property Value Type Description IType | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType) Gets the unbox instruction prototype for a particular result type. Declaration public static UnboxPrototype Create(IType elementType) Parameters Type Name Description IType elementType The type of the unboxed value to produce. Returns Type Description UnboxPrototype A unbox instruction prototype. | Improve this Doc View Source GetBoxPointer(Instruction) Gets the box pointer that is unboxed by an instance of this prototype. Declaration public ValueTag GetBoxPointer(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ValueTag The box pointer. | Improve this Doc View Source Instantiate(ValueTag) Instantiates this unbox instruction prototype. Declaration public Instruction Instantiate(ValueTag value) Parameters Type Name Description ValueTag value A box pointer to unbox. Returns Type Description Instruction An unbox instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.StorePrototype.html": {
    "href": "api/Flame.Compiler.Instructions.StorePrototype.html",
    "title": "Class StorePrototype | Flame",
    "keywords": "Class StorePrototype A prototype for store instructions that set the value of a pointer's pointee. Inheritance System.Object InstructionPrototype StorePrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class StorePrototype : InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType) Gets or creates a store instruction prototype for a particular element type. Declaration public static StorePrototype Create(IType elementType) Parameters Type Name Description IType elementType The type of element to store in a pointer. Returns Type Description StorePrototype A store instruction prototype. | Improve this Doc View Source GetPointer(Instruction) Gets the pointer to which a store is performed by an instance of this prototype. Declaration public ValueTag GetPointer(Instruction instance) Parameters Type Name Description Instruction instance An instance of this prototype. Returns Type Description ValueTag The pointer whose pointee's value is replaced. | Improve this Doc View Source GetValue(Instruction) Gets the value with which a store instruction's pointee is replaced. Declaration public ValueTag GetValue(Instruction instance) Parameters Type Name Description Instruction instance An instance of this prototype. Returns Type Description ValueTag The stored value. | Improve this Doc View Source Instantiate(ValueTag, ValueTag) Creates an instance of this store prototype. Declaration public Instruction Instantiate(ValueTag pointer, ValueTag value) Parameters Type Name Description ValueTag pointer A pointer to the value to replace. ValueTag value The value to store in the pointer's pointee. Returns Type Description Instruction A store instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.ReinterpretCastPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.ReinterpretCastPrototype.html",
    "title": "Class ReinterpretCastPrototype | Flame",
    "keywords": "Class ReinterpretCastPrototype A prototype for reinterpret cast instructions: instructions that convert one pointer type to another and are free to assume that this conversion will always succeed. Inheritance System.Object InstructionPrototype ReinterpretCastPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class ReinterpretCastPrototype : InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType | Improve this Doc View Source TargetType Gets the pointer type to cast the input to. Declaration public PointerType TargetType { get; } Property Value Type Description PointerType The target pointer type. Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(PointerType) Gets or creates a reinterpret cast instruction prototype that converts pointers to a specific pointer type. Declaration public static ReinterpretCastPrototype Create(PointerType targetType) Parameters Type Name Description PointerType targetType The target pointer type. Returns Type Description ReinterpretCastPrototype A reinterpret cast instruction prototype. | Improve this Doc View Source GetOperand(Instruction) Gets the input pointer of an instance of this reinterpret- cast instruction prototype. Declaration public ValueTag GetOperand(Instruction instance) Parameters Type Name Description Instruction instance An instance of this reinterpret cast instruction prototype. Returns Type Description ValueTag The input pointer. | Improve this Doc View Source Instantiate(ValueTag) Creates an instance of this reinterpret cast instruction prototype. Declaration public Instruction Instantiate(ValueTag operand) Parameters Type Name Description ValueTag operand A pointer to cast to another pointer type. Returns Type Description Instruction A reinterpret cast instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.ObjectIntrinsics.html": {
    "href": "api/Flame.Compiler.Instructions.ObjectIntrinsics.html",
    "title": "Class ObjectIntrinsics | Flame",
    "keywords": "Class ObjectIntrinsics Supports creating, recognizing and parsing object-oriented intrinsics. Inheritance System.Object ObjectIntrinsics Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class ObjectIntrinsics Fields | Improve this Doc View Source Namespace The namespace for object-oriented intrinsics. Declaration public static readonly IntrinsicNamespace Namespace Field Value Type Description IntrinsicNamespace Methods | Improve this Doc View Source CreatePrototype(String, IType, IReadOnlyList<IType>) Creates an object-oriented intrinsic prototype. Declaration public static IntrinsicPrototype CreatePrototype(string operatorName, IType resultType, IReadOnlyList<IType> parameterTypes) Parameters Type Name Description System.String operatorName The name of the operator represented by the object-oriented intrinsic. IType resultType The type of value produced by the intrinsic to create. System.Collections.Generic.IReadOnlyList < IType > parameterTypes The types of the values the intrinsic takes as arguments. Returns Type Description IntrinsicPrototype An object-oriented intrinsic prototype. | Improve this Doc View Source CreateUnboxAnyPrototype(IType, IType) Creates an 'unbox_any' instruction prototype. Its return type can either be a value type or a reference type (aka box pointer). If its return type is set to a value type, 'unbox_any' unboxes its argument and loads it. If 'unbox_any's return value is set to a reference type, 'unbox_any' checks that its argument is a subtype of the return type. Declaration public static IntrinsicPrototype CreateUnboxAnyPrototype(IType resultType, IType argumentType) Parameters Type Name Description IType resultType The 'unbox_any' instruction prototype's result type. IType argumentType The 'unbox_any' instruction prototype's argument type. Returns Type Description IntrinsicPrototype An 'unbox_any' instruction prototype."
  },
  "api/Flame.Compiler.Instructions.GetStaticFieldPointerPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.GetStaticFieldPointerPrototype.html",
    "title": "Class GetStaticFieldPointerPrototype | Flame",
    "keywords": "Class GetStaticFieldPointerPrototype A prototype for instructions that compute the address of a field from a base address. Inheritance System.Object InstructionPrototype GetStaticFieldPointerPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class GetStaticFieldPointerPrototype : InstructionPrototype Properties | Improve this Doc View Source Field Gets the field whose address is taken. Declaration public IField Field { get; } Property Value Type Description IField The field whose address is taken. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IField) Gets or creates a get-static-field-pointer instruction prototype that computes the address of a particular field. Declaration public static GetStaticFieldPointerPrototype Create(IField field) Parameters Type Name Description IField field The field whose address is to be computed. Returns Type Description GetStaticFieldPointerPrototype A get-static-field-pointer instruction prototype. | Improve this Doc View Source Instantiate() Creates an instance of this get-static-field-pointer prototype. Declaration public Instruction Instantiate() Returns Type Description Instruction A get-static-field-pointer instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.GetFieldPointerPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.GetFieldPointerPrototype.html",
    "title": "Class GetFieldPointerPrototype | Flame",
    "keywords": "Class GetFieldPointerPrototype A prototype for instructions that compute the address of a field from a base address. Inheritance System.Object InstructionPrototype GetFieldPointerPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class GetFieldPointerPrototype : InstructionPrototype Properties | Improve this Doc View Source Field Gets the field whose address is taken. Declaration public IField Field { get; } Property Value Type Description IField The field whose address is taken. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IField) Gets or creates a get-field-pointer instruction prototype that computes the address of a particular field. Declaration public static GetFieldPointerPrototype Create(IField field) Parameters Type Name Description IField field The field whose address is to be computed. Returns Type Description GetFieldPointerPrototype A get-field-pointer instruction prototype. | Improve this Doc View Source GetBasePointer(Instruction) Gets a pointer to the value of which a field's address is computed by an instance of this prototype. Declaration public ValueTag GetBasePointer(Instruction instance) Parameters Type Name Description Instruction instance An instance of this prototype. Returns Type Description ValueTag A pointer to the value that includes the field. | Improve this Doc View Source Instantiate(ValueTag) Creates an instance of this get-field-pointer prototype. Declaration public Instruction Instantiate(ValueTag basePointer) Parameters Type Name Description ValueTag basePointer A pointer to a value that includes the field referred to by the get-field-pointer prototype. Returns Type Description Instruction A get-field-pointer instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.Fused.html": {
    "href": "api/Flame.Compiler.Instructions.Fused.html",
    "title": "Namespace Flame.Compiler.Instructions.Fused | Flame",
    "keywords": "Namespace Flame.Compiler.Instructions.Fused Classes FusedInstructionPrototype A prototype for a fused instruction: a special composite instruction that is entirely equivalent to a sequence of core instructions. Fused instructions are mostly useful for making back-ends emit better code. LoadFieldPrototype An instruction prototype that loads a field. It is a fused instruction prototype that is equivalent to a get-field-pointer followed by a load. StoreFieldPrototype An instruction prototype that stores a field. It is a fused instruction prototype that is equivalent to a get-field-pointer followed by a store."
  },
  "api/Flame.Compiler.Instructions.Fused.StoreFieldPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.Fused.StoreFieldPrototype.html",
    "title": "Class StoreFieldPrototype | Flame",
    "keywords": "Class StoreFieldPrototype An instruction prototype that stores a field. It is a fused instruction prototype that is equivalent to a get-field-pointer followed by a store. Inheritance System.Object InstructionPrototype FusedInstructionPrototype StoreFieldPrototype Inherited Members FusedInstructionPrototype.ResultType FusedInstructionPrototype.CheckConformance(Instruction, MethodBody) InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions.Fused Assembly : Flame.Compiler.dll Syntax public sealed class StoreFieldPrototype : FusedInstructionPrototype Properties | Improve this Doc View Source Field Gets the field that is loaded. Declaration public IField Field { get; } Property Value Type Description IField The field that is loaded. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount Methods | Improve this Doc View Source Create(IField) Gets or creates an instruction prototype for instructions that store a value in a particular field. Declaration public static StoreFieldPrototype Create(IField field) Parameters Type Name Description IField field The field that is to be updated. Returns Type Description StoreFieldPrototype A store-field instruction prototype. | Improve this Doc View Source Expand(NamedInstructionBuilder) Expands this fused instruction to an equivalent nonempty sequence of core instructions. The instance itself must be replaced by another instruction. Instruction expansion must be formulaic: it cannot depend on the rest of the control-flow graph. Declaration public override void Expand(NamedInstructionBuilder instance) Parameters Type Name Description NamedInstructionBuilder instance An instance of this prototype to expand. Overrides FusedInstructionPrototype.Expand(NamedInstructionBuilder) | Improve this Doc View Source Instantiate(ValueTag, ValueTag) Creates an instance of this store-field prototype. Declaration public Instruction Instantiate(ValueTag basePointer, ValueTag value) Parameters Type Name Description ValueTag basePointer A pointer to a value that includes the field referred to by the store-field prototype. ValueTag value The value to store in the field. Returns Type Description Instruction A store-field instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.Fused.LoadFieldPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.Fused.LoadFieldPrototype.html",
    "title": "Class LoadFieldPrototype | Flame",
    "keywords": "Class LoadFieldPrototype An instruction prototype that loads a field. It is a fused instruction prototype that is equivalent to a get-field-pointer followed by a load. Inheritance System.Object InstructionPrototype FusedInstructionPrototype LoadFieldPrototype Inherited Members FusedInstructionPrototype.ResultType FusedInstructionPrototype.CheckConformance(Instruction, MethodBody) InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions.Fused Assembly : Flame.Compiler.dll Syntax public sealed class LoadFieldPrototype : FusedInstructionPrototype Properties | Improve this Doc View Source Field Gets the field that is loaded. Declaration public IField Field { get; } Property Value Type Description IField The field that is loaded. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount Methods | Improve this Doc View Source Create(IField) Gets or creates an instruction prototype for instructions that load a particular field. Declaration public static LoadFieldPrototype Create(IField field) Parameters Type Name Description IField field The field that is to be loaded. Returns Type Description LoadFieldPrototype A load-field instruction prototype. | Improve this Doc View Source Expand(NamedInstructionBuilder) Expands this fused instruction to an equivalent nonempty sequence of core instructions. The instance itself must be replaced by another instruction. Instruction expansion must be formulaic: it cannot depend on the rest of the control-flow graph. Declaration public override void Expand(NamedInstructionBuilder instance) Parameters Type Name Description NamedInstructionBuilder instance An instance of this prototype to expand. Overrides FusedInstructionPrototype.Expand(NamedInstructionBuilder) | Improve this Doc View Source Instantiate(ValueTag) Creates an instance of this load-field prototype. Declaration public Instruction Instantiate(ValueTag basePointer) Parameters Type Name Description ValueTag basePointer A pointer to a value that includes the field referred to by the load-field prototype. Returns Type Description Instruction A load-field instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.Fused.FusedInstructionPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.Fused.FusedInstructionPrototype.html",
    "title": "Class FusedInstructionPrototype | Flame",
    "keywords": "Class FusedInstructionPrototype A prototype for a fused instruction: a special composite instruction that is entirely equivalent to a sequence of core instructions. Fused instructions are mostly useful for making back-ends emit better code. Inheritance System.Object InstructionPrototype FusedInstructionPrototype LoadFieldPrototype StoreFieldPrototype Inherited Members InstructionPrototype.ParameterCount InstructionPrototype.Map(MemberMapping) InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions.Fused Assembly : Flame.Compiler.dll Syntax public abstract class FusedInstructionPrototype : InstructionPrototype Constructors | Improve this Doc View Source FusedInstructionPrototype() Creates a fused instruction prototype. Declaration public FusedInstructionPrototype() Properties | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override sealed IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Expand(NamedInstructionBuilder) Expands this fused instruction to an equivalent nonempty sequence of core instructions. The instance itself must be replaced by another instruction. Instruction expansion must be formulaic: it cannot depend on the rest of the control-flow graph. Declaration public abstract void Expand(NamedInstructionBuilder instance) Parameters Type Name Description NamedInstructionBuilder instance An instance of this prototype to expand."
  },
  "api/Flame.Compiler.Instructions.ExceptionIntrinsics.html": {
    "href": "api/Flame.Compiler.Instructions.ExceptionIntrinsics.html",
    "title": "Class ExceptionIntrinsics | Flame",
    "keywords": "Class ExceptionIntrinsics Supports creating, recognizing and parsing exception handling intrinsics. Inheritance System.Object ExceptionIntrinsics Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class ExceptionIntrinsics Fields | Improve this Doc View Source Namespace The namespace for exception handling intrinsics. Declaration public static readonly IntrinsicNamespace Namespace Field Value Type Description IntrinsicNamespace Methods | Improve this Doc View Source CreateCapturePrototype(IType, IType) Creates a 'capture' instruction prototype, which captures a (thrown) exception. Declaration public static IntrinsicPrototype CreateCapturePrototype(IType resultType, IType argumentType) Parameters Type Name Description IType resultType The type of a captured exception. IType argumentType The type of the exception to capture. Returns Type Description IntrinsicPrototype A 'capture' instruction prototype. | Improve this Doc View Source CreateGetCapturedExceptionPrototype(IType, IType) Creates a 'get_captured_exception' instruction prototype, which extracts the exception captured by a captured exception. Declaration public static IntrinsicPrototype CreateGetCapturedExceptionPrototype(IType resultType, IType argumentType) Parameters Type Name Description IType resultType The type of the exception value returned by this operation. IType argumentType The type of the captured exception to examine. Returns Type Description IntrinsicPrototype A 'get_captured_exception' instruction prototype. | Improve this Doc View Source CreatePrototype(String, IType, IReadOnlyList<IType>) Creates an exception handling intrinsic prototype. Declaration public static IntrinsicPrototype CreatePrototype(string operatorName, IType resultType, IReadOnlyList<IType> parameterTypes) Parameters Type Name Description System.String operatorName The name of the operator represented by the exception handling intrinsic. IType resultType The type of value produced by the intrinsic to create. System.Collections.Generic.IReadOnlyList < IType > parameterTypes The types of the values the intrinsic takes as arguments. Returns Type Description IntrinsicPrototype An exception handling intrinsic prototype. | Improve this Doc View Source CreateRethrowPrototype(IType) Creates a 'rethrow' instruction prototype, which rethrows a captured exception. The difference between 'rethrow' and 'throw' is that the former takes a captured exception and retains stack trace information whereas the latter takes a (raw) exception value and constructs a new stack trace. Declaration public static IntrinsicPrototype CreateRethrowPrototype(IType capturedExceptionType) Parameters Type Name Description IType capturedExceptionType The type of the captured exception to rethrow. Returns Type Description IntrinsicPrototype A 'rethrow' intrinsic. | Improve this Doc View Source CreateThrowPrototype(IType) Creates a 'throw' instruction prototype, which throws an exception. Declaration public static IntrinsicPrototype CreateThrowPrototype(IType exceptionType) Parameters Type Name Description IType exceptionType The type of exception to throw. Returns Type Description IntrinsicPrototype A 'throw' instruction prototype."
  },
  "api/Flame.Compiler.Instructions.ExceptionIntrinsics.Operators.html": {
    "href": "api/Flame.Compiler.Instructions.ExceptionIntrinsics.Operators.html",
    "title": "Class ExceptionIntrinsics.Operators | Flame",
    "keywords": "Class ExceptionIntrinsics.Operators A collection of names for exception handling operations. Inheritance System.Object ExceptionIntrinsics.Operators Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class Operators Fields | Improve this Doc View Source All An immutable array containing all standard exception handling intrinsics. Declaration public static readonly ImmutableArray<string> All Field Value Type Description System.Collections.Immutable.ImmutableArray < System.String > | Improve this Doc View Source Capture The 'capture' operator, which captures a (thrown) exception. Captured exceptions can be rethrown. Declaration public const string Capture = \"capture\" Field Value Type Description System.String | Improve this Doc View Source GetCapturedException The 'get_captured_exception' operator, which extracts the exception captured by a captured exception. Declaration public const string GetCapturedException = \"get_captured_exception\" Field Value Type Description System.String | Improve this Doc View Source Rethrow The 'rethrow' operator, which rethrows an existing exception. Declaration public const string Rethrow = \"rethrow\" Field Value Type Description System.String | Improve this Doc View Source Throw The 'throw' operator, which throws a new exception. Declaration public const string Throw = \"throw\" Field Value Type Description System.String"
  },
  "api/Flame.Compiler.Instructions.DynamicCastPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.DynamicCastPrototype.html",
    "title": "Class DynamicCastPrototype | Flame",
    "keywords": "Class DynamicCastPrototype A prototype for dynamic cast instructions: instructions that convert one pointer type to another but check that this conversion is indeed legal; if it is not, then a null pointer is produced. Inheritance System.Object InstructionPrototype DynamicCastPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class DynamicCastPrototype : InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType | Improve this Doc View Source TargetType Gets the pointer type to cast the input to. Declaration public PointerType TargetType { get; } Property Value Type Description PointerType The target pointer type. Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(PointerType) Gets or creates a dynamic cast instruction prototype that converts pointers to a specific pointer type. Declaration public static DynamicCastPrototype Create(PointerType targetType) Parameters Type Name Description PointerType targetType The target pointer type. Returns Type Description DynamicCastPrototype A dynamic cast instruction prototype. | Improve this Doc View Source GetOperand(Instruction) Gets the input pointer of an instance of this dynamic cast instruction prototype. Declaration public ValueTag GetOperand(Instruction instance) Parameters Type Name Description Instruction instance An instance of this dynamic cast instruction prototype. Returns Type Description ValueTag The input pointer. | Improve this Doc View Source Instantiate(ValueTag) Creates an instance of this dynamic cast instruction prototype. Declaration public Instruction Instantiate(ValueTag operand) Parameters Type Name Description ValueTag operand A pointer to cast to another pointer type. Returns Type Description Instruction A dynamic cast instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.CopyPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.CopyPrototype.html",
    "title": "Class CopyPrototype | Flame",
    "keywords": "Class CopyPrototype The prototype for copy instructions. Inheritance System.Object InstructionPrototype CopyPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class CopyPrototype : InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType) Gets the copy instruction prototype for a particular result type. Declaration public static CopyPrototype Create(IType resultType) Parameters Type Name Description IType resultType The result type. Returns Type Description CopyPrototype A copy instruction prototype. | Improve this Doc View Source GetCopiedValue(Instruction) Gets the value copied by an instance of this prototype. Declaration public ValueTag GetCopiedValue(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ValueTag The copied value. | Improve this Doc View Source Instantiate(ValueTag) Instantiates this copy prototype. Declaration public Instruction Instantiate(ValueTag value) Parameters Type Name Description ValueTag value The value to copy. Returns Type Description Instruction A copy instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.ConstrainedCallPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.ConstrainedCallPrototype.html",
    "title": "Class ConstrainedCallPrototype | Flame",
    "keywords": "Class ConstrainedCallPrototype An instruction prototype for constrained call instructions: instructions that call a method using virtual lookup in a way that is suitable for both reference and value types. Inheritance System.Object InstructionPrototype ConstrainedCallPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class ConstrainedCallPrototype : InstructionPrototype Properties | Improve this Doc View Source Callee Gets the method to call. Declaration public IMethod Callee { get; } Property Value Type Description IMethod The callee. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IMethod) Gets the constrained call instruction prototype for a particular callee. Declaration public static ConstrainedCallPrototype Create(IMethod callee) Parameters Type Name Description IMethod callee The method to call. Returns Type Description ConstrainedCallPrototype A constrained call instruction prototype. | Improve this Doc View Source GetArgumentList(Instruction) Gets the argument list in an instruction that conforms to this prototype. Declaration public ReadOnlySlice<ValueTag> GetArgumentList(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ReadOnlySlice < ValueTag > The formal argument list. | Improve this Doc View Source GetThisArgument(Instruction) Gets the 'this' argument in an instruction that conforms to this prototype. Declaration public ValueTag GetThisArgument(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ValueTag The 'this' argument. | Improve this Doc View Source Instantiate(ValueTag, IReadOnlyList<ValueTag>) Instantiates this constrained call instruction prototype. Declaration public Instruction Instantiate(ValueTag thisArgument, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description ValueTag thisArgument The 'this' argument for the call. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The argument list for the call. Returns Type Description Instruction A constrained call instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.ConstantPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.ConstantPrototype.html",
    "title": "Class ConstantPrototype | Flame",
    "keywords": "Class ConstantPrototype A prototype for instructions that produce a constant value. Inheritance System.Object InstructionPrototype ConstantPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class ConstantPrototype : InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType | Improve this Doc View Source Value Gets the constant value produced by instances of this prototype. Declaration public Constant Value { get; } Property Value Type Description Constant A constant value. Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(Constant, IType) Gets or creates a constant instruction prototype. Declaration public static ConstantPrototype Create(Constant value, IType type) Parameters Type Name Description Constant value The constant value to produce. IType type The result type of prototype instances. Returns Type Description ConstantPrototype A constant instruction prototype. | Improve this Doc View Source Instantiate() Creates an instance of this prototype. Declaration public Instruction Instantiate() Returns Type Description Instruction A constant instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.CallPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.CallPrototype.html",
    "title": "Class CallPrototype | Flame",
    "keywords": "Class CallPrototype An instruction prototype for call instructions: instructions that call a method. Inheritance System.Object InstructionPrototype CallPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class CallPrototype : InstructionPrototype Properties | Improve this Doc View Source Callee Gets the method to call. Declaration public IMethod Callee { get; } Property Value Type Description IMethod The callee. | Improve this Doc View Source Lookup Gets the method lookup strategy used by this call. Declaration public MethodLookup Lookup { get; } Property Value Type Description MethodLookup | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IMethod, MethodLookup) Gets the call instruction prototype for a particular callee. Declaration public static CallPrototype Create(IMethod callee, MethodLookup lookup) Parameters Type Name Description IMethod callee The method to call. MethodLookup lookup The method lookup strategy for the call. Returns Type Description CallPrototype A call instruction prototype. | Improve this Doc View Source GetArgumentList(Instruction) Gets the argument list in an instruction that conforms to this prototype. Declaration public ReadOnlySlice<ValueTag> GetArgumentList(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ReadOnlySlice < ValueTag > The formal argument list. | Improve this Doc View Source GetThisArgument(Instruction) Gets the 'this' argument in an instruction that conforms to this prototype. Declaration public ValueTag GetThisArgument(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ValueTag The 'this' argument. | Improve this Doc View Source Instantiate(ValueTag, IReadOnlyList<ValueTag>) Instantiates this call instruction prototype. Declaration public Instruction Instantiate(ValueTag thisArgument, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description ValueTag thisArgument The 'this' argument for the call. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The argument list for the call. Returns Type Description Instruction A call instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.BoxPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.BoxPrototype.html",
    "title": "Class BoxPrototype | Flame",
    "keywords": "Class BoxPrototype A prototype for instructions that box value types. Inheritance System.Object InstructionPrototype BoxPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class BoxPrototype : InstructionPrototype Properties | Improve this Doc View Source ElementType Gets the type of value that is boxed by instances of this prototype. Declaration public IType ElementType { get; } Property Value Type Description IType | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType) Gets the box instruction prototype for a particular result type. Declaration public static BoxPrototype Create(IType elementType) Parameters Type Name Description IType elementType The type of value to box. Returns Type Description BoxPrototype A box instruction prototype. | Improve this Doc View Source GetBoxedValue(Instruction) Gets the value boxed by an instance of this prototype. Declaration public ValueTag GetBoxedValue(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ValueTag The boxed value. | Improve this Doc View Source Instantiate(ValueTag) Instantiates this box instruction prototype. Declaration public Instruction Instantiate(ValueTag value) Parameters Type Name Description ValueTag value The value to box. Returns Type Description Instruction A box instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Collections.ValueList-1.html": {
    "href": "api/Flame.Collections.ValueList-1.html",
    "title": "Struct ValueList<T> | Flame",
    "keywords": "Struct ValueList<T> A growable list that is implemented as a value type. This type is mainly intended for use by other collection types, and is not a drop-in replacement for System.Collections.Generic.List. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Collections Assembly : Flame.dll Syntax public struct ValueList<T> Type Parameters Name Description T Constructors | Improve this Doc View Source ValueList(ValueList<T>) Creates a list by copying another list's contents. Declaration public ValueList(ValueList<T> other) Parameters Type Name Description ValueList <T> other The list whose contents are to be copied. | Improve this Doc View Source ValueList(IEnumerable<T>) Creates a list from a sequence of values. Declaration public ValueList(IEnumerable<T> values) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> values The values to put in the list. | Improve this Doc View Source ValueList(Int32) Creates a list with an initial capacity. Declaration public ValueList(int initialCapacity) Parameters Type Name Description System.Int32 initialCapacity The list's initial capacity. Properties | Improve this Doc View Source Capacity Gets the size of this list's backing array. Declaration public int Capacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Gets the number of items in this list. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsInitialized Tells if this value list has been properly initialized by a constructor. Declaration public bool IsInitialized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets the element at the given index in this list. Declaration public T this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description T | Improve this Doc View Source Items Gets the backing array for this list. Declaration public T[] Items { get; } Property Value Type Description T[] Methods | Improve this Doc View Source Add(T) Appends the given value to this list. Declaration public void Add(T value) Parameters Type Name Description T value | Improve this Doc View Source AddRange(ValueList<T>) Appends the given value list to this list. Declaration public void AddRange(ValueList<T> values) Parameters Type Name Description ValueList <T> values | Improve this Doc View Source RemoveAt(Int32) Removes the element at the given index. All values to the right of the given index are shifted one position to the left. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source Reserve(Int32) Minimizes at least the given capacity in this list. Declaration public void Reserve(int minimalCapacity) Parameters Type Name Description System.Int32 minimalCapacity | Improve this Doc View Source ToArray() Copies the contents of this value list to an array. Declaration public T[] ToArray() Returns Type Description T[] An array."
  },
  "api/Flame.Collections.UniqueNameSet-1.html": {
    "href": "api/Flame.Collections.UniqueNameSet-1.html",
    "title": "Class UniqueNameSet<T> | Flame",
    "keywords": "Class UniqueNameSet<T> Generates a unique name for every value it is passed. Generated names are stored, but not associated with the object they originated from: generating a name for the same object twice will always result in two different unique names. The resulting name will never be null or empty. Inheritance System.Object UniqueNameSet<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class UniqueNameSet<T> Type Parameters Name Description T The type of value to name. Constructors | Improve this Doc View Source UniqueNameSet(Func<T, String>, Func<T, Int32, String>) Creates a unique name set from the given name-providing function, and a name-generating function that is used to resolve collisions. Declaration public UniqueNameSet(Func<T, string> getName, Func<T, int, string> generateName) Parameters Type Name Description System.Func <T, System.String > getName A function that maps values to their preferred names. System.Func <T, System.Int32 , System.String > generateName A function that takes a value and an integer and combines them into a name. This function is called with increasingly large integers when a collision occurs, until a unique name is found. | Improve this Doc View Source UniqueNameSet(Func<T, String>, Func<T, Int32, String>, UniqueNameSet<T>) Creates a unique name set from the given name-providing function, and a name-generating function that is used to resolve collisions. This unique set's name pool is aliased with the given other unique name set. Declaration public UniqueNameSet(Func<T, string> getName, Func<T, int, string> generateName, UniqueNameSet<T> alias) Parameters Type Name Description System.Func <T, System.String > getName A function that maps values to their preferred names. System.Func <T, System.Int32 , System.String > generateName A function that takes a value and an integer and combines them into a name. This function is called with increasingly large integers when a collision occurs, until a unique name is found. UniqueNameSet <T> alias A unique name set with which this unique name set's generated names are aliased. | Improve this Doc View Source UniqueNameSet(Func<T, String>, String) Creates a unique name set from the given name-providing function, and a prefix that is used to resolve collisions. Declaration public UniqueNameSet(Func<T, string> getName, string prefix) Parameters Type Name Description System.Func <T, System.String > getName A function that maps values to their preferred names. System.String prefix A string prefix that is used to generate a unique name when a collision occurs. | Improve this Doc View Source UniqueNameSet(Func<T, String>, String, UniqueNameSet<T>) Creates a unique name set from the given name-providing function, and a prefix that is used to resolve collisions. This unique set's name pool is aliased with another unique name set. Declaration public UniqueNameSet(Func<T, string> getName, string prefix, UniqueNameSet<T> alias) Parameters Type Name Description System.Func <T, System.String > getName A function that maps values to their preferred names. System.String prefix A string prefix that is used to generate a unique name when a collision occurs. UniqueNameSet <T> alias A unique name set with which this unique name set's generated names are aliased. Methods | Improve this Doc View Source GenerateName(T) Generates a unique name for the given value. Declaration public string GenerateName(T element) Parameters Type Name Description T element The value to generate a name for. Returns Type Description System.String A unique name. | Improve this Doc View Source ReserveName(String) Reserves a name, making sure it is never generated for any element. Declaration public bool ReserveName(string name) Parameters Type Name Description System.String name The name to reserve. Returns Type Description System.Boolean true if the name is reserved by this call; false if it has already been reserved or generated."
  },
  "api/Flame.Collections.Target.PeepholeOptimizer-2.html": {
    "href": "api/Flame.Collections.Target.PeepholeOptimizer-2.html",
    "title": "Class PeepholeOptimizer<TInstruction, TExternalRef> | Flame",
    "keywords": "Class PeepholeOptimizer<TInstruction, TExternalRef> A target-specific peephole optimizer: an optimizer that walks through a linear sequence of target-specific instructions, recognizes patterns and rewrites small batches of instructions. Inheritance System.Object PeepholeOptimizer<TInstruction, TExternalRef> CilPeepholeOptimizer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections.Target Assembly : Flame.Compiler.dll Syntax public class PeepholeOptimizer<TInstruction, TExternalRef> Type Parameters Name Description TInstruction The type of target-specific instruction to optimize. TExternalRef The type of an external reference to instructions. Constructors | Improve this Doc View Source PeepholeOptimizer(IReadOnlyList<PeepholeRewriteRule<TInstruction>>) Creates a peephole optimizer that applies a set of rewrite rules. Declaration public PeepholeOptimizer(IReadOnlyList<PeepholeRewriteRule<TInstruction>> rules) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < PeepholeRewriteRule <TInstruction>> rules The rewrite rules to apply. Properties | Improve this Doc View Source Rules Gets a list of all rewrite rules used by this peephole optimizer. Declaration public IReadOnlyList<PeepholeRewriteRule<TInstruction>> Rules { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < PeepholeRewriteRule <TInstruction>> A list of rewrite rules. Methods | Improve this Doc View Source GetBranchTargets(TInstruction) Gets a list of all instructions to which a particular instruction may branch. Declaration protected virtual IEnumerable<TInstruction> GetBranchTargets(TInstruction instruction) Parameters Type Name Description TInstruction instruction An instruction that may branch to other instructions. Returns Type Description System.Collections.Generic.IEnumerable <TInstruction> A list of branch targets. | Improve this Doc View Source GetInstructionReferences(TExternalRef) Gets a list of all instructions referenced by a particular external instruction reference. Declaration protected virtual IEnumerable<TInstruction> GetInstructionReferences(TExternalRef externalRef) Parameters Type Name Description TExternalRef externalRef The external reference to examine. Returns Type Description System.Collections.Generic.IEnumerable <TInstruction> A list of referenced instructions. | Improve this Doc View Source Optimize(IReadOnlyList<TInstruction>) Optimizes a linear sequence of instructions by applying rewrite rules. Declaration public IReadOnlyList<TInstruction> Optimize(IReadOnlyList<TInstruction> instructions) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <TInstruction> instructions The instructions to optimize. Returns Type Description System.Collections.Generic.IReadOnlyList <TInstruction> A linear sequence of optimized instructions. | Improve this Doc View Source Optimize(IReadOnlyList<TInstruction>, IReadOnlyList<TExternalRef>, out IReadOnlyList<TExternalRef>) Optimizes a linear sequence of instructions by applying rewrite rules. Declaration public IReadOnlyList<TInstruction> Optimize(IReadOnlyList<TInstruction> instructions, IReadOnlyList<TExternalRef> externalRefs, out IReadOnlyList<TExternalRef> newExternalRefs) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <TInstruction> instructions The instructions to optimize. System.Collections.Generic.IReadOnlyList <TExternalRef> externalRefs A list of external references to instructions. System.Collections.Generic.IReadOnlyList <TExternalRef> newExternalRefs A list of rewritten external references to instructions. Returns Type Description System.Collections.Generic.IReadOnlyList <TInstruction> A linear sequence of optimized instructions. | Improve this Doc View Source RewriteBranchTargets(TInstruction, IReadOnlyDictionary<TInstruction, TInstruction>) Rewrites an instruction's branch targets. Declaration protected virtual TInstruction RewriteBranchTargets(TInstruction instruction, IReadOnlyDictionary<TInstruction, TInstruction> branchTargetMap) Parameters Type Name Description TInstruction instruction The instruction to rewrite. System.Collections.Generic.IReadOnlyDictionary <TInstruction, TInstruction> branchTargetMap A mapping of old branch target instructions to new branch target instructions. Returns Type Description TInstruction A modified or new instruction. | Improve this Doc View Source RewriteInstructionReferences(TExternalRef, IReadOnlyDictionary<TInstruction, TInstruction>) Rewrites an external reference's referenced instructions. Declaration protected virtual TExternalRef RewriteInstructionReferences(TExternalRef externalRef, IReadOnlyDictionary<TInstruction, TInstruction> referenceMap) Parameters Type Name Description TExternalRef externalRef The reference to rewrite. System.Collections.Generic.IReadOnlyDictionary <TInstruction, TInstruction> referenceMap A mapping of old referenced instructions to new referenced instructions. Returns Type Description TExternalRef A modified or new external reference."
  },
  "api/Flame.Collections.SymmetricRelation-1.html": {
    "href": "api/Flame.Collections.SymmetricRelation-1.html",
    "title": "Class SymmetricRelation<T> | Flame",
    "keywords": "Class SymmetricRelation<T> Describes a symmetric relation between values: a set of two-element sets. Inheritance System.Object SymmetricRelation<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class SymmetricRelation<T> Type Parameters Name Description T The type of values in the relation. Constructors | Improve this Doc View Source SymmetricRelation() Creates an empty symmetric relation. Declaration public SymmetricRelation() | Improve this Doc View Source SymmetricRelation(IEqualityComparer<T>) Creates an empty symmetric relation. Declaration public SymmetricRelation(IEqualityComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> comparer The equality comparer to use. Methods | Improve this Doc View Source Add(T, T) Adds a pair of values to the relation. Declaration public bool Add(T first, T second) Parameters Type Name Description T first The first element to relate. T second The second element to relate. Returns Type Description System.Boolean true if first and second are not related yet; otherwise, false . | Improve this Doc View Source Contains(T, T) Tests if two elements are related. Declaration public bool Contains(T first, T second) Parameters Type Name Description T first A first element. T second A second element. Returns Type Description System.Boolean true if the elements are related under this relation; otherwise, false . | Improve this Doc View Source GetAll(T) Gets the set of all values related to a particular value. Declaration public IEnumerable<T> GetAll(T value) Parameters Type Name Description T value The value to examine. Returns Type Description System.Collections.Generic.IEnumerable <T> The set of all related values. | Improve this Doc View Source Remove(T, T) Removes a pair of values from the relation. Declaration public bool Remove(T first, T second) Parameters Type Name Description T first A first element. T second A second element. Returns Type Description System.Boolean true if first and second were related; otherwise, false ."
  },
  "api/Flame.Collections.StronglyConnectedComponents.html": {
    "href": "api/Flame.Collections.StronglyConnectedComponents.html",
    "title": "Class StronglyConnectedComponents | Flame",
    "keywords": "Class StronglyConnectedComponents Defines algorithms that compute strongly connected components. Inheritance System.Object StronglyConnectedComponents Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public static class StronglyConnectedComponents Methods | Improve this Doc View Source Compute<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) Computes all strongly connected components in a graph. Declaration public static IReadOnlyList<HashSet<T>> Compute<T>(IEnumerable<T> vertices, Func<T, IEnumerable<T>> getSuccessors) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> vertices The vertices in a graph. System.Func <T, System.Collections.Generic.IEnumerable <T>> getSuccessors A function that takes a vertex in a graph and computes its successors. Returns Type Description System.Collections.Generic.IReadOnlyList < System.Collections.Generic.HashSet <T>> A list of strongly connected components. Type Parameters Name Description T The type of a vertex."
  },
  "api/Flame.Collections.SmallMultiDictionary-2.html": {
    "href": "api/Flame.Collections.SmallMultiDictionary-2.html",
    "title": "Class SmallMultiDictionary<TKey, TValue> | Flame",
    "keywords": "Class SmallMultiDictionary<TKey, TValue> A small, memory-friendly and cache-friendly dictionary with O(n) asymptotic complexity for all operations. Inheritance System.Object SmallMultiDictionary<TKey, TValue> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class SmallMultiDictionary<TKey, TValue> Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source SmallMultiDictionary() Creates a small multi-dictionary. Declaration public SmallMultiDictionary() | Improve this Doc View Source SmallMultiDictionary(SmallMultiDictionary<TKey, TValue>) Creates a small multi-dictionary by copying the contents of another small multi-dictionary. Declaration public SmallMultiDictionary(SmallMultiDictionary<TKey, TValue> other) Parameters Type Name Description SmallMultiDictionary <TKey, TValue> other The other multi-dictionary. | Improve this Doc View Source SmallMultiDictionary(Int32) Creates a small multi-dictionary from an initial capacity. Declaration public SmallMultiDictionary(int initialCapacity) Parameters Type Name Description System.Int32 initialCapacity The dictionary's initial capacity. Properties | Improve this Doc View Source Count Gets the number of elements in the multi-dictionary. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements in the multi-dictionary. | Improve this Doc View Source Values Gets all values in this dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> Methods | Improve this Doc View Source Add(TKey, TValue) Inserts an item into this dictionary. Declaration public void Add(TKey Key, TValue Value) Parameters Type Name Description TKey Key TValue Value | Improve this Doc View Source AddRange(SmallMultiDictionary<TKey, TValue>) Inserts a range of items into this dictionary. Declaration public void AddRange(SmallMultiDictionary<TKey, TValue> Other) Parameters Type Name Description SmallMultiDictionary <TKey, TValue> Other | Improve this Doc View Source ContainsKey(TKey) Checks if this dictionary contains at least one element with the given key. Declaration public bool ContainsKey(TKey Key) Parameters Type Name Description TKey Key Returns Type Description System.Boolean | Improve this Doc View Source GetAll(TKey) Gets all values with the given key. Declaration public IEnumerable<TValue> GetAll(TKey Key) Parameters Type Name Description TKey Key Returns Type Description System.Collections.Generic.IEnumerable <TValue> | Improve this Doc View Source PeekOrDefault(TKey) Tries to retrieve the first value with the given key in this dictionary. If no such item exists, then the default value is returned. Declaration public TValue PeekOrDefault(TKey Key) Parameters Type Name Description TKey Key Returns Type Description TValue | Improve this Doc View Source Remove(TKey) Removes all key-value pairs with the given key from this dictionary. Declaration public bool Remove(TKey Key) Parameters Type Name Description TKey Key Returns Type Description System.Boolean | Improve this Doc View Source Reserve(Int32) Reserves the given capacity in this small multi dictionary. Declaration public void Reserve(int MinimalCapacity) Parameters Type Name Description System.Int32 MinimalCapacity | Improve this Doc View Source TryPeek(TKey, out TValue) Tries to retrieve the first value with the given key in this dictionary. Declaration public bool TryPeek(TKey Key, out TValue Result) Parameters Type Name Description TKey Key TValue Result Returns Type Description System.Boolean"
  },
  "api/Flame.Collections.InterningCache-1.html": {
    "href": "api/Flame.Collections.InterningCache-1.html",
    "title": "Class InterningCache<T> | Flame",
    "keywords": "Class InterningCache<T> A cache that interns values: it maps each input value to a value that is structurally equal to the input and all structurally equal input values are mapped to the same output value as long as that output value is live. Inheritance System.Object InterningCache<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class InterningCache<T> where T : class Type Parameters Name Description T Constructors | Improve this Doc View Source InterningCache(IEqualityComparer<T>) Creates an interning cache from a comparer. Declaration public InterningCache(IEqualityComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> comparer A comparer that tests if input values are structurally equal. | Improve this Doc View Source InterningCache(IEqualityComparer<T>, Func<T, T>) Creates an interning cache from a comparer and an initialization function. Declaration public InterningCache(IEqualityComparer<T> comparer, Func<T, T> initialize) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> comparer A comparer that tests if input values are structurally equal. System.Func <T, T> initialize A function that initializes output values. Methods | Improve this Doc View Source Intern(T) Interns a particular value. Declaration public T Intern(T value) Parameters Type Name Description T value An input value. Returns Type Description T A value that is structurally equal to the input value."
  },
  "api/Flame.Collections.Index-3.html": {
    "href": "api/Flame.Collections.Index-3.html",
    "title": "Class Index<TContainer, TKey, TValue> | Flame",
    "keywords": "Class Index<TContainer, TKey, TValue> A data structure that memoizes lookups by key in a data structure. Inheritance System.Object Index<TContainer, TKey, TValue> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class Index<TContainer, TKey, TValue> where TContainer : class Type Parameters Name Description TContainer The type of data structure to look up values in. TKey The type of key with which values can be looked up. TValue The type of value to look up. Constructors | Improve this Doc View Source Index(Func<TContainer, IEnumerable<KeyValuePair<TKey, TValue>>>) Creates an index. Declaration public Index(Func<TContainer, IEnumerable<KeyValuePair<TKey, TValue>>> getElements) Parameters Type Name Description System.Func <TContainer, System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>>> getElements Takes a container and returns its contents as a sequence of key-value pairs. A single key may occur more than once in the output. | Improve this Doc View Source Index(Func<TContainer, IEnumerable<KeyValuePair<TKey, TValue>>>, IEqualityComparer<TKey>) Creates an index. Declaration public Index(Func<TContainer, IEnumerable<KeyValuePair<TKey, TValue>>> getElements, IEqualityComparer<TKey> keyComparer) Parameters Type Name Description System.Func <TContainer, System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>>> getElements Takes a container and returns its contents as a sequence of key-value pairs. A single key may occur more than once in the output. System.Collections.Generic.IEqualityComparer <TKey> keyComparer A comparer for keys. Methods | Improve this Doc View Source GetAll(TContainer, TKey) Gets a list of all values in a container that are tagged with a particular key. Declaration public IReadOnlyList<TValue> GetAll(TContainer container, TKey key) Parameters Type Name Description TContainer container The container to search. TKey key The key to look for. Returns Type Description System.Collections.Generic.IReadOnlyList <TValue> A list of values."
  },
  "api/Flame.Collections.ImmutableOrderedDictionary.html": {
    "href": "api/Flame.Collections.ImmutableOrderedDictionary.html",
    "title": "Class ImmutableOrderedDictionary | Flame",
    "keywords": "Class ImmutableOrderedDictionary An immutable dictionary that iterates over elements in the order they were added. Inheritance System.Object ImmutableOrderedDictionary Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.Compiler.dll Syntax public static class ImmutableOrderedDictionary Methods | Improve this Doc View Source Create<TKey, TValue>() Creates an immutable ordered dictionary. Declaration public static ImmutableOrderedDictionary<TKey, TValue> Create<TKey, TValue>() Returns Type Description ImmutableOrderedDictionary <TKey, TValue> An immutable ordered dictionary. Type Parameters Name Description TKey TValue"
  },
  "api/Flame.Collections.ImmutableOrderedDictionary-2.html": {
    "href": "api/Flame.Collections.ImmutableOrderedDictionary-2.html",
    "title": "Struct ImmutableOrderedDictionary<TKey, TValue> | Flame",
    "keywords": "Struct ImmutableOrderedDictionary<TKey, TValue> An immutable dictionary that iterates over elements in the order they were added. Implements System.Collections.Immutable.IImmutableDictionary <TKey, TValue> System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.IEnumerable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Collections Assembly : Flame.Compiler.dll Syntax public struct ImmutableOrderedDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Fields | Improve this Doc View Source Empty An empty immutable ordered dictionary. Declaration public static readonly ImmutableOrderedDictionary<TKey, TValue> Empty Field Value Type Description ImmutableOrderedDictionary <TKey, TValue> Properties | Improve this Doc View Source Count Gets the number of elements in this dictionary. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[TKey] Gets the value for a particular key. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The key to look up. Property Value Type Description TValue | Improve this Doc View Source Keys Gets a sequence of all keys in this dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TKey> | Improve this Doc View Source Values Gets a sequence of all values in this dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> Methods | Improve this Doc View Source Add(TKey, TValue) Adds a key-value pair to this ordered dictionary. Declaration public ImmutableOrderedDictionary<TKey, TValue> Add(TKey key, TValue value) Parameters Type Name Description TKey key The key to add to the dictionary. TValue value The value to associate with key . Returns Type Description ImmutableOrderedDictionary <TKey, TValue> A new dictionary that includes the key-value pair. | Improve this Doc View Source AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Adds a sequence of key-value pairs to this ordered dictionary. Declaration public ImmutableOrderedDictionary<TKey, TValue> AddRange(IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> pairs The key-value pairs to add to the dictionary. Returns Type Description ImmutableOrderedDictionary <TKey, TValue> A new dictionary that includes the key-value pairs. | Improve this Doc View Source Clear() Creates an immutable ordered dictionary that does not contain any elements. Declaration public ImmutableOrderedDictionary<TKey, TValue> Clear() Returns Type Description ImmutableOrderedDictionary <TKey, TValue> A new immutable ordered dictionary. | Improve this Doc View Source Contains(KeyValuePair<TKey, TValue>) Tests if this dictionary contains a particular key-value pair. Declaration public bool Contains(KeyValuePair<TKey, TValue> pair) Parameters Type Name Description System.Collections.Generic.KeyValuePair <TKey, TValue> pair The key-value pair to look for. Returns Type Description System.Boolean true if this dictionary contains the key-value pair; otherwise, false . | Improve this Doc View Source ContainsKey(TKey) Tests if this dictionary contains a particular key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to look for. Returns Type Description System.Boolean true if this dictionary contains the key; otherwise, false . | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair <TKey, TValue>> | Improve this Doc View Source Remove(TKey) Removes a key-value pair from this immutable ordered dictionary. Declaration public ImmutableOrderedDictionary<TKey, TValue> Remove(TKey key) Parameters Type Name Description TKey key The key of the key-value pair to remove. Returns Type Description ImmutableOrderedDictionary <TKey, TValue> An immutable ordered dictionary that does not contain the key . | Improve this Doc View Source RemoveRange(IEnumerable<TKey>) Removes a sequence of key-value pairs from this immutable ordered dictionary. Declaration public ImmutableOrderedDictionary<TKey, TValue> RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description System.Collections.Generic.IEnumerable <TKey> keys The keys of the key-value pairs to remove. Returns Type Description ImmutableOrderedDictionary <TKey, TValue> An immutable ordered dictionary that does not contain keys . | Improve this Doc View Source SetItem(TKey, TValue) Assigns a value to a particular key. Declaration public ImmutableOrderedDictionary<TKey, TValue> SetItem(TKey key, TValue value) Parameters Type Name Description TKey key The key to assign a value to. TValue value The value to assign to the key. Returns Type Description ImmutableOrderedDictionary <TKey, TValue> An immutable ordered dictionary that associates key with value . | Improve this Doc View Source SetItems(IEnumerable<KeyValuePair<TKey, TValue>>) Assigns values to keys. Declaration public ImmutableOrderedDictionary<TKey, TValue> SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> items The key-value pairs to add or update. Returns Type Description ImmutableOrderedDictionary <TKey, TValue> An immutable ordered dictionary that contains items as key-value pairs. | Improve this Doc View Source ToBuilder() Creates a mutable version of this immutable ordered dictionary. Declaration public ImmutableOrderedDictionary<TKey, TValue>.Builder ToBuilder() Returns Type Description ImmutableOrderedDictionary.Builder <> An ordered dictionary builder. | Improve this Doc View Source TryGetKey(TKey, out TKey) Declaration public bool TryGetKey(TKey equalKey, out TKey actualKey) Parameters Type Name Description TKey equalKey TKey actualKey Returns Type Description System.Boolean | Improve this Doc View Source TryGetValue(TKey, out TValue) Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator | Improve this Doc View Source IImmutableDictionary<TKey, TValue>.Add(TKey, TValue) Declaration IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Add(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description System.Collections.Immutable.IImmutableDictionary <TKey, TValue> | Improve this Doc View Source IImmutableDictionary<TKey, TValue>.AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Declaration IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.AddRange(IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> pairs Returns Type Description System.Collections.Immutable.IImmutableDictionary <TKey, TValue> | Improve this Doc View Source IImmutableDictionary<TKey, TValue>.Clear() Declaration IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Clear() Returns Type Description System.Collections.Immutable.IImmutableDictionary <TKey, TValue> | Improve this Doc View Source IImmutableDictionary<TKey, TValue>.Remove(TKey) Declaration IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Remove(TKey key) Parameters Type Name Description TKey key Returns Type Description System.Collections.Immutable.IImmutableDictionary <TKey, TValue> | Improve this Doc View Source IImmutableDictionary<TKey, TValue>.RemoveRange(IEnumerable<TKey>) Declaration IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description System.Collections.Generic.IEnumerable <TKey> keys Returns Type Description System.Collections.Immutable.IImmutableDictionary <TKey, TValue> | Improve this Doc View Source IImmutableDictionary<TKey, TValue>.SetItem(TKey, TValue) Declaration IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItem(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description System.Collections.Immutable.IImmutableDictionary <TKey, TValue> | Improve this Doc View Source IImmutableDictionary<TKey, TValue>.SetItems(IEnumerable<KeyValuePair<TKey, TValue>>) Declaration IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> items Returns Type Description System.Collections.Immutable.IImmutableDictionary <TKey, TValue> Implements System.Collections.Immutable.IImmutableDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Flame.Collections.ImmutableOrderedDictionary-2.Builder.html": {
    "href": "api/Flame.Collections.ImmutableOrderedDictionary-2.Builder.html",
    "title": "Class ImmutableOrderedDictionary<TKey, TValue>.Builder | Flame",
    "keywords": "Class ImmutableOrderedDictionary<TKey, TValue>.Builder A mutable wrapper around an immutable ordered dictionary. Inheritance System.Object ImmutableOrderedDictionary<TKey, TValue>.Builder Implements System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.Compiler.dll Syntax public sealed class Builder : IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of key-value pairs in this dictionary. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[TKey] Gets or sets the value associated with a particular key. Declaration public TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key The key to access. Property Value Type Description TValue The value associated with key . | Improve this Doc View Source KeyComparer Gets the value comparer for this dictionary. Declaration public IEqualityComparer<TKey> KeyComparer { get; } Property Value Type Description System.Collections.Generic.IEqualityComparer <TKey> | Improve this Doc View Source Keys Gets a sequence of all keys in this dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TKey> | Improve this Doc View Source ValueComparer Gets the value comparer for this dictionary. Declaration public IEqualityComparer<TValue> ValueComparer { get; } Property Value Type Description System.Collections.Generic.IEqualityComparer <TValue> | Improve this Doc View Source Values Gets a sequence of all values in this dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> Methods | Improve this Doc View Source Add(TKey, TValue) Adds a key-value pair to this dictionary. Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key The key to add. TValue value The value to associate with key . | Improve this Doc View Source Add(KeyValuePair<TKey, TValue>) Adds a key-value pair to this dictionary. Declaration public void Add(KeyValuePair<TKey, TValue> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair <TKey, TValue> item The key-value pair to add. | Improve this Doc View Source AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Adds a sequence of key-value pairs to this dictionary. Declaration public void AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> items The key-value pairs to add. | Improve this Doc View Source Clear() Removes all key-value pairs from this dictionary. Declaration public void Clear() | Improve this Doc View Source Contains(KeyValuePair<TKey, TValue>) Tests if this dictionary contains a key-value pair. Declaration public bool Contains(KeyValuePair<TKey, TValue> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair <TKey, TValue> item The key-value pair to look for. Returns Type Description System.Boolean true if this dictionary contains item . | Improve this Doc View Source ContainsKey(TKey) Tests if this dictionary contains a particular key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to look for. Returns Type Description System.Boolean true if this dictionary contains key . | Improve this Doc View Source ContainsValue(TValue) Tests if this dictionary contains a particular value. Declaration public bool ContainsValue(TValue value) Parameters Type Name Description TValue value The value to look for. Returns Type Description System.Boolean true if this dictionary contains value . | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair <TKey, TValue>> | Improve this Doc View Source GetValueOrDefault(TKey) Gets the value associated with a particular key or a default value if this dictionary does not contain the key. Declaration public TValue GetValueOrDefault(TKey key) Parameters Type Name Description TKey key The key to look for. Returns Type Description TValue The value associated with key if it exists; otherwise, a default value. | Improve this Doc View Source GetValueOrDefault(TKey, TValue) Gets the value associated with a particular key or a default value if this dictionary does not contain the key. Declaration public TValue GetValueOrDefault(TKey key, TValue defaultValue) Parameters Type Name Description TKey key The key to look for. TValue defaultValue The value to return if this dictionary does not contain key . Returns Type Description TValue The value associated with key if it exists; otherwise, defaultValue . | Improve this Doc View Source Remove(TKey) Removes a key from this dictionary. Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key The key to remove. Returns Type Description System.Boolean true if the key was removed; false if this dictionary didn't contain the key in the first place. | Improve this Doc View Source Remove(KeyValuePair<TKey, TValue>) Removes a key-value pair from this dictionary. Declaration public bool Remove(KeyValuePair<TKey, TValue> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair <TKey, TValue> item The key-value pair to remove. Returns Type Description System.Boolean true if the key-value pair was removed; false if this dictionary didn't contain the key-value pair in the first place. | Improve this Doc View Source RemoveRange(IEnumerable<TKey>) Removes a range of keys from this ordered dictionary. Declaration public void RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description System.Collections.Generic.IEnumerable <TKey> keys The keys to remove. | Improve this Doc View Source ToImmutable() Creates an immutable ordered dictionary from this mutable builder. Declaration public ImmutableOrderedDictionary<TKey, TValue> ToImmutable() Returns Type Description ImmutableOrderedDictionary <TKey, TValue> An immutable ordered dictionary. | Improve this Doc View Source TryGetKey(TKey, out TKey) Tries to find a key in this dictionary. Declaration public bool TryGetKey(TKey equalKey, out TKey actualKey) Parameters Type Name Description TKey equalKey A key that is equal to the key to look for. TKey actualKey The key that is stored in the dictionary. Returns Type Description System.Boolean true if this dictionary contains a key equal to equalKey ; otherwise, false . | Improve this Doc View Source TryGetValue(TKey, out TValue) Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods BetternessExtensions.TryGetBestElement<T>(IEnumerable<T>, Func<T, T, Betterness>, out T) BetternessExtensions.GetBestElementOrDefault<T>(IEnumerable<T>, Func<T, T, Betterness>)"
  },
  "api/Flame.Collections.EnumerableComparer.html": {
    "href": "api/Flame.Collections.EnumerableComparer.html",
    "title": "Class EnumerableComparer | Flame",
    "keywords": "Class EnumerableComparer An element-wise equality comparer for sequences of values. Inheritance System.Object EnumerableComparer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public static class EnumerableComparer Fields | Improve this Doc View Source EmptyHash The hash code for an empty sequence. Declaration public const int EmptyHash = -2128831035 Field Value Type Description System.Int32 Methods | Improve this Doc View Source FoldIntoHashCode(Int32, Int32) Folds a hash code for an element into a hash code for a sequence. Declaration public static int FoldIntoHashCode(int hashCode, int elementHashCode) Parameters Type Name Description System.Int32 hashCode A hash code for a sequence without the element. System.Int32 elementHashCode A hash code for an element. Returns Type Description System.Int32 A hash code for a sequence that includes the element. | Improve this Doc View Source FoldIntoHashCode<T>(Int32, T) Folds a hash code for an element into a hash code for a sequence. Declaration public static int FoldIntoHashCode<T>(int hashCode, T element) Parameters Type Name Description System.Int32 hashCode A hash code for a sequence without the element. T element An element whose hash code is to be folded into the hash code for the sequence. Returns Type Description System.Int32 A hash code for a sequence that includes the element. Type Parameters Name Description T | Improve this Doc View Source HashEnumerable<T>(IEnumerable<T>) Hashes a sequence of elements. Declaration public static int HashEnumerable<T>(IEnumerable<T> sequence) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to hash. Returns Type Description System.Int32 A hash code for the entire sequence. Type Parameters Name Description T The type of element in the sequence. | Improve this Doc View Source HashEnumerable<T>(IEnumerable<T>, IEqualityComparer<T>) Hashes a sequence of elements. Declaration public static int HashEnumerable<T>(IEnumerable<T> sequence, IEqualityComparer<T> elementComparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to hash. System.Collections.Generic.IEqualityComparer <T> elementComparer An equality comparer for elements of the sequence. Returns Type Description System.Int32 A hash code for the entire sequence. Type Parameters Name Description T The type of element in the sequence. | Improve this Doc View Source HashUnorderedSet<T>(IEnumerable<T>) Hashes an unordered set of elements. Declaration public static int HashUnorderedSet<T>(IEnumerable<T> sequence) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The unordered set to hash. Returns Type Description System.Int32 An ordering-independent hash code for the entire set. Type Parameters Name Description T The type of element in the set. | Improve this Doc View Source HashUnorderedSet<T>(IEnumerable<T>, IEqualityComparer<T>) Hashes an unordered set of elements. Declaration public static int HashUnorderedSet<T>(IEnumerable<T> sequence, IEqualityComparer<T> elementComparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The unordered set to hash. System.Collections.Generic.IEqualityComparer <T> elementComparer An equality comparer for elements of the set. Returns Type Description System.Int32 An ordering-independent hash code for the entire set. Type Parameters Name Description T The type of element in the set."
  },
  "api/Flame.Collections.BetternessExtensions.html": {
    "href": "api/Flame.Collections.BetternessExtensions.html",
    "title": "Class BetternessExtensions | Flame",
    "keywords": "Class BetternessExtensions Extension methods related to the BetterResult enum. Inheritance System.Object BetternessExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public static class BetternessExtensions Methods | Improve this Doc View Source Flip(Betterness) \"Flips\" the given betterness: if the first element was better, then this method returns a betterness for the second element, and vice-versa. Declaration public static Betterness Flip(this Betterness Value) Parameters Type Name Description Betterness Value The beterness to flip. Returns Type Description Betterness | Improve this Doc View Source GetBestElementOrDefault<T>(IEnumerable<T>, Func<T, T, Betterness>) Tries the get best element in the sequence: the element that is better than every other element. If no such elemet is found, then the default value for its type is returned. Declaration public static T GetBestElementOrDefault<T>(this IEnumerable<T> Elements, Func<T, T, Betterness> Compare) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> Elements The sequence of elements to search through. System.Func <T, T, Betterness > Compare A function that compares to elements for betterness. Returns Type Description T The best element or the default value for its type. Type Parameters Name Description T The type of elements in the sequence. | Improve this Doc View Source TryGetBestElement<T>(IEnumerable<T>, Func<T, T, Betterness>, out T) Tries the get best element in the sequence: the element that is better than every other element. Declaration public static bool TryGetBestElement<T>(this IEnumerable<T> Elements, Func<T, T, Betterness> Compare, out T BestElement) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> Elements The sequence of elements to search through. System.Func <T, T, Betterness > Compare A function that compares to elements for betterness. T BestElement The best element in the sequence. Returns Type Description System.Boolean true , if a best element was found, false otherwise. Type Parameters Name Description T The type of elements in the sequence."
  },
  "api/Flame.Collections.Betterness.html": {
    "href": "api/Flame.Collections.Betterness.html",
    "title": "Enum Betterness | Flame",
    "keywords": "Enum Betterness Specifies if one of two items is better than the other. Namespace : Flame.Collections Assembly : Flame.dll Syntax public enum Betterness Fields Name Description Equal Both items are equal. First The first item is better than the second. Neither Neither item is better than the other. Second The second item is better than the second. Extension Methods BetternessExtensions.Flip()"
  },
  "api/Flame.Clr.Transforms.html": {
    "href": "api/Flame.Clr.Transforms.html",
    "title": "Namespace Flame.Clr.Transforms | Flame",
    "keywords": "Namespace Flame.Clr.Transforms Classes CanonicalizeDelegates An intraprocedural transform that turns CIL idioms for delegates into specialized Flame IR instructions. ExpandLinq An optimization that replaces select LINQ methods with tailored implementations. LowerDelegates An intraprocedural transform that turns Flame IR's dedicated delegate instructions into CIL idioms."
  },
  "api/Flame.Clr.Transforms.LowerDelegates.html": {
    "href": "api/Flame.Clr.Transforms.LowerDelegates.html",
    "title": "Class LowerDelegates | Flame",
    "keywords": "Class LowerDelegates An intraprocedural transform that turns Flame IR's dedicated delegate instructions into CIL idioms. Inheritance System.Object Optimization IntraproceduralOptimization LowerDelegates Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Transforms Assembly : Flame.Clr.dll Syntax public sealed class LowerDelegates : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the CIL delegate canonicalization transform. Declaration public static readonly LowerDelegates Instance Field Value Type Description LowerDelegates Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.AttributeMapBuilder.html": {
    "href": "api/Flame.AttributeMapBuilder.html",
    "title": "Class AttributeMapBuilder | Flame",
    "keywords": "Class AttributeMapBuilder Defines a mutable attribute map. Inheritance System.Object AttributeMapBuilder Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public sealed class AttributeMapBuilder Constructors | Improve this Doc View Source AttributeMapBuilder() Creates an empty attribute map builder. Declaration public AttributeMapBuilder() | Improve this Doc View Source AttributeMapBuilder(AttributeMap) Creates an attribute map builder by copying the contents of an existing attribute map. Declaration public AttributeMapBuilder(AttributeMap attributes) Parameters Type Name Description AttributeMap attributes An attribute map. | Improve this Doc View Source AttributeMapBuilder(AttributeMapBuilder) Creates an attribute map builder by copying the contents of another attribute map builder. Declaration public AttributeMapBuilder(AttributeMapBuilder attributes) Parameters Type Name Description AttributeMapBuilder attributes An attribute map builder. | Improve this Doc View Source AttributeMapBuilder(IAttribute[]) Creates an attribute map builder from an array of attributes. Declaration public AttributeMapBuilder(params IAttribute[] attributes) Parameters Type Name Description IAttribute [] attributes An array of attributes. | Improve this Doc View Source AttributeMapBuilder(IEnumerable<IAttribute>) Creates an attribute map builder from a sequence of attributes. Declaration public AttributeMapBuilder(IEnumerable<IAttribute> attributes) Parameters Type Name Description System.Collections.Generic.IEnumerable < IAttribute > attributes A sequence of attributes. Methods | Improve this Doc View Source Add(IAttribute) Adds the given attribute to this attribute map builder. Declaration public void Add(IAttribute attribute) Parameters Type Name Description IAttribute attribute | Improve this Doc View Source AddRange(AttributeMap) Adds the given range of attributes to this attribute map builder. Declaration public void AddRange(AttributeMap attributes) Parameters Type Name Description AttributeMap attributes | Improve this Doc View Source AddRange(AttributeMapBuilder) Adds the given range of attributes to this attribute map builder. Declaration public void AddRange(AttributeMapBuilder attributes) Parameters Type Name Description AttributeMapBuilder attributes | Improve this Doc View Source AddRange(IAttribute[]) Adds the given range of attributes to this attribute map builder. Declaration public void AddRange(IAttribute[] attributes) Parameters Type Name Description IAttribute [] attributes | Improve this Doc View Source AddRange(IEnumerable<IAttribute>) Adds the given range of attributes to this attribute map builder. Declaration public void AddRange(IEnumerable<IAttribute> attributes) Parameters Type Name Description System.Collections.Generic.IEnumerable < IAttribute > attributes | Improve this Doc View Source Contains(IType) Checks if this attribute map contains at least one attribute with the given type. Declaration public bool Contains(IType Type) Parameters Type Name Description IType Type Returns Type Description System.Boolean | Improve this Doc View Source Get(IType) Gets the first attribute with the given type. If no such attribute exists, then null is returned. Declaration public IAttribute Get(IType Type) Parameters Type Name Description IType Type Returns Type Description IAttribute | Improve this Doc View Source GetAll(IType) Gets all attributes in this attribute map with the given type. Declaration public IEnumerable<IAttribute> GetAll(IType Type) Parameters Type Name Description IType Type Returns Type Description System.Collections.Generic.IEnumerable < IAttribute > | Improve this Doc View Source RemoveAll(IType) Removes all attributes that have the given type. Declaration public void RemoveAll(IType Type) Parameters Type Name Description IType Type"
  },
  "api/Flame.AssemblyIdentity.html": {
    "href": "api/Flame.AssemblyIdentity.html",
    "title": "Class AssemblyIdentity | Flame",
    "keywords": "Class AssemblyIdentity A reference to a particular assembly. Inheritance System.Object AssemblyIdentity Implements System.IEquatable < AssemblyIdentity > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public sealed class AssemblyIdentity : IEquatable<AssemblyIdentity> Constructors | Improve this Doc View Source AssemblyIdentity(String) Creates an assembly identity from a name. Declaration public AssemblyIdentity(string name) Parameters Type Name Description System.String name The name of the assembly to reference. | Improve this Doc View Source AssemblyIdentity(String, IReadOnlyDictionary<String, String>) Creates an assembly identity from a name and a set of annotations. Declaration public AssemblyIdentity(string name, IReadOnlyDictionary<string, string> annotations) Parameters Type Name Description System.String name The name of the assembly to reference. System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > annotations The assembly identity's annotations, expressed as a mapping of keys to values. Fields | Improve this Doc View Source IsRetargetableKey The key for the 'is-retargetable' annotation. Declaration public const string IsRetargetableKey = \"isRetargetable\" Field Value Type Description System.String | Improve this Doc View Source VersionAnnotationKey The key for the 'version' annotation. Declaration public const string VersionAnnotationKey = \"version\" Field Value Type Description System.String Properties | Improve this Doc View Source Annotations Gets a read-only dictionary of additional annotations for the assembly identity. They are used to include additional information on the assembly. Declaration public IReadOnlyDictionary<string, string> Annotations { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > Additional annotations. | Improve this Doc View Source IsRetargetable Gets the value of the 'is-retargetable' annotation if it is present; otherwise, false . Declaration public bool IsRetargetable { get; } Property Value Type Description System.Boolean The value of the 'is-retargetable' annotation. | Improve this Doc View Source Name Gets the name of the assembly that is referenced. Declaration public string Name { get; } Property Value Type Description System.String The name of the assembly. | Improve this Doc View Source VersionOrNull Gets the value of the 'version' annotation if it is present; otherwise, null . Declaration public Version VersionOrNull { get; } Property Value Type Description System.Version The value of the 'version' annotation. Methods | Improve this Doc View Source Equals(AssemblyIdentity) Checks if two assembly identities are equal. Declaration public bool Equals(AssemblyIdentity other) Parameters Type Name Description AssemblyIdentity other The assembly identity to compare with. Returns Type Description System.Boolean true if the assembly identities are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source HasAnnotation(String) Tests if this assembly identity includes a particular annotation key. Declaration public bool HasAnnotation(string key) Parameters Type Name Description System.String key The key to look for. Returns Type Description System.Boolean true if this assembly identity includes an annotation with the specified key; otherwise, false . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source TryGetAnnotation(String, out Boolean) Tries to get an annotation's value as a Boolean. Declaration public bool TryGetAnnotation(string key, out bool value) Parameters Type Name Description System.String key The key of the annotation to look for. System.Boolean value The value of the annotation. Returns Type Description System.Boolean true if this assembly identity includes an annotation with the specified key; otherwise, false . | Improve this Doc View Source TryGetAnnotation(String, out String) Tries to get an annotation's value. Declaration public bool TryGetAnnotation(string key, out string value) Parameters Type Name Description System.String key The key of the annotation to look for. System.String value The value of the annotation. Returns Type Description System.Boolean true if this assembly identity includes an annotation with the specified key; otherwise, false . | Improve this Doc View Source TryGetAnnotation(String, out Version) Tries to get an annotation's value as a version. Declaration public bool TryGetAnnotation(string key, out Version value) Parameters Type Name Description System.String key The key of the annotation to look for. System.Version value The value of the annotation. Returns Type Description System.Boolean true if this assembly identity includes an annotation with the specified key; otherwise, false . | Improve this Doc View Source WithAnnotation(String, Boolean) Creates a derived assembly identity that includes a particular annotation. Declaration public AssemblyIdentity WithAnnotation(string key, bool value) Parameters Type Name Description System.String key The annotation's key. System.Boolean value The annotation's value. Returns Type Description AssemblyIdentity A derived assembly identity. | Improve this Doc View Source WithAnnotation(String, String) Creates a derived assembly identity that includes a particular annotation. Declaration public AssemblyIdentity WithAnnotation(string key, string value) Parameters Type Name Description System.String key The annotation's key. System.String value The annotation's value. Returns Type Description AssemblyIdentity A derived assembly identity. | Improve this Doc View Source WithAnnotation(String, Version) Creates a derived assembly identity that includes a particular annotation. Declaration public AssemblyIdentity WithAnnotation(string key, Version value) Parameters Type Name Description System.String key The annotation's key. System.Version value The annotation's value. Returns Type Description AssemblyIdentity A derived assembly identity. Implements System.IEquatable<T>"
  },
  "api/Flame.TypeSystem.ErrorType.html": {
    "href": "api/Flame.TypeSystem.ErrorType.html",
    "title": "Class ErrorType | Flame",
    "keywords": "Class ErrorType A special type that signals that an error occurred and that the corresponding error has been reported already. Further errors that arise because an error type is encountered should be suppressed. For example, it is wrong to report an error when a member of an error type is accessed. Reporting the error would confuse the user---the true error here is that the type of a value cannot be recovered, not that the error type does not have any members. Inheritance System.Object ErrorType Implements IType IGenericMember IMember Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class ErrorType : IType, IGenericMember, IMember Fields | Improve this Doc View Source Instance An error type. Declaration public static readonly ErrorType Instance Field Value Type Description ErrorType Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Implements IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.DirectTypeSpecialization.html": {
    "href": "api/Flame.TypeSystem.DirectTypeSpecialization.html",
    "title": "Class DirectTypeSpecialization | Flame",
    "keywords": "Class DirectTypeSpecialization A generic type that is instantiated with a list of type arguments. Inheritance System.Object TypeSpecialization DirectTypeSpecialization Implements IType IGenericMember IMember Inherited Members TypeSpecialization.Initialize() TypeSpecialization.Declaration TypeSpecialization.BaseTypes TypeSpecialization.Fields TypeSpecialization.Methods TypeSpecialization.Properties TypeSpecialization.Attributes TypeSpecialization.NestedTypes TypeSpecialization.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class DirectTypeSpecialization : TypeSpecialization, IType, IGenericMember, IMember Properties | Improve this Doc View Source FullName Gets the member's full name. Declaration public override QualifiedName FullName { get; } Property Value Type Description QualifiedName Overrides TypeSpecialization.FullName | Improve this Doc View Source GenericArguments Gets this generic type's list of generic arguments. Declaration public IReadOnlyList<IType> GenericArguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > The generic arguments. | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public override IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. Overrides TypeSpecialization.GenericParameters | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public override UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName Overrides TypeSpecialization.Name | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public override TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. Overrides TypeSpecialization.Parent Implements IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.DirectMethodSpecialization.html": {
    "href": "api/Flame.TypeSystem.DirectMethodSpecialization.html",
    "title": "Class DirectMethodSpecialization | Flame",
    "keywords": "Class DirectMethodSpecialization A generic method specialization obtained by passing type arguments directly to a generic declaration. Inheritance System.Object MethodSpecialization DirectMethodSpecialization Implements IMethod ITypeMember IGenericMember IMember Inherited Members MethodSpecialization.InitializeInstance(MethodSpecialization) MethodSpecialization.Declaration MethodSpecialization.IsConstructor MethodSpecialization.IsStatic MethodSpecialization.ReturnParameter MethodSpecialization.Parameters MethodSpecialization.BaseMethods MethodSpecialization.Attributes MethodSpecialization.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class DirectMethodSpecialization : MethodSpecialization, IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source DirectMethodSpecialization(IMethod, IReadOnlyList<IType>) Creates a direct method specialization. Declaration public DirectMethodSpecialization(IMethod declaration, IReadOnlyList<IType> genericArguments) Parameters Type Name Description IMethod declaration The generic method to specialize. System.Collections.Generic.IReadOnlyList < IType > genericArguments A sequence of type arguments to specialize the method with. Properties | Improve this Doc View Source FullName Gets the member's full name. Declaration public override QualifiedName FullName { get; } Property Value Type Description QualifiedName Overrides MethodSpecialization.FullName | Improve this Doc View Source GenericArguments Gets the generic arguments that were passed to this method. Declaration public IReadOnlyList<IType> GenericArguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > The generic arguments. | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public override IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. Overrides MethodSpecialization.GenericParameters | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public override UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName Overrides MethodSpecialization.Name | Improve this Doc View Source ParentType Gets the parent type specialization that defines this method specialization. Declaration public override IType ParentType { get; } Property Value Type Description IType The parent type specialization. Overrides MethodSpecialization.ParentType Implements IMethod ITypeMember IGenericMember IMember Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.TypeSystem.DescribedType.html": {
    "href": "api/Flame.TypeSystem.DescribedType.html",
    "title": "Class DescribedType | Flame",
    "keywords": "Class DescribedType A type that can be constructed incrementally in an imperative fashion. Inheritance System.Object DescribedMember DescribedGenericMember DescribedType Implements IType IGenericMember IMember Inherited Members DescribedGenericMember.GenericParameters DescribedGenericMember.AddGenericParameter(IGenericParameter) DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public class DescribedType : DescribedGenericMember, IType, IGenericMember, IMember Constructors | Improve this Doc View Source DescribedType(QualifiedName, IAssembly) Creates a type from a name and a parent assembly. Declaration public DescribedType(QualifiedName fullName, IAssembly assembly) Parameters Type Name Description QualifiedName fullName The type's full name. IAssembly assembly The assembly that defines the type. | Improve this Doc View Source DescribedType(UnqualifiedName, IType) Creates a type from a name and a parent type. Declaration public DescribedType(UnqualifiedName name, IType parentType) Parameters Type Name Description UnqualifiedName name The type's unqualified name. IType parentType The type's parent type, i.e., the type that defines it. Properties | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Methods | Improve this Doc View Source AddBaseType(IType) Makes a particular type a base type of this type. Declaration public void AddBaseType(IType type) Parameters Type Name Description IType type The type to add to this type's base type list. | Improve this Doc View Source AddField(IField) Adds a field to this type. Declaration public void AddField(IField field) Parameters Type Name Description IField field The field to add. | Improve this Doc View Source AddMethod(IMethod) Adds a method to this type. Declaration public void AddMethod(IMethod method) Parameters Type Name Description IMethod method The method to add. | Improve this Doc View Source AddNestedType(IType) Adds a nested type to this type. Declaration public void AddNestedType(IType nestedType) Parameters Type Name Description IType nestedType The nested type to add. | Improve this Doc View Source AddProperty(IProperty) Adds a property to this type. Declaration public void AddProperty(IProperty property) Parameters Type Name Description IProperty property The property to add. Implements IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.DescribedMethod.html": {
    "href": "api/Flame.TypeSystem.DescribedMethod.html",
    "title": "Class DescribedMethod | Flame",
    "keywords": "Class DescribedMethod A method that can be constructed incrementally in an imperative fashion. Inheritance System.Object DescribedMember DescribedGenericMember DescribedMethod DescribedAccessor DescribedBodyMethod Implements IMethod ITypeMember IGenericMember IMember Inherited Members DescribedGenericMember.GenericParameters DescribedGenericMember.AddGenericParameter(IGenericParameter) DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public class DescribedMethod : DescribedGenericMember, IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source DescribedMethod(IType, UnqualifiedName, Boolean, IType) Creates a method from a parent type, a name, a staticness and a return type. Declaration public DescribedMethod(IType parentType, UnqualifiedName name, bool isStatic, IType returnType) Parameters Type Name Description IType parentType The method's parent type. UnqualifiedName name The method's name. System.Boolean isStatic Tells if the method should be a static method or an instance method. IType returnType The type of value returned by the method. Properties | Improve this Doc View Source BaseMethods Gets the method's base methods. Declaration public IReadOnlyList<IMethod> BaseMethods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > | Improve this Doc View Source IsConstructor Indicates if this method is a constructor. Declaration public bool IsConstructor { get; set; } Property Value Type Description System.Boolean true if this method is a constructor; otherwise, false . | Improve this Doc View Source IsStatic Tells if this is a static method. Non-static methods take a non-null pointer to their parent type as an implicit first arguments. Static methods do not. Declaration public bool IsStatic { get; set; } Property Value Type Description System.Boolean true if this method is a static method; otherwise, false . | Improve this Doc View Source Parameters Gets the method's parameters. Declaration public IReadOnlyList<Parameter> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > | Improve this Doc View Source ParentType Gets the type that defines this member, if any. Declaration public IType ParentType { get; } Property Value Type Description IType The parent type. | Improve this Doc View Source ReturnParameter Gets the method's return parameter. Declaration public Parameter ReturnParameter { get; set; } Property Value Type Description Parameter Methods | Improve this Doc View Source AddBaseMethod(IMethod) Adds a method to this method's base methods. Declaration public void AddBaseMethod(IMethod baseMethod) Parameters Type Name Description IMethod baseMethod The base method. | Improve this Doc View Source AddParameter(Parameter) Adds a parameter to the back of this method's parameter list. Declaration public void AddParameter(Parameter parameter) Parameters Type Name Description Parameter parameter The parameter to add. Implements IMethod ITypeMember IGenericMember IMember Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.TypeSystem.DescribedMember.html": {
    "href": "api/Flame.TypeSystem.DescribedMember.html",
    "title": "Class DescribedMember | Flame",
    "keywords": "Class DescribedMember A member that can be constructed incrementally in an imperative fashion. Inheritance System.Object DescribedMember DescribedAssembly DescribedField DescribedGenericMember Implements IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public class DescribedMember : IMember Constructors | Improve this Doc View Source DescribedMember(QualifiedName) Creates a described member from a fully qualified name. Declaration public DescribedMember(QualifiedName fullName) Parameters Type Name Description QualifiedName fullName The described member's fully qualified name. Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName Methods | Improve this Doc View Source AddAttribute(IAttribute) Adds an attribute to this member's attribute map. Declaration public void AddAttribute(IAttribute attribute) Parameters Type Name Description IAttribute attribute The attribute to add. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IMember"
  },
  "api/Flame.TypeSystem.DescribedGenericParameter.html": {
    "href": "api/Flame.TypeSystem.DescribedGenericParameter.html",
    "title": "Class DescribedGenericParameter | Flame",
    "keywords": "Class DescribedGenericParameter A generic parameter that can be constructed piece by piece in an imperative fashion. Inheritance System.Object DescribedMember DescribedGenericMember DescribedGenericParameter Implements IGenericParameter IType IGenericMember IMember Inherited Members DescribedGenericMember.GenericParameters DescribedGenericMember.AddGenericParameter(IGenericParameter) DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class DescribedGenericParameter : DescribedGenericMember, IGenericParameter, IType, IGenericMember, IMember Constructors | Improve this Doc View Source DescribedGenericParameter(IGenericMember, SimpleName) Creates a generic parameter from a declaring member and a name. Declaration public DescribedGenericParameter(IGenericMember parentMember, SimpleName name) Parameters Type Name Description IGenericMember parentMember The member that declares the generic parameter. SimpleName name The generic parameter's name. | Improve this Doc View Source DescribedGenericParameter(IGenericMember, String) Creates a generic parameter from a declaring member and a name. Declaration public DescribedGenericParameter(IGenericMember parentMember, string name) Parameters Type Name Description IGenericMember parentMember The member that declares the generic parameter. System.String name The generic parameter's name. Properties | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source ParentMember Gets the generic member that defines this generic parameter. Declaration public IGenericMember ParentMember { get; } Property Value Type Description IGenericMember | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Implements IGenericParameter IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.DescribedGenericMember.html": {
    "href": "api/Flame.TypeSystem.DescribedGenericMember.html",
    "title": "Class DescribedGenericMember | Flame",
    "keywords": "Class DescribedGenericMember A generic member that can be constructed incrementally in an imperative fashion. Inheritance System.Object DescribedMember DescribedGenericMember DescribedGenericParameter DescribedMethod DescribedType Implements IGenericMember IMember Inherited Members DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public class DescribedGenericMember : DescribedMember, IGenericMember, IMember Constructors | Improve this Doc View Source DescribedGenericMember(QualifiedName) Creates a described generic member from a fully qualified name. Declaration public DescribedGenericMember(QualifiedName fullName) Parameters Type Name Description QualifiedName fullName A fully qualified name. Properties | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. Methods | Improve this Doc View Source AddGenericParameter(IGenericParameter) Adds a generic parameter to this generic member. Declaration public void AddGenericParameter(IGenericParameter genericParameter) Parameters Type Name Description IGenericParameter genericParameter The generic parameter to add. Implements IGenericMember IMember"
  },
  "api/Flame.TypeSystem.DescribedField.html": {
    "href": "api/Flame.TypeSystem.DescribedField.html",
    "title": "Class DescribedField | Flame",
    "keywords": "Class DescribedField A field that can be constructed incrementally in an imperative fashion. Inheritance System.Object DescribedMember DescribedField Implements IField ITypeMember IMember Inherited Members DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public class DescribedField : DescribedMember, IField, ITypeMember, IMember Constructors | Improve this Doc View Source DescribedField(IType, UnqualifiedName, Boolean, IType) Creates a field from a parent type, a name, a staticness and a type of value to store. Declaration public DescribedField(IType parentType, UnqualifiedName name, bool isStatic, IType fieldType) Parameters Type Name Description IType parentType The field's parent type. UnqualifiedName name The field's name. System.Boolean isStatic Tells if the field is static. IType fieldType The type of value stored in the field. Properties | Improve this Doc View Source FieldType Gets or sets the type of value stored in this field. Declaration public IType FieldType { get; set; } Property Value Type Description IType The type of value stored in this field. | Improve this Doc View Source IsStatic Gets or sets a Boolean value that tells if this field is static. Declaration public bool IsStatic { get; set; } Property Value Type Description System.Boolean true if this field is static; otherwise, false . | Improve this Doc View Source ParentType Gets the type that defines this member, if any. Declaration public IType ParentType { get; } Property Value Type Description IType The parent type. Implements IField ITypeMember IMember Extension Methods TypeExtensions.GetRecursiveGenericDeclaration(IField)"
  },
  "api/Flame.TypeSystem.DescribedBodyMethod.html": {
    "href": "api/Flame.TypeSystem.DescribedBodyMethod.html",
    "title": "Class DescribedBodyMethod | Flame",
    "keywords": "Class DescribedBodyMethod A method that can be constructed incrementally in an imperative fashion and defines a method body. Inheritance System.Object DescribedMember DescribedGenericMember DescribedMethod DescribedBodyMethod Implements IBodyMethod IMethod ITypeMember IGenericMember IMember Inherited Members DescribedMethod.ParentType DescribedMethod.IsConstructor DescribedMethod.IsStatic DescribedMethod.ReturnParameter DescribedMethod.Parameters DescribedMethod.BaseMethods DescribedMethod.AddParameter(Parameter) DescribedMethod.AddBaseMethod(IMethod) DescribedGenericMember.GenericParameters DescribedGenericMember.AddGenericParameter(IGenericParameter) DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.Compiler.dll Syntax public sealed class DescribedBodyMethod : DescribedMethod, IBodyMethod, IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source DescribedBodyMethod(IType, UnqualifiedName, Boolean, IType) Creates a method from a parent type, a name, a staticness and a return type. Declaration public DescribedBodyMethod(IType parentType, UnqualifiedName name, bool isStatic, IType returnType) Parameters Type Name Description IType parentType The method's parent type. UnqualifiedName name The method's name. System.Boolean isStatic Tells if the method should be a static method or an instance method. IType returnType The type of value returned by the method. Properties | Improve this Doc View Source Body Gets the method body for this method. Declaration public MethodBody Body { get; set; } Property Value Type Description MethodBody A method body. Implements IBodyMethod IMethod ITypeMember IGenericMember IMember"
  },
  "api/Flame.TypeSystem.DescribedBodyAccessor.html": {
    "href": "api/Flame.TypeSystem.DescribedBodyAccessor.html",
    "title": "Class DescribedBodyAccessor | Flame",
    "keywords": "Class DescribedBodyAccessor A property accessor that can be constructed incrementally in an imperative fashion and defines a method body. Inheritance System.Object DescribedMember DescribedGenericMember DescribedMethod DescribedAccessor DescribedBodyAccessor Implements IAccessor IBodyMethod IMethod ITypeMember IGenericMember IMember Inherited Members DescribedAccessor.Kind DescribedAccessor.ParentProperty DescribedMethod.ParentType DescribedMethod.IsConstructor DescribedMethod.IsStatic DescribedMethod.ReturnParameter DescribedMethod.Parameters DescribedMethod.BaseMethods DescribedMethod.AddParameter(Parameter) DescribedMethod.AddBaseMethod(IMethod) DescribedGenericMember.GenericParameters DescribedGenericMember.AddGenericParameter(IGenericParameter) DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.Compiler.dll Syntax public sealed class DescribedBodyAccessor : DescribedAccessor, IAccessor, IBodyMethod, IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source DescribedBodyAccessor(IProperty, AccessorKind, UnqualifiedName, Boolean, IType) Creates a new accessor. Declaration public DescribedBodyAccessor(IProperty parentProperty, AccessorKind kind, UnqualifiedName name, bool isStatic, IType returnType) Parameters Type Name Description IProperty parentProperty The property in which this accessor is defined. AccessorKind kind The accessor's kind. UnqualifiedName name The accessor's name. System.Boolean isStatic Tells if the accessor should be a static method or an instance method. IType returnType The type of value returned by the accessor. Properties | Improve this Doc View Source Body Gets the method body for this method. Declaration public MethodBody Body { get; set; } Property Value Type Description MethodBody A method body. Implements IAccessor IBodyMethod IMethod ITypeMember IGenericMember IMember"
  },
  "api/Flame.TypeSystem.DescribedAssembly.html": {
    "href": "api/Flame.TypeSystem.DescribedAssembly.html",
    "title": "Class DescribedAssembly | Flame",
    "keywords": "Class DescribedAssembly An assembly that can be constructed in piece by piece, an imperative fashion. Inheritance System.Object DescribedMember DescribedAssembly Implements IAssembly IMember Inherited Members DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class DescribedAssembly : DescribedMember, IAssembly, IMember Constructors | Improve this Doc View Source DescribedAssembly(QualifiedName) Creates an empty assembly with a particular name. Declaration public DescribedAssembly(QualifiedName fullName) Parameters Type Name Description QualifiedName fullName The assembly's name. Properties | Improve this Doc View Source Types Gets a list of all top-level types defined in this assembly. Declaration public IReadOnlyList<IType> Types { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined in this assembly. Methods | Improve this Doc View Source AddType(IType) Adds a type to this assembly's list of defined types. Declaration public void AddType(IType type) Parameters Type Name Description IType type The type to add. Implements IAssembly IMember"
  },
  "api/Flame.TypeSystem.DescribedAccessor.html": {
    "href": "api/Flame.TypeSystem.DescribedAccessor.html",
    "title": "Class DescribedAccessor | Flame",
    "keywords": "Class DescribedAccessor A property accessor that can be constructed incrementally in an imperative fashion. Inheritance System.Object DescribedMember DescribedGenericMember DescribedMethod DescribedAccessor DescribedBodyAccessor Implements IAccessor IMethod ITypeMember IGenericMember IMember Inherited Members DescribedMethod.ParentType DescribedMethod.IsConstructor DescribedMethod.IsStatic DescribedMethod.ReturnParameter DescribedMethod.Parameters DescribedMethod.BaseMethods DescribedMethod.AddParameter(Parameter) DescribedMethod.AddBaseMethod(IMethod) DescribedGenericMember.GenericParameters DescribedGenericMember.AddGenericParameter(IGenericParameter) DescribedMember.FullName DescribedMember.Name DescribedMember.Attributes DescribedMember.AddAttribute(IAttribute) DescribedMember.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public class DescribedAccessor : DescribedMethod, IAccessor, IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source DescribedAccessor(IProperty, AccessorKind, UnqualifiedName, Boolean, IType) Creates a new accessor. Declaration public DescribedAccessor(IProperty parentProperty, AccessorKind kind, UnqualifiedName name, bool isStatic, IType returnType) Parameters Type Name Description IProperty parentProperty The property in which this accessor is defined. AccessorKind kind The accessor's kind. UnqualifiedName name The accessor's name. System.Boolean isStatic Tells if the accessor should be a static method or an instance method. IType returnType The type of value returned by the accessor. Properties | Improve this Doc View Source Kind Gets this accessor's kind. Declaration public AccessorKind Kind { get; } Property Value Type Description AccessorKind The accessor's kind. | Improve this Doc View Source ParentProperty Gets this accessor's parent property: the property that defines it. Declaration public IProperty ParentProperty { get; } Property Value Type Description IProperty The accessor's parent property. Implements IAccessor IMethod ITypeMember IGenericMember IMember Extension Methods TypeExtensions.MakeGenericMethod(IMethod, IReadOnlyList<IType>) TypeExtensions.MakeGenericMethod(IMethod, IType[]) TypeExtensions.GetRecursiveGenericDeclaration(IMethod) TypeExtensions.GetGenericArguments(IMethod) TypeExtensions.GetRecursiveGenericArgumentMapping(IMethod) FlagAttribute.IsAbstract(IMethod) FlagAttribute.IsVirtual(IMethod)"
  },
  "api/Flame.TypeSystem.ContainerType.html": {
    "href": "api/Flame.TypeSystem.ContainerType.html",
    "title": "Class ContainerType | Flame",
    "keywords": "Class ContainerType A base type for types that refer to some number of homogeneously-typed elements. Inheritance System.Object ContainerType PointerType Implements IType IGenericMember IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class ContainerType : IType, IGenericMember, IMember Constructors | Improve this Doc View Source ContainerType(IType) Creates an uninitialized container type from an element type. Declaration protected ContainerType(IType elementType) Parameters Type Name Description IType elementType The element type. | Improve this Doc View Source ContainerType(IType, UnqualifiedName, QualifiedName, AttributeMap) Creates an initialized container type from an element type, a name, a full name and an attribute map. Declaration public ContainerType(IType elementType, UnqualifiedName name, QualifiedName fullName, AttributeMap attributes) Parameters Type Name Description IType elementType The element type. UnqualifiedName name The container type's name. QualifiedName fullName The container type's fully qualified name. AttributeMap attributes The container type's attributes. Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source ElementType Gets the type of this container's elements. Declaration public IType ElementType { get; } Property Value Type Description IType The element type. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Methods | Improve this Doc View Source Initialize(UnqualifiedName, QualifiedName, AttributeMap) Initializes an uninitialized container type. Declaration protected void Initialize(UnqualifiedName name, QualifiedName fullName, AttributeMap attributes) Parameters Type Name Description UnqualifiedName name The container type's name. QualifiedName fullName The container type's fully qualified name. AttributeMap attributes The container type's attributes. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source WithElementType(IType) Creates a container type that is identical to this one except for its element type, which is set to a given type. Declaration public abstract ContainerType WithElementType(IType newElementType) Parameters Type Name Description IType newElementType The element type of the new container type. Returns Type Description ContainerType Another container type. Implements IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.Compiler.html": {
    "href": "api/Flame.Compiler.html",
    "title": "Namespace Flame.Compiler | Flame",
    "keywords": "Namespace Flame.Compiler Classes BasicBlockBuilder A basic block in a mutable control-flow graph builder. BasicBlockTag A unique tag type for basic blocks. BlockFlow Describes control flow at the end of a basic block. Branch A branch to a particular block that passes a list of values as arguments. FlowGraph An immutable control-flow graph that consists of basic blocks. FlowGraphBuilder A mutable view of an immutable control-flow graph. InstructionBuilder A reference to an instruction in a control-flow graph, which can either be a named instruction that is defined directly by a basic block or an unnamed instruction included in a block's flow. This is a mutable reference: it refers to an instruction in a control-flow graph builder and that instruction can be changed. InstructionPrototype Describes an instruction's prototype: everything there is to an instruction except for its arguments. MethodBody A method body: a method implementation represented as a control-flow graph along with a private copy of the return parameter, 'this' parameter and input parameters. NamedInstruction A named instruction in the context of a control-flow graph. NamedInstructionBuilder A named instruction in a mutable control-flow graph builder. UniqueTag A base class for unique tags: identifiers for values that have a name and use referential equality instead of structural equality. ValueTag A unique tag type for values. Structs BasicBlock A basic block in a control-flow graph. BlockParameter A parameter to a basic block. BranchArgument An argument to a branch. Instruction An instruction: a statement that produces a single value. Interfaces IBodyMethod A method that defines a method body. Enums BranchArgumentKind An enumeration of things a branch argument can be."
  },
  "api/Flame.Compiler.ValueTag.html": {
    "href": "api/Flame.Compiler.ValueTag.html",
    "title": "Class ValueTag | Flame",
    "keywords": "Class ValueTag A unique tag type for values. Inheritance System.Object UniqueTag ValueTag Inherited Members UniqueTag.Name UniqueTag.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class ValueTag : UniqueTag Constructors | Improve this Doc View Source ValueTag() Creates a new value tag. Declaration public ValueTag() | Improve this Doc View Source ValueTag(String) Creates a new value tag. Declaration public ValueTag(string name) Parameters Type Name Description System.String name The tag's name."
  },
  "api/Flame.Compiler.Transforms.BlockFusion.html": {
    "href": "api/Flame.Compiler.Transforms.BlockFusion.html",
    "title": "Class BlockFusion | Flame",
    "keywords": "Class BlockFusion An optimization that fuses basic blocks, eliminating unnecessary jumps. Inheritance System.Object Optimization IntraproceduralOptimization BlockFusion Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class BlockFusion : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the block fusion transform. Declaration public static readonly BlockFusion Instance Field Value Type Description BlockFusion Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Transforms.AllocaToRegister.html": {
    "href": "api/Flame.Compiler.Transforms.AllocaToRegister.html",
    "title": "Class AllocaToRegister | Flame",
    "keywords": "Class AllocaToRegister The \"alloca to register\" transformation, which tries to eliminate alloca instructions whose addresses do not escape. Inheritance System.Object Optimization IntraproceduralOptimization AllocaToRegister Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Transforms Assembly : Flame.Compiler.dll Syntax public sealed class AllocaToRegister : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the alloca-to-register transform. Declaration public static readonly AllocaToRegister Instance Field Value Type Description AllocaToRegister Methods | Improve this Doc View Source Apply(FlowGraph) Applies the alloca to register transformation to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph A flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Compiler.Target.html": {
    "href": "api/Flame.Compiler.Target.html",
    "title": "Namespace Flame.Compiler.Target | Flame",
    "keywords": "Namespace Flame.Compiler.Target Classes SelectedInstructions A collection of selected instructions for a value. Structs LinearInstructionStreamBuilder<TInstruction> Translates flow graphs to linear sequences of target-specific instructions. SelectedInstructions<TInstruction> A collection of selected instructions for a value. Interfaces IInstructionSelector<TInstruction> A base class for instruction selection algorithms. Instruction selectors take IR instructions and turn them into sequences of target-specific instructions. ILinearInstructionSelector<TInstruction> An instruction selection algorithm for instruction sets that produce linear streams of instructions, that is, control flow is expressed using branches to branch targets."
  },
  "api/Flame.Compiler.Target.SelectedInstructions.html": {
    "href": "api/Flame.Compiler.Target.SelectedInstructions.html",
    "title": "Class SelectedInstructions | Flame",
    "keywords": "Class SelectedInstructions A collection of selected instructions for a value. Inheritance System.Object SelectedInstructions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Target Assembly : Flame.Compiler.dll Syntax public static class SelectedInstructions Methods | Improve this Doc View Source Create<TInstruction>(TInstruction, ValueTag[]) Creates a selected instruction container from a single instruction and a variable number of dependencies. Declaration public static SelectedInstructions<TInstruction> Create<TInstruction>(TInstruction instruction, params ValueTag[] dependencies) Parameters Type Name Description TInstruction instruction The instruction selected for a particular value. ValueTag [] dependencies The list of values the selected instructions depend on. Returns Type Description SelectedInstructions <TInstruction> Type Parameters Name Description TInstruction | Improve this Doc View Source Create<TInstruction>(IReadOnlyList<TInstruction>, IReadOnlyList<ValueTag>) Creates a selected instruction container. Declaration public static SelectedInstructions<TInstruction> Create<TInstruction>(IReadOnlyList<TInstruction> instructions, IReadOnlyList<ValueTag> dependencies) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <TInstruction> instructions The instructions selected for a particular value. System.Collections.Generic.IReadOnlyList < ValueTag > dependencies The list of values the selected instructions depend on. Returns Type Description SelectedInstructions <TInstruction> Type Parameters Name Description TInstruction"
  },
  "api/Flame.Compiler.Target.SelectedInstructions-1.html": {
    "href": "api/Flame.Compiler.Target.SelectedInstructions-1.html",
    "title": "Struct SelectedInstructions<TInstruction> | Flame",
    "keywords": "Struct SelectedInstructions<TInstruction> A collection of selected instructions for a value. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Target Assembly : Flame.Compiler.dll Syntax public struct SelectedInstructions<TInstruction> Type Parameters Name Description TInstruction The type of instructions. Constructors | Improve this Doc View Source SelectedInstructions(TInstruction, ValueTag[]) Creates a selected instruction container from a single instruction and a variable number of dependencies. Declaration public SelectedInstructions(TInstruction instruction, params ValueTag[] dependencies) Parameters Type Name Description TInstruction instruction The instruction selected for a particular value. ValueTag [] dependencies The list of values the selected instructions depend on. | Improve this Doc View Source SelectedInstructions(IReadOnlyList<TInstruction>, IReadOnlyList<ValueTag>) Creates a selected instruction container. Declaration public SelectedInstructions(IReadOnlyList<TInstruction> instructions, IReadOnlyList<ValueTag> dependencies) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <TInstruction> instructions The instructions selected for a particular value. System.Collections.Generic.IReadOnlyList < ValueTag > dependencies The list of values the selected instructions depend on. Properties | Improve this Doc View Source Dependencies Gets the list of values these selected instructions depend on. Declaration public IReadOnlyList<ValueTag> Dependencies { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ValueTag > A list of values. | Improve this Doc View Source Instructions Gets the list of instructions in this container. Declaration public IReadOnlyList<TInstruction> Instructions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList <TInstruction> A list of instructions."
  },
  "api/Flame.Compiler.Target.LinearInstructionStreamBuilder-1.html": {
    "href": "api/Flame.Compiler.Target.LinearInstructionStreamBuilder-1.html",
    "title": "Struct LinearInstructionStreamBuilder<TInstruction> | Flame",
    "keywords": "Struct LinearInstructionStreamBuilder<TInstruction> Translates flow graphs to linear sequences of target-specific instructions. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler.Target Assembly : Flame.Compiler.dll Syntax public struct LinearInstructionStreamBuilder<TInstruction> Type Parameters Name Description TInstruction Constructors | Improve this Doc View Source LinearInstructionStreamBuilder(ILinearInstructionSelector<TInstruction>) Creates a linear instruction stream builder. Declaration public LinearInstructionStreamBuilder(ILinearInstructionSelector<TInstruction> instructionSelector) Parameters Type Name Description ILinearInstructionSelector <TInstruction> instructionSelector The instruction selector to use. Properties | Improve this Doc View Source InstructionSelector Gets the instruction selector used by this linear instruction stream builder. Declaration public ILinearInstructionSelector<TInstruction> InstructionSelector { get; } Property Value Type Description ILinearInstructionSelector <TInstruction> A linear instruction selector. Methods | Improve this Doc View Source ToInstructionStream(FlowGraph) Takes a flow graph and translates it to an instruction stream. Declaration public IReadOnlyList<TInstruction> ToInstructionStream(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to translate. Returns Type Description System.Collections.Generic.IReadOnlyList <TInstruction> A linear sequence of target-specific instructions."
  },
  "api/Flame.Compiler.Target.ILinearInstructionSelector-1.html": {
    "href": "api/Flame.Compiler.Target.ILinearInstructionSelector-1.html",
    "title": "Interface ILinearInstructionSelector<TInstruction> | Flame",
    "keywords": "Interface ILinearInstructionSelector<TInstruction> An instruction selection algorithm for instruction sets that produce linear streams of instructions, that is, control flow is expressed using branches to branch targets. Inherited Members IInstructionSelector<TInstruction>.SelectInstructions(NamedInstruction) Namespace : Flame.Compiler.Target Assembly : Flame.Compiler.dll Syntax public interface ILinearInstructionSelector<TInstruction> : IInstructionSelector<TInstruction> Type Parameters Name Description TInstruction The type of instructions to produce. Methods | Improve this Doc View Source CreateBlockMarker(BasicBlock) Creates a sequence of instructions that declare the start of a basic block. Declaration IReadOnlyList<TInstruction> CreateBlockMarker(BasicBlock block) Parameters Type Name Description BasicBlock block The basic block to mark. Returns Type Description System.Collections.Generic.IReadOnlyList <TInstruction> A sequence of instructions that mark a block. | Improve this Doc View Source CreateJumpTo(BasicBlockTag) Creates an unconditional jump to a particular branch target. Declaration IReadOnlyList<TInstruction> CreateJumpTo(BasicBlockTag target) Parameters Type Name Description BasicBlockTag target A basic block tag that uniquely identifies a branch target. Returns Type Description System.Collections.Generic.IReadOnlyList <TInstruction> An unconditional jump. | Improve this Doc View Source SelectInstructions(BlockFlow, BasicBlockTag, FlowGraph, BasicBlockTag, out BasicBlockTag) Selects instructions for a particular IR block flow. Declaration SelectedInstructions<TInstruction> SelectInstructions(BlockFlow flow, BasicBlockTag blockTag, FlowGraph graph, BasicBlockTag preferredFallthrough, out BasicBlockTag fallthrough) Parameters Type Name Description BlockFlow flow The IR block flow to translate to target-specific instructions. BasicBlockTag blockTag The tag of the basic block that defines the flow. FlowGraph graph The IR graph that defines the flow. BasicBlockTag preferredFallthrough A preferred fallthrough block, which will likely result in better codegen if chosen as fallthrough. May be null . BasicBlockTag fallthrough The fallthrough block expected by the selected instruction, if any. Returns Type Description SelectedInstructions <TInstruction> A batch of selected instructions."
  },
  "api/Flame.Compiler.Target.IInstructionSelector-1.html": {
    "href": "api/Flame.Compiler.Target.IInstructionSelector-1.html",
    "title": "Interface IInstructionSelector<TInstruction> | Flame",
    "keywords": "Interface IInstructionSelector<TInstruction> A base class for instruction selection algorithms. Instruction selectors take IR instructions and turn them into sequences of target-specific instructions. Namespace : Flame.Compiler.Target Assembly : Flame.Compiler.dll Syntax public interface IInstructionSelector<TInstruction> Type Parameters Name Description TInstruction The type of instructions to produce. Methods | Improve this Doc View Source SelectInstructions(NamedInstruction) Selects instructions for a particular IR instruction. Declaration SelectedInstructions<TInstruction> SelectInstructions(NamedInstruction instruction) Parameters Type Name Description NamedInstruction instruction The IR instruction to translate to target-specific instructions. Returns Type Description SelectedInstructions <TInstruction> A batch of selected instructions."
  },
  "api/Flame.Compiler.Instructions.ObjectIntrinsics.Operators.html": {
    "href": "api/Flame.Compiler.Instructions.ObjectIntrinsics.Operators.html",
    "title": "Class ObjectIntrinsics.Operators | Flame",
    "keywords": "Class ObjectIntrinsics.Operators A collection of names for object-oriented operations. Inheritance System.Object ObjectIntrinsics.Operators Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public static class Operators Fields | Improve this Doc View Source All An immutable array containing all standard object-oriented intrinsics. Declaration public static readonly ImmutableArray<string> All Field Value Type Description System.Collections.Immutable.ImmutableArray < System.String > | Improve this Doc View Source UnboxAny The 'unbox_any' operator. Its return type can either be a value type or a reference type (aka box pointer). If its return type is set to a value type, 'unbox_any' unboxes its argument and loads it. If 'unbox_any's return value is set to a reference type, 'unbox_any' checks that its argument is a subtype of the return type. Declaration public const string UnboxAny = \"unbox_any\" Field Value Type Description System.String"
  },
  "api/Flame.Compiler.Instructions.NewObjectPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.NewObjectPrototype.html",
    "title": "Class NewObjectPrototype | Flame",
    "keywords": "Class NewObjectPrototype A prototype for instructions that allocate storage on the heap for an object and initialize it using a constructor. Inheritance System.Object InstructionPrototype NewObjectPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class NewObjectPrototype : InstructionPrototype Properties | Improve this Doc View Source Constructor Gets the constructor to initialize objects with. Declaration public IMethod Constructor { get; } Property Value Type Description IMethod The constructor to use. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IMethod) Gets the new-object instruction prototype for a particular constructor. Declaration public static NewObjectPrototype Create(IMethod constructor) Parameters Type Name Description IMethod constructor The constructor to initialize objects with. Returns Type Description NewObjectPrototype A new-object instruction prototype. | Improve this Doc View Source GetArgumentList(Instruction) Gets the argument list in an instruction that conforms to this prototype. Declaration public ReadOnlySlice<ValueTag> GetArgumentList(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ReadOnlySlice < ValueTag > The formal argument list. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.NewDelegatePrototype.html": {
    "href": "api/Flame.Compiler.Instructions.NewDelegatePrototype.html",
    "title": "Class NewDelegatePrototype | Flame",
    "keywords": "Class NewDelegatePrototype A prototype for an instruction that creates a delegate from a method. Inheritance System.Object InstructionPrototype NewDelegatePrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class NewDelegatePrototype : InstructionPrototype Properties | Improve this Doc View Source Callee Gets the method that is called by the delegate when invoked. Declaration public IMethod Callee { get; } Property Value Type Description IMethod The callee method. | Improve this Doc View Source HasThisArgument Tells if this new-delegate instruction prototype takes a 'this' argument. For instance methods, the 'this' argument is obviously interpreted as the 'this' pointer. For static methods, the 'this' argument is sent to the first argument in the parameter list. Declaration public bool HasThisArgument { get; } Property Value Type Description System.Boolean true if this instruction prototype takes a 'this' argument; otherwise, false . | Improve this Doc View Source Lookup Gets the method lookup strategy for this new-delegate instruction prototype. Declaration public MethodLookup Lookup { get; } Property Value Type Description MethodLookup The method lookup strategy. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType, IMethod, Boolean, MethodLookup) Gets or creates a new-delegate instruction prototype. Declaration public static NewDelegatePrototype Create(IType delegateType, IMethod callee, bool hasThisArgument, MethodLookup lookup) Parameters Type Name Description IType delegateType The type of delegate produced by instances of the prototype. IMethod callee The method that is invoked when the delegates produced by instances of the prototype are called. System.Boolean hasThisArgument Tells if a 'this' argument is included in the delegate. MethodLookup lookup The method lookup strategy for the prototype. Returns Type Description NewDelegatePrototype A new-delegate instruction prototype. | Improve this Doc View Source GetThisArgument(Instruction) Gets the 'this' argument in an instruction that conforms to this prototype. Declaration public ValueTag GetThisArgument(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description ValueTag The 'this' argument. | Improve this Doc View Source Instantiate(ValueTag) Creates an instance of this new-delegate instruction prototype. Declaration public Instruction Instantiate(ValueTag thisArgument) Parameters Type Name Description ValueTag thisArgument The 'this' argument, if any. A null value means that there is no 'this' argument. Returns Type Description Instruction A new-delegate instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.MethodLookup.html": {
    "href": "api/Flame.Compiler.Instructions.MethodLookup.html",
    "title": "Enum MethodLookup | Flame",
    "keywords": "Enum MethodLookup An enumeration of method lookup strategies. Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public enum MethodLookup Fields Name Description Static The implementation of a method is the exact method being referred to. Virtual The implementation of a method is found by taking the most derived implementation for the 'this' parameter."
  },
  "api/Flame.Compiler.Instructions.LoadPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.LoadPrototype.html",
    "title": "Class LoadPrototype | Flame",
    "keywords": "Class LoadPrototype A prototype for load instructions that dereference pointers. Inheritance System.Object InstructionPrototype LoadPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class LoadPrototype : InstructionPrototype Properties | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(IType) Gets or creates a load instruction prototype for a particular element type. Declaration public static LoadPrototype Create(IType elementType) Parameters Type Name Description IType elementType The type of element to load from a pointer. Returns Type Description LoadPrototype A load instruction prototype. | Improve this Doc View Source GetPointer(Instruction) Gets the pointer that is loaded by an instance of this prototype. Declaration public ValueTag GetPointer(Instruction instance) Parameters Type Name Description Instruction instance An instance of this prototype. Returns Type Description ValueTag The pointer whose pointee is loaded. | Improve this Doc View Source Instantiate(ValueTag) Creates an instance of this load prototype. Declaration public Instruction Instantiate(ValueTag pointer) Parameters Type Name Description ValueTag pointer A pointer to the value to load. Returns Type Description Instruction A load instruction. | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instructions.IntrinsicPrototype.html": {
    "href": "api/Flame.Compiler.Instructions.IntrinsicPrototype.html",
    "title": "Class IntrinsicPrototype | Flame",
    "keywords": "Class IntrinsicPrototype An instruction prototype for intrinsics: instructions that behave like calls but are not (necessarily) implemented as calls. Various parts of a compiler recognize intrinsics relevant to them and ignore the others. Inheritance System.Object InstructionPrototype IntrinsicPrototype Inherited Members InstructionPrototype.Instantiate(IReadOnlyList<ValueTag>) InstructionPrototype.IsPrototypeOf(Instruction) InstructionPrototype.AssertIsPrototypeOf(Instruction, String) InstructionPrototype.AssertIsPrototypeOf(Instruction) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Instructions Assembly : Flame.Compiler.dll Syntax public sealed class IntrinsicPrototype : InstructionPrototype Properties | Improve this Doc View Source Name Gets this intrinsic's name. Declaration public string Name { get; } Property Value Type Description System.String The intrinsic's name. | Improve this Doc View Source ParameterCount Gets the number of arguments this instruction takes when instantiated. Declaration public override int ParameterCount { get; } Property Value Type Description System.Int32 The number of arguments this instruction takes. Overrides InstructionPrototype.ParameterCount | Improve this Doc View Source ParameterTypes Gets this intrinsic's parameter types. Declaration public IReadOnlyList<IType> ParameterTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > The parameter types. | Improve this Doc View Source ResultType Gets the type of value produced instantiations of this prototype. Declaration public override IType ResultType { get; } Property Value Type Description IType A type of value. Overrides InstructionPrototype.ResultType Methods | Improve this Doc View Source CheckConformance(Instruction, MethodBody) Checks if a particular instance of this prototype conforms to the rules for this instruction prototype. Declaration public override IReadOnlyList<string> CheckConformance(Instruction instance, MethodBody body) Parameters Type Name Description Instruction instance An instance of this prototype. MethodBody body The method body that defines the instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of conformance errors in the instruction. Overrides InstructionPrototype.CheckConformance(Instruction, MethodBody) | Improve this Doc View Source Create(String, IType, IReadOnlyList<IType>) Gets the intrinsic instruction prototype for a particular intrinsic name, return type and parameter type list. Declaration public static IntrinsicPrototype Create(string name, IType returnType, IReadOnlyList<IType> parameterTypes) Parameters Type Name Description System.String name The intrinsic's name. IType returnType The type of value returned by the intrinsic. System.Collections.Generic.IReadOnlyList < IType > parameterTypes A list of the intrinsic's parameter types. Returns Type Description IntrinsicPrototype An intrinsic instruction prototype. | Improve this Doc View Source GetArgumentList(Instruction) Gets the argument list in an instruction that conforms to this prototype. Declaration public IReadOnlyList<ValueTag> GetArgumentList(Instruction instruction) Parameters Type Name Description Instruction instruction An instruction that conforms to this prototype. Returns Type Description System.Collections.Generic.IReadOnlyList < ValueTag > The formal argument list. | Improve this Doc View Source Instantiate(ValueTag[]) Instantiates this prototype with a list of arguments. Declaration public Instruction Instantiate(params ValueTag[] arguments) Parameters Type Name Description ValueTag [] arguments The arguments to instantiate this prototype with. Returns Type Description Instruction An instruction whose prototype is equal to this prototype and whose argument list is arguments . | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction prototype. Declaration public override InstructionPrototype Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description InstructionPrototype A transformed instruction prototype. Overrides InstructionPrototype.Map(MemberMapping)"
  },
  "api/Flame.Compiler.Instruction.html": {
    "href": "api/Flame.Compiler.Instruction.html",
    "title": "Struct Instruction | Flame",
    "keywords": "Struct Instruction An instruction: a statement that produces a single value. Implements System.IEquatable < Instruction > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public struct Instruction : IEquatable<Instruction> Properties | Improve this Doc View Source Arguments Gets a list of values this instruction takes as arguments. Declaration public IReadOnlyList<ValueTag> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ValueTag > The values taken as arguments. | Improve this Doc View Source Prototype Gets this instruction's prototype. Declaration public InstructionPrototype Prototype { get; } Property Value Type Description InstructionPrototype The prototype. | Improve this Doc View Source ResultType Gets the type of value produced by this instruction. Declaration public IType ResultType { get; } Property Value Type Description IType A type of value. Methods | Improve this Doc View Source CreateAlloca(IType) Creates an instruction that allocates storage on the stack for a single value element of a particular type. Declaration public static Instruction CreateAlloca(IType elementType) Parameters Type Name Description IType elementType The type of value to allocate storage for. Returns Type Description Instruction An alloca instruction. | Improve this Doc View Source CreateAllocaArray(IType, ValueTag) Creates an instruction that allocates storage on the stack for a variable number of elements of a particular type. Declaration public static Instruction CreateAllocaArray(IType elementType, ValueTag elementCount) Parameters Type Name Description IType elementType The type of value to allocate storage for. ValueTag elementCount The number of elements to allocate storage for. Returns Type Description Instruction An alloca-array instruction. | Improve this Doc View Source CreateArithmeticIntrinsic(String, IType, IReadOnlyList<IType>, IReadOnlyList<ValueTag>) Creates an arithmetic intrinsic. Declaration public static Instruction CreateArithmeticIntrinsic(string operatorName, IType resultType, IReadOnlyList<IType> parameterTypes, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description System.String operatorName The name of the arithmetic operator to apply. IType resultType The type of value produced by the intrinsic. System.Collections.Generic.IReadOnlyList < IType > parameterTypes The parameter types taken by the intrinsic. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The argument list to pass to the instruction. Returns Type Description Instruction An arithmetic intrinsic. | Improve this Doc View Source CreateBinaryArithmeticIntrinsic(String, IType, ValueTag, ValueTag) Creates a binary arithmetic intrinsic that is closed under the type of its arguments. Declaration public static Instruction CreateBinaryArithmeticIntrinsic(string operatorName, IType elementType, ValueTag left, ValueTag right) Parameters Type Name Description System.String operatorName The name of the binary arithmetic operator to apply. IType elementType The type of both parameter types and the result type of the intrinsic. ValueTag left The first argument to the intrinsic. ValueTag right The second argument to the intrinsic. Returns Type Description Instruction An arithmetic intrinsic. | Improve this Doc View Source CreateBox(IType, ValueTag) Creates an instruction that boxes a value type, turning it into a reference type (aka box pointer). Declaration public static Instruction CreateBox(IType elementType, ValueTag element) Parameters Type Name Description IType elementType The type of value to box. ValueTag element The value to box. Returns Type Description Instruction A box instruction. | Improve this Doc View Source CreateCall(IMethod, MethodLookup, ValueTag, IReadOnlyList<ValueTag>) Creates an instruction that calls a particular method. Declaration public static Instruction CreateCall(IMethod callee, MethodLookup lookup, ValueTag thisArgument, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description IMethod callee The method to call. MethodLookup lookup The method implementation lookup technique to use for calling the method. ValueTag thisArgument The 'this' argument for the method call. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The argument list for the method call. Returns Type Description Instruction A call instruction. | Improve this Doc View Source CreateCall(IMethod, MethodLookup, IReadOnlyList<ValueTag>) Creates an instruction that calls a particular method. Declaration public static Instruction CreateCall(IMethod callee, MethodLookup lookup, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description IMethod callee The method to call. MethodLookup lookup The method implementation lookup technique to use for calling the method. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The extended argument list: a list of arguments prefixed with a 'this' argument, if applicable. Returns Type Description Instruction A call instruction. | Improve this Doc View Source CreateCaptureIntrinsic(IType, IType, ValueTag) Creates a 'capture' intrinsic, which captures a (thrown) exception. Declaration public static Instruction CreateCaptureIntrinsic(IType resultType, IType argumentType, ValueTag argument) Parameters Type Name Description IType resultType The type of a captured exception. IType argumentType The type of the exception to capture. ValueTag argument An exception to capture. Returns Type Description Instruction A 'capture' intrinsic. | Improve this Doc View Source CreateConstant(Constant, IType) Creates an instruction that creates a constant value of a particular type. Declaration public static Instruction CreateConstant(Constant value, IType type) Parameters Type Name Description Constant value The constant value to produce. IType type The type of value created by the instruction. Returns Type Description Instruction A constant instruction. | Improve this Doc View Source CreateConstrainedCall(IMethod, ValueTag, IReadOnlyList<ValueTag>) Creates an instruction that performs a constrained virtual call to a particular method. Declaration public static Instruction CreateConstrainedCall(IMethod callee, ValueTag thisArgument, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description IMethod callee The method to call. ValueTag thisArgument The 'this' argument for the constrained method call. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The argument list for the constrained method call. Returns Type Description Instruction A constrained call instruction. | Improve this Doc View Source CreateConvertIntrinsic(IType, IType, ValueTag) Creates an intrinsic that converts one primitive type to another. Declaration public static Instruction CreateConvertIntrinsic(IType targetType, IType sourceType, ValueTag value) Parameters Type Name Description IType targetType The target primitive type: the type to convert the value to. IType sourceType The source primitive type: the type of the value to convert. ValueTag value The value to convert. Returns Type Description Instruction A conversion instruction. | Improve this Doc View Source CreateCopy(IType, ValueTag) Creates a copy instruction, which creates an alias for an existing value. Declaration public static Instruction CreateCopy(IType type, ValueTag value) Parameters Type Name Description IType type The type of value to copy. ValueTag value The value to copy. Returns Type Description Instruction A copy instruction. | Improve this Doc View Source CreateDefaultConstant(IType) Creates an instruction that creates a default-value constant of a particular type. The resulting constant need not be an instance of DefaultConstant: it may be tailored to the type of value to produce. Declaration public static Instruction CreateDefaultConstant(IType type) Parameters Type Name Description IType type The type of value created by the instruction. Returns Type Description Instruction A default-value constant instruction. | Improve this Doc View Source CreateDynamicCast(PointerType, ValueTag) Creates a dynamic cast instruction that converts from one pointer type to another. Declaration public static Instruction CreateDynamicCast(PointerType targetType, ValueTag operand) Parameters Type Name Description PointerType targetType A type to convert operands to. ValueTag operand An operand to convert to the target type. Returns Type Description Instruction A dynamic cast instruction. | Improve this Doc View Source CreateGetCapturedExceptionIntrinsic(IType, IType, ValueTag) Creates a 'get_captured_exception' intrinsic, which throws an exception. Declaration public static Instruction CreateGetCapturedExceptionIntrinsic(IType resultType, IType argumentType, ValueTag argument) Parameters Type Name Description IType resultType The type of the exception value returned by this operation. IType argumentType The type of the captured exception to examine. ValueTag argument A captured exception to examine. Returns Type Description Instruction A 'get_captured_exception' intrinsic. | Improve this Doc View Source CreateGetElementPointerIntrinsic(IType, IType, IReadOnlyList<IType>, ValueTag, IReadOnlyList<ValueTag>) Creates a 'get_element_pointer' intrinsic, which indexes an array and computes a pointer to the indexed array element. Declaration public static Instruction CreateGetElementPointerIntrinsic(IType elementType, IType arrayType, IReadOnlyList<IType> indexTypes, ValueTag arrayValue, IReadOnlyList<ValueTag> indexValues) Parameters Type Name Description IType elementType The type of element to compute a pointer to. IType arrayType The type of array to index. System.Collections.Generic.IReadOnlyList < IType > indexTypes The types of indices to index the array with. ValueTag arrayValue The array to index. System.Collections.Generic.IReadOnlyList < ValueTag > indexValues The indices to index the array with. Returns Type Description Instruction A 'get_element_pointer' intrinsic. | Improve this Doc View Source CreateGetFieldPointer(IField, ValueTag) Creates a get-field-pointer instruction. Declaration public static Instruction CreateGetFieldPointer(IField field, ValueTag basePointer) Parameters Type Name Description IField field The field to create a pointer to. ValueTag basePointer A value that includes field . Returns Type Description Instruction A get-field-pointer instruction. | Improve this Doc View Source CreateGetLengthIntrinsic(IType, IType, ValueTag) Creates a 'get_length' intrinsic, which computes the number of elements in an array. Declaration public static Instruction CreateGetLengthIntrinsic(IType sizeType, IType arrayType, ValueTag arrayValue) Parameters Type Name Description IType sizeType The type of integer to store the length of the array in. IType arrayType The type of array to inspect. ValueTag arrayValue The array to inspect. Returns Type Description Instruction A 'get_length' intrinsic. | Improve this Doc View Source CreateGetStaticFieldPointer(IField) Creates a get-static-field-pointer instruction. Declaration public static Instruction CreateGetStaticFieldPointer(IField field) Parameters Type Name Description IField field The field to create a pointer to. Returns Type Description Instruction A get-static-field-pointer instruction. | Improve this Doc View Source CreateIndirectCall(IType, IReadOnlyList<IType>, ValueTag, IReadOnlyList<ValueTag>) Creates an indirect call instruction. Declaration public static Instruction CreateIndirectCall(IType returnType, IReadOnlyList<IType> parameterTypes, ValueTag callee, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description IType returnType The type of value returned by the callee. System.Collections.Generic.IReadOnlyList < IType > parameterTypes A list of parameter types. ValueTag callee The delegate or function pointer to call. System.Collections.Generic.IReadOnlyList < ValueTag > arguments The argument list for the call. Returns Type Description Instruction An indirect call instruction. | Improve this Doc View Source CreateLoad(IType, ValueTag) Creates a load instruction. Declaration public static Instruction CreateLoad(IType pointeeType, ValueTag pointer) Parameters Type Name Description IType pointeeType The type of value to load. ValueTag pointer A pointer to the value to load. Returns Type Description Instruction A load instruction. | Improve this Doc View Source CreateLoadElementIntrinsic(IType, IType, IReadOnlyList<IType>, ValueTag, IReadOnlyList<ValueTag>) Creates a 'load_element' intrinsic, which indexes an array and loads the indexed array element. Declaration public static Instruction CreateLoadElementIntrinsic(IType elementType, IType arrayType, IReadOnlyList<IType> indexTypes, ValueTag arrayValue, IReadOnlyList<ValueTag> indexValues) Parameters Type Name Description IType elementType The type of element to load. IType arrayType The type of array to index. System.Collections.Generic.IReadOnlyList < IType > indexTypes The types of indices to index the array with. ValueTag arrayValue The array to index. System.Collections.Generic.IReadOnlyList < ValueTag > indexValues The indices to index the array with. Returns Type Description Instruction A 'load_element' intrinsic. | Improve this Doc View Source CreateNewArrayIntrinsic(IType, IType, ValueTag) Creates a 'new_array' intrinsic, which allocates a new array of a particular size. Declaration public static Instruction CreateNewArrayIntrinsic(IType arrayType, IType sizeType, ValueTag sizeValue) Parameters Type Name Description IType arrayType The type of array to allocate. IType sizeType The type of integer that describes the desired length of the array to allocate. ValueTag sizeValue The desired length of the array to allocate. Returns Type Description Instruction A 'new_array' intrinsic. | Improve this Doc View Source CreateNewDelegate(IType, IMethod, ValueTag, MethodLookup) Creates a new-delegate instruction. Declaration public static Instruction CreateNewDelegate(IType delegateType, IMethod callee, ValueTag thisArgument, MethodLookup lookup) Parameters Type Name Description IType delegateType The type of the resulting delegate or function pointer. IMethod callee The method called by the resulting delegate or function pointer. ValueTag thisArgument The 'this' argument, if any. A null value means that there is no 'this' argument. MethodLookup lookup The method implementation lookup technique to use. Returns Type Description Instruction A new-delegate instruction. | Improve this Doc View Source CreateNewObject(IMethod, IReadOnlyList<ValueTag>) Creates a new-object instruction that allocates storage on the heap for an object and initializes it using a constructor. Declaration public static Instruction CreateNewObject(IMethod constructor, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description IMethod constructor The constructor to initialize objects with. System.Collections.Generic.IReadOnlyList < ValueTag > arguments A list of arguments to call the constructor with. Returns Type Description Instruction A new-object instruction. | Improve this Doc View Source CreateReinterpretCast(PointerType, ValueTag) Creates a reinterpret cast instruction that converts from one pointer type to another. Declaration public static Instruction CreateReinterpretCast(PointerType targetType, ValueTag operand) Parameters Type Name Description PointerType targetType A type to convert operands to. ValueTag operand An operand to convert to the target type. Returns Type Description Instruction A reinterpret cast instruction. | Improve this Doc View Source CreateRelationalIntrinsic(String, IType, IType, ValueTag, ValueTag) Creates a binary arithmetic intrinsic that produces a Boolean value. Declaration public static Instruction CreateRelationalIntrinsic(string operatorName, IType booleanType, IType elementType, ValueTag left, ValueTag right) Parameters Type Name Description System.String operatorName The name of the binary arithmetic operator to apply. IType booleanType The type of value returned by the relational operator. IType elementType The type of both parameter types. ValueTag left The first argument to the intrinsic. ValueTag right The second argument to the intrinsic. Returns Type Description Instruction A relational arithmetic intrinsic. | Improve this Doc View Source CreateRethrowIntrinsic(IType, ValueTag) Creates a 'rethrow' intrinsic, which rethrows a captured exception. The difference between 'rethrow' and 'throw' is that the former takes a captured exception and retains stack trace information whereas the latter takes a (raw) exception value and constructs a new stack trace. Declaration public static Instruction CreateRethrowIntrinsic(IType capturedExceptionType, ValueTag capturedException) Parameters Type Name Description IType capturedExceptionType The type of the captured exception to rethrow. ValueTag capturedException The captured exception to rethrow. Returns Type Description Instruction A 'rethrow' intrinsic. | Improve this Doc View Source CreateStore(IType, ValueTag, ValueTag) Creates a store instruction. Declaration public static Instruction CreateStore(IType pointeeType, ValueTag pointer, ValueTag value) Parameters Type Name Description IType pointeeType The type of value . Also the type of value pointed to by pointer . ValueTag pointer A pointer the target of the store. ValueTag value A value to store at pointer 's pointee. Returns Type Description Instruction A store instruction. | Improve this Doc View Source CreateStoreElementIntrinsic(IType, IType, IReadOnlyList<IType>, ValueTag, ValueTag, IReadOnlyList<ValueTag>) Creates a 'store_element' intrinsic, which indexes an array and sets the indexed array element. Declaration public static Instruction CreateStoreElementIntrinsic(IType elementType, IType arrayType, IReadOnlyList<IType> indexTypes, ValueTag elementValue, ValueTag arrayValue, IReadOnlyList<ValueTag> indexValues) Parameters Type Name Description IType elementType The type of element to store in the array. IType arrayType The type of array to index. System.Collections.Generic.IReadOnlyList < IType > indexTypes The types of indices to index the array with. ValueTag elementValue The value to store in the array. ValueTag arrayValue The array to index. System.Collections.Generic.IReadOnlyList < ValueTag > indexValues The indices to index the array with. Returns Type Description Instruction A 'store_element' intrinsic. | Improve this Doc View Source CreateThrowIntrinsic(IType, ValueTag) Creates a 'throw' intrinsic, which throws an exception. Declaration public static Instruction CreateThrowIntrinsic(IType exceptionType, ValueTag exception) Parameters Type Name Description IType exceptionType The type of exception to throw. ValueTag exception The exception to throw. Returns Type Description Instruction A 'throw' intrinsic. | Improve this Doc View Source CreateUnbox(IType, ValueTag) Creates an instruction that unboxes a box pointer, turning it into a ref pointer to the box's contents. Declaration public static Instruction CreateUnbox(IType elementType, ValueTag value) Parameters Type Name Description IType elementType The type of value to unbox. ValueTag value The value to unbox. Returns Type Description Instruction An unbox instruction. | Improve this Doc View Source CreateUnboxAnyIntrinsic(IType, IType, ValueTag) Creates an 'unbox_any' intrinsic. Its return type can either be a value type or a reference type (aka box pointer). If its return type is set to a value type, 'unbox_any' unboxes its argument and loads it. If 'unbox_any's return value is set to a reference type, 'unbox_any' checks that its argument is a subtype of the return type. Declaration public static Instruction CreateUnboxAnyIntrinsic(IType targetType, IType sourceType, ValueTag value) Parameters Type Name Description IType targetType The target type: the type to unbox or cast a box pointer to. IType sourceType The source type: the type of the value to convert. ValueTag value The value to convert. Returns Type Description Instruction An 'unbox_any' intrinsic. | Improve this Doc View Source Equals(Instruction) Tests if this instruction is (superficially) identical to another instruction. Declaration public bool Equals(Instruction other) Parameters Type Name Description Instruction other The other instruction. Returns Type Description System.Boolean true if this instruction has the same prototype and arguments as other ; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Map(MemberMapping) Applies a member mapping to this instruction. Declaration public Instruction Map(MemberMapping mapping) Parameters Type Name Description MemberMapping mapping A member mapping. Returns Type Description Instruction A transformed prototype. | Improve this Doc View Source MapArguments(IReadOnlyDictionary<ValueTag, ValueTag>) Creates a new instruction by applying a mapping to this instruction's argument list. Declaration public Instruction MapArguments(IReadOnlyDictionary<ValueTag, ValueTag> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < ValueTag , ValueTag > mapping The mapping to apply to every element of this instruction's argument list, encoded as a dictionary. Arguments that do not show up as keys in the dictionary are left unmodified. Returns Type Description Instruction A new instruction. | Improve this Doc View Source MapArguments(Func<ValueTag, ValueTag>) Creates a new instruction by applying a mapping to this instruction's argument list. Declaration public Instruction MapArguments(Func<ValueTag, ValueTag> mapping) Parameters Type Name Description System.Func < ValueTag , ValueTag > mapping The mapping to apply to every element of this instruction's argument list. Returns Type Description Instruction A new instruction. | Improve this Doc View Source Validate(MethodBody) Checks if this instruction conforms to the rules for its instruction prototype. Declaration public IReadOnlyList<string> Validate(MethodBody body) Parameters Type Name Description MethodBody body The method body that defines this instruction. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > A list of validation errors. | Improve this Doc View Source WithArguments(IReadOnlyList<ValueTag>) Creates a new instruction that copies everything from this instruction but uses a different argument list. Declaration public Instruction WithArguments(IReadOnlyList<ValueTag> newArguments) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < ValueTag > newArguments The new argument list. Returns Type Description Instruction A new instruction. Operators | Improve this Doc View Source Equality(Instruction, Instruction) Tests if the first instruction equals the second. Declaration public static bool operator ==(Instruction left, Instruction right) Parameters Type Name Description Instruction left The first instruction. Instruction right The second instruction. Returns Type Description System.Boolean true if the instructions have identical prototypes and arguments; otherwise, false . | Improve this Doc View Source Inequality(Instruction, Instruction) Tests if the first instruction does not equal the second. Declaration public static bool operator !=(Instruction left, Instruction right) Parameters Type Name Description Instruction left The first instruction. Instruction right The second instruction. Returns Type Description System.Boolean false if the instructions have identical prototypes and arguments; otherwise, true . Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.IBodyMethod.html": {
    "href": "api/Flame.Compiler.IBodyMethod.html",
    "title": "Interface IBodyMethod | Flame",
    "keywords": "Interface IBodyMethod A method that defines a method body. Inherited Members IMethod.IsConstructor IMethod.IsStatic IMethod.ReturnParameter IMethod.Parameters IMethod.BaseMethods ITypeMember.ParentType IGenericMember.GenericParameters IMember.Name IMember.FullName IMember.Attributes Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public interface IBodyMethod : IMethod, ITypeMember, IGenericMember, IMember Properties | Improve this Doc View Source Body Gets the method body for this method. Declaration MethodBody Body { get; } Property Value Type Description MethodBody A method body."
  },
  "api/Flame.Compiler.Flow.ReturnFlow.html": {
    "href": "api/Flame.Compiler.Flow.ReturnFlow.html",
    "title": "Class ReturnFlow | Flame",
    "keywords": "Class ReturnFlow Control flow that returns control to the caller. Inheritance System.Object BlockFlow ReturnFlow Inherited Members BlockFlow.BranchTargets BlockFlow.GetInstructionBuilders(BasicBlockBuilder) BlockFlow.MapValues(Func<ValueTag, ValueTag>) BlockFlow.MapValues(IReadOnlyDictionary<ValueTag, ValueTag>) BlockFlow.MapBlocks(Func<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBlocks(IReadOnlyDictionary<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBranches(Func<Branch, Branch>) BlockFlow.MapArguments(Func<BranchArgument, BranchArgument>) BlockFlow.MapArguments(IReadOnlyDictionary<BranchArgument, BranchArgument>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public sealed class ReturnFlow : BlockFlow Constructors | Improve this Doc View Source ReturnFlow(Instruction) Creates return flow that returns a particular value. Declaration public ReturnFlow(Instruction returnValue) Parameters Type Name Description Instruction returnValue The value to return. Properties | Improve this Doc View Source Branches Gets a list of branches this flow may take. Declaration public override IReadOnlyList<Branch> Branches { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Branch > A list of potential branches. Overrides BlockFlow.Branches | Improve this Doc View Source Instructions Gets a list of inner instructions for this block flow. Declaration public override IReadOnlyList<Instruction> Instructions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Instruction > The inner instructions. Overrides BlockFlow.Instructions | Improve this Doc View Source ReturnValue Gets the value returned by this return flow. Declaration public Instruction ReturnValue { get; } Property Value Type Description Instruction The returned value. Methods | Improve this Doc View Source GetInstructionBuilder(BasicBlockBuilder, Int32) Gets an instruction builder for the nth anonymous instruction in this block flow. Declaration public override InstructionBuilder GetInstructionBuilder(BasicBlockBuilder block, int instructionIndex) Parameters Type Name Description BasicBlockBuilder block The block that defines this flow. System.Int32 instructionIndex The index of the anonymous instruction to create a builder for. Returns Type Description InstructionBuilder An instruction builder for an anonymous instruction. Overrides BlockFlow.GetInstructionBuilder(BasicBlockBuilder, Int32) | Improve this Doc View Source WithBranches(IReadOnlyList<Branch>) Replaces this flow's branches with a particular list of branches. Declaration public override BlockFlow WithBranches(IReadOnlyList<Branch> branches) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Branch > branches The new branches. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithBranches(IReadOnlyList<Branch>) | Improve this Doc View Source WithInstructions(IReadOnlyList<Instruction>) Replaces this flow's inner instructions. Declaration public override BlockFlow WithInstructions(IReadOnlyList<Instruction> instructions) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Instruction > instructions The new instructions. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithInstructions(IReadOnlyList<Instruction>)"
  },
  "api/Flame.Compiler.Flow.JumpFlow.html": {
    "href": "api/Flame.Compiler.Flow.JumpFlow.html",
    "title": "Class JumpFlow | Flame",
    "keywords": "Class JumpFlow Control flow that unconditionally jumps to a particular branch. Inheritance System.Object BlockFlow JumpFlow Inherited Members BlockFlow.BranchTargets BlockFlow.GetInstructionBuilders(BasicBlockBuilder) BlockFlow.MapValues(Func<ValueTag, ValueTag>) BlockFlow.MapValues(IReadOnlyDictionary<ValueTag, ValueTag>) BlockFlow.MapBlocks(Func<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBlocks(IReadOnlyDictionary<BasicBlockTag, BasicBlockTag>) BlockFlow.MapBranches(Func<Branch, Branch>) BlockFlow.MapArguments(Func<BranchArgument, BranchArgument>) BlockFlow.MapArguments(IReadOnlyDictionary<BranchArgument, BranchArgument>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public sealed class JumpFlow : BlockFlow Constructors | Improve this Doc View Source JumpFlow(BasicBlockTag) Creates control flow that unconditionally jumps to a particular block, passing no arguments. Declaration public JumpFlow(BasicBlockTag target) Parameters Type Name Description BasicBlockTag target The target block. | Improve this Doc View Source JumpFlow(BasicBlockTag, IReadOnlyList<BranchArgument>) Creates control flow that unconditionally jumps to a particular block, passing a list of arguments. Declaration public JumpFlow(BasicBlockTag target, IReadOnlyList<BranchArgument> arguments) Parameters Type Name Description BasicBlockTag target The target block. System.Collections.Generic.IReadOnlyList < BranchArgument > arguments A list of arguments to pass to the target block. | Improve this Doc View Source JumpFlow(BasicBlockTag, IReadOnlyList<ValueTag>) Creates control flow that unconditionally jumps to a particular block, passing a list of arguments. Declaration public JumpFlow(BasicBlockTag target, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description BasicBlockTag target The target block. System.Collections.Generic.IReadOnlyList < ValueTag > arguments A list of arguments to pass to the target block. | Improve this Doc View Source JumpFlow(Branch) Creates control flow that unconditionally jumps to a particular branch. Declaration public JumpFlow(Branch branch) Parameters Type Name Description Branch branch The branch to jump to. Properties | Improve this Doc View Source Branch Gets the branch that is unconditionally taken by this flow. Declaration public Branch Branch { get; } Property Value Type Description Branch The jump branch. | Improve this Doc View Source Branches Gets a list of branches this flow may take. Declaration public override IReadOnlyList<Branch> Branches { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Branch > A list of potential branches. Overrides BlockFlow.Branches | Improve this Doc View Source Instructions Gets a list of inner instructions for this block flow. Declaration public override IReadOnlyList<Instruction> Instructions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Instruction > The inner instructions. Overrides BlockFlow.Instructions Methods | Improve this Doc View Source GetInstructionBuilder(BasicBlockBuilder, Int32) Gets an instruction builder for the nth anonymous instruction in this block flow. Declaration public override InstructionBuilder GetInstructionBuilder(BasicBlockBuilder block, int instructionIndex) Parameters Type Name Description BasicBlockBuilder block The block that defines this flow. System.Int32 instructionIndex The index of the anonymous instruction to create a builder for. Returns Type Description InstructionBuilder An instruction builder for an anonymous instruction. Overrides BlockFlow.GetInstructionBuilder(BasicBlockBuilder, Int32) | Improve this Doc View Source WithBranches(IReadOnlyList<Branch>) Replaces this flow's branches with a particular list of branches. Declaration public override BlockFlow WithBranches(IReadOnlyList<Branch> branches) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Branch > branches The new branches. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithBranches(IReadOnlyList<Branch>) | Improve this Doc View Source WithInstructions(IReadOnlyList<Instruction>) Replaces this flow's inner instructions. Declaration public override BlockFlow WithInstructions(IReadOnlyList<Instruction> instructions) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Instruction > instructions The new instructions. Returns Type Description BlockFlow A new flow. Overrides BlockFlow.WithInstructions(IReadOnlyList<Instruction>)"
  },
  "api/Flame.Compiler.Flow.FlowInstructionBuilder.html": {
    "href": "api/Flame.Compiler.Flow.FlowInstructionBuilder.html",
    "title": "Class FlowInstructionBuilder | Flame",
    "keywords": "Class FlowInstructionBuilder An instruction reference to an unnamed instruction in block flow. Inheritance System.Object InstructionBuilder FlowInstructionBuilder Inherited Members InstructionBuilder.Graph InstructionBuilder.Instruction InstructionBuilder.ReplaceInstruction(FlowGraph, IReadOnlyList<ValueTag>) InstructionBuilder.ReplaceInstruction(FlowGraph) InstructionBuilder.ResultType InstructionBuilder.Prototype InstructionBuilder.Arguments System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Flow Assembly : Flame.Compiler.dll Syntax public abstract class FlowInstructionBuilder : InstructionBuilder Constructors | Improve this Doc View Source FlowInstructionBuilder(BasicBlockBuilder) Creates a flow instruction builder. Declaration public FlowInstructionBuilder(BasicBlockBuilder block) Parameters Type Name Description BasicBlockBuilder block The block that defines the flow. Fields | Improve this Doc View Source block The block that defines the flow. Declaration protected BasicBlockBuilder block Field Value Type Description BasicBlockBuilder Properties | Improve this Doc View Source Block Gets the block that defines the block flow. Declaration public override BasicBlockBuilder Block { get; } Property Value Type Description BasicBlockBuilder A basic block builder. Overrides InstructionBuilder.Block | Improve this Doc View Source Flow Gets the flow that defines the unnamed instruction. Declaration public BlockFlow Flow { get; protected set; } Property Value Type Description BlockFlow | Improve this Doc View Source IsValid Tells if this instruction builder is still valid. Querying or modifying invalid instruction builders results in an exception. Declaration public override bool IsValid { get; } Property Value Type Description System.Boolean true if this instruction reference is valid; otherwise, false . Overrides InstructionBuilder.IsValid"
  },
  "api/Flame.Compiler.BranchArgumentKind.html": {
    "href": "api/Flame.Compiler.BranchArgumentKind.html",
    "title": "Enum BranchArgumentKind | Flame",
    "keywords": "Enum BranchArgumentKind An enumeration of things a branch argument can be. Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public enum BranchArgumentKind Fields Name Description TryException The branch argument passes the exception thrown by a 'try' flow's inner instruction to the target block. Only valid on exception branches of 'try' flows. TryResult The branch argument passes the result of a 'try' flow's inner instruction to the target block. Only valid on success branches of 'try' flows. Value The branch argument simply passes a value to a target basic block."
  },
  "api/Flame.Compiler.BranchArgument.html": {
    "href": "api/Flame.Compiler.BranchArgument.html",
    "title": "Struct BranchArgument | Flame",
    "keywords": "Struct BranchArgument An argument to a branch. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public struct BranchArgument Properties | Improve this Doc View Source IsTryException Tests if this branch argument is the exception thrown by a 'try' flow's inner instruction. Declaration public bool IsTryException { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTryResult Tests if this branch argument is the result of a 'try' flow's inner instruction. Declaration public bool IsTryResult { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsValue Tests if this branch argument is a value. Declaration public bool IsValue { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Kind Gets a description of this branch argument's kind. Declaration public BranchArgumentKind Kind { get; } Property Value Type Description BranchArgumentKind The branch argument's kind. | Improve this Doc View Source TryException Gets a branch argument that represents the exception thrown by a 'try' flow's inner instruction. Declaration public static BranchArgument TryException { get; } Property Value Type Description BranchArgument A branch argument. | Improve this Doc View Source TryResult Gets a branch argument that represents the result of a 'try' flow's inner instruction. Declaration public static BranchArgument TryResult { get; } Property Value Type Description BranchArgument A branch argument. | Improve this Doc View Source ValueOrNull Gets the value referred to by this branch argument. This is non-null if and only if this branch argument is a value. Declaration public ValueTag ValueOrNull { get; } Property Value Type Description ValueTag The value referred to by this branch argument. Methods | Improve this Doc View Source FromValue(ValueTag) Creates a branch argument that passes a particular value to the branch's target block. Declaration public static BranchArgument FromValue(ValueTag value) Parameters Type Name Description ValueTag value The value to pass to the target block. Returns Type Description BranchArgument A branch argument. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/Flame.Compiler.Branch.html": {
    "href": "api/Flame.Compiler.Branch.html",
    "title": "Class Branch | Flame",
    "keywords": "Class Branch A branch to a particular block that passes a list of values as arguments. Inheritance System.Object Branch Implements System.IEquatable < Branch > Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler Assembly : Flame.Compiler.dll Syntax public sealed class Branch : IEquatable<Branch> Constructors | Improve this Doc View Source Branch(BasicBlockTag) Creates a branch that targets a particular block and passes no arguments. Declaration public Branch(BasicBlockTag target) Parameters Type Name Description BasicBlockTag target The target block. | Improve this Doc View Source Branch(BasicBlockTag, IReadOnlyList<BranchArgument>) Creates a branch that targets a particular block and passes a list of arguments. Declaration public Branch(BasicBlockTag target, IReadOnlyList<BranchArgument> arguments) Parameters Type Name Description BasicBlockTag target The target block. System.Collections.Generic.IReadOnlyList < BranchArgument > arguments A list of arguments to pass to the target block. | Improve this Doc View Source Branch(BasicBlockTag, IReadOnlyList<ValueTag>) Creates a branch that targets a particular block and passes a list of arguments. Declaration public Branch(BasicBlockTag target, IReadOnlyList<ValueTag> arguments) Parameters Type Name Description BasicBlockTag target The target block. System.Collections.Generic.IReadOnlyList < ValueTag > arguments A list of arguments to pass to the target block. Properties | Improve this Doc View Source Arguments Gets the arguments passed to the target block when this branch is taken. Declaration public IReadOnlyList<BranchArgument> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < BranchArgument > A list of arguments. | Improve this Doc View Source Target Gets the branch's target block. Declaration public BasicBlockTag Target { get; } Property Value Type Description BasicBlockTag The target block. Methods | Improve this Doc View Source AddArgument(BranchArgument) Creates a branch that is the result of appending an argument at the end of this branch's argument list. Declaration public Branch AddArgument(BranchArgument argument) Parameters Type Name Description BranchArgument argument The argument to add. Returns Type Description Branch A new branch. | Improve this Doc View Source AddArgument(ValueTag) Creates a branch that is the result of appending an argument at the end of this branch's argument list. Declaration public Branch AddArgument(ValueTag argument) Parameters Type Name Description ValueTag argument The argument to add. Returns Type Description Branch A new branch. | Improve this Doc View Source Equals(Branch) Tests if this branch equals another branch. Declaration public bool Equals(Branch other) Parameters Type Name Description Branch other The branch to compare with. Returns Type Description System.Boolean true if this branch equals the other branch; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source MapArguments(Func<BranchArgument, BranchArgument>) Creates a new branch by applying a mapping to every argument in this branch's argument list. Declaration public Branch MapArguments(Func<BranchArgument, BranchArgument> mapping) Parameters Type Name Description System.Func < BranchArgument , BranchArgument > mapping The mapping to apply to every argument in this branch's argument list. Returns Type Description Branch A new branch. | Improve this Doc View Source MapArguments(Func<ValueTag, ValueTag>) Creates a new branch by applying a mapping to every value in this branch's argument list. Declaration public Branch MapArguments(Func<ValueTag, ValueTag> mapping) Parameters Type Name Description System.Func < ValueTag , ValueTag > mapping The mapping to apply to every value in this branch's argument list. Returns Type Description Branch A new branch. | Improve this Doc View Source WithArguments(IReadOnlyList<BranchArgument>) Replaces this branch's arguments with a particular list of arguments. Declaration public Branch WithArguments(IReadOnlyList<BranchArgument> arguments) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < BranchArgument > arguments The new arguments. Returns Type Description Branch A new branch. | Improve this Doc View Source WithTarget(BasicBlockTag) Replaces this branch's target with another block. Declaration public Branch WithTarget(BasicBlockTag target) Parameters Type Name Description BasicBlockTag target The new target block. Returns Type Description Branch A new branch. | Improve this Doc View Source ZipArgumentsWithParameters(FlowGraph) Zips this branch's arguments with their corresponding parameters. Declaration public IEnumerable<KeyValuePair<ValueTag, BranchArgument>> ZipArgumentsWithParameters(FlowGraph graph) Parameters Type Name Description FlowGraph graph The graph that defines the branch. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < ValueTag , BranchArgument >> A sequence of key-value pairs where the keys are basic block parameters and the values are branch arguments. | Improve this Doc View Source ZipArgumentsWithParameters(FlowGraphBuilder) Zips this branch's arguments with their corresponding parameters. Declaration public IEnumerable<KeyValuePair<ValueTag, BranchArgument>> ZipArgumentsWithParameters(FlowGraphBuilder graph) Parameters Type Name Description FlowGraphBuilder graph The graph that defines the branch. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < ValueTag , BranchArgument >> A sequence of key-value pairs where the keys are basic block parameters and the values are branch arguments. Operators | Improve this Doc View Source Equality(Branch, Branch) Tests if two branches are equal. Declaration public static bool operator ==(Branch left, Branch right) Parameters Type Name Description Branch left The first branch to compare. Branch right The second branch to compare. Returns Type Description System.Boolean true if the branches are equal; otherwise, false . | Improve this Doc View Source Inequality(Branch, Branch) Tests if two branches are not equal. Declaration public static bool operator !=(Branch left, Branch right) Parameters Type Name Description Branch left The first branch to compare. Branch right The second branch to compare. Returns Type Description System.Boolean false if the branches are equal; otherwise, true . Implements System.IEquatable<T>"
  },
  "api/Flame.Compiler.Analysis.LivenessAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.LivenessAnalysis.html",
    "title": "Class LivenessAnalysis | Flame",
    "keywords": "Class LivenessAnalysis An analysis that determines which variables are live at any location in a control flow graph. Inheritance System.Object LivenessAnalysis Implements IFlowGraphAnalysis < ValueLiveness > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class LivenessAnalysis : IFlowGraphAnalysis<ValueLiveness> Fields | Improve this Doc View Source Instance Gets an instance of the liveness analysis. Declaration public static readonly LivenessAnalysis Instance Field Value Type Description LivenessAnalysis An instance of the liveness analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public ValueLiveness Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description ValueLiveness | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, ValueLiveness, IReadOnlyList<FlowGraphUpdate>) Declaration public ValueLiveness AnalyzeWithUpdates(FlowGraph graph, ValueLiveness previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph ValueLiveness previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description ValueLiveness Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.LazyBlockReachabilityAnalysis.html": {
    "href": "api/Flame.Compiler.Analysis.LazyBlockReachabilityAnalysis.html",
    "title": "Class LazyBlockReachabilityAnalysis | Flame",
    "keywords": "Class LazyBlockReachabilityAnalysis An analysis that finds computes block reachability information on an on-demand basis. Inheritance System.Object LazyBlockReachabilityAnalysis Implements IFlowGraphAnalysis < LazyBlockReachability > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class LazyBlockReachabilityAnalysis : IFlowGraphAnalysis<LazyBlockReachability> Fields | Improve this Doc View Source Instance Gets an instance of the lazy block reachability analysis. Declaration public static readonly LazyBlockReachabilityAnalysis Instance Field Value Type Description LazyBlockReachabilityAnalysis An instance of the lazy block reachability analysis. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public LazyBlockReachability Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description LazyBlockReachability | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, LazyBlockReachability, IReadOnlyList<FlowGraphUpdate>) Declaration public LazyBlockReachability AnalyzeWithUpdates(FlowGraph graph, LazyBlockReachability previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph LazyBlockReachability previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description LazyBlockReachability Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.InstructionOrdering.html": {
    "href": "api/Flame.Compiler.Analysis.InstructionOrdering.html",
    "title": "Class InstructionOrdering | Flame",
    "keywords": "Class InstructionOrdering Captures the must-run-before relation between instructions. All instruction orderings that respect this relation are legal and computationally equivalent. Inheritance System.Object InstructionOrdering Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class InstructionOrdering Methods | Improve this Doc View Source MustRunBefore(ValueTag, ValueTag) Tells if the first instruction must run before the second instruction, assuming that both instructions are defined by the same basic block. Declaration public abstract bool MustRunBefore(ValueTag first, ValueTag second) Parameters Type Name Description ValueTag first The value tag of the first instruction to inspect. ValueTag second The value tag of the second instruction to inspect. Returns Type Description System.Boolean true if the first instruction must run before the second instruction runs; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.InstructionExceptionSpecs.html": {
    "href": "api/Flame.Compiler.Analysis.InstructionExceptionSpecs.html",
    "title": "Class InstructionExceptionSpecs | Flame",
    "keywords": "Class InstructionExceptionSpecs Maps instructions to their exception specifications. Inheritance System.Object InstructionExceptionSpecs TrivialInstructionExceptionSpecs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class InstructionExceptionSpecs Methods | Improve this Doc View Source GetExceptionSpecification(Instruction) Gets the exception specification for a particular instruction. Declaration public abstract ExceptionSpecification GetExceptionSpecification(Instruction instruction) Parameters Type Name Description Instruction instruction The instruction to examine. Returns Type Description ExceptionSpecification An exception specification for instruction ."
  },
  "api/Flame.Compiler.Analysis.IFlowGraphAnalysis-1.html": {
    "href": "api/Flame.Compiler.Analysis.IFlowGraphAnalysis-1.html",
    "title": "Interface IFlowGraphAnalysis<T> | Flame",
    "keywords": "Interface IFlowGraphAnalysis<T> An analysis on a flow graph. Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public interface IFlowGraphAnalysis<T> Type Parameters Name Description T The type of the analysis' result. Methods | Improve this Doc View Source Analyze(FlowGraph) Analyzes a flow graph from scratch. Declaration T Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to analyze. Returns Type Description T The analysis' output. | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, T, IReadOnlyList<FlowGraphUpdate>) Analyzes a flow graph based on the flow graph, the previous result, and a list of updates that were applied to the graph since the previous result. Declaration T AnalyzeWithUpdates(FlowGraph graph, T previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph The current version of the flow graph to analyze. T previousResult A previous result produced by this analysis. System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates A list of updates that were applied to the flow graph since the previous result was computed. Returns Type Description T The analysis' output, which must be equal to a call to Analyze ."
  },
  "api/Flame.Compiler.Analysis.GreedyRegisterAllocator-1.html": {
    "href": "api/Flame.Compiler.Analysis.GreedyRegisterAllocator-1.html",
    "title": "Class GreedyRegisterAllocator<TRegister> | Flame",
    "keywords": "Class GreedyRegisterAllocator<TRegister> An analysis that greedily allocates registers to values. The set of values is assumed to be unbounded: the analysis is allowed to \"create\" an arbitrarily large amount of registers. Inheritance System.Object GreedyRegisterAllocator<TRegister> CilRegisterAllocator Implements IFlowGraphAnalysis < RegisterAllocation <TRegister>> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class GreedyRegisterAllocator<TRegister> : IFlowGraphAnalysis<RegisterAllocation<TRegister>> Type Parameters Name Description TRegister The type of register allocated to values. Methods | Improve this Doc View Source Analyze(FlowGraph) Declaration public RegisterAllocation<TRegister> Analyze(FlowGraph graph) Parameters Type Name Description FlowGraph graph Returns Type Description RegisterAllocation <TRegister> | Improve this Doc View Source AnalyzeWithUpdates(FlowGraph, RegisterAllocation<TRegister>, IReadOnlyList<FlowGraphUpdate>) Declaration public RegisterAllocation<TRegister> AnalyzeWithUpdates(FlowGraph graph, RegisterAllocation<TRegister> previousResult, IReadOnlyList<FlowGraphUpdate> updates) Parameters Type Name Description FlowGraph graph RegisterAllocation <TRegister> previousResult System.Collections.Generic.IReadOnlyList < FlowGraphUpdate > updates Returns Type Description RegisterAllocation <TRegister> | Improve this Doc View Source CreateRegister(IType) Creates a brand new register for a value of a particular type. Declaration protected abstract TRegister CreateRegister(IType type) Parameters Type Name Description IType type The type of value to create a register for. Returns Type Description TRegister A register suitable for the value. | Improve this Doc View Source RequiresRegister(ValueTag, FlowGraph) Tells if a register should be allocated for a particular value. Declaration protected virtual bool RequiresRegister(ValueTag value, FlowGraph graph) Parameters Type Name Description ValueTag value The value for which register allocation may or may not be necessary. FlowGraph graph The control flow graph that defines value . Returns Type Description System.Boolean true if a register must be allocated to value ; otherwise, false . Remarks Implementations may override this method to suppress register allocation for values that are, e.g., stored on an evaluation stack. | Improve this Doc View Source TryGetPreallocatedRegister(ValueTag, FlowGraph, out TRegister) Tries to get a preallocated register for a particular value. If it exists, then the preallocated register will be used for the value, no questions asked. The preallocated register may be reused. Declaration protected virtual bool TryGetPreallocatedRegister(ValueTag value, FlowGraph graph, out TRegister register) Parameters Type Name Description ValueTag value The value that may have a preallocated register. FlowGraph graph The graph that defines the value. TRegister register A preallocated register, if any. Returns Type Description System.Boolean true if there is a preallocated register for value ; otherwise, false . | Improve this Doc View Source TryRecycleRegister(IType, IEnumerable<TRegister>, out TRegister) Tries to recycle a register from a set of registers. Declaration protected abstract bool TryRecycleRegister(IType type, IEnumerable<TRegister> registers, out TRegister result) Parameters Type Name Description IType type The type of value to store in the recycled register. System.Collections.Generic.IEnumerable <TRegister> registers A set of registers that are eligible for recycling. TRegister result A register to recycle, if any. Returns Type Description System.Boolean true if a register has been selected for recyling; otherwise, false . Implements IFlowGraphAnalysis<T>"
  },
  "api/Flame.Compiler.Analysis.FlowGraphUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.FlowGraphUpdate.html",
    "title": "Class FlowGraphUpdate | Flame",
    "keywords": "Class FlowGraphUpdate Describes an update to a flow graph. Inheritance System.Object FlowGraphUpdate BasicBlockUpdate InstructionUpdate MapMembersUpdate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class FlowGraphUpdate"
  },
  "api/Flame.Compiler.Analysis.ExceptionDelayabilityExtensions.html": {
    "href": "api/Flame.Compiler.Analysis.ExceptionDelayabilityExtensions.html",
    "title": "Class ExceptionDelayabilityExtensions | Flame",
    "keywords": "Class ExceptionDelayabilityExtensions Defines extension methods related to exception delayability. Inheritance System.Object ExceptionDelayabilityExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public static class ExceptionDelayabilityExtensions Methods | Improve this Doc View Source CanDelayExceptions(FlowGraph, ValueTag) Tells if it is permissible to delay exceptions thrown by a particular instruction until the instruction's result is used by an effectful instruction. If the instruction's result is never used that way, the exception may even be deleted altogether. Declaration public static bool CanDelayExceptions(this FlowGraph graph, ValueTag instruction) Parameters Type Name Description FlowGraph graph The flow graph that defines the instruction. ValueTag instruction An instruction tag to examine. Returns Type Description System.Boolean true if exceptions thrown by instruction may be delayed until its value is used by an effectful instruction; otherwise, false . | Improve this Doc View Source CanDelayExceptions(FlowGraphBuilder, ValueTag) Tells if it is permissible to delay exceptions thrown by a particular instruction until the instruction's result is used by an effectful instruction. If the instruction's result is never used that way, the exception may even be deleted altogether. Declaration public static bool CanDelayExceptions(this FlowGraphBuilder graph, ValueTag instruction) Parameters Type Name Description FlowGraphBuilder graph The flow graph that defines the instruction. ValueTag instruction An instruction tag to examine. Returns Type Description System.Boolean true if exceptions thrown by instruction may be delayed until its value is used by an effectful instruction; otherwise, false ."
  },
  "api/Flame.Compiler.Analysis.BasicBlockParametersUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.BasicBlockParametersUpdate.html",
    "title": "Class BasicBlockParametersUpdate | Flame",
    "keywords": "Class BasicBlockParametersUpdate A flow graph update that sets the parameters of a basic block. Inheritance System.Object FlowGraphUpdate BasicBlockUpdate BasicBlockParametersUpdate Inherited Members BasicBlockUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class BasicBlockParametersUpdate : BasicBlockUpdate"
  },
  "api/Flame.Compiler.Analysis.BasicBlockFlowUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.BasicBlockFlowUpdate.html",
    "title": "Class BasicBlockFlowUpdate | Flame",
    "keywords": "Class BasicBlockFlowUpdate A flow graph update that sets the outgoing flow of a basic block. Inheritance System.Object FlowGraphUpdate BasicBlockUpdate BasicBlockFlowUpdate Inherited Members BasicBlockUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class BasicBlockFlowUpdate : BasicBlockUpdate"
  },
  "api/Flame.Compiler.Analysis.Aliasing.html": {
    "href": "api/Flame.Compiler.Analysis.Aliasing.html",
    "title": "Enum Aliasing | Flame",
    "keywords": "Enum Aliasing Enumerates possible aliasing relations between pointers. Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public enum Aliasing Fields Name Description MayAlias The pointers may alias. MustAlias The pointers must alias. NoAlias The pointers cannot alias."
  },
  "api/Flame.Compiler.Analysis.AliasAnalysisResult.html": {
    "href": "api/Flame.Compiler.Analysis.AliasAnalysisResult.html",
    "title": "Class AliasAnalysisResult | Flame",
    "keywords": "Class AliasAnalysisResult A data structure that captures the result of applying alias analysis to a control-flow graph. Inheritance System.Object AliasAnalysisResult TrivialAliasAnalysisResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public abstract class AliasAnalysisResult Methods | Improve this Doc View Source GetAliasing(ValueTag, ValueTag) Gets the aliasing relation between two pointers. Declaration public abstract Aliasing GetAliasing(ValueTag first, ValueTag second) Parameters Type Name Description ValueTag first The first pointer value to examine. ValueTag second The second pointer value to examine. Returns Type Description Aliasing A conservative approximation of the aliasing relation between first and second ."
  },
  "api/Flame.Compiler.Analysis.AddInstructionUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.AddInstructionUpdate.html",
    "title": "Class AddInstructionUpdate | Flame",
    "keywords": "Class AddInstructionUpdate A flow graph update that inserts an instruction. Inheritance System.Object FlowGraphUpdate InstructionUpdate AddInstructionUpdate Inherited Members InstructionUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class AddInstructionUpdate : InstructionUpdate Properties | Improve this Doc View Source Instruction Gets the instruction that is added to the graph. Declaration public Instruction Instruction { get; } Property Value Type Description Instruction The instruction."
  },
  "api/Flame.Compiler.Analysis.AddBasicBlockUpdate.html": {
    "href": "api/Flame.Compiler.Analysis.AddBasicBlockUpdate.html",
    "title": "Class AddBasicBlockUpdate | Flame",
    "keywords": "Class AddBasicBlockUpdate A flow graph update that adds a basic block to the flow graph. Inheritance System.Object FlowGraphUpdate BasicBlockUpdate AddBasicBlockUpdate Inherited Members BasicBlockUpdate.Tag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Compiler.Analysis Assembly : Flame.Compiler.dll Syntax public sealed class AddBasicBlockUpdate : BasicBlockUpdate"
  },
  "api/Flame.Collections.UniqueNameMap-1.html": {
    "href": "api/Flame.Collections.UniqueNameMap-1.html",
    "title": "Class UniqueNameMap<T> | Flame",
    "keywords": "Class UniqueNameMap<T> Generates a unique name for every value that is given to it. Generated names are stored. Requesting a name for the same object more than once always results in the same unique name. Inheritance System.Object UniqueNameMap<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public sealed class UniqueNameMap<T> Type Parameters Name Description T The type of value to generate names for. Constructors | Improve this Doc View Source UniqueNameMap(UniqueNameSet<T>) Creates a unique name map from a unique name set. Declaration public UniqueNameMap(UniqueNameSet<T> nameSet) Parameters Type Name Description UniqueNameSet <T> nameSet A pre-existing unique name set to use. | Improve this Doc View Source UniqueNameMap(Func<T, String>, Func<T, Int32, String>) Creates a unique name map from a particular name-providing function and a name-generating function that is used to resolve collisions. Declaration public UniqueNameMap(Func<T, string> getName, Func<T, int, string> generateName) Parameters Type Name Description System.Func <T, System.String > getName A function that maps values to their preferred names. System.Func <T, System.Int32 , System.String > generateName A function that takes a value and an integer and combines them into a name. This function is called with increasingly large integers when a collision occurs, until a unique name is found. | Improve this Doc View Source UniqueNameMap(Func<T, String>, String) Creates a unique name map from a particular name-providing function and a prefix that is used to resolve collisions. Declaration public UniqueNameMap(Func<T, string> getName, string prefix) Parameters Type Name Description System.Func <T, System.String > getName A function that maps values to their preferred names. System.String prefix A string prefix that is used to generate a unique name when a collision occurs. Properties | Improve this Doc View Source Item[T] Gets the name that the given element is mapped to. Declaration public string this[T element] { get; } Parameters Type Name Description T element Property Value Type Description System.String Methods | Improve this Doc View Source Get(T) Gets the name that the given element is mapped to. Declaration public string Get(T element) Parameters Type Name Description T element Returns Type Description System.String"
  },
  "api/Flame.Collections.TreeSearchAlgorithm-2.html": {
    "href": "api/Flame.Collections.TreeSearchAlgorithm-2.html",
    "title": "Class TreeSearchAlgorithm<TInternalNode, TLeafNode> | Flame",
    "keywords": "Class TreeSearchAlgorithm<TInternalNode, TLeafNode> A base class for algorithms that search trees. Inheritance System.Object TreeSearchAlgorithm<TInternalNode, TLeafNode> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public abstract class TreeSearchAlgorithm<TInternalNode, TLeafNode> Type Parameters Name Description TInternalNode The type of an internal tree node. TLeafNode The type of a leaf node. Constructors | Improve this Doc View Source TreeSearchAlgorithm(Func<TInternalNode, Tuple<IEnumerable<TInternalNode>, IEnumerable<TLeafNode>>>) Creates a tree search algorithm. Declaration public TreeSearchAlgorithm(Func<TInternalNode, Tuple<IEnumerable<TInternalNode>, IEnumerable<TLeafNode>>> getChildren) Parameters Type Name Description System.Func <TInternalNode, System.Tuple < System.Collections.Generic.IEnumerable <TInternalNode>, System.Collections.Generic.IEnumerable <TLeafNode>>> getChildren A function that takes an internal node and produces its children. Properties | Improve this Doc View Source GetChildren Gets the children of an internal node as an (internal nodes, leaf nodes) pair. Declaration public Func<TInternalNode, Tuple<IEnumerable<TInternalNode>, IEnumerable<TLeafNode>>> GetChildren { get; } Property Value Type Description System.Func <TInternalNode, System.Tuple < System.Collections.Generic.IEnumerable <TInternalNode>, System.Collections.Generic.IEnumerable <TLeafNode>>> Methods | Improve this Doc View Source Search(TInternalNode) Searches through a tree rooted at a particular node. Declaration public abstract TLeafNode Search(TInternalNode root) Parameters Type Name Description TInternalNode root The root of the tree to search through. Returns Type Description TLeafNode A leaf node."
  },
  "api/Flame.Collections.Target.html": {
    "href": "api/Flame.Collections.Target.html",
    "title": "Namespace Flame.Collections.Target | Flame",
    "keywords": "Namespace Flame.Collections.Target Classes PeepholeOptimizer<TInstruction, TExternalRef> A target-specific peephole optimizer: an optimizer that walks through a linear sequence of target-specific instructions, recognizes patterns and rewrites small batches of instructions. Structs PeepholeRewriteRule<TInstruction> A rewrite rule as used by a peephole optimizer."
  },
  "api/Flame.Collections.Target.PeepholeRewriteRule-1.html": {
    "href": "api/Flame.Collections.Target.PeepholeRewriteRule-1.html",
    "title": "Struct PeepholeRewriteRule<TInstruction> | Flame",
    "keywords": "Struct PeepholeRewriteRule<TInstruction> A rewrite rule as used by a peephole optimizer. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Collections.Target Assembly : Flame.Compiler.dll Syntax public struct PeepholeRewriteRule<TInstruction> Type Parameters Name Description TInstruction The type of target-specific instruction to rewrite. Constructors | Improve this Doc View Source PeepholeRewriteRule(IReadOnlyList<Predicate<TInstruction>>, Func<IReadOnlyList<TInstruction>, IReadOnlyList<TInstruction>>) Creates a peephole rewrite rule. Declaration public PeepholeRewriteRule(IReadOnlyList<Predicate<TInstruction>> pattern, Func<IReadOnlyList<TInstruction>, IReadOnlyList<TInstruction>> rewrite) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < System.Predicate <TInstruction>> pattern The pattern to match on, specified as a list of predicates. The rewrite rule is considered to be applicable if and only if every pattern in the list is a match. System.Func < System.Collections.Generic.IReadOnlyList <TInstruction>, System.Collections.Generic.IReadOnlyList <TInstruction>> rewrite A function that rewrites instructions that match the pattern. | Improve this Doc View Source PeepholeRewriteRule(IReadOnlyList<Predicate<TInstruction>>, Predicate<IReadOnlyList<TInstruction>>, Func<IReadOnlyList<TInstruction>, IReadOnlyList<TInstruction>>) Creates a peephole rewrite rule. Declaration public PeepholeRewriteRule(IReadOnlyList<Predicate<TInstruction>> pattern, Predicate<IReadOnlyList<TInstruction>> macroPattern, Func<IReadOnlyList<TInstruction>, IReadOnlyList<TInstruction>> rewrite) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < System.Predicate <TInstruction>> pattern The pattern to match on, specified as a list of predicates. The rewrite rule only considered to be applicable if every pattern in the list is a match. list is a match. System.Predicate < System.Collections.Generic.IReadOnlyList <TInstruction>> macroPattern A \"macro-pattern\" that decides if a sequence of instructions can be rewritten by the rewrite rule, assuming that every instruction in the sequence already adheres to pattern . System.Func < System.Collections.Generic.IReadOnlyList <TInstruction>, System.Collections.Generic.IReadOnlyList <TInstruction>> rewrite A function that rewrites instructions that match the pattern. Properties | Improve this Doc View Source MacroPattern Gets a \"macro-pattern\" that decides if a sequence of instructions can be rewritten by the rewrite rule, assuming that every instruction in the sequence already adheres to the pattern. Declaration public Predicate<IReadOnlyList<TInstruction>> MacroPattern { get; } Property Value Type Description System.Predicate < System.Collections.Generic.IReadOnlyList <TInstruction>> A predicate on a sequence of instructions. | Improve this Doc View Source Pattern Gets the pattern to match on, specified as a list of predicates. The rewrite rule is only considered to be applicable if every pattern in the list is a match. Declaration public IReadOnlyList<Predicate<TInstruction>> Pattern { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Predicate <TInstruction>> A list of instruction-matching predicates. | Improve this Doc View Source Rewrite Rewrites a list of instructions matching the pattern specified by this rewrite rule. Declaration public Func<IReadOnlyList<TInstruction>, IReadOnlyList<TInstruction>> Rewrite { get; } Property Value Type Description System.Func < System.Collections.Generic.IReadOnlyList <TInstruction>, System.Collections.Generic.IReadOnlyList <TInstruction>> A function that rewrites instructions."
  },
  "api/Flame.Collections.ReadOnlySlice-1.html": {
    "href": "api/Flame.Collections.ReadOnlySlice-1.html",
    "title": "Struct ReadOnlySlice<T> | Flame",
    "keywords": "Struct ReadOnlySlice<T> A slice of a read-only list. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Collections Assembly : Flame.dll Syntax public struct ReadOnlySlice<T> Type Parameters Name Description T Constructors | Improve this Doc View Source ReadOnlySlice(IReadOnlyList<T>) Creates a read-only slice of a list that contains the entire list. Declaration public ReadOnlySlice(IReadOnlyList<T> list) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list The list to \"slice.\" | Improve this Doc View Source ReadOnlySlice(IReadOnlyList<T>, Int32, Int32) Creates a read-only slice of a list. Declaration public ReadOnlySlice(IReadOnlyList<T> list, int offset, int count) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list The list to slice. System.Int32 offset The offset in the list of the first element in the slice. System.Int32 count The number of elements in the slice. Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description T Methods | Improve this Doc View Source ToArray() Creates an array whose elements are the same as this slice's. Declaration public T[] ToArray() Returns Type Description T[] An array."
  },
  "api/Flame.Collections.ReadOnlyListExtensions.html": {
    "href": "api/Flame.Collections.ReadOnlyListExtensions.html",
    "title": "Class ReadOnlyListExtensions | Flame",
    "keywords": "Class ReadOnlyListExtensions Extensions that make manipulating read-only lists easier. Inheritance System.Object ReadOnlyListExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public static class ReadOnlyListExtensions Methods | Improve this Doc View Source EagerSelect<T, V>(IReadOnlyList<T>, Func<T, V>) Applies a function to each element in a read-only list and creates a new read-only view of a list containing the transformed elements. Declaration public static IReadOnlyList<V> EagerSelect<T, V>(this IReadOnlyList<T> list, Func<T, V> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list A list of input elements. System.Func <T, V> mapping A mapping function. Returns Type Description System.Collections.Generic.IReadOnlyList <V> A list of transformed elements. Type Parameters Name Description T V | Improve this Doc View Source EagerSelect<T, V, TArg2>(IReadOnlyList<T>, Func<T, TArg2, V>, TArg2) Applies a function to each element in a read-only list and creates a new read-only view of a list containing the transformed elements. Declaration public static IReadOnlyList<V> EagerSelect<T, V, TArg2>(this IReadOnlyList<T> list, Func<T, TArg2, V> mapping, TArg2 mappingArg2) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list A list of input elements. System.Func <T, TArg2, V> mapping A mapping function. TArg2 mappingArg2 A constant second argument to the mapping function. Returns Type Description System.Collections.Generic.IReadOnlyList <V> A list of transformed elements. Type Parameters Name Description T V TArg2 | Improve this Doc View Source Slice<T>(IReadOnlyList<T>, Int32) Takes a slice of a read-only list. Declaration public static IReadOnlyList<T> Slice<T>(this IReadOnlyList<T> list, int offset) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list The read-only list ot slice. System.Int32 offset The offset in the read-only list at which the slide begins. Returns Type Description System.Collections.Generic.IReadOnlyList <T> A slice of list Type Parameters Name Description T | Improve this Doc View Source Slice<T>(IReadOnlyList<T>, Int32, Int32) Takes a slice of a read-only list. Declaration public static IReadOnlyList<T> Slice<T>(this IReadOnlyList<T> list, int offset, int count) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list The read-only list ot slice. System.Int32 offset The offset in the read-only list at which the slide begins. System.Int32 count The number of elements in the slice. Returns Type Description System.Collections.Generic.IReadOnlyList <T> A slice of list Type Parameters Name Description T"
  },
  "api/Flame.Collections.DeferredInitializer.html": {
    "href": "api/Flame.Collections.DeferredInitializer.html",
    "title": "Struct DeferredInitializer | Flame",
    "keywords": "Struct DeferredInitializer A type of object that guarantees thread-safe, on-demand initialization. An initialization action is only executed once. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Flame.Collections Assembly : Flame.dll Syntax public struct DeferredInitializer Properties | Improve this Doc View Source HasInitialized Gets a boolean that determines whether the initializer has run or not. Declaration public bool HasInitialized { get; } Property Value Type Description System.Boolean true if the initializer has run; otherwise, false . Methods | Improve this Doc View Source Create(Action) Creates a deferred initializer that executes a particular initialization action once. Declaration public static DeferredInitializer Create(Action initializer) Parameters Type Name Description System.Action initializer The initializer to run once. Returns Type Description DeferredInitializer A deferred initializer. | Improve this Doc View Source Create<T>(T, Action<T>) Creates a deferred initializer that runs a particular initializer once on a particular value. Declaration public static DeferredInitializer Create<T>(T instance, Action<T> initializer) Parameters Type Name Description T instance A value to initialize. System.Action <T> initializer The initializer to run. Returns Type Description DeferredInitializer A deferred initializer. Type Parameters Name Description T | Improve this Doc View Source Initialize() Ensures that the initializer has run. This will run the initializer if it has not run before and do nothing otherwise. Declaration public bool Initialize() Returns Type Description System.Boolean true if the initializer was run just now; otherwise, false ."
  },
  "api/Flame.Collections.Cache-2.html": {
    "href": "api/Flame.Collections.Cache-2.html",
    "title": "Class Cache<TKey, TValue> | Flame",
    "keywords": "Class Cache<TKey, TValue> A base class for cache data structures. Inheritance System.Object Cache<TKey, TValue> LruCache<TKey, TValue> WeakCache<TKey, TValue> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Collections Assembly : Flame.dll Syntax public abstract class Cache<TKey, TValue> Type Parameters Name Description TKey TValue Methods | Improve this Doc View Source ContainsKey(TKey) Tests if this cache contains a particular key. Declaration public virtual bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to look for. Returns Type Description System.Boolean true if the key is in the cache; false otherwise. | Improve this Doc View Source Get(TKey, Func<TKey, TValue>) Queries the cache for the value with a particular key. If that value cannot be found, the key is recomputed. Declaration public virtual TValue Get(TKey key, Func<TKey, TValue> createValue) Parameters Type Name Description TKey key The key of the value to query. System.Func <TKey, TValue> createValue A callback that creates the value for the key, in case the key was not in the cache. Returns Type Description TValue The value for the key. | Improve this Doc View Source Insert(TKey, TValue) Inserts a new key-value pair into this cache, or overwrites the value for an existing key. Declaration public abstract void Insert(TKey key, TValue value) Parameters Type Name Description TKey key The cached value's key. TValue value The value to cache. | Improve this Doc View Source TryGet(TKey, out TValue) Tries to query the cache for the value with a particular key. Declaration public abstract bool TryGet(TKey key, out TValue value) Parameters Type Name Description TKey key The key of the value to query. TValue value A cached value, if any. Returns Type Description System.Boolean true if a value for the given key was found in the cache; otherwise, false ."
  },
  "api/Flame.Clr.html": {
    "href": "api/Flame.Clr.html",
    "title": "Namespace Flame.Clr | Flame",
    "keywords": "Namespace Flame.Clr Classes CecilAssemblyResolver An assembly resolver implementation that forwards assembly resolution requests to Mono.Cecil assembly resolver. ClrAccessorDefinition A Flame accessor that wraps an IL method definition. ClrArrayType An IL array type of a particular rank. ClrAssembly A Flame assembly that wraps a Cecil assembly definition. ClrFieldDefinition A CLR field definition. ClrGenericParameter A Flame type that wraps an IL generic parameter. ClrMethodDefinition A Flame method that wraps an IL method definition. ClrPropertyDefinition A Flame property that wraps an IL property definition. ClrSubtypingRules Subtyping rules for the CLR's type system. ClrTypeDefinition A Flame type that wraps an IL type definition. CorlibTypeEnvironment A type environment that extracts relevant BCL types from a single core library based on their names. NameConversion A collection of functions that help convert back and forth between Flame names and IL names. ReferenceResolver A data structure that resolves IL references as Flame members. TypeHelpers Defines helper methods for bridging the gap between IL's implicit reference types and Flame's explicit box pointers. Structs ClrPropertySignature A data structure that represents the parts of an IL property signature that are relevant to property reference resolution."
  },
  "api/Flame.Clr.TypeHelpers.html": {
    "href": "api/Flame.Clr.TypeHelpers.html",
    "title": "Class TypeHelpers | Flame",
    "keywords": "Class TypeHelpers Defines helper methods for bridging the gap between IL's implicit reference types and Flame's explicit box pointers. Inheritance System.Object TypeHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public static class TypeHelpers Methods | Improve this Doc View Source BoxIfReferenceType(IType) Takes a type, examines it and boxes it if it is a raw reference type. It is appropriate to call this method on the type of a value; IL values that happen to be reference types are implicitly boxed. This function hints that this implicit boxing is to be made explicit. Declaration public static IType BoxIfReferenceType(IType type) Parameters Type Name Description IType type The type to box if it happens to be a reference type. Returns Type Description IType A box-pointer type if type is a raw reference type; otherwise, type itself. | Improve this Doc View Source BoxReferenceTypes(IType) Replaces all raw reference types with boxed reference types. Declaration public static IType BoxReferenceTypes(IType type) Parameters Type Name Description IType type The type to completely box. Returns Type Description IType A boxed type. | Improve this Doc View Source GetExtendedParameters(MethodDefinition) Gets a method's extended parameter list, consists of the method's parameter list and an optional 'this' parameter as a prefix. Declaration public static IReadOnlyList<ParameterDefinition> GetExtendedParameters(MethodDefinition method) Parameters Type Name Description Mono.Cecil.MethodDefinition method The method to examine. Returns Type Description System.Collections.Generic.IReadOnlyList < Mono.Cecil.ParameterDefinition > A list of parameters. | Improve this Doc View Source ImportReference(ModuleDefinition, IField) Takes a Flame field and converts it to a Cecil field reference. For this to work, field cannot reference non-Cecil types or methods. Declaration public static FieldReference ImportReference(this ModuleDefinition module, IField field) Parameters Type Name Description Mono.Cecil.ModuleDefinition module IField field The field to convert to a field reference. Returns Type Description Mono.Cecil.FieldReference A field reference. | Improve this Doc View Source ImportReference(ModuleDefinition, IMethod) Takes a Flame method and converts it to a Cecil method reference. For this to work, field cannot reference non-Cecil types or methods. Declaration public static MethodReference ImportReference(this ModuleDefinition module, IMethod method) Parameters Type Name Description Mono.Cecil.ModuleDefinition module IMethod method Returns Type Description Mono.Cecil.MethodReference A method reference. | Improve this Doc View Source ImportReference(ModuleDefinition, IType) Takes a Flame type and converts it to a Cecil type reference. For this to work, type cannot reference non-Cecil types. Declaration public static TypeReference ImportReference(this ModuleDefinition module, IType type) Parameters Type Name Description Mono.Cecil.ModuleDefinition module IType type The type to convert to a type reference. Returns Type Description Mono.Cecil.TypeReference A type reference. | Improve this Doc View Source TryGetDelegateInvokeMethod(IType, out IMethod) Gets the 'invoke' method of a delegate type, provided that it is indeed a delegate type. Declaration public static bool TryGetDelegateInvokeMethod(IType delegateType, out IMethod invokeMethod) Parameters Type Name Description IType delegateType A type that may be a delegate type. IMethod invokeMethod The delegate type's 'invoke' method, provided that delegateType is a delegate type with an 'invoke' method Returns Type Description System.Boolean true if delegateType is indeed a delegate type with an 'invoke' method; otherwise, false . | Improve this Doc View Source UnboxIfPossible(IType) Takes a type, examines it and unboxes it if it is a box pointer type. Declaration public static IType UnboxIfPossible(IType type) Parameters Type Name Description IType type The type to unbox if it happens to be a box pointer type. Returns Type Description IType type 's pointee if it is a box pointer type; otherwise, type itself."
  },
  "api/Flame.Clr.Transforms.ExpandLinq.html": {
    "href": "api/Flame.Clr.Transforms.ExpandLinq.html",
    "title": "Class ExpandLinq | Flame",
    "keywords": "Class ExpandLinq An optimization that replaces select LINQ methods with tailored implementations. Inheritance System.Object Optimization IntraproceduralOptimization ExpandLinq Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Transforms Assembly : Flame.Clr.dll Syntax public sealed class ExpandLinq : IntraproceduralOptimization Constructors | Improve this Doc View Source ExpandLinq(IType, IType) Creates a LINQ-expanding optimization. Declaration public ExpandLinq(IType booleanType, IType inductionVariableType) Parameters Type Name Description IType booleanType The type of a Boolean value. IType inductionVariableType The type to use for integer induction variables. Properties | Improve this Doc View Source BooleanType Gets the type of a Boolean value. Declaration public IType BooleanType { get; } Property Value Type Description IType A type. | Improve this Doc View Source InductionVariableType Gets the type to use for newly introduced integer induction variables. Declaration public IType InductionVariableType { get; } Property Value Type Description IType A type. Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Clr.Transforms.CanonicalizeDelegates.html": {
    "href": "api/Flame.Clr.Transforms.CanonicalizeDelegates.html",
    "title": "Class CanonicalizeDelegates | Flame",
    "keywords": "Class CanonicalizeDelegates An intraprocedural transform that turns CIL idioms for delegates into specialized Flame IR instructions. Inheritance System.Object Optimization IntraproceduralOptimization CanonicalizeDelegates Inherited Members IntraproceduralOptimization.IsCheckpoint IntraproceduralOptimization.ApplyAsync(MethodBody, OptimizationState) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Transforms Assembly : Flame.Clr.dll Syntax public sealed class CanonicalizeDelegates : IntraproceduralOptimization Fields | Improve this Doc View Source Instance An instance of the delegate canonicalization transform. Declaration public static readonly CanonicalizeDelegates Instance Field Value Type Description CanonicalizeDelegates Methods | Improve this Doc View Source Apply(FlowGraph) Applies this intraprocedural optimization to a flow graph. Declaration public override FlowGraph Apply(FlowGraph graph) Parameters Type Name Description FlowGraph graph The flow graph to transform. Returns Type Description FlowGraph A transformed flow graph. Overrides IntraproceduralOptimization.Apply(FlowGraph)"
  },
  "api/Flame.Clr.Emit.html": {
    "href": "api/Flame.Clr.Emit.html",
    "title": "Namespace Flame.Clr.Emit | Flame",
    "keywords": "Namespace Flame.Clr.Emit Classes CilAddressOfRegisterInstruction An instruction that computes the address of a virtual register. CilCodegenInstruction An instruction type for CIL instruction selection. CilExceptionHandlerInstruction An instruction that sets up an exception handler. CilInstructionSelector An instruction selector for CIL codegen instructions. CilLoadRegisterInstruction An instruction that reads from a virtual register. CilMarkTargetInstruction An instruction that marks an instruction as a branch target. CilOpInstruction An actual CIL instruction that is emitted as-is. CilPeepholeOptimizer A peephole optimizer for CIL instructions. CilRegisterAllocator A register allocator for the CIL backend. CilStoreRegisterInstruction An instruction that writes to a virtual register. ClrMethodBodyEmitter Converts a Flame IR method body to a CLR method body. Structs CilCodegenRegister A register as produced by the CIL register allocator."
  },
  "api/Flame.Clr.Emit.ClrMethodBodyEmitter.html": {
    "href": "api/Flame.Clr.Emit.ClrMethodBodyEmitter.html",
    "title": "Class ClrMethodBodyEmitter | Flame",
    "keywords": "Class ClrMethodBodyEmitter Converts a Flame IR method body to a CLR method body. Inheritance System.Object ClrMethodBodyEmitter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class ClrMethodBodyEmitter Constructors | Improve this Doc View Source ClrMethodBodyEmitter(MethodDefinition, MethodBody, TypeEnvironment) Declaration public ClrMethodBodyEmitter(MethodDefinition method, MethodBody sourceBody, TypeEnvironment typeEnvironment) Parameters Type Name Description Mono.Cecil.MethodDefinition method MethodBody sourceBody TypeEnvironment typeEnvironment Properties | Improve this Doc View Source Method Gets the method definition that defines the method body being emitted. Declaration public MethodDefinition Method { get; } Property Value Type Description Mono.Cecil.MethodDefinition A method definition. | Improve this Doc View Source SourceBody Gets the source method body that is emitted as a CLR method body. Declaration public MethodBody SourceBody { get; } Property Value Type Description MethodBody The source method body. | Improve this Doc View Source TypeEnvironment Gets the type environment to use. Declaration public TypeEnvironment TypeEnvironment { get; } Property Value Type Description TypeEnvironment A type environment. Methods | Improve this Doc View Source Compile() Compiles the source body to a CIL method body. Declaration public MethodBody Compile() Returns Type Description Mono.Cecil.Cil.MethodBody A CIL method body."
  },
  "api/Flame.Clr.Emit.CilInstructionSelector.html": {
    "href": "api/Flame.Clr.Emit.CilInstructionSelector.html",
    "title": "Class CilInstructionSelector | Flame",
    "keywords": "Class CilInstructionSelector An instruction selector for CIL codegen instructions. Inheritance System.Object CilInstructionSelector Implements ILinearInstructionSelector < CilCodegenInstruction > IInstructionSelector < CilCodegenInstruction > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilInstructionSelector : ILinearInstructionSelector<CilCodegenInstruction>, IInstructionSelector<CilCodegenInstruction> Constructors | Improve this Doc View Source CilInstructionSelector(MethodDefinition, TypeEnvironment, IReadOnlyDictionary<ValueTag, VariableDefinition>) Creates a CIL instruction selector. Declaration public CilInstructionSelector(MethodDefinition method, TypeEnvironment typeEnvironment, IReadOnlyDictionary<ValueTag, VariableDefinition> allocaToVariableMapping) Parameters Type Name Description Mono.Cecil.MethodDefinition method The method definition to select instructions for. TypeEnvironment typeEnvironment The type environment to use when selecting instructions. System.Collections.Generic.IReadOnlyDictionary < ValueTag , Mono.Cecil.Cil.VariableDefinition > allocaToVariableMapping A mapping of alloca values to the local variables that are used as backing store for the alloca s. Properties | Improve this Doc View Source AllocaToVariableMapping Gets a mapping of alloca values to the local variables that are used as backing store for the alloca s. Declaration public IReadOnlyDictionary<ValueTag, VariableDefinition> AllocaToVariableMapping { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < ValueTag , Mono.Cecil.Cil.VariableDefinition > A mapping of value tags to variable definitions. | Improve this Doc View Source Method Gets the method definition to select instructions for. Declaration public MethodDefinition Method { get; } Property Value Type Description Mono.Cecil.MethodDefinition A method definition. | Improve this Doc View Source Temporaries Gets a list of all temporaries defined by this instruction selector. Declaration public IReadOnlyList<VariableDefinition> Temporaries { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Mono.Cecil.Cil.VariableDefinition > | Improve this Doc View Source TypeEnvironment Gets the type environment used by this CIL instruction selector. Declaration public TypeEnvironment TypeEnvironment { get; } Property Value Type Description TypeEnvironment The type environment. Methods | Improve this Doc View Source CreateBlockMarker(BasicBlock) Declaration public IReadOnlyList<CilCodegenInstruction> CreateBlockMarker(BasicBlock block) Parameters Type Name Description BasicBlock block Returns Type Description System.Collections.Generic.IReadOnlyList < CilCodegenInstruction > | Improve this Doc View Source CreateJumpTo(BasicBlockTag) Declaration public IReadOnlyList<CilCodegenInstruction> CreateJumpTo(BasicBlockTag target) Parameters Type Name Description BasicBlockTag target Returns Type Description System.Collections.Generic.IReadOnlyList < CilCodegenInstruction > | Improve this Doc View Source SelectInstructions(BlockFlow, BasicBlockTag, FlowGraph, BasicBlockTag, out BasicBlockTag) Declaration public SelectedInstructions<CilCodegenInstruction> SelectInstructions(BlockFlow flow, BasicBlockTag blockTag, FlowGraph graph, BasicBlockTag preferredFallthrough, out BasicBlockTag fallthrough) Parameters Type Name Description BlockFlow flow BasicBlockTag blockTag FlowGraph graph BasicBlockTag preferredFallthrough BasicBlockTag fallthrough Returns Type Description SelectedInstructions < CilCodegenInstruction > | Improve this Doc View Source SelectInstructions(NamedInstruction) Declaration public SelectedInstructions<CilCodegenInstruction> SelectInstructions(NamedInstruction instruction) Parameters Type Name Description NamedInstruction instruction Returns Type Description SelectedInstructions < CilCodegenInstruction > Implements ILinearInstructionSelector<TInstruction> IInstructionSelector<TInstruction>"
  },
  "api/Flame.Clr.Emit.CilExceptionHandlerInstruction.html": {
    "href": "api/Flame.Clr.Emit.CilExceptionHandlerInstruction.html",
    "title": "Class CilExceptionHandlerInstruction | Flame",
    "keywords": "Class CilExceptionHandlerInstruction An instruction that sets up an exception handler. Inheritance System.Object CilCodegenInstruction CilExceptionHandlerInstruction Inherited Members CilCodegenInstruction.Traversal System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Emit Assembly : Flame.Clr.dll Syntax public sealed class CilExceptionHandlerInstruction : CilCodegenInstruction Constructors | Improve this Doc View Source CilExceptionHandlerInstruction(ExceptionHandlerType, TypeReference, IReadOnlyList<CilCodegenInstruction>, IReadOnlyList<CilCodegenInstruction>) Creates an instruction that sets up an exception handler. Declaration public CilExceptionHandlerInstruction(ExceptionHandlerType type, TypeReference catchType, IReadOnlyList<CilCodegenInstruction> tryBlock, IReadOnlyList<CilCodegenInstruction> handlerBlock) Parameters Type Name Description Mono.Cecil.Cil.ExceptionHandlerType type The type of exception handler to create. Mono.Cecil.TypeReference catchType The type of exception that can be caught by the exception handler. Only applies to 'catch' exception handlers. System.Collections.Generic.IReadOnlyList < CilCodegenInstruction > tryBlock The contents of the 'try' block of the exception handler. System.Collections.Generic.IReadOnlyList < CilCodegenInstruction > handlerBlock The contents of the actual exception handler block. Properties | Improve this Doc View Source CatchType Gets the type of exception that can be caught by this exception handler. This property only applies to 'catch' exception handlers. Declaration public TypeReference CatchType { get; } Property Value Type Description Mono.Cecil.TypeReference The type of caught exceptions. | Improve this Doc View Source Children Gets this CIL codegen instruction's immediate children. Declaration public override IEnumerable<CilCodegenInstruction> Children { get; } Property Value Type Description System.Collections.Generic.IEnumerable < CilCodegenInstruction > A sequence of child instructions. Overrides CilCodegenInstruction.Children | Improve this Doc View Source HandlerBlock Gets the exception handler implementation that is invoked if and when the 'try' block throws an exception. Declaration public IReadOnlyList<CilCodegenInstruction> HandlerBlock { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < CilCodegenInstruction > The exception handler block itself. | Improve this Doc View Source TryBlock Gets the 'try' block of the exception handler, as a list of instructions. Declaration public IReadOnlyList<CilCodegenInstruction> TryBlock { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < CilCodegenInstruction > The 'try' block of the exception handler. | Improve this Doc View Source Type Gets the type of exception handler represented by this instruction. Declaration public ExceptionHandlerType Type { get; } Property Value Type Description Mono.Cecil.Cil.ExceptionHandlerType An exception handler type."
  },
  "api/Flame.Clr.ClrPropertyDefinition.html": {
    "href": "api/Flame.Clr.ClrPropertyDefinition.html",
    "title": "Class ClrPropertyDefinition | Flame",
    "keywords": "Class ClrPropertyDefinition A Flame property that wraps an IL property definition. Inheritance System.Object ClrPropertyDefinition Implements IProperty ITypeMember IMember Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrPropertyDefinition : IProperty, ITypeMember, IMember Constructors | Improve this Doc View Source ClrPropertyDefinition(PropertyDefinition, ClrTypeDefinition) Creates a wrapper around an IL property definition. Declaration public ClrPropertyDefinition(PropertyDefinition definition, ClrTypeDefinition parentType) Parameters Type Name Description Mono.Cecil.PropertyDefinition definition The definition to wrap in a Flame property. ClrTypeDefinition parentType The definition's declaring type. Properties | Improve this Doc View Source Accessors Gets a list of all accessors defined by this property. Declaration public IReadOnlyList<ClrAccessorDefinition> Accessors { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ClrAccessorDefinition > All accessors defined by this property. | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source Definition Gets the IL property definition wrapped by this Flame property. Declaration public PropertyDefinition Definition { get; } Property Value Type Description Mono.Cecil.PropertyDefinition An IL property definition. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source IndexerParameters Gets this property's indexer parameters, i.e., an additional list of parameters that each accessor takes. Declaration public IReadOnlyList<Parameter> IndexerParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > The indexer parameters. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source ParentType Gets the type that defines this property. Declaration public ClrTypeDefinition ParentType { get; } Property Value Type Description ClrTypeDefinition The type that defines this property. | Improve this Doc View Source PropertyType Gets this property's type. Declaration public IType PropertyType { get; } Property Value Type Description IType The property's type. Explicit Interface Implementations | Improve this Doc View Source IProperty.Accessors Gets this property's accessors. Each property can have at most one accessor any given kind. Declaration IReadOnlyList<IAccessor> IProperty.Accessors { get; } Returns Type Description System.Collections.Generic.IReadOnlyList < IAccessor > A read-only list of accessors. | Improve this Doc View Source ITypeMember.ParentType Gets the type that defines this member, if any. Declaration IType ITypeMember.ParentType { get; } Returns Type Description IType The parent type. Implements IProperty ITypeMember IMember"
  },
  "api/Flame.Clr.ClrMethodDefinition.html": {
    "href": "api/Flame.Clr.ClrMethodDefinition.html",
    "title": "Class ClrMethodDefinition | Flame",
    "keywords": "Class ClrMethodDefinition A Flame method that wraps an IL method definition. Inheritance System.Object ClrMethodDefinition ClrAccessorDefinition Implements IBodyMethod IMethod ITypeMember IGenericMember IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public class ClrMethodDefinition : IBodyMethod, IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source ClrMethodDefinition(MethodDefinition, ClrTypeDefinition) Creates a wrapper around an IL method definition. Declaration public ClrMethodDefinition(MethodDefinition definition, ClrTypeDefinition parentType) Parameters Type Name Description Mono.Cecil.MethodDefinition definition The definition to wrap in a Flame method. ClrTypeDefinition parentType The definition's declaring type. Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseMethods Gets the method's base methods. Declaration public IReadOnlyList<IMethod> BaseMethods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > | Improve this Doc View Source Body Gets the method body for this method. Declaration public MethodBody Body { get; } Property Value Type Description MethodBody A method body. | Improve this Doc View Source Definition Gets the IL method definition wrapped by this Flame method definition. Declaration public MethodDefinition Definition { get; } Property Value Type Description Mono.Cecil.MethodDefinition An IL method definition. | Improve this Doc View Source FullName Gets the member's full name. Declaration public QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source IsConstructor Indicates if this method is a constructor. Declaration public bool IsConstructor { get; } Property Value Type Description System.Boolean true if this method is a constructor; otherwise, false . | Improve this Doc View Source IsStatic Tells if this is a static method. Non-static methods take a non-null pointer to their parent type as an implicit first arguments. Static methods do not. Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean true if this method is a static method; otherwise, false . | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source Parameters Gets the method's parameters. Declaration public IReadOnlyList<Parameter> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Parameter > | Improve this Doc View Source ParentType Gets the type that defines this method. Declaration public ClrTypeDefinition ParentType { get; } Property Value Type Description ClrTypeDefinition The type that defines this method. | Improve this Doc View Source ReturnParameter Gets the method's return parameter. Declaration public Parameter ReturnParameter { get; } Property Value Type Description Parameter Methods | Improve this Doc View Source ToString() Returns a System.String that represents the current ClrMethodDefinition . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current ClrMethodDefinition . Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source ITypeMember.ParentType Gets the type that defines this member, if any. Declaration IType ITypeMember.ParentType { get; } Returns Type Description IType The parent type. Implements IBodyMethod IMethod ITypeMember IGenericMember IMember"
  },
  "api/Flame.Clr.ClrAccessorDefinition.html": {
    "href": "api/Flame.Clr.ClrAccessorDefinition.html",
    "title": "Class ClrAccessorDefinition | Flame",
    "keywords": "Class ClrAccessorDefinition A Flame accessor that wraps an IL method definition. Inheritance System.Object ClrMethodDefinition ClrAccessorDefinition Implements IBodyMethod IAccessor IMethod ITypeMember IGenericMember IMember Inherited Members ClrMethodDefinition.Definition ClrMethodDefinition.ParentType ClrMethodDefinition.IsConstructor ClrMethodDefinition.IsStatic ClrMethodDefinition.Name ClrMethodDefinition.FullName ClrMethodDefinition.GenericParameters ClrMethodDefinition.ReturnParameter ClrMethodDefinition.Parameters ClrMethodDefinition.BaseMethods ClrMethodDefinition.Attributes ClrMethodDefinition.ITypeMember.ParentType ClrMethodDefinition.Body ClrMethodDefinition.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr Assembly : Flame.Clr.dll Syntax public sealed class ClrAccessorDefinition : ClrMethodDefinition, IBodyMethod, IAccessor, IMethod, ITypeMember, IGenericMember, IMember Constructors | Improve this Doc View Source ClrAccessorDefinition(MethodDefinition, AccessorKind, ClrPropertyDefinition) Creates a wrapper around an IL accessor definition. Declaration public ClrAccessorDefinition(MethodDefinition definition, AccessorKind kind, ClrPropertyDefinition parentProperty) Parameters Type Name Description Mono.Cecil.MethodDefinition definition The method definition to wrap in a Flame accessor. AccessorKind kind The kind of definition described by the accessor. ClrPropertyDefinition parentProperty The definition's declaring property. Properties | Improve this Doc View Source Kind Gets this accessor's kind. Declaration public AccessorKind Kind { get; } Property Value Type Description AccessorKind The accessor's kind. | Improve this Doc View Source ParentProperty Gets this accessor's parent property: the property that defines it. Declaration public IProperty ParentProperty { get; } Property Value Type Description IProperty The accessor's parent property. Implements IBodyMethod IAccessor IMethod ITypeMember IGenericMember IMember"
  },
  "api/Flame.Clr.Analysis.html": {
    "href": "api/Flame.Clr.Analysis.html",
    "title": "Namespace Flame.Clr.Analysis | Flame",
    "keywords": "Namespace Flame.Clr.Analysis Classes CilCatchHandler A CIL exception handler that has typical 'catch' behavior: it is triggered when an exception is thrown and does not have special interactions with 'leave' instructions. CilExceptionHandler Describes a CIL exception handler. CilFinallyHandler A CIL exception handler that has typical 'finally' behavior: it intercepts 'leave' branches. CilPrototypeExceptionSpecs Exception specifications for prototypes that rely on CIL's semantics. ClrInstructionSimplifier Simplifies CIL instructions by rewriting them. ClrMethodBodyAnalyzer A data structure that analyzes CIL instructions and translates them to Flame IR."
  },
  "api/Flame.Clr.Analysis.CilExceptionHandler.html": {
    "href": "api/Flame.Clr.Analysis.CilExceptionHandler.html",
    "title": "Class CilExceptionHandler | Flame",
    "keywords": "Class CilExceptionHandler Describes a CIL exception handler. Inheritance System.Object CilExceptionHandler CilCatchHandler CilFinallyHandler Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Analysis Assembly : Flame.Clr.dll Syntax public abstract class CilExceptionHandler Properties | Improve this Doc View Source HandledExceptionTypes Gets the list of types supported by this exception handler. This property is null if the handler catches all exceptions. Declaration public abstract IReadOnlyList<IType> HandledExceptionTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A list of exception types or null . | Improve this Doc View Source IsCatchAll Tells if this exception handler will catch any exception. Declaration public bool IsCatchAll { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LandingPad Gets the landing pad basic block to which flow is redirected when an exception is thrown. Declaration public abstract BasicBlockTag LandingPad { get; } Property Value Type Description BasicBlockTag A basic block tag."
  },
  "api/Flame.Clr.Analysis.CilCatchHandler.html": {
    "href": "api/Flame.Clr.Analysis.CilCatchHandler.html",
    "title": "Class CilCatchHandler | Flame",
    "keywords": "Class CilCatchHandler A CIL exception handler that has typical 'catch' behavior: it is triggered when an exception is thrown and does not have special interactions with 'leave' instructions. Inheritance System.Object CilExceptionHandler CilCatchHandler Inherited Members CilExceptionHandler.IsCatchAll System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.Clr.Analysis Assembly : Flame.Clr.dll Syntax public sealed class CilCatchHandler : CilExceptionHandler Constructors | Improve this Doc View Source CilCatchHandler(BasicBlockTag) Creates an exception handler that will catch any exception. Declaration public CilCatchHandler(BasicBlockTag landingPad) Parameters Type Name Description BasicBlockTag landingPad The landing pad to redirect flow to when an exception gets thrown. | Improve this Doc View Source CilCatchHandler(BasicBlockTag, IReadOnlyList<IType>) Creates an exception handler that will catch only exceptions that inherit from a list of types. Declaration public CilCatchHandler(BasicBlockTag landingPad, IReadOnlyList<IType> handledExceptionTypes) Parameters Type Name Description BasicBlockTag landingPad The landing pad to redirect flow to when an exception gets thrown. System.Collections.Generic.IReadOnlyList < IType > handledExceptionTypes The list of exception types that are handled. Subtypes of these types are also handled. Properties | Improve this Doc View Source HandledExceptionTypes Gets the list of types supported by this exception handler. This property is null if the handler catches all exceptions. Declaration public override IReadOnlyList<IType> HandledExceptionTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A list of exception types or null . Overrides CilExceptionHandler.HandledExceptionTypes | Improve this Doc View Source LandingPad Gets the landing pad basic block to which flow is redirected when an exception is thrown. Declaration public override BasicBlockTag LandingPad { get; } Property Value Type Description BasicBlockTag A basic block tag. Overrides CilExceptionHandler.LandingPad"
  },
  "api/Flame.AccessorKind.html": {
    "href": "api/Flame.AccessorKind.html",
    "title": "Class AccessorKind | Flame",
    "keywords": "Class AccessorKind Constrains the signature of a property accessor. Inheritance System.Object AccessorKind Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public abstract class AccessorKind Fields | Improve this Doc View Source Get The accessor kind for 'get' accessors. Declaration public static readonly AccessorKind Get Field Value Type Description AccessorKind | Improve this Doc View Source Other The accessor kind for 'other' accessors. Declaration public static readonly AccessorKind Other Field Value Type Description AccessorKind | Improve this Doc View Source Set The accessor kind for 'set' accessors. Declaration public static readonly AccessorKind Set Field Value Type Description AccessorKind Methods | Improve this Doc View Source IsLegalAccessor(IAccessor) Checks if an accessor matches the constraints imposed by this accessor kind. Declaration public abstract bool IsLegalAccessor(IAccessor accessor) Parameters Type Name Description IAccessor accessor The accessor to examine. Returns Type Description System.Boolean true if the accessor matches the constraints imposed by this accessor kind; otherwise, false ."
  },
  "api/Flame.html": {
    "href": "api/Flame.html",
    "title": "Namespace Flame | Flame",
    "keywords": "Namespace Flame Classes AccessorKind Constrains the signature of a property accessor. AssemblyIdentity A reference to a particular assembly. AttributeMapBuilder Defines a mutable attribute map. Constant A constant value. ContractHelpers A collection of functions that help enforce contracts. ExactExceptionSpecification An exception specification that can throw an exception of exactly one type. ExceptionSpecification Specifies the exception throwing behavior of a method or instruction. GenericName Defines a generic name; a simple name that is instantiated by a number of generic type arguments. PointerName Defines a poiner name: a qualified name that is turned into a pointer. SimpleName Defines a simple name: a name and the number of type parameters it takes. TypeExtensions A collection of extension and helper methods that simplify working with types. UnionExceptionSpecification An exception specification that is the union of a sequence of other exception specifications: the union can throw an exception iff said exception is throwable by any of the operands. UnqualifiedName A base class for unqualified names: names that can be assigned to members, but that are not qualified by their enclosing members. Structs AttributeMap Defines a container that facilitates quick type-based attribute lookups. Parameter Describes a parameter to a method. QualifiedName A data structure that represents a qualified name. TypeParent Gets a type's parent, that is, the entity that defines the type. A type parent can be either an assembly, another type, a method (for generic parameters only), or nothing at all. Interfaces IAccessor Describes an accessor. IAssembly Defines a common interface for assemblies: collections of types. IAttribute Defines common functionality for member attributes. IField Describes a field: a type member that stores some data. IGenericMember Defines a generic member: a member that has a list of generic parameters. IGenericParameter Defines a generic parameter. IMember The root interface for members: constructs that have a name, a full name and a set of attributes. IMethod Defines a common interface for methods. IProperty Describes a property: a collection of accessors that manipulate a (virtual) value. IType Defines a type of value. ITypeMember Defines a common interface for members that may be defined inside types."
  },
  "api/Flame.UnqualifiedName.html": {
    "href": "api/Flame.UnqualifiedName.html",
    "title": "Class UnqualifiedName | Flame",
    "keywords": "Class UnqualifiedName A base class for unqualified names: names that can be assigned to members, but that are not qualified by their enclosing members. Inheritance System.Object UnqualifiedName GenericName PointerName SimpleName Implements System.IEquatable < UnqualifiedName > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public abstract class UnqualifiedName : IEquatable<UnqualifiedName> Methods | Improve this Doc View Source Equals(UnqualifiedName) Checks if this unqualified name equals another unqualified name. Declaration public abstract bool Equals(UnqualifiedName other) Parameters Type Name Description UnqualifiedName other An unqualified name to compare this unqualified name to. Returns Type Description System.Boolean true if this unqualified name equals the object; otherwise, false . | Improve this Doc View Source Equals(Object) Checks if this unqualified name equals an object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An object to compare this unqualified name to. Returns Type Description System.Boolean true if this unqualified name equals the object; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code for this unqualified name. Declaration public abstract override int GetHashCode() Returns Type Description System.Int32 A hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source Qualify() Creates a qualified name for this unqualified name. Declaration public QualifiedName Qualify() Returns Type Description QualifiedName | Improve this Doc View Source Qualify(QualifiedName) Qualifies this unqualified name with the given qualifier. Declaration public QualifiedName Qualify(QualifiedName qualifier) Parameters Type Name Description QualifiedName qualifier Returns Type Description QualifiedName | Improve this Doc View Source Qualify(UnqualifiedName) Qualifies this unqualified name with the given qualifier. Declaration public QualifiedName Qualify(UnqualifiedName qualifier) Parameters Type Name Description UnqualifiedName qualifier Returns Type Description QualifiedName | Improve this Doc View Source Qualify(String) Qualifies this unqualified name with the given simple name. Declaration public QualifiedName Qualify(string qualifier) Parameters Type Name Description System.String qualifier Returns Type Description QualifiedName | Improve this Doc View Source ToString() Gets a string representation for this unqualified name. Declaration public abstract override string ToString() Returns Type Description System.String A string representation. Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Flame.UnionExceptionSpecification.html": {
    "href": "api/Flame.UnionExceptionSpecification.html",
    "title": "Class UnionExceptionSpecification | Flame",
    "keywords": "Class UnionExceptionSpecification An exception specification that is the union of a sequence of other exception specifications: the union can throw an exception iff said exception is throwable by any of the operands. Inheritance System.Object ExceptionSpecification UnionExceptionSpecification Inherited Members ExceptionSpecification.NoThrow ExceptionSpecification.ThrowAny ExceptionSpecification.Exactly(IType) ExceptionSpecification.Union(ExceptionSpecification[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame Assembly : Flame.dll Syntax public sealed class UnionExceptionSpecification : ExceptionSpecification Properties | Improve this Doc View Source CanThrowSomething Tells if this exception specification allows for any exceptions at all to be thrown. Declaration public override bool CanThrowSomething { get; } Property Value Type Description System.Boolean true if this exception specification allows for at least one type of exception to be thrown; otherwise, false . Overrides ExceptionSpecification.CanThrowSomething | Improve this Doc View Source Operands Gets the list of exception specifications to which the union operator is applied. Declaration public IReadOnlyList<ExceptionSpecification> Operands { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ExceptionSpecification > A list of exception specifications. Methods | Improve this Doc View Source CanThrow(IType) Tells if this exception specification allows for an exception of a particular type or a derived type to be thrown. Declaration public override bool CanThrow(IType exceptionType) Parameters Type Name Description IType exceptionType The type of exception to examine. Returns Type Description System.Boolean true if an exception of type exceptionType or a derived type can be thrown; otherwise, false . Overrides ExceptionSpecification.CanThrow(IType)"
  },
  "api/Flame.TypeSystem.html": {
    "href": "api/Flame.TypeSystem.html",
    "title": "Namespace Flame.TypeSystem | Flame",
    "keywords": "Namespace Flame.TypeSystem Classes AssemblyResolver Resolves assemblies based on assembly identities. ContainerType A base type for types that refer to some number of homogeneously-typed elements. DescribedAccessor A property accessor that can be constructed incrementally in an imperative fashion. DescribedAssembly An assembly that can be constructed in piece by piece, an imperative fashion. DescribedBodyAccessor A property accessor that can be constructed incrementally in an imperative fashion and defines a method body. DescribedBodyMethod A method that can be constructed incrementally in an imperative fashion and defines a method body. DescribedField A field that can be constructed incrementally in an imperative fashion. DescribedGenericMember A generic member that can be constructed incrementally in an imperative fashion. DescribedGenericParameter A generic parameter that can be constructed piece by piece in an imperative fashion. DescribedMember A member that can be constructed incrementally in an imperative fashion. DescribedMethod A method that can be constructed incrementally in an imperative fashion. DescribedType A type that can be constructed incrementally in an imperative fashion. DirectMethodSpecialization A generic method specialization obtained by passing type arguments directly to a generic declaration. DirectTypeSpecialization A generic type that is instantiated with a list of type arguments. ErrorType A special type that signals that an error occurred and that the corresponding error has been reported already. Further errors that arise because an error type is encountered should be suppressed. For example, it is wrong to report an error when a member of an error type is accessed. Reporting the error would confuse the user---the true error here is that the type of a value cannot be recovered, not that the error type does not have any members. FlagAttribute A collection of constants and methods that relate to simple flag attributes. IndirectAccessorSpecialization An accessor specialization that is obtained by observing an accessor of an indirect property specialization. IndirectFieldSpecialization A specialization of a field belonging to a recursively generic type. IndirectGenericParameterSpecialization A generic specialization of a generic parameter that is obtained by specializing the declaring member of a generic parameter definition. IndirectMethodSpecialization A specialization of a method that is obtained by specializing the method's parent type. IndirectPropertySpecialization A specialization of a property that is obtained by observing a property of a generic type specialization, direct or otherwise. IndirectTypeSpecialization A type that is defined in an instantiated generic type. IntegerSpecAttribute A collection of constants and methods that relate to integer specification attributes. IntrinsicAttribute Describes a named attribute that is well-understood by the compiler. MemberMapping A (type mapping, method mapping, field mapping) triple. MethodSpecialization A base type for method specializations. MutableTypeEnvironment A type environment that wraps an inner type environment that can be changed at will. The main use-case for this kind of environment is a situation where the type environment for an assembly is defined by that assembly itself but the assembly does not allow for the type environment to change. NullAssemblyResolver An assembly resolver implementation that never successfully resolves an assembly. Useful for testing and building composite assembly resolvers. PointerKind Identifies a particular kind of pointer. PointerType A type for pointers or references to values. SubtypingRules Defines a subtyping relation on types. TypeEnvironment A base class for classes that augment Flame's type system with types specific to a particular environment TypeFuncVisitor A type visitor that uses a type-to-type mapping function under the hood. TypeMappingVisitor A type visitor that replaces types according to a dictionary. TypeResolver Indexes assemblies and resolves types based on their names. TypeResolverNamespace An artifical namespace introduced by a type resolver. TypeSpecialization A base type for generic type specializations. TypeVisitor A type of object that recursively applies a mapping to types. VirtualMethodSetExtensions Defines an extension for finding the virtual method set of a type: the set of all virtual methods defined in the type itself or any of its (recursive) base types that are not (yet) implemented in the type. Structs ReadOnlyTypeResolver A read-only view of a type resolver. Enums ImpreciseBoolean A three-valued \"Boolean\" type that allows Boolean property analyses to express uncertainty."
  },
  "api/Flame.TypeSystem.VirtualMethodSetExtensions.html": {
    "href": "api/Flame.TypeSystem.VirtualMethodSetExtensions.html",
    "title": "Class VirtualMethodSetExtensions | Flame",
    "keywords": "Class VirtualMethodSetExtensions Defines an extension for finding the virtual method set of a type: the set of all virtual methods defined in the type itself or any of its (recursive) base types that are not (yet) implemented in the type. Inheritance System.Object VirtualMethodSetExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public static class VirtualMethodSetExtensions Methods | Improve this Doc View Source GetMethodsAndAccessors(IType) Gets all methods and accessors defined by a particular type. Declaration public static IEnumerable<IMethod> GetMethodsAndAccessors(this IType type) Parameters Type Name Description IType type The type to query for methods and accessors. Returns Type Description System.Collections.Generic.IEnumerable < IMethod > A list of methods and accessors. | Improve this Doc View Source GetVirtualMethodSet(IType) Gets the virtual method set of a particular type: the set of all virtual methods defined in the type itself or any of its (recursive) base types that are not (yet) implemented in the type. Declaration public static IEnumerable<IMethod> GetVirtualMethodSet(this IType type) Parameters Type Name Description IType type The type to query. Returns Type Description System.Collections.Generic.IEnumerable < IMethod > A set of virtual methods."
  },
  "api/Flame.TypeSystem.TypeVisitor.html": {
    "href": "api/Flame.TypeSystem.TypeVisitor.html",
    "title": "Class TypeVisitor | Flame",
    "keywords": "Class TypeVisitor A type of object that recursively applies a mapping to types. Inheritance System.Object TypeVisitor TypeFuncVisitor TypeMappingVisitor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class TypeVisitor Methods | Improve this Doc View Source IsOfInterest(IType) Tells if a type is of interest to this visitor. Visitors always specify custom behavior for interesting types, whereas uninteresting composite types are usually treated the same: the visitor simply visits the types they are composed of. Declaration protected abstract bool IsOfInterest(IType type) Parameters Type Name Description IType type A type. Returns Type Description System.Boolean true if the type is interesting; otherwise, false . | Improve this Doc View Source Visit(IField) Visits a particular field's recursive generic arguments and creates a new specialization based on the results. Declaration public IField Visit(IField field) Parameters Type Name Description IField field The field to visit. Returns Type Description IField A visited field. | Improve this Doc View Source Visit(IMethod) Visits a particular method's recursive generic arguments and creates a new specialization based on the results. Declaration public IMethod Visit(IMethod method) Parameters Type Name Description IMethod method The method to visit. Returns Type Description IMethod A visited method. | Improve this Doc View Source Visit(IType) Visits a type. Declaration public IType Visit(IType type) Parameters Type Name Description IType type A type to visit. Returns Type Description IType A visited type. | Improve this Doc View Source Visit(Parameter) Visits a parameter's type and uses the result to create a new parameter. Declaration public Parameter Visit(Parameter parameter) Parameters Type Name Description Parameter parameter The parameter to visit. Returns Type Description Parameter A visited parameter. | Improve this Doc View Source VisitAll(IReadOnlyList<IMethod>) Visits all methods in a list of methods. Declaration public IReadOnlyList<IMethod> VisitAll(IReadOnlyList<IMethod> methods) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < IMethod > methods A list of methods to visit. Returns Type Description System.Collections.Generic.IReadOnlyList < IMethod > A list of visited methods. | Improve this Doc View Source VisitAll(IReadOnlyList<IType>) Visits all types in a list of types. Declaration public IReadOnlyList<IType> VisitAll(IReadOnlyList<IType> types) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < IType > types A list of types to visit. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of visited types. | Improve this Doc View Source VisitAll(IReadOnlyList<Parameter>) Visits all parameters in a list of parameters. Declaration public IReadOnlyList<Parameter> VisitAll(IReadOnlyList<Parameter> parameters) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Parameter > parameters A list of parameters to visit. Returns Type Description System.Collections.Generic.IReadOnlyList < Parameter > A list of visited parameters. | Improve this Doc View Source VisitInteresting(IType) Visits a type that has been marked as interesting. Declaration protected abstract IType VisitInteresting(IType type) Parameters Type Name Description IType type A type to visit. Returns Type Description IType A visited type. | Improve this Doc View Source VisitUninteresting(IType) Visits a type that has not been marked as interesting. Declaration protected virtual IType VisitUninteresting(IType type) Parameters Type Name Description IType type A type to visit. Returns Type Description IType A visited type."
  },
  "api/Flame.TypeSystem.TypeSpecialization.html": {
    "href": "api/Flame.TypeSystem.TypeSpecialization.html",
    "title": "Class TypeSpecialization | Flame",
    "keywords": "Class TypeSpecialization A base type for generic type specializations. Inheritance System.Object TypeSpecialization DirectTypeSpecialization IndirectGenericParameterSpecialization IndirectTypeSpecialization Implements IType IGenericMember IMember Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class TypeSpecialization : IType, IGenericMember, IMember Properties | Improve this Doc View Source Attributes Gets the member's attributes. Declaration public AttributeMap Attributes { get; } Property Value Type Description AttributeMap | Improve this Doc View Source BaseTypes Gets this type's base types. Base types can be either classes or interfaces. Declaration public IReadOnlyList<IType> BaseTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of base types. | Improve this Doc View Source Declaration Gets the generic type declaration this type instantiates. Declaration public IType Declaration { get; } Property Value Type Description IType The generic type declaration. | Improve this Doc View Source Fields Gets this type's fields. Declaration public IReadOnlyList<IField> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IField > A read-only list of fields. | Improve this Doc View Source FullName Gets the member's full name. Declaration public abstract QualifiedName FullName { get; } Property Value Type Description QualifiedName | Improve this Doc View Source GenericParameters Gets the list of generic parameters for this generic member. Declaration public abstract IReadOnlyList<IGenericParameter> GenericParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IGenericParameter > The generic parameters. | Improve this Doc View Source Methods Gets this type's methods. Declaration public IReadOnlyList<IMethod> Methods { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IMethod > A read-only list of methods. | Improve this Doc View Source Name Gets the member's unqualified name. Declaration public abstract UnqualifiedName Name { get; } Property Value Type Description UnqualifiedName | Improve this Doc View Source NestedTypes Gets the nested types defined by this type. Declaration public IReadOnlyList<IType> NestedTypes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IType > A read-only list of nested types. | Improve this Doc View Source Parent Gets the parent entity that defines and owns this type. Declaration public abstract TypeParent Parent { get; } Property Value Type Description TypeParent The parent entity. | Improve this Doc View Source Properties Gets this type's properties. Declaration public IReadOnlyList<IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProperty > A read-only list of properties. Methods | Improve this Doc View Source Initialize() Initializes a generic type. Declaration protected void Initialize() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IType IGenericMember IMember Extension Methods TypeExtensions.IsPointerType(IType) TypeExtensions.IsPointerType(IType, PointerKind) TypeExtensions.MakePointerType(IType, PointerKind) TypeExtensions.MakeGenericType(IType, IReadOnlyList<IType>) TypeExtensions.MakeGenericType(IType, IType[]) TypeExtensions.IsRecursiveGenericInstance(IType) TypeExtensions.GetRecursiveGenericDeclaration(IType) TypeExtensions.MakeRecursiveGenericType(IType, IReadOnlyList<IType>) TypeExtensions.GetRecursiveGenericArguments(IType) TypeExtensions.GetGenericArguments(IType) TypeExtensions.GetRecursiveGenericParameters(IType) TypeExtensions.GetRecursiveGenericArgumentMapping(IType) FlagAttribute.IsReferenceType(IType) FlagAttribute.IsAbstract(IType) FlagAttribute.IsVirtual(IType) IntegerSpecAttribute.GetIntegerSpecOrNull(IType) IntegerSpecAttribute.IsIntegerType(IType) IntegerSpecAttribute.IsSignedIntegerType(IType) IntegerSpecAttribute.IsUnsignedIntegerType(IType) VirtualMethodSetExtensions.GetVirtualMethodSet(IType) VirtualMethodSetExtensions.GetMethodsAndAccessors(IType)"
  },
  "api/Flame.TypeSystem.TypeResolverNamespace.html": {
    "href": "api/Flame.TypeSystem.TypeResolverNamespace.html",
    "title": "Class TypeResolverNamespace | Flame",
    "keywords": "Class TypeResolverNamespace An artifical namespace introduced by a type resolver. Inheritance System.Object TypeResolverNamespace Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class TypeResolverNamespace Properties | Improve this Doc View Source Namespaces Gets a mapping of names to child namespaces defined in this namespace. Declaration public IReadOnlyDictionary<UnqualifiedName, TypeResolverNamespace> Namespaces { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < UnqualifiedName , TypeResolverNamespace > | Improve this Doc View Source Types Gets the set of all types defined by this resolver. Declaration public IEnumerable<IType> Types { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IType > Methods | Improve this Doc View Source ResolveTypes(UnqualifiedName) Gets all types in this namespace with a particular name. Declaration public IReadOnlyList<IType> ResolveTypes(UnqualifiedName name) Parameters Type Name Description UnqualifiedName name The name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of all types with that name. | Improve this Doc View Source ResolveTypes(String) Gets all types in this namespace with a particular name. Declaration public IReadOnlyList<IType> ResolveTypes(string name) Parameters Type Name Description System.String name The name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of all types with that name. This includes all simply named types with name name , regardless of the number of type parameters in the type's name. | Improve this Doc View Source ToImpreciseName(UnqualifiedName) Takes an unqualified name and turns it into an imprecise name by dropping the type parameter count of simple names and converting all other kinds of names into strings. Declaration public static string ToImpreciseName(UnqualifiedName name) Parameters Type Name Description UnqualifiedName name The name to convert. Returns Type Description System.String An imprecise name. | Improve this Doc View Source TryResolveNamespace(QualifiedName, out TypeResolverNamespace) Tries to find a child whose full name corresponds to the concatenation of this namespace's full name and a given qualified name. Declaration public bool TryResolveNamespace(QualifiedName fullName, out TypeResolverNamespace result) Parameters Type Name Description QualifiedName fullName The name to look for. TypeResolverNamespace result A namespace whose name equals the concatenation of this namespace's full name and fullName , provided that there is such a namespace. Returns Type Description System.Boolean true if a (non-empty) namespace with name fullName can be found; otherwise, false ."
  },
  "api/Flame.TypeSystem.TypeResolver.html": {
    "href": "api/Flame.TypeSystem.TypeResolver.html",
    "title": "Class TypeResolver | Flame",
    "keywords": "Class TypeResolver Indexes assemblies and resolves types based on their names. Inheritance System.Object TypeResolver Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class TypeResolver Constructors | Improve this Doc View Source TypeResolver() Creates an empty type resolver. Declaration public TypeResolver() | Improve this Doc View Source TypeResolver(IAssembly) Creates a type resolver and immediately adds an assembly to it. Declaration public TypeResolver(IAssembly assembly) Parameters Type Name Description IAssembly assembly The assembly to add to the type resolver. Properties | Improve this Doc View Source Assemblies Gets a list of all assemblies that are taken into consideration by this type resolver when resolving a type name. Declaration public IEnumerable<IAssembly> Assemblies { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IAssembly > | Improve this Doc View Source ReadOnlyView Gets a read-only view of this type resolver. Declaration public ReadOnlyTypeResolver ReadOnlyView { get; } Property Value Type Description ReadOnlyTypeResolver A read-only view of this type resolver. | Improve this Doc View Source RootNamespace Gets the root namespace for this type resolver. Declaration public TypeResolverNamespace RootNamespace { get; } Property Value Type Description TypeResolverNamespace The root namespace. Methods | Improve this Doc View Source AddAssembly(IAssembly) Adds an assembly to this type resolver. Declaration public bool AddAssembly(IAssembly assembly) Parameters Type Name Description IAssembly assembly The assembly to add. Returns Type Description System.Boolean true if the assembly was just added; false if it has already been added before. | Improve this Doc View Source Clone() Creates a clone of this type resolver. Declaration public TypeResolver Clone() Returns Type Description TypeResolver The cloned type resolver. | Improve this Doc View Source ResolveGenericParameters(IGenericMember, UnqualifiedName) Finds all generic parameters defined by a particular member that have a specific unqualified name. Declaration public IReadOnlyList<IType> ResolveGenericParameters(IGenericMember parentMember, UnqualifiedName name) Parameters Type Name Description IGenericMember parentMember The generic member that defines the generic parameters. UnqualifiedName name The unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of generic parameters that are defined by parentMember and have name name . | Improve this Doc View Source ResolveGenericParameters(IGenericMember, String) Finds all generic parameters defined by a particular member that have a specific imprecise unqualified name. Declaration public IReadOnlyList<IType> ResolveGenericParameters(IGenericMember parentMember, string name) Parameters Type Name Description IGenericMember parentMember The generic member that defines the generic parameters. System.String name The imprecise unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of generic parameters that are defined by parentMember and have name name . This includes all simply named types with name name , regardless of the number of type parameters in the type's name. | Improve this Doc View Source ResolveNestedTypes(IType, UnqualifiedName) Finds all nested types defined by a particular type that have a specific unqualified name. Declaration public IReadOnlyList<IType> ResolveNestedTypes(IType parentType, UnqualifiedName name) Parameters Type Name Description IType parentType The type that defines the nested types. UnqualifiedName name The unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined by parentType and have name name . | Improve this Doc View Source ResolveNestedTypes(IType, String) Finds all nested types defined by a particular type that have a specific imprecise unqualified name. Declaration public IReadOnlyList<IType> ResolveNestedTypes(IType parentType, string name) Parameters Type Name Description IType parentType The type that defines the nested types. System.String name The imprecise unqualified name to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types that are defined by parentType and have name name . This includes all simply named types with name name , regardless of the number of type parameters in the type's name. | Improve this Doc View Source ResolveTypes(QualifiedName) Resolves all types with a particular full name. Declaration public IReadOnlyList<IType> ResolveTypes(QualifiedName fullName) Parameters Type Name Description QualifiedName fullName The full name of the types to look for. Returns Type Description System.Collections.Generic.IReadOnlyList < IType > A list of types with name fullName . | Improve this Doc View Source TryResolveNamespace(QualifiedName, out TypeResolverNamespace) Tries to find a namespace with a particular full name. Declaration public bool TryResolveNamespace(QualifiedName fullName, out TypeResolverNamespace result) Parameters Type Name Description QualifiedName fullName The name to look for. TypeResolverNamespace result A namespace with name fullName , if one can be found. Returns Type Description System.Boolean true if a (non-empty) namespace with name fullName can be found; otherwise, false ."
  },
  "api/Flame.TypeSystem.TypeMappingVisitor.html": {
    "href": "api/Flame.TypeSystem.TypeMappingVisitor.html",
    "title": "Class TypeMappingVisitor | Flame",
    "keywords": "Class TypeMappingVisitor A type visitor that replaces types according to a dictionary. Inheritance System.Object TypeVisitor TypeMappingVisitor Inherited Members TypeVisitor.VisitUninteresting(IType) TypeVisitor.Visit(IType) TypeVisitor.VisitAll(IReadOnlyList<IType>) TypeVisitor.Visit(Parameter) TypeVisitor.VisitAll(IReadOnlyList<Parameter>) TypeVisitor.Visit(IMethod) TypeVisitor.VisitAll(IReadOnlyList<IMethod>) TypeVisitor.Visit(IField) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class TypeMappingVisitor : TypeVisitor Constructors | Improve this Doc View Source TypeMappingVisitor(IReadOnlyDictionary<IType, IType>) Creates a type mapping visitor from a dictionary. Declaration public TypeMappingVisitor(IReadOnlyDictionary<IType, IType> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < IType , IType > mapping A mapping of source types to target types. Properties | Improve this Doc View Source Mapping Gets a mapping of source types to target types for this type mapping visitor. Declaration public IReadOnlyDictionary<IType, IType> Mapping { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < IType , IType > A mapping. Methods | Improve this Doc View Source IsOfInterest(IType) Tells if a type is of interest to this visitor. Visitors always specify custom behavior for interesting types, whereas uninteresting composite types are usually treated the same: the visitor simply visits the types they are composed of. Declaration protected override bool IsOfInterest(IType type) Parameters Type Name Description IType type A type. Returns Type Description System.Boolean true if the type is interesting; otherwise, false . Overrides TypeVisitor.IsOfInterest(IType) | Improve this Doc View Source VisitInteresting(IType) Visits a type that has been marked as interesting. Declaration protected override IType VisitInteresting(IType type) Parameters Type Name Description IType type A type to visit. Returns Type Description IType A visited type. Overrides TypeVisitor.VisitInteresting(IType)"
  },
  "api/Flame.TypeSystem.TypeFuncVisitor.html": {
    "href": "api/Flame.TypeSystem.TypeFuncVisitor.html",
    "title": "Class TypeFuncVisitor | Flame",
    "keywords": "Class TypeFuncVisitor A type visitor that uses a type-to-type mapping function under the hood. Inheritance System.Object TypeVisitor TypeFuncVisitor Inherited Members TypeVisitor.VisitUninteresting(IType) TypeVisitor.Visit(IType) TypeVisitor.VisitAll(IReadOnlyList<IType>) TypeVisitor.Visit(Parameter) TypeVisitor.VisitAll(IReadOnlyList<Parameter>) TypeVisitor.Visit(IMethod) TypeVisitor.VisitAll(IReadOnlyList<IMethod>) TypeVisitor.Visit(IField) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public sealed class TypeFuncVisitor : TypeVisitor Constructors | Improve this Doc View Source TypeFuncVisitor(Func<IType, IType>) Creates a type visitor based on a type-to-type mapping function. Declaration public TypeFuncVisitor(Func<IType, IType> mapType) Parameters Type Name Description System.Func < IType , IType > mapType A type-to-type mapping function. Properties | Improve this Doc View Source MapType Gets the type-to-type mapping this visitor uses under the hood. Declaration public Func<IType, IType> MapType { get; } Property Value Type Description System.Func < IType , IType > A type-to-type mapping. Methods | Improve this Doc View Source IsOfInterest(IType) Tells if a type is of interest to this visitor. Visitors always specify custom behavior for interesting types, whereas uninteresting composite types are usually treated the same: the visitor simply visits the types they are composed of. Declaration protected override bool IsOfInterest(IType type) Parameters Type Name Description IType type A type. Returns Type Description System.Boolean true if the type is interesting; otherwise, false . Overrides TypeVisitor.IsOfInterest(IType) | Improve this Doc View Source VisitInteresting(IType) Visits a type that has been marked as interesting. Declaration protected override IType VisitInteresting(IType type) Parameters Type Name Description IType type A type to visit. Returns Type Description IType A visited type. Overrides TypeVisitor.VisitInteresting(IType)"
  },
  "api/Flame.TypeSystem.TypeEnvironment.html": {
    "href": "api/Flame.TypeSystem.TypeEnvironment.html",
    "title": "Class TypeEnvironment | Flame",
    "keywords": "Class TypeEnvironment A base class for classes that augment Flame's type system with types specific to a particular environment Inheritance System.Object TypeEnvironment CorlibTypeEnvironment MutableTypeEnvironment Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class TypeEnvironment Properties | Improve this Doc View Source Boolean Gets the Boolean type in this type environment. Booleans are represented by the UInt1 type. Declaration public IType Boolean { get; } Property Value Type Description IType The Boolean type aka UInt1. | Improve this Doc View Source CapturedException Gets the canonical type of a captured exception in this environment. Declaration public abstract IType CapturedException { get; } Property Value Type Description IType The captured exception type. | Improve this Doc View Source Char Gets the character type in this type environment. Declaration public abstract IType Char { get; } Property Value Type Description IType The character type. | Improve this Doc View Source FieldToken Gets the canonical type of a field token in this environment, if there is such a type. Declaration public abstract IType FieldToken { get; } Property Value Type Description IType The field token type. | Improve this Doc View Source Float32 Gets the 32-bit floating point type in this type environment. Declaration public abstract IType Float32 { get; } Property Value Type Description IType A 32-bit floating point type. | Improve this Doc View Source Float64 Gets the 64-bit floating point type in this type environment. Declaration public abstract IType Float64 { get; } Property Value Type Description IType A 64-bit floating point type. | Improve this Doc View Source Int16 Gets a 16-bit signed integer type. Declaration public IType Int16 { get; } Property Value Type Description IType A 16-bit signed integer type if one can be created; otherwise, null . | Improve this Doc View Source Int32 Gets a 32-bit signed integer type. Declaration public IType Int32 { get; } Property Value Type Description IType A 32-bit signed integer type if one can be created; otherwise, null . | Improve this Doc View Source Int64 Gets a 64-bit signed integer type. Declaration public IType Int64 { get; } Property Value Type Description IType A 64-bit signed integer type if one can be created; otherwise, null . | Improve this Doc View Source Int8 Gets an 8-bit signed integer type. Declaration public IType Int8 { get; } Property Value Type Description IType An 8-bit signed integer type if one can be created; otherwise, null . | Improve this Doc View Source MethodToken Gets the canonical type of a method token in this environment, if there is such a type. Declaration public abstract IType MethodToken { get; } Property Value Type Description IType The method token type. | Improve this Doc View Source NaturalInt Gets the natural signed integer type in this type environment. Declaration public abstract IType NaturalInt { get; } Property Value Type Description IType The natural signed integer type. | Improve this Doc View Source NaturalUInt Gets the natural unsigned integer type in this type environment. Declaration public abstract IType NaturalUInt { get; } Property Value Type Description IType The natural unsigned integer type. | Improve this Doc View Source Object Gets the root type for this environment, if there is a root type. Declaration public abstract IType Object { get; } Property Value Type Description IType The root type. | Improve this Doc View Source String Gets the character string type in this type environment. Declaration public abstract IType String { get; } Property Value Type Description IType The character string type. | Improve this Doc View Source Subtyping Gets the subtyping rules for this type environment. Declaration public abstract SubtypingRules Subtyping { get; } Property Value Type Description SubtypingRules The subtyping rules. | Improve this Doc View Source TypeToken Gets the canonical type of a type token in this environment, if there is such a type. Declaration public abstract IType TypeToken { get; } Property Value Type Description IType The type token type. | Improve this Doc View Source UInt16 Gets a 16-bit unsigned integer type. Declaration public IType UInt16 { get; } Property Value Type Description IType A 16-bit unsigned integer type if one can be created; otherwise, null . | Improve this Doc View Source UInt32 Gets a 32-bit unsigned integer type. Declaration public IType UInt32 { get; } Property Value Type Description IType A 32-bit unsigned integer type if one can be created; otherwise, null . | Improve this Doc View Source UInt64 Gets a 64-bit unsigned integer type. Declaration public IType UInt64 { get; } Property Value Type Description IType A 64-bit unsigned integer type if one can be created; otherwise, null . | Improve this Doc View Source UInt8 Gets an 8-bit unsigned integer type. Declaration public IType UInt8 { get; } Property Value Type Description IType An 8-bit unsigned integer type if one can be created; otherwise, null . | Improve this Doc View Source Void Gets the Void type in this type environment. Declaration public abstract IType Void { get; } Property Value Type Description IType The Void type. Methods | Improve this Doc View Source MakeArrayType(IType, Int32) Creates an array type of a particular rank. Declaration public IType MakeArrayType(IType elementType, int rank) Parameters Type Name Description IType elementType The type of element stored in the array. System.Int32 rank The array's rank. Returns Type Description IType An array type if one can be created in this environment; otherwise, null . | Improve this Doc View Source MakeSignedIntegerType(Int32) Creates a signed integer type with a particular number of bits of storage. Declaration public IType MakeSignedIntegerType(int sizeInBits) Parameters Type Name Description System.Int32 sizeInBits The integer type's size in bits. Returns Type Description IType A signed integer type if one can be created; otherwise, null . | Improve this Doc View Source MakeUnsignedIntegerType(Int32) Creates an unsigned integer type with a particular number of bits of storage. Declaration public IType MakeUnsignedIntegerType(int sizeInBits) Parameters Type Name Description System.Int32 sizeInBits The integer type's size in bits. Returns Type Description IType An unsigned integer type if one can be created; otherwise, null . | Improve this Doc View Source TryMakeArrayType(IType, Int32, out IType) Tries to create an array type with a particular element type and rank. Declaration public abstract bool TryMakeArrayType(IType elementType, int rank, out IType arrayType) Parameters Type Name Description IType elementType The type of value to store in the array. System.Int32 rank The rank of the array, that is, the number of dimensions in the array. IType arrayType An array with the specified element type and rank. Returns Type Description System.Boolean true if the environment can create such an array type; otherwise, false . | Improve this Doc View Source TryMakeSignedIntegerType(Int32, out IType) Tries to create a signed integer type with a particular number of bits of storage. Declaration public abstract bool TryMakeSignedIntegerType(int sizeInBits, out IType integerType) Parameters Type Name Description System.Int32 sizeInBits The size in bits of the integer type to create. IType integerType The integer type. Returns Type Description System.Boolean true if the environment can create such an integer type; otherwise, false . | Improve this Doc View Source TryMakeUnsignedIntegerType(Int32, out IType) Tries to create an unsigned integer type with a particular number of bits of storage. Declaration public abstract bool TryMakeUnsignedIntegerType(int sizeInBits, out IType integerType) Parameters Type Name Description System.Int32 sizeInBits The size in bits of the integer type to create. IType integerType The integer type. Returns Type Description System.Boolean true if the environment can create such an integer type; otherwise, false ."
  },
  "api/Flame.TypeSystem.SubtypingRules.html": {
    "href": "api/Flame.TypeSystem.SubtypingRules.html",
    "title": "Class SubtypingRules | Flame",
    "keywords": "Class SubtypingRules Defines a subtyping relation on types. Inheritance System.Object SubtypingRules ClrSubtypingRules Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Flame.TypeSystem Assembly : Flame.dll Syntax public abstract class SubtypingRules Methods | Improve this Doc View Source IsSubtypeOf(IType, IType) Tells if a type is a subtype of another type. Declaration public abstract ImpreciseBoolean IsSubtypeOf(IType subtype, IType supertype) Parameters Type Name Description IType subtype The type to test for subtype-ness. IType supertype The type to test subtype against for subtype-ness. Returns Type Description ImpreciseBoolean ImpreciseBoolean.True if subtype is definitely a subtype of supertype ; ImpreciseBoolean.False if subtype is definitely not a subtype of supertype ; otherwise, ImpreciseBoolean.Maybe ."
  }
}