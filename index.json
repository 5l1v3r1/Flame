{
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "A brief introduction to Flame | Flame",
    "keywords": "A brief introduction to Flame This article is designed to be a quick introduction to the concepts that matter most to Flame. Some previous experience with the .NET ecosystem and optimizing compilers might be useful. The two most important categories of data structures in Flame are its type system and its intermediate representation (IR). The former roughly corresponds to the type system of the .NET universe modulo some tweaks. The latter is in static single assignment (SSA) form , which is the state of the art in optimizing compilers. Flame's type system Flame's type system is essentially a stripped-down version of the type system of the .NET universe. All types must implement the IType interface . Key points include: Flame has first-class support for object-oriented programming constructs. Types can define fields, methods and properties. Types can define other types. Types and methods can have generic parameters. Types, fields, methods and properties can be instantiate either directly if they define generic parameters and indirectly if an enclosing type defines generic parameters. There are no built-in types in Flame. If you want to refer to, e.g., a 32-bit signed integer, then you should load System.Int32 from a core library. This is easy in practice: the TypeEnvironment class offers convenient access to primitives types such as integers, floating-point numbers, Booleans, characters and strings. Removing built-in types was a deliberate decision based on experience with a previous iteration of Flame that did have built-in types for integers—library types like System.Int32 implement various bits of functionality that cannot easily be modeled in built-in types. When Flame had built-in types, accessing that functionality was tremendously difficult and complicated the way the type system works. Flame uses a single pointer type ( PointerType ) to unify many different kinds of pointers from the .NET world. Regular pointers are represented as transient pointers ( PointerKind.Transient ). References ( ref / out / byref ) are represented as reference pointers ( PointerKind.Reference ). Instances of reference types (i.e., classes) and boxed values are represented as box pointers ( PointerKind.Box ). This is a notable departure from the .NET type system, where instances of reference types are implicit pointers rather than explicit pointers. The rationale for this decision is that explicit pointers are easier to reason about in optimizations and analyses than implicit pointers—explicit pointers reduce the number of special cases there. Flame IR Flame represents method bodies as control-flow graphs (CFGs) of instructions in SSA form. This representation makes it easier for analyses and transformations to reason about the computations performed by a method. Flame IR's control-flow graphs are immutable data structures that have mutable wrappers for easy manipulation, so most concepts in Flame IR have both an immutable and mutable API. These APIs are usually very similar, with the former being geared towards analysis and the latter intended mainly for IR construction and transformation. These are the main data structures in Flame IR: A control-flow graph is a sets of basic blocks. Exactly one basic block in every control-flow graph is marked as the entry point block , which means that control is transferred to that block when the method is invoked for which the control-flow graph is its implementation. Immutable API: FlowGraph . Mutable API: FlowGraphBuilder . Conceptually, a basic block is a straight-line sequence of instructions that ends in a control-flow instruction. In Flame IR, a basic block consists of four main components: A unique tag that identifies the basic block. A sequence of block parameters , which allow for arbitrary values to be passed from one block to another. This is primarily a means for overcoming the limitations imposed by SSA form in a disciplined manner. Flame's block parameters roughly correspond to the phi functions found in compiler literature. A sequence of named instructions : instructions that are each identified by a unique tag. Block flow: the block's outgoing control flow. Immutable API: BasicBlock . Mutable API: BasicBlockBuilder . An instruction is an expression that accepts zero or more values and produces exactly one value. Every instruction consists of two components: a prototype and an argument list. An instruction prototype describes the instruction's semantics. For example, instructions that produce constants have prototype ConstantPrototype whereas instructions that call a method have prototype CallPrototype . Prototypes are never specific to the control-flow graph in which they occur. An argument list is simply a list of values defined in the enclosing control-flow graph. For this reason, argument lists are always specific to the control-flow graph in which they occur. Instructions are named if they are defined directly by a basic block. Instructions are anonymous if they are defined by block flow, which in turn appears in a basic block. Named instructions can be used as values by other instructions. Anonymous instructions cannot; their values are consumed immediately by the block flow that defines them. Examples of anonymous instructions include the condition of switch flow, the result returned by return flow and the \"dangerous\" instruction wrapped by try flow. Immutable API: Instruction . Mutable API: InstructionBuilder . Block flow represents the control flow that terminates a basic block. Flame defines five types of control flow: Jump ( JumpFlow ): an unconditional branch to some other block in the control-flow graph. Corresponds to a goto statement in C#. Return ( ReturnFlow ): returns exactly one value to the caller. A value of type void can be returned to indicate that no actual value should be returned. Switch ( SwitchFlow ): branches to one of many blocks by comparing a condition with a number of constants. Corresponds to a switch statement in C#, but is also used to represent if statements. Try ( TryFlow ): executes an instruction and checks if that instruction throws an exception. If it does, an exception-path branch is taken. Otherwise, a success-path branch is taken. Unreachable ( UnreachableFlow ): indicates that the end of a particular basic block is unreachable. Example: a factorial function To illustrate what Flame IR looks like in practice, we'll consider the recursive factorial function below. public static int FactorialRecursive(int value, int accumulator) { if (value > 1) { return FactorialRecursive(value - 1, value * accumulator); } else { return accumulator; } } After compiling this using csc , we get the following IL: .method public static hidebysig default int32 FactorialRecursive (int32 'value', int32 accumulator) cil managed { // Method begins at RVA 0x2076 // Code size 18 (0x12) .maxstack 8 IL_0000: ldarg.0 IL_0001: ldc.i4.1 IL_0002: ble.s IL_0010 IL_0004: ldarg.0 IL_0005: ldc.i4.1 IL_0006: sub IL_0007: ldarg.0 IL_0008: ldarg.1 IL_0009: mul IL_000a: call int32 class Program::FactorialRecursive(int32, int32) IL_000f: ret IL_0010: ldarg.1 IL_0011: ret } We now feed the csc -compiled exe to ilopt with the --print-ir option. ilopt reports the following optimized IR. If you look carefully, you'll see that Flame eliminated the recursive call to FactorialRecursive , replacing it with a branch to the entry point block. { #entry_point( @entry-point.thunk, #(#param(System::Int32, @value.thunk), #param(System::Int32, @accumulator.thunk)), { }, #goto(@entry-point(@value.thunk, @accumulator.thunk))); #block( @entry-point, #(#param(System::Int32, value), #param(System::Int32, accumulator)), { IL_0000_val_1 = const(1, System::Int32)(); IL_0000_val_2 = intrinsic(@arith.gt, System::Boolean, #(System::Int32, System::Int32))(value, IL_0000_val_1); }, #switch( copy(System::Boolean)(IL_0000_val_2), // <-- value to switch on IL_0009(), // <-- 'default' case { #case(#(@false), IL_001D()); // <-- 'case false' })); #block( IL_0009, #(), { @IL_0000_val_1.rff.IL_0009 = const(1, System::Int32)(); IL_0009_val_2 = intrinsic(@arith.sub, System::Int32, #(System::Int32, System::Int32))(value, @IL_0000_val_1.rff.IL_0009); IL_0009_val_5 = intrinsic(@arith.mul, System::Int32, #(System::Int32, System::Int32))(value, accumulator); }, #goto(@entry-point(IL_0009_val_2, IL_0009_val_5))); #block( IL_001D, #(), { }, #return(copy(System::Int32)(accumulator))); }; ilopt selects the following CIL for the snippet of Flame IR above. .method public static hidebysig default int32 FactorialRecursive (int32 'value', int32 accumulator) cil managed { // Method begins at RVA 0x2078 // Code size 24 (0x18) .maxstack 3 IL_0000: ldarg.0 IL_0001: ldarg.1 IL_0002: starg 1 IL_0006: dup IL_0007: starg 0 IL_000b: ldc.i4.1 IL_000c: ble.s IL_0016 IL_000e: ldarg.0 IL_000f: ldc.i4.1 IL_0010: sub IL_0011: ldarg.0 IL_0012: ldarg.1 IL_0013: mul IL_0014: br.s IL_0002 IL_0016: ldarg.1 IL_0017: ret }"
  },
  "articles/brainfuck.html": {
    "href": "articles/brainfuck.html",
    "title": "Building a Brainfuck compiler with Flame | Flame",
    "keywords": "Building a Brainfuck compiler with Flame Introduction This tutorial aims to be a gentle introduction to using Flame . Flame is a set of reusable libraries that can be leveraged to build a compiler. It's especially good at generating code for managed languages like C#, but it's also perfectly capable of compiling, say, Brainfuck. Which is exactly what we're going to do in this tutorial: we're going to build an AOT compiler for Brainfuck, and we'll produce executables that can be run by implementations of the .NET common language runtime (CLR), e.g., Mono or the .NET framework . I'm assuming that you're familiar with C# development and a C# IDE of your choice. You should also know how to use command-line programs, because that's what we'll be building in this tutorial. If you don't know what Brainfuck is, then I recommend that you take a look at its Wikipedia page . The important bit is that it's an extremely minimal programming language, so it'll be super easy to implement. This tutorial will contain a fair amount of code but will focus mostly on a few key aspects of the Brainfuck compiler—the bits that'll hopefully help you grok Flame. If you want the full source code, then you'll find that in the Flame GitHub repo . If you have any questions or comments, feel free to open an issue—or maybe even a pull request!—on GitHub . Your feedback and/or contributions are most welcome. Anyway, let's get started. Getting started TODO: actual tutorial."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API documentation | Flame",
    "keywords": "API documentation Welcome to Flame's API docs! Select a namespace or type on the left to get a detailed description of its API. If you're new to Flame and/or just browsing the docs, then the Flame and Flame.Compiler namespaces are probably a good place to start: they introduce most of Flame's core concepts, ranging from its type system to its SSA IR."
  },
  "index.html": {
    "href": "index.html",
    "title": "Flame | Flame",
    "keywords": "Flame Flame is a collection of C# libraries for building tools that read, analyze, optimize and write managed languages. Things you can build with Flame include optimizing compilers, IL optimizers, static analyzers and more. Key features include: An intermediate representation (IR) in static single assignment (SSA) form. This type of IR is favored by state-of-the-art optimizing compilers such as LLVM and GCC. Flame IR is designed from the ground up with the express intent of making it as suitable as possible for a wide range of optimizations and analyses. A wealth of optimization passes that operate on Flame IR. These passes include aggressive optimizations such as inlining, partial scalar replacement of aggregates, global value numbering, LINQ optimization, tail call optimization and many others . A variety of IR analyses. These analyses extract information not explicitly encoded in Flame IR. For example, there are analyses that compute dominator trees, value numbering, block predecessor information, value nullability and more . A pluggable architecture. Flame conveniently includes many built-in transforms and analyses, but sometimes these generic algorithms don't quite cover your use case exactly. In that case, you can easily implement your own transform or analysis. A CIL front-end and back-end. Flame can translate CIL to Flame IR and vice-versa, allowing you to easily read and/or write CIL while operating at the optimization and analysis–focused abstraction layer afforded by Flame IR. For an introduction to Flame's main concepts see A brief introduction to Flame . Subprojects At its core, Flame is a set of libraries designed to support tools that read, analyze, optimize and write managed languages. Additionally, Flame includes a number of projects that use Flame in a fairly straightforward way. ilopt ilopt is an ahead-of-time optimizer for CIL assemblies, that is, ilopt is a fairly simple command-line tool that reads CIL assemblies, optimizes them and writes the optimized version back to disk. ilopt currently understands most if not all of the CIL opcodes generated by the C# compiler. Other opcodes may not be supported yet. For an overview of single-file C# programs that ilopt can definitely optimize, take a look at the ilopt test programs . Build instructions Flame is a C# project that targets .NET 4.5 implementations, like Mono and the .NET framework. .NET Core is not supported yet because Flame relies on NuGet packages that don't yet support .NET Core. Additionally, Flame uses EC# macros to convert Flame IR rewrite rule DSL to C# code. Linux, Mac OS X Building Flame is easy if you're on Linux or Mac OS X. Just spell $ make nuget $ make That's it. The above will grab NuGet dependencies, compile EC# macros down to regular C# and build the project. To run the unit tests, type $ make test Windows Building Flame is somewhat more challenging on Windows. If at all possible, use a GNU Make implementation to run the Makefile, same as for Linux and Mac OS X. Otherwise, you will need to do the following: Restore NuGet packages ( nuget restore ). Build the macros. ( msbuild /p:Configuration=Release FlameMacros/FlameMacros.csproj ). Compile EC# macros down to regular C# ( make dsl in the Makefile, otherwise FlameMacros/bin/Release/LeMP.exe --macros FlameMacros/bin/Release/FlameMacros.dll --outext=.out.cs file.ecs for all .ecs files). Build Flame itself ( msbuild /p:Configuration=Release Flame.sln ). Run the unit tests by spelling UnitTests\\bin\\Release\\UnitTests.exe all Windows workflow enhancements welcome!"
  }
}