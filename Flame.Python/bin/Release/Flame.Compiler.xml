<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Flame.Compiler</name>
  </assembly>
  <members>
    <member name="M:Flame.Compiler.IExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.IExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="P:Flame.Compiler.IExpression.Type">
      <summary> Gets the type of object that the expression will return. </summary>
    </member>
    <member name="P:Flame.Compiler.IExpression.IsConstant">
      <summary> Gets a boolean value that indicates if the expression is a constant expression. A constant expression can be evaluated at compile-time. </summary>
    </member>
    <member name="M:Flame.Compiler.IStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="P:Flame.Compiler.IStatement.IsEmpty">
      <summary> Gets a boolean value that indicates if the statement is empty.  An empty statement is a statement that will not influence the output of a function when compiled. </summary>
    </member>
    <member name="M:Flame.Compiler.IUnmanagedVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="T:Flame.Compiler.ILogAssembly">
      <summary> Describes an assembly that has access to a compiler log. </summary>
    </member>
    <member name="P:Flame.Compiler.ILogAssembly.Log">
      <summary> Gets the assembly's compiler log. </summary>
    </member>
    <member name="M:Flame.Compiler.ParameterExtensions.GetSetField(Flame.IParameter,Flame.IType,System.Boolean)">
      <summary> Gets the field this parameter sets. Returns null if no field is set. </summary>
    </member>
    <member name="M:Flame.Compiler.ParameterExtensions.GetSetProperty(Flame.IParameter,Flame.IType,System.Boolean)">
      <summary> Gets the property this parameter sets. Returns null if no property is set. </summary>
    </member>
    <member name="M:Flame.Compiler.IInitializedField.GetValue()">
      <summary> Gets an expression that represents the field's value. </summary>
    </member>
    <member name="M:Flame.Compiler.IBodyMethod.GetMethodBody()">
      <summary> Gets the method's body statement. </summary>
    </member>
    <member name="T:Flame.Compiler.IDynamicEnvironment">
      <summary> Represents an environment capable of dynamic code execution. </summary>
    </member>
    <member name="M:Flame.Compiler.IDynamicEnvironment.InvokeDynamic(Flame.Compiler.IBodyMethod,Flame.IBoundObject,System.Collections.Generic.IEnumerable`1)">
      <summary> Invokes the provided method dynamically. </summary>
    </member>
    <member name="M:Flame.Compiler.PrimitiveExpressionExtensions.IsPrimitiveExpressionType(Flame.IType)">
      <summary> Gets a boolean value that indicates if primitive expressions can be created for this type. </summary>
    </member>
    <member name="M:Flame.Compiler.ICompilerOptions.GetOption``1(System.String,Flame.Compiler.ICompilerOptions.GetOption.T)">
      <summary> Gets the option associated with the given key. If no such option has been specified, returns the given default value. </summary>
    </member>
    <member name="M:Flame.Compiler.ICompilerOptions.HasOption(System.String)">
      <summary> Gets a boolean value that indicates whether an option for the given key has been specified. </summary>
    </member>
    <member name="T:Flame.Compiler.IEnumerableEnvironment">
      <summary> Describes an environment that allows for the implementation the enumerable and enumerator patterns. </summary>
      <remarks> Implementations of this interface can only be expected to be able to modify types created by the same assembly that provided the implementation. All methods and properties provided as arguments will be used as immutable data: they will be used to construct other methods which will be added to the target type. </remarks>
    </member>
    <member name="M:Flame.Compiler.IEnumerableEnvironment.ImplementEnumerable(Flame.Compiler.ITypeBuilder,Flame.IType,Flame.Compiler.IBodyMethod)">
      <summary> Implements the enumerable pattern for the given type based on the provided implementation for the get enumerator method. </summary>
    </member>
    <member name="M:Flame.Compiler.IEnumerableEnvironment.ImplementEnumerator(Flame.Compiler.ITypeBuilder,Flame.IType,Flame.Compiler.IBodyMethod,Flame.IProperty)">
      <summary> Implements the enumerator pattern for the given type based on the provided implementations for the move next method and current item property. </summary>
    </member>
    <member name="M:Flame.Compiler.EnumerableEnvironmentExtensions.ImplementEnumerable(Flame.Compiler.IEnumerableEnvironment,Flame.Compiler.ITypeBuilder,Flame.IType,Flame.Compiler.IStatement)">
      <summary> Implements the enumerable pattern for the given type based on the provided implementation for the get enumerator method. </summary>
    </member>
    <member name="M:Flame.Compiler.EnumerableEnvironmentExtensions.ImplementEnumerator(Flame.Compiler.IEnumerableEnvironment,Flame.Compiler.ITypeBuilder,Flame.IType,Flame.Compiler.IStatement,Flame.Compiler.IStatement)">
      <summary> Implements the enumerator pattern for the given type based on the provided implementations for the move next method and current item property. </summary>
    </member>
    <member name="M:Flame.Compiler.OperatorExtensions.GetAllOperatorOverloads(Flame.Operator,System.Collections.Generic.IEnumerable`1)">
      <summary> Gets all operator methods associated with the given argument types for the given operator. </summary>
    </member>
    <member name="M:Flame.Compiler.OperatorExtensions.GetOperatorOverload(Flame.Operator,System.Collections.Generic.IEnumerable`1)">
      <summary> Gets the best operator overload for the given operator with the given argument types. </summary>
    </member>
    <member name="M:Flame.Compiler.OperatorExtensions.GetOperatorOverload(Flame.Operator,System.Collections.Generic.IEnumerable`1)">
      <summary> Gets the best operator overload for the given operator with the given arguments. </summary>
    </member>
    <member name="M:Flame.Compiler.OperatorExtensions.CreateOperatorInvocation(Flame.Operator,System.Collections.Generic.IEnumerable`1)">
      <summary> Creates an invocation expression for this operator with the given arguments. </summary>
    </member>
    <member name="T:Flame.Compiler.ICodeGenerator">
      <summary> Provides common functionality for code generators. Code generators take care of the generation of individual blocks of code. </summary>
    </member>
    <member name="M:Flame.Compiler.ICodeGenerator.EmitIsOfType(Flame.IType,Flame.Compiler.ICodeBlock)">
      <summary> Checks if it is of the provided type. </summary>
    </member>
    <member name="M:Flame.Compiler.ICodeGenerator.EmitNewArray(Flame.IType,System.Collections.Generic.IEnumerable`1)">
      <summary> Creates a new array of the specified element type with the specified dimensions. </summary>
    </member>
    <member name="M:Flame.Compiler.ICodeGenerator.EmitNewVector(Flame.IType,System.Int32[])">
      <summary> Creates a new vector of the specified element type with the specified dimensions. </summary>
    </member>
    <member name="T:Flame.Compiler.IVariableMember">
      <summary> Describes a variable. </summary>
    </member>
    <member name="M:Flame.Compiler.CodeBuilder.AddFormattedLine(System.String)">
      <summary> Adds a line to the code builder that has already been formatted. The current indentation is adjusted to fit the line. </summary>
    </member>
    <member name="P:Flame.Compiler.CodeLine.IsEmpty">
      <summary> Gets a boolean value that indicates if this code line corresponds to the empty line pattern. </summary>
    </member>
    <member name="P:Flame.Compiler.CodeLine.IsWhitespace">
      <summary> Gets a boolean value that indicates if this code line is whitespace. </summary>
    </member>
    <member name="P:Flame.Compiler.CodeLine.Text">
      <summary> Gets or sets the code line's text. </summary>
    </member>
    <member name="P:Flame.Compiler.CodeLine.Indentation">
      <summary> Gets or sets this code line's indentation. </summary>
    </member>
    <member name="M:Flame.Compiler.IFieldBuilder.SetValue(Flame.Compiler.IExpression)">
      <summary> Sets the field's initial value. </summary>
    </member>
    <member name="M:Flame.Compiler.ITypeBuilder.DeclareMethod(Flame.IMethod)">
      <summary> Declares a method that is based on the information provided by the specified method. </summary>
    </member>
    <member name="M:Flame.Compiler.ITypeBuilder.DeclareField(Flame.IField)">
      <summary> Declares a field that is based on the information provided by the specified field. </summary>
    </member>
    <member name="M:Flame.Compiler.ITypeBuilder.DeclareProperty(Flame.IProperty)">
      <summary> Declares a property that is based on the information provided by the specified property. </summary>
    </member>
    <member name="M:Flame.Compiler.INamespaceBuilder.DeclareType(Flame.IType)">
      <summary> Declares a type based on another type. The template's members will be ignored when creating the type. </summary>
    </member>
    <member name="M:Flame.Compiler.IAssemblyBuilder.Save(Flame.Compiler.IOutputProvider)">
      <summary> Saves the assembly to the output provider. </summary>
    </member>
    <member name="T:Flame.Compiler.IOutputProvider">
      <summary> Describes a provider of output streams. </summary>
    </member>
    <member name="M:Flame.Compiler.IOutputProvider.Create(System.String,System.String)">
      <summary> Creates an output file for the specified name. </summary>
    </member>
    <member name="M:Flame.Compiler.IOutputProvider.Create()">
      <summary> Creates the default output file. </summary>
    </member>
    <member name="M:Flame.Compiler.IOutputProvider.Exists(System.String,System.String)">
      <summary> Gets a boolean value that indicates whether an output stream with the specified name and extension exists. </summary>
    </member>
    <member name="P:Flame.Compiler.IOutputProvider.PreferSingleOutput">
      <summary> Gets a boolean value that indicates if the client prefers a single output over many. </summary>
    </member>
    <member name="T:Flame.Compiler.IOutputFile">
      <summary> Represents a file that can be opened for writing. </summary>
    </member>
    <member name="M:Flame.Compiler.IOutputFile.OpenOutput()">
      <summary> Opens an output stream to this file. </summary>
    </member>
    <member name="M:Flame.Compiler.DescribedBodyMethod.GetMethodBody()">
      <summary> Gets the method's body statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Emit.IMethodStructureGenerator.GetThis()">
      <summary> Gets the "this" argument. </summary>
    </member>
    <member name="P:Flame.Compiler.Emit.IMethodStructureGenerator.Method">
      <summary> Gets the method this code generator belongs to. </summary>
    </member>
    <member name="M:Flame.Compiler.Emit.IUnmanagedMethodStructureGenerator.GetUnmanagedThis()">
      <summary> Gets the "this" argument. </summary>
    </member>
    <member name="M:Flame.Compiler.Emit.TypeVariableMember.GetAttributes()">
      <summary> Gets the member's attributes. </summary>
    </member>
    <member name="P:Flame.Compiler.Emit.TypeVariableMember.Name">
      <summary> Gets the member's name. </summary>
    </member>
    <member name="P:Flame.Compiler.Emit.TypeVariableMember.FullName">
      <summary> Gets the member's full name. </summary>
    </member>
    <member name="M:Flame.Compiler.Emit.IInitializingCodeGenerator.EmitInitializedArray(Flame.IType,Flame.Compiler.ICodeBlock[])">
      <summary> Creates and initializes a new array. </summary>
    </member>
    <member name="M:Flame.Compiler.Emit.IInitializingCodeGenerator.EmitInitializedVector(Flame.IType,Flame.Compiler.ICodeBlock[])">
      <summary> Creates and initializes a new vector. </summary>
    </member>
    <member name="T:Flame.Compiler.Emit.IForeachBlockGenerator">
      <summary> Describes general foreach block functionality. </summary>
    </member>
    <member name="P:Flame.Compiler.Emit.IForeachBlockGenerator.Elements">
      <summary> Gets a read-only list that contains variables representing the collection's elements on each iteration. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConstantExpression`1.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConstantExpression`1.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DefaultValueExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DefaultValueExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NullExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NullExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.BinaryExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.BinaryExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.PrimitiveBinaryExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.PrimitiveBinaryExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DirectBinaryExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DirectBinaryExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InitializedExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InitializedExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DereferencePointerExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DereferencePointerExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ThisGetExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ThisGetExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConversionExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConversionExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.VariableGetExpressionBase`1.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.VariableGetExpressionBase`1.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LateBoundVariableGetExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.FieldGetExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.FieldGetExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.FieldGetPointerExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.FieldGetPointerExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InvocationExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InvocationExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ContainerElementGetExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ContainerElementGetExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ContainerElementAddressOfExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ContainerElementAddressOfExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NewArrayExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NewArrayExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NewVectorExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NewVectorExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NewObjectExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NewObjectExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.IsExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.IsExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="P:Flame.Compiler.Expressions.IsExpression.TestType">
      <summary> Gets the type to test against. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.CodeBlockExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.CodeBlockExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.UnaryExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.UnaryExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="P:Flame.Compiler.Expressions.UnaryExpression.Value">
      <summary> The value the unary expression will be performed on. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NotExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.NotExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.AddExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.AddExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.SubtractExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.SubtractExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.MultiplyExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.MultiplyExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DivideExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.DivideExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LessThanExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LessThanExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LessThanOrEqualsExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LessThanOrEqualsExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.GreaterThanExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.GreaterThanExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.GreaterThanOrEqualsExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.GreaterThanOrEqualsExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.EqualityExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.EqualityExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.AndExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.AndExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.OrExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.OrExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.XorExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.XorExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LazyAndExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LazyAndExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LazyOrExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LazyOrExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.PropertyGetExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.PropertyGetExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.GetMethodExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.GetMethodExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.SizeOfExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.SizeOfExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InequalityExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InequalityExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.RemainderExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.RemainderExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.HashExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.HashExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InitializedArrayExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InitializedArrayExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InitializedVectorExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.InitializedVectorExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LeftShiftExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.LeftShiftExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.RightShiftExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.RightShiftExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConcatExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConcatExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConcatExpression.Reduce()">
      <summary> Reduces the concatenation expression to a simpler expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.SingletonGetExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.SingletonGetExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConstantVariableGetExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConstantVariableGetExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ThisAddressOfExpression.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ThisAddressOfExpression.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="T:Flame.Compiler.Expressions.RelaxedInvocation">
      <summary> An invocation that invokes a method based on a sequence of arguments that may include the method's caller. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ComplexExpressionBase.Optimize()">
      <summary> Returns an optimized version of the expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ComplexExpressionBase.Evaluate()">
      <summary> Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned. </summary>
    </member>
    <member name="P:Flame.Compiler.Expressions.ComplexExpressionBase.IsConstant">
      <summary> Gets a boolean value that indicates if the expression is a constant expression. A constant expression can be evaluated at compile-time. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConversionExpression.Static_Singleton.RequiresConversion(Flame.IType,Flame.IType)">
      <summary> Gets a boolean value that indicates whether the given source type must be converted to legally be assigned to a variable of the target type. </summary>
    </member>
    <member name="M:Flame.Compiler.Expressions.ConcatExpression.Static_Singleton.ReduceBinary(Flame.Compiler.IExpression,Flame.Compiler.IExpression)">
      <summary> Reduces the binary concatenation expression to a simpler expression. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.ReturnStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.IfElseStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.WhileStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.StoreAtAddressStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.ThisSetStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.VariableSetStatementBase`1.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.VariableReleaseStatementBase`1.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.EmptyStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.ComplexStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.BlockStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.ExpressionStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.LateBoundVariableSetStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.FieldSetStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.CodeBlockStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.BreakStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.ContinueStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.DoWhileStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.YieldReturnStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.YieldBreakStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.ForeachStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.ForeachStatement.Reduce()">
      <summary> Reduces the foreach statements to more primitive statements. </summary>
    </member>
    <member name="T:Flame.Compiler.Statements.CollectionElement">
      <summary> A collection element in a foreach loop. </summary>
    </member>
    <member name="T:Flame.Compiler.Statements.CommentedStatement">
      <summary> A statement that has a comment attached to it. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.CommentedStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="P:Flame.Compiler.Statements.CommentedStatement.Comment">
      <summary> Gets the comment to print. </summary>
    </member>
    <member name="P:Flame.Compiler.Statements.CommentedStatement.Statement">
      <summary> Gets the actual statement to emit. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.RawExpressionStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.LateBoundLabelBranchStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Statements.LateBoundLabelMarkStatement.Optimize()">
      <summary> Returns an optimized version of the statement. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.ThisVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.ArgumentVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.LateBoundVariable.BindVariable(Flame.Compiler.Emit.IMethodStructureGenerator)">
      <summary> Assigns a real variable to this late-bound variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.LateBoundVariable.BindVariable(Flame.Compiler.IVariable)">
      <summary> Assigns a real variable to this late-bound variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.LateBoundVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.ManuallyBoundVariable.BindVariable(Flame.Compiler.Emit.IMethodStructureGenerator)">
      <summary> Assigns a real variable to this late-bound variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.FieldVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.ValueTypeFieldVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.ElementVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="T:Flame.Compiler.Variables.AtAddressVariable">
      <summary> Accesses the underlying value of a pointer. It acts like a reference ('ref' in C#, 'T&' in C++, 'ByRef' in VB) by using pointer indirection to modify a variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.AtAddressVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="T:Flame.Compiler.Variables.ConstantVariable">
      <summary> Describes a variable that has a constant value which may be evaluated at compile time by get expressions. This value is also assumed to be stored in the underlying variable object once get expressions or address-of expressions are created. Essentially, substituting variable access for value access should not have a result on the program's output. This is a useful property for certain optimizations. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.ConstantVariable.CreateAddressOfExpression()">
      <summary> Creates an expression that returns the address in memory of this variable. </summary>
    </member>
    <member name="M:Flame.Compiler.Variables.ThisVariable.Static_Singleton.IsThisVariable(Flame.Compiler.IVariable)">
      <summary> Gets a boolean value that indicates whether the given variable refers directly or indirectly to a ThisVariable reference. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IProjectSourceItem.GetSource(System.String)">
      <summary> Gets the source item's source code. </summary>
    </member>
    <member name="P:Flame.Compiler.Projects.IProjectSourceItem.SourceIdentifier">
      <summary> The source item's identifier. This is usually the file's path. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProjectNode.SetName(System.String)">
      <summary> Sets the project node's name. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProjectNode.AddChild(Flame.Compiler.Projects.IProjectItem)">
      <summary> Adds a child to the project node. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProject.SetAssemblyName(System.String)">
      <summary> Sets the project's assembly name. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProject.SetBuildTargetIdentifier(System.String)">
      <summary> Sets the project's build target identifier. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProject.CreateSourceItem(System.String,System.String)">
      <summary> Creates a source item for the provided source path. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProject.CreateReferenceItem(System.String,System.Boolean)">
      <summary> Creates a reference item for the provided reference identifier. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProject.CreateOptionItem(System.String,System.String)">
      <summary> Creates an option item for the given option key and value. </summary>
    </member>
    <member name="M:Flame.Compiler.Projects.IMutableProject.CreateNode()">
      <summary> Creates a new project node. </summary>
    </member>
    <member name="T:Flame.Compiler.Projects.IProjectOptionItem">
      <summary> Describes a project item that specifies a compiler option. </summary>
    </member>
    <member name="P:Flame.Compiler.Projects.IProjectOptionItem.Key">
      <summary> Gets the option's key. </summary>
    </member>
    <member name="P:Flame.Compiler.Projects.IProjectOptionItem.Value">
      <summary> Gets the value associated with the option. </summary>
    </member>
    <member name="M:Flame.Compiler.CodeBuilder.Static_Singleton.GetIndentationString(System.Collections.Generic.IEnumerable`1)">
      <summary> Gets the best match for an indentation that suits the given indented lines. An indentation string is defined as a sequence of tab or space characters that precede every line in the given sequence zero or more times. </summary>
    </member>
  </members>
</doc>