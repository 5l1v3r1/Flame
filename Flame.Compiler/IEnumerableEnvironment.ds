using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler.Build;

namespace Flame.Compiler
{
	/*/// <summary>
	/// Describes an environment that allows for the implementation the enumerable and enumerator patterns.
	/// </summary>
	/// <remarks>
	/// Implementations of this interface can only be expected to be able to modify types created by the same assembly that provided the implementation.
	/// All methods and properties provided as arguments will be used as immutable data: they will be used to construct other methods which will be added to the target type.
	/// </remarks>
	public interface IEnumerableEnvironment : IEnvironment
	{
		/// <summary>
		/// Implements the enumerable pattern for the given type based on the provided implementation for the get enumerator method.
		/// </summary>
		void ImplementEnumerable(ITypeBuilder TargetType, IType ElementType, IBodyMethod GetEnumeratorImplementation);
		/// <summary>
		/// Implements the enumerator pattern for the given type based on the provided implementations for the move next method and current item property.
		/// </summary>
		void ImplementEnumerator(ITypeBuilder TargetType, IType ElementType, IBodyMethod MoveNextImplementation, IProperty CurrentImplementation);
	}

	public static class EnumerableEnvironmentExtensions
	{
		/// <summary>
		/// Implements the enumerable pattern for the given type based on the provided implementation for the get enumerator method.
		/// </summary>
		public static void ImplementEnumerable(this IEnumerableEnvironment Environment, ITypeBuilder TargetType, IType ElementType, IStatement GetEnumeratorBody)
		{
			var enumeratorType = Environment.EnumeratorType.MakeGenericType(new IType[] { ElementType });

			var descBodyMethod = new DescribedBodyMethod("GetEnumerator", TargetType, enumeratorType, false);
			descBodyMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
			descBodyMethod.Body = GetEnumeratorBody;

			Environment.ImplementEnumerable(TargetType, ElementType, descBodyMethod);
		}

		/// <summary>
		/// Implements the enumerator pattern for the given type based on the provided implementations for the move next method and current item property.
		/// </summary>
		public static void ImplementEnumerator(this IEnumerableEnvironment Environment, ITypeBuilder TargetType, IType ElementType, IStatement MoveNextBody, IStatement GetCurrentBody)
		{
			var descMoveNextMethod = new DescribedBodyMethod("MoveNext", TargetType, PrimitiveTypes.Boolean, false);
			descMoveNextMethod.Body = MoveNextBody;

			var descCurrentProperty = new DescribedProperty("Current", TargetType, ElementType, false);
			var descGetCurrentAccessor = new DescribedBodyAccessor(AccessorType.GetAccessor, descCurrentProperty, ElementType);
			descGetCurrentAccessor.AddAttribute(PrimitiveAttributes.ConstantAttribute);
			descGetCurrentAccessor.Body = GetCurrentBody;
			descCurrentProperty.AddAccessor(descGetCurrentAccessor);

			Environment.ImplementEnumerator(TargetType, ElementType, descMoveNextMethod, descCurrentProperty);
		}
	}*/
}
