using System;
using System.Collections.Generic;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
    /// <summary>
    /// A type of variable that represents a field of a target value. This value can
    /// be either a value or reference type. If said target value is a value type,
    /// however, setting the field's value will be a no-op.
    /// </summary>
    public class FieldVariable : IUnmanagedVariable
    {
        public const this(set IField Field, set IExpression Target);

        public IExpression Target { const get; private set; }
        public IField Field { const get; private set; }

        public FieldVariable ConvertField(MemberConverter Converter)
        {
            var resultField = Converter.Convert(Field);
            if (object.ReferenceEquals(Field, resultField))
                return this;
            else
                return new FieldVariable(resultField, Target);
        }

        public IType Type
        {
            const get { return Field.FieldType; }
        }

        public const IExpression CreateGetExpression()
        {
            return new FieldGetExpression(Field, Target);
        }

        public const IStatement CreateSetStatement(IExpression Value)
        {
            return new FieldSetStatement(Field, Target, Value);
        }

        public const IExpression CreateAddressOfExpression()
        {
            return new FieldGetPointerExpression(Field, Target);
        }

        public const IStatement CreateReleaseStatement()
        {
            return EmptyStatement;
        }
    }

    /// <summary>
    /// A type of variable that represents a field of a target variable, which
    /// is a value type. If one requests to set the field's value, the target
    /// variable's address is loaded, and said address is used when addressing
    /// the field, as opposed to using the target's value. What this means is
    /// that the field's value will actually change when a set-statement is executed.
    /// </summary>
    public class ValueTypeFieldVariable : IUnmanagedVariable
    {
        /// <summary>
        /// Creates a new value type field variable from the given field
        /// and target variable.
        /// </summary>
        public const this(set IField Field, set IVariable Target);

        public IVariable Target { const get; private set; }
        public IField Field { const get; private set; }

        public ValueTypeFieldVariable ConvertType(MemberConverter Converter)
        {
            var resultField = Converter.Convert(Field);
            if (object.ReferenceEquals(Field, resultField))
                return this;
            else
                return new ValueTypeFieldVariable(resultField, Target);
        }

        public IType Type
        {
            const get { return Field.FieldType; }
        }

        private const IExpression GetAddressOfExpression()
        {
            if (Target is IUnmanagedVariable)
            {
                return ((IUnmanagedVariable)Target).CreateAddressOfExpression();
            }
            else
            {
                // TODO: this technique just isn't safe. We should find
                // some other place to put the release statement, or make
                // this operation illegal altogether.
                var temp = new LocalVariable(Target.Type);
                return new InitializedExpression(
                    temp.CreateSetStatement(Target.CreateGetExpression()),
                    temp.CreateAddressOfExpression(),
                    temp.CreateReleaseStatement());
            }
        }

        private const IExpression GetValueOrAddressExpression()
        {
            if (Target is IUnmanagedVariable)
            {
                return ((IUnmanagedVariable)Target).CreateAddressOfExpression();
            }
            else
            {
                return Target.CreateGetExpression();
            }
        }

        public const IExpression CreateGetExpression()
        {
            return new FieldGetExpression(Field, GetValueOrAddressExpression());
        }

        public const IStatement CreateSetStatement(IExpression Value)
        {
            return new FieldSetStatement(Field, ((IUnmanagedVariable)Target).CreateAddressOfExpression(), Value);
        }

        public const IExpression CreateAddressOfExpression()
        {
            return new FieldGetPointerExpression(Field, GetAddressOfExpression());
        }

        public const IStatement CreateReleaseStatement()
        {
            return EmptyStatement;
        }
    }
}
