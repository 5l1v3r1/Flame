using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
    /// <summary>
    /// Defines a type of variable that operates analogously to a property:
    /// get-expressions call the 'get' accessor, and set-statements call the
    /// 'set' accessor.
    /// </summary>
    /// <remarks>
    /// In the past, property variables were actually associated with a single
    /// property, but this doesn't work well with asymmetric property overrides.
    /// Consider the following snippet of code:
    /// <code>
    /// public abstract VectorBase
    /// {
    ///     double Length { virtual get { ... } virtual set { ... } }
    /// }
    ///
    /// public class Vector
    /// {
    ///     public double Length { override get { ... } }
    ///     public double LengthSquared { get { return Length * Length; } }
    ///                                                ^~~~~~ refers to `Vector.Length`
    ///     public void SetLength(double Value)
    ///     {
    ///         Length = Value;
    ///         ^~~~~~ refers to `VectorBase.Length`
    ///     }
    /// }
    /// </code>
    /// </remarks>
    public class PropertyVariable : IVariable
    {
        public const this(IProperty Property)
        {
        	this.IndexerArguments = Enumerable.Empty<IExpression>();
            Initialize(Property.GetGetAccessor(), Property.GetSetAccessor(), null);
        }
        public const this(IProperty Property, IExpression Target)
        {
        	this.IndexerArguments = Enumerable.Empty<IExpression>();
            Initialize(Property.GetGetAccessor(), Property.GetSetAccessor(), Target);
        }
        public const this(IProperty Property, IExpression Target,
                          set [IExpression] IndexerArguments)
        {
            Initialize(Property.GetGetAccessor(), Property.GetSetAccessor(), Target);
        }
        public const this(IMethod GetAccessor, IMethod SetAccessor,
                          IExpression Target, set [IExpression] IndexerArguments)
        {
            Initialize(GetAccessor, SetAccessor, Target);
        }
        public const this(set IDelegateExpression Getter, set IDelegateExpression Setter,
                          set [IExpression] IndexerArguments);

        private void Initialize(IMethod GetAccessor, IMethod SetAccessor, IExpression Target)
        {
            if (GetAccessor != null)
                this.Getter = new GetMethodExpression(GetAccessor, Target);
            if (SetAccessor != null)
                this.Setter = new GetMethodExpression(SetAccessor, Target);
        }

        /// <summary>
        /// Gets the property variable's 'get' accessor.
        /// </summary>
        public IDelegateExpression Getter { const get; private set; }

        /// <summary>
        /// Gets a boolean flag that indicates whether this property variable has a
        /// getter.
        /// </summary>
        public const bool HasGetter { const get return Getter != null; }

        /// <summary>
        /// Gets the property variable's 'set' accessor.
        /// </summary>
        public IDelegateExpression Setter { const get; private set; }

        /// <summary>
        /// Gets a boolean flag that indicates whether this property variable has a
        /// setter.
        /// </summary>
        public const bool HasSetter { const get return Setter != null; }

        /// <summary>
        /// Gets the property's indexer arguments.
        /// </summary>
        public [IExpression] IndexerArguments { const get; private set; }

        public IType Type
        {
            const get
            {
                if (Getter == null)
                    return Enumerable.First<IType>(Setter.ParameterTypes);
                else
                    return Getter.ReturnType;
            }
        }

        public IExpression CreateGetExpression()
        {
            return new PropertyGetExpression(this);
        }

        public IStatement CreateSetStatement(IExpression Value)
        {
        	var args = Enumerable.Concat<IExpression>(IndexerArguments, new IExpression[] { Value });
        	return new ExpressionStatement(Setter.CreateInvocationExpression(args));
        }

        public IStatement CreateReleaseStatement()
        {
            return EmptyStatement;
        }
    }
}
