using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
    public class PropertyVariable : IVariable
    {
        public const this(set IProperty Property)
        {
        	this.Caller = null;
        	this.IndexerArguments = Enumerable.Empty<IExpression>();
        }
        public const this(set IProperty Property, set IExpression Caller)
        {
        	this.IndexerArguments = Enumerable.Empty<IExpression>();
        }
        public const this(set IProperty Property, set IExpression Caller, set [IExpression] IndexerArguments);

        public IExpression Caller { const get; private set; }
        public IProperty Property { const get; private set; }
        public [IExpression] IndexerArguments { const get; private set; }

        public PropertyVariable Accept(INodeVisitor Visitor)
        {
            var transCaller = Visitor.Visit(Caller);
            var transArgs = Visitor.VisitAll(IndexerArguments);

            if (transCaller == Caller && Enumerable.SequenceEqual<IExpression>(IndexerArguments, transArgs))
            {
                return this;
            }
            else
            {
                return new PropertyVariable(Property, transCaller, transArgs);
            }
        }

        public IType Type
        {
            const get { return Property.PropertyType; }
        }

        public IExpression CreateGetExpression()
        {
            //return new InvocationExpression(Property.GetGetAccessor(), Caller, IndexerArguments);
            return new PropertyGetExpression(this);
        }

        public IStatement CreateSetStatement(IExpression Value)
        {
        	var args = Enumerable.Concat<IExpression>(IndexerArguments, new IExpression[] { Value });
        	return new ExpressionStatement(new InvocationExpression(Property.GetSetAccessor(), Caller, args));
        }

        public IStatement CreateReleaseStatement()
        {
            return new EmptyStatement();
        }
    }
}
