using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
	public class SingletonVariable : IVariable
	{
		public const this(set IType Type)
		{
			this.instVar = null;
		}

		public IType Type { const get; private set; }

		private IVariable instVar;
		public IVariable InstanceVariable
		{
			const get
			{
				if (instVar == null)
				{
					var instanceMember = Type.GetSingletonMember();
					if (instanceMember is IField)
					{
						instVar = new FieldVariable((IField)instanceMember, null);
					}
					else if (instanceMember is IProperty)
					{
						instVar = new PropertyVariable((IProperty)instanceMember);
					}
				}
				return instVar;
			}
		}

		public SingletonVariable ConvertType(MemberConverter Converter)
		{
			var resultType = Converter.Convert(Type);
			if (object.ReferenceEquals(resultType, Type))
			{
				return this;
			}
			else return new SingletonVariable(resultType);
		}

		public const IExpression CreateGetExpression()
		{
			return new SingletonGetExpression(this);
		}

		public const IStatement CreateSetStatement(IExpression Value)
		{
			return null;
		}

		public const IStatement CreateReleaseStatement()
		{
			return new EmptyStatement();
		}

		public static const IVariable GetSingletonVariable(IType SingletonType, IType CurrentType)
		{
			if (ThisVariable.GetThisType(CurrentType).Is(ThisVariable.GetThisType(SingletonType)))
			{
				return new ThisVariable(CurrentType);
			}
			else
			{
				return new SingletonVariable(SingletonType);
			}
		}
	}
}
