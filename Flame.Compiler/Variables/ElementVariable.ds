using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
	/// <summary>
	/// A type of variable that represents an expression indexed by a sequence
	/// of arguments. Said expression's type can be either a container type, or
	/// a type with a user-defined indexer.
	/// </summary>
	public class ElementVariable : IUnmanagedVariable
	{
		/// <summary>
		/// Creates a new element variable from the given target and argument
		/// expressions.
		/// </summary>
        public const this(set IExpression Target, set [IExpression] IndexArguments)
		{
			this.indexerProp = new Lazy<IProperty>(getIndexerProperty);
			this.indexerArgTypes = new Lazy<IType[]>(getIndexerArgTypes);
		}

		/// <summary>
		/// Gets the expression that is indexed.
		/// </summary>
        public IExpression Target { const get; private set; }

		/// <summary>
		/// Gets the sequence of arguments that is used to index the target
		/// variable.
		/// </summary>
        public [IExpression] IndexArguments { const get; private set; }

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.Visit(Target);
			Visitor.VisitAll(IndexArguments);
		}

		public ElementVariable Accept(INodeVisitor Visitor)
		{
			var transTarget = Visitor.Visit(Target);
			var args = Visitor.VisitAll(IndexArguments);

			if (transTarget == Target && Enumerable.SequenceEqual<IExpression>(args, IndexArguments))
			{
				return this;
			}
			else
			{
				return new ElementVariable(transTarget, args);
			}
		}

        private Lazy<IType[]> indexerArgTypes;
		/// <summary>
		/// Gets the types of the index arguments, as an array.
		/// </summary>
        protected IType[] IndexArgumentTypes
        {
        	const get return indexerArgTypes.Value;
        }

		private IType[] getIndexerArgTypes()
		{
			var types = new List<IType>();
			foreach (var item in IndexArguments)
			{
				types.Add(item.Type);
			}
			return types.ToArray();
		}

		private Lazy<IProperty> indexerProp;
		/// <summary>
		/// Gets the user-defined indexer property this element variable relies on.
		/// </summary>
        protected IProperty IndexerProperty
        {
            const get return indexerProp.Value;
        }

		private IProperty getIndexerProperty()
		{
			return Target.Type.GetBestIndexer(false, IndexArgumentTypes);
		}

		/// <summary>
		/// Gets the return type of an indexing operation on the given
		/// target type with the given sequence of argument types.
		/// </summary>
        public static IType GetElementType(IType TargetType, [IType] ArgumentTypes)
        {
            if (TargetType.IsContainerType)
           	{
           		return TargetType.AsContainerType().ElementType;
           	}
           	else
          	{
          		var indexerProp = TargetType.GetBestIndexer(false, ArgumentTypes);
	       		return indexerProp.PropertyType;
          	}
        }

		/// <summary>
		/// Gets a boolean value that tells if this element variable could be
		/// resolved, i.e., is well-formed.
		/// </summary>
        public bool CanResolve
        {
        	const get return IsContainerElement || IndexerProperty != null;
        }

		/// <summary>
		/// Gets a boolean flag that indicates whether this element variable's
		/// target is a container element.
		/// </summary>
        public bool IsContainerElement
        {
        	const get return Target.Type.IsContainerType;
        }

        public IType Type
        {
            const get
            {
            	var targetType = Target.Type;
	            if (targetType.IsContainerType)
	           	{
	           		return targetType.AsContainerType().ElementType;
	           	}
	           	else
	          	{
		       		return IndexerProperty.PropertyType;
	          	}
            }
        }

        public IExpression CreateAddressOfExpression()
        {
            if (IsContainerElement)
            {
            	return new ContainerElementAddressOfExpression(Target, IndexArguments);
            }
            else
            {
            	// Create a temporary variable.
				// TODO: actually, we should release the local later on, rather
				// than here, to avoid UB.
                var temp = new LocalVariable(IndexerProperty.PropertyType);
                return new InitializedExpression(
					temp.CreateSetStatement(CreateGetExpression()),
					temp.CreateAddressOfExpression(),
					temp.CreateReleaseStatement());
            }
        }

        public IExpression CreateGetExpression()
        {
            if (IsContainerElement)
            {
            	return new ContainerElementGetExpression(Target, IndexArguments);
            }
            else
            {
                return new InvocationExpression(IndexerProperty.GetGetAccessor(), Target, IndexArguments);
            }
        }

        public IStatement CreateSetStatement(IExpression Value)
        {
            if (IsContainerElement)
            {
            	return new ContainerElementSetStatement(this, Value);
            }
            else
            {
            	var args = Enumerable.Concat<IExpression>(IndexArguments, new IExpression[] { Value });
                return new ExpressionStatement(new InvocationExpression(IndexerProperty.GetSetAccessor(), Target, args));
            }
        }

        public IStatement CreateReleaseStatement()
        {
        	return EmptyStatement;
        }
	}
}
