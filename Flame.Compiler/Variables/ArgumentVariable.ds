using System;
using System.Collections.Generic;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
    public class ArgumentVariable : IVariable, IUnmanagedVariable
    {
        public const this(set IParameter Parameter, set int Index);

        public IParameter Parameter { const get; private set; }
        public int Index { const get; private set; }

        public IType Type
        {
            const get { return Parameter.ParameterType; }
        }

        public const IExpression CreateGetExpression()
        {
            return new ArgumentGetExpression(this);
        }

        public const IStatement CreateSetStatement(IExpression Value)
        {
            return new ArgumentSetStatement(this, Value);
        }

        public const IStatement CreateReleaseStatement()
        {
            return new EmptyStatement();
        }

        public const IExpression CreateAddressOfExpression()
        {
            return new ArgumentAddressOfExpression(this);
        }
    }
    public class ArgumentGetExpression : VariableGetExpressionBase<ArgumentVariable>
    {
        public const this(set ArgumentVariable Variable);

        public override const ICodeBlock Emit(ICodeGenerator Generator)
        {
            var variable = Generator.GetArgument(Variable.Index);
            return variable.CreateGetExpression().Emit(Generator);
        }
    }
    public class ArgumentAddressOfExpression : VariableGetExpressionBase<ArgumentVariable>
    {
        public const this(set ArgumentVariable Variable);

        public override IType Type
        {
            const get
            {
                return Variable.Type.MakePointerType(PointerKind.ReferencePointer);
            }
        }

        public override const ICodeBlock Emit(ICodeGenerator Generator)
        {
            var variable = (IUnmanagedVariable)Generator.GetArgument(Variable.Index);
            return variable.CreateAddressOfExpression().Emit(Generator);
        }
    }
    public class ArgumentSetStatement : VariableSetStatementBase<ArgumentVariable>
    {
        public const this(set ArgumentVariable Variable, set IExpression Value);
        
        public override void Emit(IBlockGenerator Generator)
        {
            var variable = Generator.CodeGenerator.GetArgument(Variable.Index);
            variable.CreateSetStatement(Value).Emit(Generator);
        }
    }
}