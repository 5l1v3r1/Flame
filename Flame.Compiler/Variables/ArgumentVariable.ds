using System;
using System.Collections.Generic;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
    public class ArgumentVariable : IVariable, IUnmanagedVariable
    {
        public const this(set IParameter Parameter, set int Index);

        public IParameter Parameter { const get; private set; }
        public int Index { const get; private set; }

        public IType Type
        {
            const get { return Parameter.ParameterType; }
        }

        public const IExpression CreateGetExpression()
        {
            return new ArgumentGetExpression(this);
        }

        public const IStatement CreateSetStatement(IExpression Value)
        {
            return new ArgumentSetStatement(this, Value);
        }

        public const IStatement CreateReleaseStatement()
        {
            return new EmptyStatement();
        }

        public const IExpression CreateAddressOfExpression()
        {
            return new ArgumentAddressOfExpression(this);
        }

        public override const int GetHashCode()
        {
            return Index;
        }
        public const bool Equals(ArgumentVariable Other)
        {
            return Index == Other.Index;
        }
        public override const bool Equals(object Other)
        {
            return Other is ArgumentVariable && Equals((ArgumentVariable)Other);
        }
    }
    public class ArgumentGetExpression : VariableGetExpressionBase<ArgumentVariable>
    {
        public const this(set ArgumentVariable Variable);

        public override IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public override const ICodeBlock Emit(ICodeGenerator Generator)
        {
            var variable = Generator.GetArgument(Variable.Index);
            return variable.EmitGet();
        }
    }
    public class ArgumentAddressOfExpression : VariableGetExpressionBase<ArgumentVariable>
    {
        public const this(set ArgumentVariable Variable);

        public override IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public override IType Type
        {
            const get
            {
                return Variable.Type.MakePointerType(PointerKind.ReferencePointer);
            }
        }

        public override const ICodeBlock Emit(ICodeGenerator Generator)
        {
            var variable = ((IUnmanagedCodeGenerator)Generator).GetUnmanagedArgument(Variable.Index);
            return variable.EmitAddressOf();
        }
    }
    public class ArgumentSetStatement : VariableSetStatementBase<ArgumentVariable>
    {
        public const this(set ArgumentVariable Variable, set IExpression Value);

        public override IStatement Accept(INodeVisitor Visitor)
        {
            var transVal = Visitor.Visit(Value);

            if (transVal == Value)
            {
                return this;
            }
            else
            {
                return new ArgumentSetStatement(Variable, transVal);
            }
        }

        public override ICodeBlock Emit(ICodeGenerator Generator)
        {
            var variable = Generator.GetArgument(Variable.Index);
            return variable.EmitSet(Value.Emit(Generator));
        }
    }
}
