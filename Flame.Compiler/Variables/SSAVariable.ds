using System;
using System.Collections.Generic;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Variables
{
    /// <summary>
    /// Defines a class for local variables that are in single-static-assignment
    /// (SSA) form. The main property of these variables is that they are
    /// assigned to exactly once.
    /// </summary>
    public class SSAVariable : LocalVariableBase
    {
        /// <summary>
        /// Creates an SSA local variable from the given variable member and
        /// unique tag.
        /// </summary>
    	public const this(IVariableMember Member, UniqueTag Tag)
            : base(Member, Tag);

        /// <summary>
        /// Creates an SSA local variable from the given variable member.
        /// </summary>
        public const this(IVariableMember Member)
            : base(Member);

        /// <summary>
        /// Creates an SSA local variable from the given type.
        /// </summary>
        public const this(IType Type)
            : base(Type);

        /// <summary>
        /// Creates an SSA local variable from the given name and type.
        /// </summary>
        public const this(string Name, IType Type)
            : base(Name, Type);

        /// <summary>
        /// Gets the emit variable for this SSA local variable, in
        /// the given code generator.
        /// </summary>
        public override IEmitVariable GetEmitVariable(ICodeGenerator CodeGenerator)
        {
            // Prefer SSA variables.
            if (CodeGenerator is ISSACodeGenerator)
                return ((ISSACodeGenerator)CodeGenerator)
                    .GetOrDeclareSSALocal(Tag, Member);
            else
                return CodeGenerator.GetOrDeclareLocal(Tag, Member);
        }

        /// <summary>
        /// Converts this local variable's type by applying the given
        /// member converter.
        /// </summary>
        public override LocalVariableBase ConvertType(MemberConverter Converter)
        {
            var convType = Converter.Convert(this.Type);
            if (convType == this.Type)
                return this;
            else
                return new SSAVariable(
                    new RetypedVariableMember(this.Member, convType),
                    this.Tag);
        }

        public override IExpression CreateGetExpression()
        {
            return new SSAGetExpression(this);
        }

        public override IStatement CreateSetStatement(IExpression Value)
        {
            return new SSADefineStatement(this, Value);
        }

        public override IStatement CreateReleaseStatement()
        {
            return EmptyStatement;
        }

        public bool Equals(SSAVariable Other)
        {
            return this.Tag == Other.Tag;
        }

        public override bool Equals(object Other)
        {
            return Other is SSAVariable && Equals((SSAVariable)Other);
        }

        public override int GetHashCode()
        {
            return this.Tag.GetHashCode();
        }

        public override string ToString()
        {
            return "ssa-local(" + Member.Name + ")";
        }
    }

    public class SSAGetExpression : VariableGetExpressionBase<SSAVariable>,
                                    IMemberNode
    {
        public const this(set SSAVariable Variable);

        public override IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public override const ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Variable.GetEmitVariable(Generator).EmitGet();
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var convArg = (SSAVariable)Variable.ConvertType(Converter);
            if (object.ReferenceEquals(convArg, Variable))
                return this;
            else
                return new SSAGetExpression(convArg);
        }

        public override const string ToString()
        {
            return (string)Variable;
        }
    }

    public class SSADefineStatement : VariableSetStatementBase<SSAVariable>,
                                      IMemberNode
    {
        public const this(set SSAVariable Variable, set IExpression Value);

        public override IStatement Accept(INodeVisitor Visitor)
        {
            var transVal = Visitor.Visit(Value);

            if (transVal == Value)
            {
                return this;
            }
            else
            {
                return new SSADefineStatement(Variable, transVal);
            }
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var convArg = (SSAVariable)Variable.ConvertType(Converter);
            if (object.ReferenceEquals(convArg, Variable))
                return this;
            else
                return new SSADefineStatement(convArg, Value);
        }

        public override ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Variable.GetEmitVariable(Generator).EmitSet(Value.Emit(Generator));
        }

        public override const string ToString()
        {
            return (string)Variable + " = " + Value;
        }
    }
}
