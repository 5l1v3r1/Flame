using System;
using System.Collections.Generic;
using Flame.Compiler.Emit;

namespace Flame.Compiler
{
    /// <summary>
    /// Defines an expression: a code node focused on yielding a value.
    /// </summary>
    public interface IExpression : INode
    {
        /// <summary>
        /// Gets the type of object that the expression will return.
        /// </summary>
        IType Type { const get; }

        /// <summary>
        /// Gets a boolean value that indicates if the expression is a constant expression.
        /// A constant expression has no side-effects, and depends soley on
        /// information that is known at compile-time.
        /// </summary>
        /// <remarks>
        /// Constant expressions can often be evaluated at compile-time,
        /// but this is not a requirement. For example, a sizeof(type) expression is
        /// constant by its very nature, but cannot be evaluated before the
        /// layout of the type has been defined.
        /// </remarks>
        bool IsConstant { const get; }

        /// <summary>
        /// Performs a compile-time evaluation of the expression.
        /// If it cannot be evaluated, null is returned.
        /// </summary>
        /// <returns></returns>
        IBoundObject Evaluate();

        /// <summary>
        /// Returns an optimized version of the expression.
        /// </summary>
        /// <returns></returns>
        IExpression Optimize();

        /// <summary>
        /// Accepts a node visitor.
        /// This method is applies the visitor to this node's children and
        /// returns a new node with the same structure as this node, but with
        /// the updated children.
        /// If this node has no children, this node is returned.
        /// </summary>
        IExpression Accept(INodeVisitor Visitor);
    }

    /// <summary>
    /// Defines common behavior for delegate expressions, i.e. expressions
    /// that can support creating invocation.
    /// </summary>
    public interface IDelegateExpression : IExpression
    {
        /// <summary>
        /// Gets the delegate expression's parameter types.
        /// </summary>
        [IType] ParameterTypes { const get; }

        /// <summary>
        /// Creates an invocation expression based on this delegate expression and
        /// the given arguments.
        /// </summary>
        IExpression CreateInvocationExpression([IExpression] Arguments);

        /// <summary>
        /// Creates a generic delegate instantiation.
        /// </summary>
        IDelegateExpression MakeGenericExpression([IType] TypeArguments);
    }
}
