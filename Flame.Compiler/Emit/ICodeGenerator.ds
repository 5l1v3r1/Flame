using System;
using System.Collections.Generic;
using Flame.Compiler.Emit;

namespace Flame.Compiler
{
	/// <summary>
	/// Provides common functionality for code generators. Code generators take care of the generation of individual blocks of code.
	/// </summary>
	/// <remarks>
	/// All code generators must implement this interface.
	/// They may, however, refuse certain block creation/emit requests by returning null.
	/// It is up to the client to use some workaround for the issue, or log an error/throw an exception if it can't.
	/// For example: a code generator may choose to refuse to generate binary blocks for non-intrinsic types.
	/// A binary expression will then likely try to circumvent the issue by emitting a call an the operator overload.
	/// </remarks>
	public interface ICodeGenerator : IMethodStructureGenerator
	{
		/// <summary>
		/// Creates a void block, which is the equivalent of the empty statement.
		/// </summary>
		ICodeBlock EmitVoid();

		/// <summary>
		/// Creates a block that executes that given blocks in sequence.
		/// </summary>
		ICodeBlock EmitSequence(ICodeBlock First, ICodeBlock Second);

		/// <summary>
		/// Creates a tagged block: a block that supports "break" and "continue".
		/// "break" means: jump to the end of this block; "continue" means:
		/// jump to the start of this block.
		/// </summary>
		ICodeBlock EmitTagged(BlockTag Tag, ICodeBlock Contents);

		/// <summary>
		/// Creates a block that executes and returns the given if body if the
		/// given condition block evaluates to true. Otherwise, the given else
		/// block is executed.
		/// </summary>
		ICodeBlock EmitIfElse(ICodeBlock Condition, ICodeBlock IfBody, ICodeBlock ElseBody);

		/// <summary>
		/// Creates a block that 'pops' a value: the value of the given code block
		/// is discarded, and replaced by void.
		/// </summary>
		ICodeBlock EmitPop(ICodeBlock Value);

		/// <summary>
		/// Creates a return block: a block that terminates the containing
		/// function's exection and transfers control back to the calling block.
		/// </summary>
		ICodeBlock EmitReturn(ICodeBlock Value);

		/// <summary>
		/// Creates a break block: a block that 'breaks' out of the given enclosing block:
		/// control is transferred to the block that trails said block.
		/// </summary>
		ICodeBlock EmitBreak(BlockTag Target);

		/// <summary>
		/// Creates a continue block: a block that stops the execution of the
		/// given enclosing block's body, and starts the next iteration.
		/// </summary>
		ICodeBlock EmitContinue(BlockTag Target);

		#region Constants

		/// <summary>
		/// Creates a boolean constant block.
		/// </summary>
		ICodeBlock EmitBoolean(bool Value);
		/// <summary>
		/// Creates a character constant block.
		/// </summary>
		ICodeBlock EmitChar(char Value);

		/// <summary>
		/// Creates an 8-bit unsigned integer constant block.
		/// </summary>
		ICodeBlock EmitUInt8(uint8 Value);
		/// <summary>
		/// Creates an 8-bit signed integer constant block.
		/// </summary>
		ICodeBlock EmitInt8(int8 Value);
		/// <summary>
		/// Creates an 8-bit constant block.
		/// </summary>
		ICodeBlock EmitBit8(bit8 Value);

		/// <summary>
		/// Creates a 16-bit unsigned integer constant block.
		/// </summary>
		ICodeBlock EmitUInt16(uint16 Value);
		/// <summary>
		/// Creates a 16-bit signed integer constant block.
		/// </summary>
		ICodeBlock EmitInt16(int16 Value);
		/// <summary>
		/// Creates a 16-bit constant block.
		/// </summary>
		ICodeBlock EmitBit16(bit16 Value);

		/// <summary>
		/// Creates a 32-bit unsigned integer constant block.
		/// </summary>
		ICodeBlock EmitUInt32(uint32 Value);
		/// <summary>
		/// Creates a 32-bit signed integer constant block.
		/// </summary>
		ICodeBlock EmitInt32(int32 Value);
		/// <summary>
		/// Creates a 32-bit constant block.
		/// </summary>
		ICodeBlock EmitBit32(bit32 Value);
		/// <summary>
		/// Creates a 32-bit floating point number constant block.
		/// </summary>
		ICodeBlock EmitFloat32(float32 Value);

		/// <summary>
		/// Creates a 64-bit unsigned integer constant block.
		/// </summary>
		ICodeBlock EmitUInt64(uint64 Value);
		/// <summary>
		/// Creates a 64-bit signed integer constant block.
		/// </summary>
		ICodeBlock EmitInt64(int64 Value);
		/// <summary>
		/// Creates a 64-bit constant block.
		/// </summary>
		ICodeBlock EmitBit64(bit64 Value);
		/// <summary>
		/// Creates a 64-bit floating point number constant block.
		/// </summary>
		ICodeBlock EmitFloat64(float64 Value);

		/// <summary>
		/// Creates a string constant block.
		/// </summary>
		ICodeBlock EmitString(string Value);
		/// <summary>
		/// Creates a null constant block.
		/// </summary>
		ICodeBlock EmitNull();

		#endregion

		#region Math

		/// <summary>
		/// Creates a binary operation block that performs the given operation
		/// on the given values.
		/// </summary>
		ICodeBlock EmitBinary(ICodeBlock A, ICodeBlock B, Operator Op);
		/// <summary>
		/// Creates a unary operation block that performs the given operation
		/// on the given value.
		/// </summary>
		ICodeBlock EmitUnary(ICodeBlock Value, Operator Op);

		#endregion

		#region Object Model

		/// <summary>
		/// Emits a binary operation that takes a value and a type as arguments.
		/// Casts, conversions and isinstance tests all use this format.
		/// </summary>
		ICodeBlock EmitTypeBinary(ICodeBlock Value, IType Type, Operator Op);

		/// <summary>
		/// Creates a block that contains the default value for the given type.
		/// </summary>
		ICodeBlock EmitDefaultValue(IType Type);

		/// <summary>
		/// Creates a block that contains a delegate to the given method with the given caller.
		/// Said caller may be null, if the method is static. The given operator
		/// is used to create the method with, which may encode information such
		/// as virtualness.
		/// </summary>
		ICodeBlock EmitMethod(IMethod Method, ICodeBlock Caller, Operator Op);

		/// <summary>
		/// Creates a block that invokes the given method with the given
		/// arguments.
		/// </summary>
		ICodeBlock EmitInvocation(ICodeBlock Method, [ICodeBlock] Arguments);

		/// <summary>
        /// Creates a new array of the specified element type with the specified dimensions.
        /// </summary>
        /// <param name="ElementType"></param>
        /// <param name="Dimensions"></param>
        ICodeBlock EmitNewArray(IType ElementType, [ICodeBlock] Dimensions);
        /// <summary>
        /// Creates a new vector of the specified element type with the specified dimensions.
        /// </summary>
        /// <param name="ElementType"></param>
        /// <param name="Dimensions"></param>
        ICodeBlock EmitNewVector(IType ElementType, IReadOnlyList<int> Dimensions);

		IEmitVariable GetElement(ICodeBlock Value, [ICodeBlock] Index);
		IEmitVariable GetField(IField Field, ICodeBlock Target);

		#endregion
	}

	/// <summary>
	/// A code generator that supports creating 'while' blocks.
	/// </summary>
	public interface IWhileCodeGenerator : ICodeGenerator
	{
		/// <summary>
		/// Creates a block that repeats the given body as long as the given condition
		/// block evaluates to true.
		/// </summary>
		ICodeBlock EmitWhile(BlockTag Tag, ICodeBlock Condition, ICodeBlock Body);
	}

	/// <summary>
	/// A code generator that supports creating 'do...while' blocks.
	/// </summary>
	public interface IDoWhileCodeGenerator : ICodeGenerator
	{
		/// <summary>
		/// Creates a block that executes the given body once, and then keeps on executing
		/// it as long as the given condition block evaluates to true.
		/// </summary>
		ICodeBlock EmitDoWhile(BlockTag Tag, ICodeBlock Body, ICodeBlock Condition);
	}
}
