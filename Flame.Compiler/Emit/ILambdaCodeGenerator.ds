using System;

namespace Flame.Compiler.Emit
{
    public interface ILambdaCodeGenerator : ICodeGenerator
    {
        /// <summary>
        /// Creates a lambda header block for a lambda that has the given
        /// method signature and sequence of captured values.
        /// </summary>
        ILambdaHeaderBlock EmitLambdaHeader(IMethod Member, [ICodeBlock] CapturedValues);

        /// <summary>
        /// Creates a lambda from the given header and body block.
        /// </summary>
        ICodeBlock EmitLambda(ILambdaHeaderBlock Header, ICodeBlock Body);
    }

    /// <summary>
    /// An common interface for lambda header blocks.
    /// </summary>
    public interface ILambdaHeaderBlock
    {
        /// <summary>
        /// Creates a code block that gets the lambda's captured value with
        /// the given index.
        /// </summary>
        ICodeBlock EmitGetCapturedValue(int Index);

        /// <summary>
        /// Gets a code block that represents a delegate for this lambda function.
        /// This construct is designed to support recursion within a lambda function.
        /// </summary>
        ICodeBlock ThisLambdaBlock { const get; }

        /// <summary>
        /// Gets a code generator that should be used to construct the lambda's
        /// body.
        /// </summary>
        ICodeGenerator LambdaCodeGenerator { const get; }
    }
}
