using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Emit
{
	/// <summary>
	/// Defines an interface for code generators that can deal with exceptions.
	/// </summary>
	public interface IExceptionCodeGenerator : ICodeGenerator
	{
		/// <summary>
		/// Creates a new catch header based on the given exception variable.
		/// </summary>
		ICatchHeader EmitCatchHeader(IVariableMember ExceptionVariable);

		/// <summary>
		/// Creates a new catch clause based on the given header and body.
		/// </summary>
		ICatchClause EmitCatchClause(ICatchHeader Header, ICodeBlock Body);

		/// <summary>
		/// Creates a try/catch/finally block from a try body, a finally body and
		/// zero or more catch clauses.
		/// </summary>
		ICodeBlock EmitTryBlock(ICodeBlock TryBody, ICodeBlock FinallyBody, [ICatchClause] CatchClauses);

		/// <summary>
		/// Creates a block that throws the given exception.
		/// </summary>
		ICodeBlock EmitThrow(ICodeBlock Exception);

		/// <summary>
		/// Emits an assertion on the given code block.
		/// </summary>
		ICodeBlock EmitAssert(ICodeBlock Condition);
	}

	/// <summary>
	/// Defines a header for a catch clause, which contains the variable that
	/// will hold the exception if one is thrown.
	/// </summary>
	public interface ICatchHeader
	{
		/// <summary>
		/// Gets the catch header's exception variable.
		/// </summary>
		IEmitVariable ExceptionVariable { const get; }
	}

	/// <summary>
	/// Defines a catch clause.
	/// </summary>
	public interface ICatchClause
	{
		/// <summary>
		/// Gets the catch clause's header.
		/// </summary>
		ICatchHeader Header { const get; }
	}
}
