using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Emit
{
	/// <summary>
	/// Defines an interface for code generators that can deal with exceptions.
	/// </summary>
	public interface IExceptionCodeGenerator : ICodeGenerator
	{
		/// <summary>
		/// Creates a new try/catch/finally block generator.
		/// </summary>
		ITryBlockGenerator CreateTryBlock();
		
		/// <summary>
		/// Creates a block that throws the given exception.
		/// </summary>
		ICodeBlock EmitThrow(ICodeBlock Exception);
		
		/// <summary>
		/// Emits an assertion on the given code block.
		/// </summary>
		ICodeBlock EmitAssert(ICodeBlock Condition);
	}
	
	/// <summary>
	/// Provides common functionality for try/catch/finally block generation.
	/// </summary>
	public interface ITryBlockGenerator : ICodeBlock
	{
		/// <summary>
		/// Gets the try block's try body generator.
		/// </summary>
		IBlockGenerator TryBody { const get; }
		
		/// <summary>
		/// Gets the try block's finally body generator.
		/// </summary>
		IBlockGenerator FinallyBody { const get; }
		
		/// <summary>
		/// Creates a new catch clause for the given exception variable.
		/// </summary>
		ICatchBlockGenerator EmitCatchClause(IVariableMember ExceptionVariable);
	}
	
	public interface ICatchBlockGenerator : IBlockGenerator
	{
		IVariable ExceptionVariable { const get; }
	}
}