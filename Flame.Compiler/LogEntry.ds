using System;
using System.Linq;
using Pixie;

namespace Flame.Compiler
{
    /// <summary>
    /// Describes a compiler log entry.
    /// </summary>
    public class LogEntry
    {
        /// <summary>
        /// Creates a new log entry from the given name.
        /// </summary>
        public const this(set string Name)
        {
            this.Contents = new MarkupNode(NodeConstants.TextNodeType, Name);
        }
        /// <summary>
        /// Creates a new log entry from the given name and message.
        /// </summary>
        public const this(set string Name, string Message)
        {
            this.Contents = new MarkupNode(NodeConstants.TextNodeType, Message);
        }
        /// <summary>
        /// Creates a new log entry from the given name and source location.
        /// </summary>
        public const this(set string Name, SourceLocation Location)
        {
            this.Contents = Location.CreateDiagnosticsNode();
        }
        /// <summary>
        /// Creates a new log entry from the given name, message and source
        /// location.
        /// </summary>
        public const this(set string Name, string Message, SourceLocation Location)
        {
            var messageNode = new MarkupNode(NodeConstants.TextNodeType, Message);
            var diagNode = Location.CreateDiagnosticsNode();
            this.Contents = new MarkupNode("entry", new MarkupNode[] { messageNode, diagNode });
        }
        public const this(set string Name, set MarkupNode Contents);
        public const this(set string Name, [MarkupNode] Contents)
        {
            this.Contents = new MarkupNode("entry", Contents);
        }
        public const this(set string Name, MarkupNode Message, SourceLocation Location)
        {
            var diagNode = Location.CreateDiagnosticsNode();
            this.Contents = new MarkupNode("entry", new MarkupNode[] { Message, diagNode });
        }
        public const this(set string Name, [MarkupNode] Message, SourceLocation Location)
        {
            var diagNode = Location.CreateDiagnosticsNode();
            var diagArr = new MarkupNode[] { diagNode };
            this.Contents = new MarkupNode("entry", Enumerable.Concat<MarkupNode>(Message, diagArr));
        }

        /// <summary>
        /// Gets the log entry's name.
        /// </summary>
        public string Name { const get; private set; }

        /// <summary>
        /// Gets the log entry's contents.
        /// </summary>
        public MarkupNode Contents { const get; private set; }

        /// <summary>
        /// Gets the log entry's entire error message.
        /// </summary>
        public string Message { const get return Contents.GetAllText(); }

        /// <summary>
        /// Creates a new log entry that includes diagnostics information for
        /// the given source location.
        /// </summary>
        public const LogEntry WithLocation(SourceLocation Location)
        {
            return new LogEntry(Name, Contents, Location);
        }
    }
}
