using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;

namespace Flame.Compiler
{
    /// <summary>
    /// Provides extensions for method groups:
    /// groups of methods that are contained in an expression.
    /// </summary>
    public static class MethodGroupExtensions
    {
        /// <summary>
        /// Gets the method group contained in this expression.
        /// </summary>
        public static IEnumerable<IMethod> GetMethodGroup(
            this IExpression Expression)
        {
            return MethodType.GetIntersectedMethods(Expression.Type);
        }

        /// <summary>
        /// Creates an expression that invokes the given delegate expression.
        /// </summary>
        /// <param name="Expression">The delegate to invoke.</param>
        /// <param name="Arguments">The argument list for the call.</param>
        /// <returns>An expression that invokes the delegate and produces a result value.</returns>
        public static IExpression CreateDelegateInvocationExpression(
            this IExpression Expression,
            IEnumerable<IExpression> Arguments)
        {
            if (Expression is IDelegateExpression)
            {
                return ((IDelegateExpression)Expression).CreateInvocationExpression(Arguments);
            }
            else
            {
                var exprType = Expression.Type;
                if (exprType.HasAttribute(MethodType.DelegateAttributeType))
                {
                    var invokeMethod = MethodType.GetMethod(exprType);
                    return new InvocationExpression(invokeMethod, Expression, Arguments);
                }
                else
                {
                    return new InvocationExpression(Expression, Arguments);
                }
            }
        }

        public static IExpression MakeGenericDelegateExpression(
            this IExpression Expression,
            IEnumerable<IType> TypeArguments)
        {
            if (Expression is IDelegateExpression)
            {
                return ((IDelegateExpression)Expression).MakeGenericExpression(TypeArguments);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Gets an expression's delegate parameter types.
        /// </summary>
        public static IEnumerable<IType> GetDelegateParameterTypes(
            this IExpression Expression)
        {
            if (Expression is IDelegateExpression)
            {
                return ((IDelegateExpression)Expression).ParameterTypes;
            }
            else
            {
                var method = MethodType.GetMethod(Expression.Type);
                if (method == null)
                {
                    return null;
                }
                else
                {
                    return method.Parameters.GetTypes();
                }
            }
        }

        /// <summary>
        /// Filters out all delegates in the given sequence of method that have
        /// an override or implementation which is also present in the given array.
        /// </summary>
        public static IExpression[] FilterBaseDelegates(
            this IEnumerable<IExpression> Methods)
        {
            /*
            // This *should* compile, but doesn't. :(

            alias DelegPair = Tuple<IExpression, IMethod>;

            var tupleMethods   = Enumerable.Select<IExpression, DelegPair>(Methods,
                DelegPair(IExpression x) => new DelegPair(x, MethodType.GetMethod(x.Type)));

            var filteredTuples = Enumerable.Where<DelegPair>(
                bool(DelegPair x) => x.Item2 != null);

            var upper          = SetExtensions.UpperBounds<DelegPair>(filteredTuples,
                bool(DelegPair x, DelegPair y) => y.Item2.Shadows(x.Item1));

            return Enumerable.ToArray<IExpression>(
                    Enumerable.Select<DelegPair, IExpression>(upper,
                        IExpression(DelegPair x) => x.Item1));
            */

            var results = new List<IExpression>();
            var resultMethods = new List<IMethod>();
            foreach (var elem in Methods)
            {
                bool shouldInsert = true;

                var item = MethodType.GetMethod(elem.Type);

                if (item == null)
                {
                    shouldInsert = false;
                }

                for (int i = 0; i < resultMethods.Count && shouldInsert; i++)
                {
                    if (item.Shadows(resultMethods[i]))
                    {
                        resultMethods[i] = item;
                        results[i] = elem;
                        shouldInsert = false;
                    }
                    else if (resultMethods[i].Shadows(item))
                    {
                        shouldInsert = false;
                    }
                }

                if (shouldInsert)
                {
                    results.Add(elem);
                    resultMethods.Add(item);
                }
            }
            return results.ToArray();
        }

        /// <summary>
        /// Gets the delegates that match the specified parameter types best.
        /// </summary>
        /// <param name="ParameterTypes"></param>
        /// <returns></returns>
        public static IExpression[] GetBestDelegates(
            this IEnumerable<IExpression> Candidates,
            IType[] ParameterTypes)
        {
            var paramTypes = ParameterTypes;
            var dict = new Dictionary<IExpression, IType[]>();
            foreach (var elem in Candidates)
            {
                var elemParamTypes = elem.GetDelegateParameterTypes();
                if (elemParamTypes != null)
                    dict.Add(elem, Enumerable.ToArray<IType>(elemParamTypes));
            }
            var sortedMethodList = MemberSelection.SortByParameterMatch<IExpression>(paramTypes, dict);
            return sortedMethodList.FilterBaseDelegates();
        }

        /// <summary>
        /// Gets the delegate expression that matches the specifies parameter
        /// types best.
        /// </summary>
        public static IExpression GetBestDelegate(
            this IEnumerable<IExpression> Candidates,
            IType[] ParameterTypes)
        {
            var bestElems = Candidates.GetBestDelegates(ParameterTypes);
            if (bestElems.Length == 1)
                return bestElems[0];
            else
                return null;
        }
    }
}
