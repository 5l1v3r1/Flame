using System;
using System.Collections.Generic;
using System.Text;
using Pixie;

namespace Flame.Compiler
{
    public static class CompilerLogExtensions
    {
        /// <summary>
        /// Logs an error to the compiler log based on the given error message.
        /// </summary>
        public static void LogError(this ICompilerLog Log, string Message)
        {
            Log.LogError(new LogEntry(Message));
        }

        /// <summary>
        /// Logs an event to the compiler log based on the given event name.
        /// </summary>
        public static void LogEvent(this ICompilerLog Log, string EventName)
        {
            Log.LogEvent(new LogEntry(EventName));
        }

        /// <summary>
        /// Logs an exception to the compiler log as an error.
        /// </summary>
        public static void LogException(this ICompilerLog Log, Exception ex)
        {
            var entry = new LogEntry("exception", ex.ToString());
            Log.LogError(entry);
        }

        /// <summary>
        /// "Concatenates" two source locations.
        /// The resulting source location is a source location that contains every
        /// position the argument locations contain, as well as every position inbetween.
        /// The resulting location's source document is the right-hand argument's document
        /// if the left-hand's document is null. Otherwise, it is the left-hand argument's
        /// document.
        /// </summary>
        public static SourceLocation Concat(this SourceLocation Location, SourceLocation Other)
        {
            if (Location == null || Location.Position < 0) return Other;
            else if (Other == null || Other.Position < 0) return Location;

            int pos = Math.Min(Location.Position, Other.Position);
            int len = Math.Max(Location.Position + Location.Length, Other.Position + Other.Length) - pos;
            if (Location.Document == null)
            {
                return new SourceLocation(Other.Document, pos, len);
            }
            else
            {
                return new SourceLocation(Location.Document, pos, len);
            }
        }

        /// <summary>
        /// Creates a remark node with the given title that contains
        /// source code diagnostics for this source location.
        /// </summary>
        public static MarkupNode CreateRemarkDiagnosticsNode(this SourceLocation Location, string Title)
        {
            if (Location == null)
            {
                return new MarkupNode(NodeConstants.TextNodeType, "");
            }

            var oldSrc = Location.CreateSourceNode();
            var neutralOldSrc = new MarkupNode("neutral-diagnostics", new MarkupNode[] { oldSrc });
            var oldTitle = new MarkupNode(NodeConstants.BrightNodeType, Title);
            var oldMessage = CreateLineNumberNode(Location);

            return new MarkupNode(NodeConstants.RemarksNodeType, new MarkupNode[]
            {
                oldTitle,
                oldMessage,
                neutralOldSrc
            });
        }

        /// <summary>
        /// Creates a source code diagnostics node.
        /// </summary>
        public static MarkupNode CreateDiagnosticsNode(this SourceLocation Location)
        {
            if (Location == null)
                return new MarkupNode(NodeConstants.TextNodeType, "");

            var doc = Location.Document;
            var gridPos = Location.GridPosition;

            if (gridPos.Line < 0)
            {
                return new MarkupNode(NodeConstants.RemarksNodeType, new MarkupNode[]
                {
                    new MarkupNode(NodeConstants.TextNodeType, "In "),
                    CreateLineNumberNode(Location),
                    new MarkupNode(NodeConstants.TextNodeType, ".")
                });
            }

            var srcNode = CreateSourceNode(doc, gridPos, Location.Length);

            var attrs = new Dictionary<string, object>();
            attrs[NodeConstants.SourceLocationAttribute] = Location;
            return new MarkupNode(
                NodeConstants.DiagnosticsNodeType,
                new PredefinedAttributes(attrs),
                new MarkupNode[] { srcNode });
        }

        public static MarkupNode CreateSourceNode(this SourceLocation Location)
        {
            var doc = Location.Document;
            var gridPos = Location.GridPosition;
            if (gridPos.Line < 0)
            {
                return new MarkupNode(NodeConstants.TextNodeType, "");
            }

            return CreateSourceNode(doc, gridPos, Location.Length);
        }

        public static MarkupNode CreateSourceNode(ISourceDocument doc, SourceGridPosition gridPos, int Length)
        {
            string lineText = doc.GetLine(gridPos.Line);
            int offset = gridPos.Offset;
            int length = Math.Min(Length, lineText.Length - offset);
            var preTextNode = new MarkupNode(NodeConstants.TextNodeType, lineText.Substring(0, offset));
            string highlightedText = lineText.Substring(offset, length);
            if (string.IsNullOrWhiteSpace(highlightedText))
            {
                // Make sure we have at least a whitespace
                // character to highlight. This handles the
                // inconvenient case where the text to highlight
                // is located at the end of a line.
                highlightedText = " ";
            }
            var highlightTextNode = new MarkupNode(NodeConstants.HighlightNodeType, highlightedText);
            var postTextNode = new MarkupNode(NodeConstants.TextNodeType, lineText.Substring(offset + length));

            var srcNode = new MarkupNode(NodeConstants.SourceNodeType, new MarkupNode[]
            {
                preTextNode, highlightTextNode, postTextNode
            });

            return srcNode;
        }

        /// <summary>
        /// Creates a line number node from the given source location.
        /// </summary>
        public static MarkupNode CreateLineNumberNode(SourceLocation Location)
        {
            var attrs = new Dictionary<string, object>();
            attrs[NodeConstants.SourceLocationAttribute] = Location;
            return new MarkupNode(
                NodeConstants.SourceLocationNodeType,
                new PredefinedAttributes(attrs));
        }
    }
}
