using System;

namespace Flame.Compiler
{
    public static class CompilerLogExtensions
    {
        /// <summary>
        /// Logs an error to the compiler log based on the given error message.
        /// </summary>
        public static void LogError(this ICompilerLog Log, string Message)
        {
            Log.LogError(new LogEntry(Message));
        }

        /// <summary>
        /// Logs an event to the compiler log based on the given event name.
        /// </summary>
        public static void LogEvent(this ICompilerLog Log, string EventName)
        {
            Log.LogEvent(new LogEntry(EventName));
        }

        /// <summary>
        /// Logs an exception to the compiler log as an error.
        /// </summary>
        public static void LogException(this ICompilerLog Log, Exception ex)
        {
            var entry = new LogEntry("Exception", ex.ToString());
            Log.LogError(entry);
        }

        /// <summary>
        /// "Concatenates" two source locations.
        /// The resulting source location is a source location that contains every
        /// position the argument locations contain, as well as every position inbetween.
        /// The resulting location's source document is the right-hand argument's document
        /// if the left-hand's document is null. Otherwise, it is the left-hand argument's
        /// document.
        /// </summary>
        public static const SourceLocation Concat(this SourceLocation Location, SourceLocation Other)
        {
            if (Location == null || Location.Position < 0) return Other;
            else if (Other == null || Other.Position < 0) return Location;

            int pos = Math.Min(Location.Position, Other.Position);
            int len = Math.Max(Location.Position + Location.Length, Other.Position + Other.Length) - pos;
            if (Location.Document == null)
            {
                return new SourceLocation(Other.Document, pos, len);
            }
            else
            {
                return new SourceLocation(Location.Document, pos, len);
            }
        }
    }
}
