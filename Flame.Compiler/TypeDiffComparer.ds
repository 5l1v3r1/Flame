using System;
using System.Collections.Generic;
using Flame.Build;
using Pixie;

namespace Flame.Compiler
{
    public virtual class TypeDiffComparer : TypeComparerBase<MarkupNode>
    {
        public this(set IConverter<IType, string> TypeNamer);
        public this()
        {
            this.TypeNamer = new TypeNamerBase();
        }

        public IConverter<IType, string> TypeNamer { get; private set; }

        public static MarkupNode HighlightNode(MarkupNode Node)
        {
            return new MarkupNode(NodeConstants.HighlightNodeType, new MarkupNode[] { Node });
        }

        public static MarkupNode HighlightExtraNode(MarkupNode Node)
        {
            var dict = new Dictionary<string, object>();
            dict[NodeConstants.HighlightingTypeAttribute] = NodeConstants.ExtraHighlightingType;
            var attrs = new PredefinedAttributes(dict);
            return new MarkupNode(NodeConstants.HighlightNodeType, attrs, new MarkupNode[] { Node });
        }

        public static MarkupNode HighlightMissingNode(MarkupNode Node)
        {
            var dict = new Dictionary<string, object>();
            dict[NodeConstants.HighlightingTypeAttribute] = NodeConstants.MissingHighlightingType;
            var attrs = new PredefinedAttributes(dict);
            return new MarkupNode(NodeConstants.HighlightNodeType, attrs, new MarkupNode[] { Node });
        }
        public static MarkupNode HighlightNode(string Text)
        {
            return HighlightNode(ToTextNode(Text));
        }
        public static MarkupNode HighlightExtraNode(string Text)
        {
            return HighlightExtraNode(ToTextNode(Text));
        }
        public static MarkupNode HighlightMissingNode(string Text)
        {
            return HighlightMissingNode(ToTextNode(Text));
        }

        public static MarkupNode ToTextNode(string Text)
        {
            return new MarkupNode(NodeConstants.TextNodeType, Text);
        }

        protected void AddDelimitedComparisonList(List<MarkupNode> Target, [MarkupNode] Comparisons, string LeftDelimiter, string Separator, string RightDelimiter)
        {
            Target.Add(ToTextNode(LeftDelimiter));
            bool isFirst = true;
            foreach (var item in Comparisons)
            {
                if (isFirst)
                {
                    isFirst = false;
                }
                else Target.Add(ToTextNode(Separator));
                Target.Add(item);
            }
            Target.Add(ToTextNode(RightDelimiter));
        }

        protected MarkupNode CreateDelimitedComparisonList([MarkupNode] Comparisons, string LeftDelimiter, string Separator, string RightDelimiter)
        {
            var nodes = new List<MarkupNode>();
            AddDelimitedComparisonList(nodes, Comparisons, LeftDelimiter, Separator, RightDelimiter);
            return new MarkupNode("node", nodes);
        }

        protected override MarkupNode CompareDefault(IType First, IType Second)
        {
            string secondName = TypeNamer.Convert(Second);
            if (First.Is(Second))
            {
                return ToTextNode(GenericNameExtensions.TrimGenerics(secondName));
            }
            else return HighlightNode(secondName);
        }
        protected override MarkupNode MakeGenericInstanceComparison(MarkupNode DeclarationComparison, [MarkupNode] TypeArgumentComparisons)
        {
            var nodes = new List<MarkupNode>();
            nodes.Add(DeclarationComparison);
            AddDelimitedComparisonList(nodes, TypeArgumentComparisons, "<", ", ", ">");
            return new MarkupNode("node", nodes);
        }
        protected override MarkupNode MakePointerComparison(MarkupNode ElementComparison, PointerKind FirstKind, PointerKind SecondKind)
        {
            if (FirstKind == SecondKind)
            {
                return new MarkupNode("node", new MarkupNode[] { ElementComparison, ToTextNode(SecondKind.ToString()) });
            }
            else return new MarkupNode("node", new MarkupNode[] { ElementComparison, HighlightNode(SecondKind.ToString()) });
        }
        protected override MarkupNode MakeArrayComparison(MarkupNode ElementComparison, int FirstRank, int SecondRank)
        {
            var nodes = new List<MarkupNode>();
            nodes.Add(ElementComparison);
            nodes.Add(ToTextNode("["));
            for (int i = 1; i < SecondRank; i++)
            {
                if (i < FirstRank)
                    nodes.Add(ToTextNode(","));
                else
                    nodes.Add(HighlightMissingNode(","));
            }
            if (SecondRank < FirstRank)
                nodes.Add(HighlightExtraNode("]"));
            else
                nodes.Add(ToTextNode("]"));
            return new MarkupNode("node", nodes);
        }
        protected override MarkupNode MakeVectorComparison(MarkupNode ElementComparison,
            IReadOnlyList<int> FirstDimensions, IReadOnlyList<int> SecondDimensions)
        {
            var nodes = new List<MarkupNode>();
            nodes.Add(ElementComparison);
            nodes.Add(ToTextNode("["));
            for (int i = 0; i < SecondDimensions.Count; i++)
            {
                if (i > 0)
                {
                    nodes.Add(ToTextNode(", "));
                }
                if (i < FirstDimensions.Count)
                {
                    if (FirstDimensions[i] == SecondDimensions[i])
                    {
                        nodes.Add(ToTextNode(SecondDimensions[i].ToString()));
                    }
                    else nodes.Add(HighlightNode(SecondDimensions[i].ToString()));
                }
                else
                {
                    nodes.Add(HighlightMissingNode(SecondDimensions[i].ToString()));
                }
            }
            if (SecondDimensions.Count < FirstDimensions.Count)
            {
                nodes.Add(HighlightExtraNode("]"));
            }
            else
            {
                nodes.Add(ToTextNode("]"));
            }
            return new MarkupNode("node", nodes);
        }

        protected override MarkupNode MakeDelegateComparison(MarkupNode ReturnTypeComparison, [MarkupNode] ParameterTypesComparison)
        {
            var nodes = new List<MarkupNode>();
            nodes.Add(ReturnTypeComparison);
            AddDelimitedComparisonList(nodes, ParameterTypesComparison, "(", ", ", ")");
            return new MarkupNode("node", nodes);
        }
    }
}
