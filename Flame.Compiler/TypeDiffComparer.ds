using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Pixie;

namespace Flame.Compiler
{
    /// <summary>
    /// A type comparer that visualizes the difference between pairs of types.
    /// </summary>
    public virtual class TypeDiffComparer : TypeComparerBase<MarkupNode>
    {
        public this(
            TypeRenderer Renderer,
            Func<IType, IType, bool> IsReferenceConvertibleTo,
            IAttributes DifferentElementStyle,
            IAttributes ExtraElementStyle,
            IAttributes MissingElementStyle)
        {
            this.Renderer = Renderer;
            this.IsReferenceConvertibleTo = IsReferenceConvertibleTo;
            this.DifferentElementStyle = DifferentElementStyle;
            this.ExtraElementStyle = ExtraElementStyle;
            this.MissingElementStyle = MissingElementStyle;
        }

        public this(
            TypeRenderer Renderer,
            Func<IType, IType, bool> IsReferenceConvertibleTo)
        {
            this.Renderer = Renderer;
            this.IsReferenceConvertibleTo = IsReferenceConvertibleTo;
            this.DifferentElementStyle = DefaultDifferentElementStyle;
            this.ExtraElementStyle = DefaultExtraElementStyle;
            this.MissingElementStyle = DefaultMissingElementStyle;
        }

        public this(TypeRenderer Renderer)
        {
            this.Renderer = Renderer;
            this.IsReferenceConvertibleTo = MemberExtensions.Is;
            this.DifferentElementStyle = DefaultDifferentElementStyle;
            this.ExtraElementStyle = DefaultExtraElementStyle;
            this.MissingElementStyle = DefaultMissingElementStyle;
        }

        public this()
        {
            this.Renderer = new TypeRenderer();
            this.IsReferenceConvertibleTo = MemberExtensions.Is;
            this.DifferentElementStyle = DefaultDifferentElementStyle;
            this.ExtraElementStyle = DefaultExtraElementStyle;
            this.MissingElementStyle = DefaultMissingElementStyle;
        }

        /// <summary>
        /// Gets the type renderer that is used to render diffs.
        /// </summary>
        /// <returns>The type renderer.</returns>
        public TypeRenderer Renderer { get; private set; }

        /// <summary>
        /// Gets a predicate that tests if an instance of its first argument is reference-convertible
        /// to an instance of its second argument.
        /// </summary>
        /// <returns>A predicate that tests if an instance of its first argument is reference-convertible
        /// to an instance of its second argument.</returns>
        public Func<IType, IType, bool> IsReferenceConvertibleTo { get; private set; }

        /// <summary>
        /// Gets the style that is applied to elements that differ.
        /// </summary>
        /// <returns>The style for elements that differ.</returns>
        public IAttributes DifferentElementStyle { get; private set; }

        /// <summary>
        /// Gets the style that is applied to elements that have been added relative
        /// to the reference material.
        /// </summary>
        /// <returns>The style for elements that have been added.</returns>
        public IAttributes ExtraElementStyle { get; private set; }

        /// <summary>
        /// Gets the style that is applied to elements that have been removed relative
        /// to the reference material.
        /// </summary>
        /// <returns>The style for elements that have been removed.</returns>
        public IAttributes MissingElementStyle { get; private set; }

        /// <summary>
        /// Gets the default style that is applied to elements that differ.
        /// </summary>
        /// <returns>The default style for elements that differ.</returns>
        public static IAttributes DefaultDifferentElementStyle
        {
            get
            {
                return CreateStyleFromColor(new Color(0.0, 1.0, 1.0));
            }
        }

        /// <summary>
        /// Gets the default style that is applied to elements that have been added relative
        /// to the reference material.
        /// </summary>
        /// <returns>The style for elements that have been added.</returns>
        public static IAttributes DefaultExtraElementStyle
        {
            get
            {
                return CreateStyleFromColor(new Color(1.0, 0.0, 1.0));
            }
        }

        /// <summary>
        /// Gets the default style that is applied to elements that have been removed relative
        /// to the reference material.
        /// </summary>
        /// <returns>The default style for elements that have been removed.</returns>
        public static IAttributes DefaultMissingElementStyle
        {
            get
            {
                return CreateStyleFromColor(new Color(1.0, 1.0, 0.0));
            }
        }

        private static IAttributes CreateStyleFromColor(Color Value)
        {
            var dict = new Dictionary<string, object>();
            dict[NodeConstants.ColorAttribute] = Value;
            return new PredefinedAttributes(dict);
        }

        public static MarkupNode HighlightNode(MarkupNode Node)
        {
            return new MarkupNode(NodeConstants.HighlightNodeType, new MarkupNode[] { Node });
        }

        public static MarkupNode HighlightExtraNode(MarkupNode Node)
        {
            var dict = new Dictionary<string, object>();
            dict[NodeConstants.HighlightingTypeAttribute] = NodeConstants.ExtraHighlightingType;
            var attrs = new PredefinedAttributes(dict);
            return new MarkupNode(NodeConstants.HighlightNodeType, attrs, new MarkupNode[] { Node });
        }

        public static MarkupNode HighlightMissingNode(MarkupNode Node)
        {
            var dict = new Dictionary<string, object>();
            dict[NodeConstants.HighlightingTypeAttribute] = NodeConstants.MissingHighlightingType;
            var attrs = new PredefinedAttributes(dict);
            return new MarkupNode(NodeConstants.HighlightNodeType, attrs, new MarkupNode[] { Node });
        }
        public static MarkupNode HighlightNode(string Text)
        {
            return HighlightNode(ToTextNode(Text));
        }
        public static MarkupNode HighlightExtraNode(string Text)
        {
            return HighlightExtraNode(ToTextNode(Text));
        }
        public static MarkupNode HighlightMissingNode(string Text)
        {
            return HighlightMissingNode(ToTextNode(Text));
        }

        public static MarkupNode ToTextNode(string Text)
        {
            return new MarkupNode(NodeConstants.TextNodeType, Text);
        }

        protected override MarkupNode CompareDefault(IType First, IType Second)
        {
            if (IsReferenceConvertibleTo(First, Second))
            {
                return Renderer.Convert(Second);
            }
            else if (Second.IsPointer && !First.IsPointer)
            {
                var ptrType = Second.AsPointerType();
                return Renderer.MakePointerType(Compare(First, ptrType.ElementType), ptrType.PointerKind, MissingElementStyle);
            }
            else if (Second.IsArray && !First.IsArray)
            {
                var arrType = Second.AsArrayType();
                return Renderer.MakeArrayType(Compare(First, arrType.ElementType), arrType.ArrayRank, MissingElementStyle);
            }
            else if (Second.IsVector && !First.IsVector)
            {
                var vecType = Second.AsVectorType();
                return Renderer.MakeVectorType(Compare(First, vecType.ElementType), vecType.Dimensions, MissingElementStyle);
            }
            else
            {
                return Renderer.Convert(Second, DifferentElementStyle);
            }
        }

        protected override MarkupNode MakeGenericInstanceComparison(MarkupNode DeclarationComparison, [MarkupNode] TypeArgumentComparisons)
        {
            return Renderer.MakeGenericType(
                DeclarationComparison,
                TypeArgumentComparisons,
                Renderer.DefaultStyle,
                Renderer.DefaultStyle,
                Renderer.DefaultStyle);
        }
        protected override MarkupNode MakePointerComparison(MarkupNode ElementComparison, PointerKind FirstKind, PointerKind SecondKind)
        {
            if (FirstKind == SecondKind)
            {
                return Renderer.MakePointerType(ElementComparison, SecondKind, DifferentElementStyle);
            }
            else
            {
                return Renderer.MakePointerType(ElementComparison, SecondKind, Renderer.DefaultStyle);
            }
        }
        protected override MarkupNode MakeArrayComparison(MarkupNode ElementComparison, int FirstRank, int SecondRank)
        {
            if (FirstRank == SecondRank)
            {
                return Renderer.MakeArrayType(ElementComparison, SecondRank, DifferentElementStyle);
            }
            else
            {
                return Renderer.MakeArrayType(ElementComparison, SecondRank, Renderer.DefaultStyle);
            }
        }

        protected override MarkupNode MakeVectorComparison(MarkupNode ElementComparison,
            IReadOnlyList<int> FirstDimensions, IReadOnlyList<int> SecondDimensions)
        {
            if (Enumerable.SequenceEqual<int>(FirstDimensions, SecondDimensions))
            {
                return Renderer.MakeVectorType(ElementComparison, SecondDimensions, DifferentElementStyle);
            }
            else
            {
                return Renderer.MakeVectorType(ElementComparison, SecondDimensions, Renderer.DefaultStyle);
            }
        }

        protected override MarkupNode MakeDelegateComparison(MarkupNode ReturnTypeComparison, [MarkupNode] ParameterTypesComparison)
        {
            return Renderer.MakeMethodType(
                ReturnTypeComparison,
                ParameterTypesComparison,
                Renderer.DefaultStyle,
                Renderer.DefaultStyle,
                Renderer.DefaultStyle);
        }
    }
}
