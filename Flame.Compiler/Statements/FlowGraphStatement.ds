using System;
using System.Collections.Generic;
using Flame.Compiler.Emit;
using Flame.Compiler.Flow;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
    /// <summary>
    /// A statement that contains a control flow graph.
    /// </summary>
    public class FlowGraphStatement : IFlowStatement, ICopyableNode<IStatement>,
                                      IPredicateNode, IMemberNode
    {
        /// <summary>
        /// Creates a statement that wraps the given control flow graph.
        /// </summary>
        public const this(set FlowGraph Graph);

        /// <summary>
        /// Gets this statement's control flow graph.
        /// </summary>
        public FlowGraph Graph { const get; private set; }

        public bool IsConstantNode
        {
            get { return true; }
        }

        private BlockFlow RemoveGuards(BlockFlow Flow)
        {
            if (Flow is GuardedFlow)
            {
                var ehFlow = (GuardedFlow)Flow;
                return new JumpFlow(ehFlow.GuardedBranch);
            }
            else
            {
                return Flow;
            }
        }

        /// <summary>
        /// Creates a number of basic blocks that are semantically equivalent
        /// to this flow statement.
        /// </summary>
        public void ToBlocks(BlockBuildingVisitor Visitor)
        {
            // Redirect the current block to the entry point tag.
            Visitor.Builder.RedirectCurrent(Graph.EntryPointTag);

            // First, figure out which blocks are guarded.
            var guardedBlocks = new Dictionary<UniqueTag, GuardedFlow>();
            foreach (var item in Graph.Blocks)
            {
                if (item.Flow is GuardedFlow)
                {
                    var ehFlow = (GuardedFlow)item.Flow;
                    guardedBlocks[ehFlow.GuardedBranch.TargetTag] = ehFlow;
                }
            }

            // Then create all blocks.
            foreach (var item in Graph.Blocks)
            {
                var tag = item.Tag;
                // Remove guard flow from basic blocks: the CreateTryBlock
                // call with recreate guard flow whenever necessary.
                var newFlow = RemoveGuards(item.Flow);
                if (guardedBlocks.TryGetValue(tag, &GuardedFlow ehFlow))
                {
                    // Exception blocks introduce an EH scope, which
                    // we must take into account.
                    Visitor.CreateTryBlock(
                        tag, item.Parameters, item.Contents, newFlow,
                        ehFlow.ExceptionBranches, ehFlow.FinallyBranch);
                }
                else
                {
                    Visitor.CreateBlock(
                        tag, item.Parameters, item.Contents, newFlow);
                }
            }
        }

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
        {
            // HACK: Just lie to the visitor and pretend this is linear flow.
            //       This is evil, but the visitor would have assumed this
            //       to be the case anyway had we not implemented IFlowStatement.
            return Accept(Visitor);
        }

        /// <summary>
        /// Copies this flow graph statement.
        /// </summary>
        public IStatement Copy()
        {
            var renamedTags = new Dictionary<UniqueTag, UniqueTag>();
            renamedTags[Graph.EntryPointTag] = new UniqueTag(Graph.EntryPointTag.Name);
            foreach (var tag in Graph.BlockTags)
            {
                renamedTags[tag] = new UniqueTag(tag.Name);
            }

            var results = new Dictionary<UniqueTag, BasicBlock>();
            var renamingVisitor = new BlockRenamingVisitor(renamedTags);
            foreach (var block in Graph.Blocks)
            {
                var tag = renamedTags[block.Tag];
                results[tag] = new BasicBlock(
                    tag, block.Parameters, block.Contents,
                    block.Flow.Accept(renamingVisitor));
            }
            return new FlowGraphStatement(new FlowGraph(
                renamedTags[Graph.EntryPointTag], results));
        }

        public IStatement Accept(INodeVisitor Visitor)
        {
            return new FlowGraphStatement(Graph.Accept(Visitor));
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            Graph.AcceptPredicate(Visitor);
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            return new FlowGraphStatement(Graph.ConvertMembers(Converter));
        }

        public IStatement Optimize()
        {
            return new FlowGraphStatement(Graph.Optimize());
        }

        public ICodeBlock Emit(IBlockCodeGenerator Generator)
        {
            var blocks = new List<IEmitBasicBlock>();
            foreach (var item in Graph.Blocks)
            {
                blocks.Add(Generator.EmitBasicBlock(
                    item.Tag, item.Parameters,
                    item.Contents.Emit(Generator), item.Flow));
            }
            return Generator.EmitFlowGraph(Graph.EntryPointTag, blocks);
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            if (Generator is IBlockCodeGenerator)
            {
                return Emit((IBlockCodeGenerator)Generator);
            }
            else
            {
                throw new NotImplementedException(
                    "Lowering flow graphs is not supported yet.");
            }
        }

        public override const string ToString()
        {
            return "flow-graph(...)";
        }
    }
}
