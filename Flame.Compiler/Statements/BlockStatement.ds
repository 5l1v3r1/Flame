using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Flame.Compiler.Statements
{
    public class BlockStatement : IStatement, IPredicateNode
    {
    	public const this(IStatement Child)
    	{
    		this.Children = new IStatement[] { Child };
    	}
        public const this(set [IStatement] Children);

        public [IStatement] Children { const get; private set; }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            Visitor.VisitAll(Children);
        }

        public IStatement Accept(INodeVisitor Visitor)
        {
            var items = Visitor.VisitAll(Children);

            if (Enumerable.SequenceEqual<IStatement>(Children, items))
            {
                return this;
            }
            else
            {
                return new BlockStatement(items);
            }
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            if (!Enumerable.Any<IStatement>(Children))
            {
                return Generator.EmitVoid();
            }

            var result = Enumerable.First<IStatement>(Children).Emit(Generator);
            foreach (var item in Enumerable.Skip<IStatement>(Children, 1))
            {
                result = Generator.EmitSequence(result, item.Emit(Generator));
            }
            return result;
        }

        public bool IsEmpty
        {
            const get
            {
            	foreach (var item in Children)
            	{
            		if (!item.IsEmpty)
            		{
            			return false;
            		}
            	}
            	return true;
            }
        }

        public IStatement Optimize()
        {
            var newStatements = new List<IStatement>();
            foreach (var item in Children)
            {
                var optimizedChild = item.Optimize();
                if (!optimizedChild.IsEmpty)
                {
                    newStatements.Add(optimizedChild);
                }
            }
            if (newStatements.Count > 1)
            {
                return new BlockStatement(newStatements);
            }
            else if (newStatements.Count == 1)
            {
                return newStatements[0];
            }
            else
            {
                return EmptyStatement;
            }
        }

        public override const string ToString()
        {
            var result = new StringBuilder();
            result.Append("{");
            bool first = true;
            foreach (var item in Children)
            {
                if (first)
                    first = false;
                else
                    result.Append(", ");

                result.Append((string)item);
            }
            result.Append('}');
            return result.ToString();
        }
    }
}
