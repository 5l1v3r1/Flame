using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
    /// <summary>
    /// Defines a tagged statement: the statement equivalent of a
    /// code generator's tagged block.
    /// Tagged statements are potential targets for "break" and "continue"
    /// statements.
    /// </summary>
	public class TaggedStatement : IStatement, IFlowStatement
	{
		/// <summary>
		/// Creates a new tagged statement from the given tag and body.
		/// </summary>
		public const this(set UniqueTag Tag, set IStatement Body);

		/// <summary>
		/// Gets the tag that identifies this tagged statement.
		/// </summary>
		public UniqueTag Tag { const get; private set; }
		/// <summary>
		/// Gets this tagged statement's body.
		/// </summary>
		public IStatement Body { const get; private set; }

		private const bool BranchesTo(INode Node)
		{
			if (Node is ContinueStatement)
			{
				var contStmt = (ContinueStatement)Node;
				return contStmt.Target == Tag;
			}
			else if (Node is BreakStatement)
			{
				var brStatement = (BreakStatement)Node;
				return brStatement.Target == Tag;
			}
			else return false;
		}

		private const TaggedStatement CreateTagged(IStatement NewBody)
		{
			if (NewBody == Body)
				return this;
			else
				return new TaggedStatement(Tag, NewBody);
		}

		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
			: IFlowStatement.AcceptFlow<TState, TFlow>
		{
			var startFlow = Visitor.CurrentFlow;

			var transBody = Visitor.Visit(Body);

			var bodyFlow = Visitor.CreateDeltaFlow(startFlow, Visitor.CurrentFlow);

			var loopFlow = Visitor.CreateLoopFlow(Tag, bodyFlow);

			Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startFlow, loopFlow);

			return CreateTagged(transBody);
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			return CreateTagged(Visitor.Visit(Body));
		}

		public bool IsEmpty : IStatement.IsEmpty
		{
			const get return Body.IsEmpty;
		}

		/// <summary>
		/// Tries to simplify this tagged statement into sequential flow.
		/// If there are no 'break' and 'continue' statements to this tagged statement,
		/// it is converted into sequenial flow. Otherwise, this tagged statement
		/// is returned unchanged.
		/// </summary>
		public IStatement Simplify()
		{
			if (!FunctionPredicateVisitor.AnySatisfies(BranchesTo, Body))
				return Body; // No `break` or `continue` statements to this
							 // tagged statement. Assume sequential flow.
			else
				return this;
		}

		public IStatement Optimize() : IStatement.Optimize
		{
			return CreateTagged(Body.Optimize()).Simplify();
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			var body = Body.Emit(Generator);
			return Generator.EmitTagged(Tag, body);
		}
	}
}
