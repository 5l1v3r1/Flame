using System;
using System.Collections.Generic;
using Flame.Compiler.Expressions;

namespace Flame.Compiler.Statements
{
    public class ExpressionStatement : IStatement
    {
        public const this(set IExpression Expression);

        public IExpression Expression { const get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            var expr = Visitor.Visit(Expression);

            if (expr == Expression)
            {
                return this;
            }
            else
            {
                return new ExpressionStatement(expr);
            }
        }

        public bool IsEmpty : IStatement.IsEmpty
        {
            const get
            {
            	return Expression.IsConstant;
            }
        }

        public const IStatement Optimize() : IStatement.Optimize
        {
        	var optExpr = Expression.Optimize();
        	if (optExpr.IsConstant)
        	{
        		return new EmptyStatement();
        	}
        	else
        	{
            	return new ExpressionStatement(Expression.Optimize());
            }
        }

        public ICodeBlock Emit(ICodeGenerator Generator) : IStatement.Emit
        {
            var block = Expression.Emit(Generator);
            return Generator.EmitPop(block);
        }
    }
}
