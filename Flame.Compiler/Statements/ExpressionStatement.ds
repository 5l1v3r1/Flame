using System;
using System.Collections.Generic;
using Flame.Compiler.Expressions;

namespace Flame.Compiler.Statements
{
    /// <summary>
    /// Defines a type of statement that evaluates its inner expression, and then
    /// discards its value.
    /// </summary>
    public class ExpressionStatement : IStatement
    {
        /// <summary>
        /// Creates an expression statement that wraps the given expression.
        /// </summary>
        public const this(set IExpression Expression);

        /// <summary>
        /// Gets the expression statement's inner expression.
        /// </summary>
        public IExpression Expression { const get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            var expr = Visitor.Visit(Expression);

            if (expr == Expression)
            {
                return this;
            }
            else
            {
                return new ExpressionStatement(expr);
            }
        }

        public bool IsEmpty : IStatement.IsEmpty
        {
            const get
            {
            	return !NodeExtensions.IsEffectful(Expression);
            }
        }

        public IStatement Simplify()
        {
            if (IsEmpty)
            {
                return EmptyStatement;
            }
            else if (Expression is InitializedExpression)
            {
                var initExpr = (InitializedExpression)Expression;
                return new BlockStatement(new IStatement[]
                {
                    initExpr.Initialization,
                    new ExpressionStatement(initExpr.Value).Simplify(),
                    initExpr.Finalization
                }).Simplify();
            }
            else if (Expression is GetMethodExpression)
            {
                var getMethodExpr = (GetMethodExpression)Expression;
                return new ExpressionStatement(getMethodExpr.Caller).Simplify();
            }
            else
            {
                return this;
            }
        }

        public const IStatement Optimize() : IStatement.Optimize
        {
        	var optExpr = Expression.Optimize();
        	return new ExpressionStatement(optExpr).Simplify();
        }

        public ICodeBlock Emit(ICodeGenerator Generator) : IStatement.Emit
        {
            var block = Expression.Emit(Generator);
            return Generator.EmitPop(block);
        }

        public override string ToString()
        {
            return "ignore(" + (string)Expression + ")";
        }
    }
}
