using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Flow;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
	/// <summary>
	/// Describes a control-flow statement that executes a statement once,
	/// and in successive iterations, executes it only if a condition evaluates
	/// to `true`. This is equivalent to a `do...while` statement in the C family
	/// of languages.
	/// </summary>
	public class DoWhileStatement : ComplexStatement, IFlowStatement
	{
		public const this(set IStatement Body, set IExpression Condition)
		{
			this.Tag = new UniqueTag();
		}
		public const this(set UniqueTag Tag, set IStatement Body, set IExpression Condition);

		/// <summary>
		/// Gets the do...while statement's block tag.
		/// </summary>
		public UniqueTag Tag { const get; private set; }

		/// <summary>
		/// Gets the do...while statement's condition. After the initial iteration,
		/// the loop's body will be executed as long as this condition evaluates to
		/// true.
		/// </summary>
		public IExpression Condition { const get; private set; }

		/// <summary>
		/// Gets the do...while statement's body.
		/// </summary>
		public IStatement Body { const get; private set; }

		private const DoWhileStatement CreateDoWhile(IStatement NewBody, IExpression NewCondition)
		{
			if (NewCondition == Condition && NewBody == Body)
			{
				return this;
			}
			else
			{
				return new DoWhileStatement(Tag, NewBody, NewCondition);
			}
		}

		public void ToBlocks(BlockBuildingVisitor Visitor)
		{
			// We can just lower this statement and have a basic block
			// constructing visitor reduce that to a sequence of basic blocks.

			Visitor.CreateCurrentBlock(LoweredStatement);
		}

		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
			: IFlowStatement.AcceptFlow<TState, TFlow>
		{
			var startFlow = Visitor.CurrentFlow;

			var transBody = Visitor.Visit(Body);

			var transCond = Visitor.Visit(Condition);
			var bodyFlow = Visitor.CreateDeltaFlow(startFlow, Visitor.CurrentFlow);

			var loopFlow = Visitor.CreateLoopFlow(Tag, bodyFlow);
			// var doWhileFlow = Visitor.CreateSequenceFlow(bodyFlow, loopFlow);
			// NOTE: 'doWhileFlow' is a more accurate description than 'loopFlow',
			//       however, continue/break statements are said to terminate (local) flow.
			//       Stating that the body and the looped body are executed in sequence
			//       would mean that global flow could be terminated.

			Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startFlow, loopFlow);

			return CreateDoWhile(transBody, transCond);
		}

		public override IStatement Accept(INodeVisitor Visitor)
		{
			var transCond = Visitor.Visit(Condition);
			var transBody = Visitor.Visit(Body);

			return CreateDoWhile(transBody, transCond);
		}

		public override bool IsConstantNode : IStatement.IsConstantNode
		{
			const get
			{
				// Return false here. Otherwise, the optimizer may get the
				// wrong idea and eliminate an infinite loop.
				return false;
			}
		}

		/// <summary>
		/// Rewrites the do...while statement's body by replacing `continue` statements
		/// with `break` statements to an outer tagged statement, which has the
		/// given tag.
		/// </summary>
		private IStatement RewriteContinueToBreak(UniqueTag ContinueTag, bool ForceEnclose)
		{
			return ContinueRewriter.RewriteContinueToBreak(
				Tag, Body, ContinueTag, ForceEnclose);
		}

		public override IStatement Optimize() : IStatement.Optimize
		{
			var optCond = Condition.Optimize();

			if (optCond.EvaluatesTo<bool>(false))
			{
				return RewriteContinueToBreak(Tag, true).Optimize();
			}

			return CreateDoWhile(Body.Optimize(), optCond);
		}

		/// <summary>
		/// Lowers this do...while block to an equivalent tagged block IR tree.
		/// </summary>
		protected override IStatement Lower()
		{
			// "Lower" a do...while block like this:
			//
			// do stmt; while (cond)
			//
			// ==>
			//
			// Case #1: no `continue`
			//
			// loop:
			// {
			//     stmt;
			//     if (cond) continue loop;
			// }
			//
			// Case #2: at least one `continue`
			//
			// loop:
			// {
			//     inner:
			//     {
			//         rewrittenStmt; // <-- `continue loop;` in `stmt;`
			//						  // is rewritten as `break inner;`
			//     }
			//     if (cond) continue loop;
			// }

			var newBody = RewriteContinueToBreak(new UniqueTag(), false);
			var ifContinue = new IfElseStatement(Condition,
												 new ContinueStatement(Tag));
			var outerBody = new BlockStatement(new IStatement[]
			{
				newBody,
				ifContinue.Simplify()
			});
			return new TaggedStatement(Tag, outerBody);
		}

		public override ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			if (Generator is IDoWhileCodeGenerator)
			{
				var body = Body.Emit(Generator);
				var conditionBlock = Condition.Emit(Generator);
				var whileCg = (IDoWhileCodeGenerator)Generator;
				return whileCg.EmitDoWhile(Tag, body, conditionBlock);
			}
			else
			{
				return LoweredStatement.Emit(Generator);
			}
		}
	}
}
