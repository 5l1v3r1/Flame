using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Statements
{
	public class DoWhileStatement : IStatement
	{
		public this(set IStatement Body, set IExpression Condition);

		public IExpression Condition { const get; private set; }
		public IStatement Body { const get; private set; }

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transCond = Visitor.Visit(Condition);
			var transBody = Visitor.Visit(Body);

			if (transCond == Condition && transBody == Body)
			{
				return this;
			}
			else
			{
				return new DoWhileStatement(transBody, transCond);
			}
		}

		public bool IsEmpty : IStatement.IsEmpty
		{
			const get
			{
				return Body.IsEmpty;
			}
		}

		public IStatement Optimize() : IStatement.Optimize
		{
			var optCond = Condition.Optimize();
			var optBody = Body.Optimize();
			return new DoWhileStatement(optBody, optCond);
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			var body = Body.Emit(Generator);
			var conditionBlock = Condition.Emit(Generator);
			return Generator.EmitDoWhile(body, conditionBlock);
		}
	}
}
