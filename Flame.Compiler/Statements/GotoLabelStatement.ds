using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
    /// <summary>
    /// A statement that jumps to a label if a condition evaluates to true.
    /// </summary>
    public class GotoLabelStatement : IFlowStatement
    {
        /// <summary>
        /// Creates a goto statement that jumps unconditionally to the given label.
        /// </summary>
        /// <param name="Label">The label to jump to.</param>
        public this(set UniqueTag Label)
        {
            this.Condition = new BooleanExpression(true);
        }

        /// <summary>
        /// Creates a goto statement that jumps to the given label if the specified
        /// expression evaluates to true.
        /// </summary>
        /// <param name="Label">The label to jump to.</param>
        /// <param name="Condition">The condition for this goto.</param>
        public this(set UniqueTag Label, set IExpression Condition);

        /// <summary>
        /// Gets the label to which this goto statement jumps.
        /// </summary>
        /// <returns>The label to which this goto statement jumps.</returns>
        public UniqueTag Label { get; private set; }

        /// <summary>
        /// Gets the condition this goto statement depends on. If the condition
        /// evaluates to true, then the goto statement performs a jump; otherwise,
        /// it does nothing.
        /// </summary>
        /// <returns>The goto statement's condition. </returns>
        public IExpression Condition { get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            var visitedCond = Visitor.Visit(Condition);
            if (visitedCond == Condition)
                return this;
            else
                return new GotoLabelStatement(Label, visitedCond);
        }

        public bool IsConstantNode { get { return false; } }

        public IStatement Optimize()
        {
            var optCond = Condition.Optimize();
            if (optCond.EvaluatesTo<bool>(false))
                return EmptyStatement;
            else
                return new GotoLabelStatement(Label, optCond);
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            var cg = (IBranchingCodeGenerator)Generator;
            var cond = Condition.Emit(cg);
            return cg.EmitGotoLabel(Label, cond);
        }

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
        {
            // HACK: Just lie to the visitor and pretend this is linear flow.
            //       This is evil, but the visitor would have assumed this
            //       to be the case anyway had we not implemented IFlowStatement.
            return Accept(Visitor);
        }

        /// <summary>
        /// Creates a number of basic blocks that are semantically equivalent
        /// to this flow statement.
        /// </summary>
        public void ToBlocks(BlockBuildingVisitor Visitor)
        {
            // Generate the following blocks:
            //
            // @current_block():
            //     if cond
            //         then @goto_label()
            //         else @next()
            //

            // Visit the condition.
            var cond = Visitor.Visit(Condition);

            var nextBlockTag = Visitor.Builder.NextBlockTag;

            if (Condition.EvaluatesTo<bool>(true))
            {
                Visitor.Builder.CreateCurrentBlock(
                    EmptyStatement,
                    new JumpFlow(new BlockBranch(nextBlockTag)));
            }
            else
            {
                Visitor.Builder.CreateCurrentBlock(
                    EmptyStatement,
                    new SelectFlow(
                        cond,
                        new BlockBranch(Label),
                        new BlockBranch(nextBlockTag)));
            }
        }
    }

    /// <summary>
    /// A statement that marks a label: it defines where goto statements jump to.
    /// </summary>
    public class MarkLabelStatement : IFlowStatement
    {
        /// <summary>
        /// Creates a statement that marks the given statement.
        /// </summary>
        /// <param name="Label">The label to mark.</param>
        public this(set UniqueTag Label);

        /// <summary>
        /// Gets the label that is marked by this statement.
        /// </summary>
        /// <returns>The mark statement's label.</returns>
        public UniqueTag Label { get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public bool IsConstantNode { get { return false; } }

        public IStatement Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            var cg = (IBranchingCodeGenerator)Generator;
            return cg.EmitMarkLabel(Label);
        }

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
        {
            // HACK: Just lie to the visitor and pretend this is linear flow.
            //       This is evil, but the visitor would have assumed this
            //       to be the case anyway had we not implemented IFlowStatement.
            return Accept(Visitor);
        }

        /// <summary>
        /// Creates a number of basic blocks that are semantically equivalent
        /// to this flow statement.
        /// </summary>
        public void ToBlocks(BlockBuildingVisitor Visitor)
        {
            // Generate the following blocks:
            //
            // @current_block():
            //     jump @goto_label()
            //
            // @goto_label():
            //     jump @next()
            //

            var nextBlockTag = Visitor.Builder.NextBlockTag;

            var gotoTag = Visitor.CreateBlock(Label, EmptyStatement, nextBlockTag);

            Visitor.Builder.CreateCurrentBlock(
                EmptyStatement,
                new JumpFlow(new BlockBranch(gotoTag)));
        }
    }

    /// <summary>
    /// A statement that performs a table lookup followed by an unconditional jump.
    /// </summary>
    public class JumpTableStatement : IFlowStatement
    {
        public this(IExpression TableIndex, IReadOnlyList<UniqueTag> TableLabels)
        {
            this.TableIndex = TableIndex;
            this.TableLabels = TableLabels;
        }

        public IExpression TableIndex { get; private set; }
        public IReadOnlyList<UniqueTag> TableLabels { get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            var optIndex = Visitor.Visit(TableIndex);
            if (optIndex == TableIndex)
                return this;
            else
                return new JumpTableStatement(optIndex, TableLabels);
        }

        public bool IsConstantNode { get { return false; } }

        public IStatement Optimize()
        {
            var optIndex = TableIndex.Optimize();
            if (optIndex == TableIndex)
                return this;
            else
                return new JumpTableStatement(optIndex, TableLabels);
        }

        /// <summary>
        /// Lowers this jump table to a switch statement.
        /// </summary>
        /// <returns></returns>
        public IStatement Lower()
        {
            var conditionalCases = new List<SwitchCase>();
            for (int i = 0; i < TableLabels.Count; i++)
            {
                var vals = new List<IBoundObject>();
                vals.Add(new IntegerExpression(i));
                conditionalCases.Add(new SwitchCase(vals, new GotoLabelStatement(TableLabels[i])));
            }

            var breakTag = new UniqueTag();
            return new TaggedStatement(breakTag,
                new UnsafeSwitchStatement(TableIndex, new BreakStatement(breakTag), conditionalCases).Simplify());
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            if (Generator is IJumpTableCodeGenerator)
            {
                var cg = (IJumpTableCodeGenerator)Generator;
                return cg.EmitJumpTable(TableIndex.Emit(Generator), TableLabels);
            }
            else
            {
                return Lower().Emit(Generator);
            }
        }

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
        {
            // HACK: Just lie to the visitor and pretend this is linear flow.
            //       This is evil, but the visitor would have assumed this
            //       to be the case anyway had we not implemented IFlowStatement.
            return Accept(Visitor);
        }

        /// <summary>
        /// Creates a number of basic blocks that are semantically equivalent
        /// to this flow statement.
        /// </summary>
        public void ToBlocks(BlockBuildingVisitor Visitor)
        {
            Visitor.CreateCurrentBlock(Lower());
        }
    }
}
