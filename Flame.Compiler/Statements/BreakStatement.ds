using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Statements
{
    public class BreakStatement : IFlowStatement
    {
        public const this(set BlockTag Target);

        public BlockTag Target { const get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.EmitBreak(Target);
        }

        public bool IsEmpty
        {
            const get return false;
        }

        public const IStatement Optimize()
        {
            return this;
        }

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
            : IFlowStatement.AcceptFlow<TState, TFlow>
        {
            Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(Visitor.CurrentFlow, Visitor.TerminatedFlow);
            return this;
        }
    }
}
