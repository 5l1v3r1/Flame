using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Statements
{
    /// <summary>
    /// A collection element in a foreach loop.
    /// </summary>
	public class CollectionElement
	{
		public const this(set IVariableMember Member, set IExpression Collection);

		public IVariableMember Member { const get; private set; }
		public IExpression Collection { const get; private set; }

        private static const IExpression CreateInvocationExpression(IMethod Method, IVariable Caller)
        {
            return new InvocationExpression(Method, Caller.CreateGetExpression(), new IExpression[0]);
        }

		public CollectionElement ConvertType(MemberConverter Converter)
		{
			var convType = Converter.Convert(Member.VariableType);
			if (object.ReferenceEquals(convType, Member.VariableType))
			{
				return this;
			}
			else
			{
				return new CollectionElement(new RetypedVariableMember(Member, convType), Collection);
			}
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.Visit(Collection);
		}

		public CollectionElement Accept(INodeVisitor Visitor)
		{
			var transColl = Visitor.Visit(Collection);

			if (transColl == Collection)
			{
				return this;
			}
			else
			{
				return new CollectionElement(Member, transColl);
			}
		}

		#region CreateArrayElementInCollection

        private ElementInCollection CreateArrayElementInCollection(IVariable IndexVariable)
        {
            List<IStatement> initStatements = new List<IStatement>();
            List<IStatement> finalStatements = new List<IStatement>();

			// Local variable and argument get expressions are inlined, other expressions will be cached
            IVariable collectionVariable;
            if (Collection is LateBoundVariableGetExpression)
            {
                collectionVariable = ((LateBoundVariableGetExpression)Collection).Variable;
            }
            else if (Collection is ArgumentGetExpression)
            {
                collectionVariable = ((ArgumentGetExpression)Collection).Variable;
            }
            else
            {
                collectionVariable = new LateBoundVariable(Collection.Type);
                initStatements.Add(collectionVariable.CreateSetStatement(Collection));
                finalStatements.Add(collectionVariable.CreateReleaseStatement());
            }

            IExpression lengthExpr;
            if (collectionVariable.Type.IsVector)
            {
                lengthExpr = new Int32Expression(Enumerable.Single<int32>(collectionVariable.CreateGetExpression().Type.AsContainerType().AsVectorType().GetDimensions()));
            }
            else
            {
                var lengthPropertyVariable = new PropertyVariable(collectionVariable.CreateGetExpression().Type.GetAllProperties().GetProperty("Length", false), collectionVariable.CreateGetExpression());
                var cachedLengthVariable = new LateBoundVariable(lengthPropertyVariable.Type);
                initStatements.Add(cachedLengthVariable.CreateSetStatement(lengthPropertyVariable.CreateGetExpression()));
                finalStatements.Add(cachedLengthVariable.CreateReleaseStatement());
                lengthExpr = cachedLengthVariable.CreateGetExpression();
            }

            IVariable index;
            IStatement delta;
            if (IndexVariable == null)
            {
                index = new LateBoundVariable(lengthExpr.Type);
                initStatements.Add(index.CreateSetStatement(new ConversionExpression(new Int32Expression(0), index.Type)));
                delta = index.CreateSetStatement(new AddExpression(index.CreateGetExpression(), new ConversionExpression(new Int32Expression(1), index.Type)));
            }
            else
            {
                index = IndexVariable;
                delta = EmptyStatement;
            }

            IExpression condition = new LessThanExpression(index.CreateGetExpression(), lengthExpr);

            var iteratingVariable = new ElementVariable(collectionVariable.CreateGetExpression(), (IEnumerable<IExpression>)new IExpression[] { index.CreateGetExpression() });

            if (IndexVariable == null)
            {
                finalStatements.Add(index.CreateReleaseStatement());
                finalStatements.Add(iteratingVariable.CreateReleaseStatement());
            }
            else
            {
                finalStatements.Add(iteratingVariable.CreateReleaseStatement());
            }

            var initStatement = new BlockStatement(initStatements.ToArray());
            var finalStatement = new BlockStatement(finalStatements.ToArray());

            return new ElementInCollection(iteratingVariable, initStatement, condition, EmptyStatement, delta, finalStatement, index);
        }

        #endregion

        #region CreateEnumerableElementInCollection

        private ElementInCollection CreateEnumerableElementInCollection()
        {
            var getEnumeratorMethods = Collection.Type.GetAllMethods("GetEnumerator", false, new IType[0]);
            IMethod getEnumerator = null, nextMethod = null, currentAccessor = null;

            if (!Enumerable.Any<IMethod>(getEnumeratorMethods))
            {
            	return null;
            }

            var iteratingVariable = new LateBoundVariable(Member);
            int32 minAncestry = int32.MaxValue;
            foreach (var item in getEnumeratorMethods)
            {
                var retType = item.ReturnType;
                var possibleNextMethod = retType.GetAllMethods().GetMethod("MoveNext", false, PrimitiveTypes.Boolean, new IType[0]);
                var currentProperty = retType.GetAllProperties().GetProperty("Current", false);
                if (currentProperty != null && possibleNextMethod != null)
                {
                    var getAccessor = currentProperty.GetGetAccessor();
                    if (getAccessor != null)
                    {
                        int ancestry = iteratingVariable.Type.GetAncestryDegree(currentProperty.PropertyType);
                        if (ancestry > -1 && ancestry < minAncestry)
                        {
                            minAncestry = ancestry;
                            nextMethod = possibleNextMethod;
                            currentAccessor = getAccessor;
                            getEnumerator = item;
                        }
                    }
                }
            }
            if (getEnumerator == null)
            {
                return null;
            }

            var enumeratorVariable = new LateBoundVariable(getEnumerator.ReturnType);
            var enumeratorInitStatement = enumeratorVariable.CreateSetStatement(CreateInvocationExpression(getEnumerator, new ExpressionVariable(Collection)));
            var disposeMethod = enumeratorVariable.Type.GetAllMethods().GetMethod("Dispose", false, PrimitiveTypes.Void, new IType[0]);

            IExpression condition = CreateInvocationExpression(nextMethod, enumeratorVariable);

            IExpression deltaValueExpr = CreateInvocationExpression(currentAccessor, enumeratorVariable);
            if (iteratingVariable.Type != null)
            {
                deltaValueExpr = ConversionExpression.Create(deltaValueExpr, iteratingVariable.Type).Optimize();
            }

            var delta = iteratingVariable.CreateSetStatement(deltaValueExpr);
            List<IStatement> finishStatements = new List<IStatement>();
            if (disposeMethod != null)
            {
                finishStatements.Add(new ExpressionStatement(CreateInvocationExpression(disposeMethod, enumeratorVariable)));
            }
            finishStatements.Add(enumeratorVariable.CreateReleaseStatement());
            IStatement finish = new BlockStatement(finishStatements.ToArray());

            return new ElementInCollection(iteratingVariable, enumeratorInitStatement, condition, delta, EmptyStatement, finish);
        }

        #endregion

        public ElementInCollection Reduce(IVariable IndexVariable)
        {
            if (Collection.Type.IsArray || Collection.Type.IsVector)
            {
                return CreateArrayElementInCollection(IndexVariable);
            }
            else
            {
                return CreateEnumerableElementInCollection();
            }
        }
	}
}
