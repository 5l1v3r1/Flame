using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Expressions;

namespace Flame.Compiler.Statements
{
	public class LateBoundLabel
	{
		public const this();
	
		private ILabel boundLabel;
		
		public ILabel Bind(IBranchingCodeGenerator CodeGenerator)
		{
			if (boundLabel == null)
			{
				boundLabel = CodeGenerator.CreateLabel();
			}
			return boundLabel;
		}
		
		public const IStatement CreateBranchStatement(IExpression Condition)
		{
			return new LateBoundLabelBranchStatement(this, Condition);
		}
		public const IStatement CreateBranchStatement()
		{
			return CreateBranchStatement(new BooleanExpression(true));
		}
		
		public const IStatement CreateMarkStatement()
		{
			return new LateBoundLabelMarkStatement(this);
		}
	}
	
	public class LateBoundLabelBranchStatement : IStatement
	{
		public const this(set LateBoundLabel Label, set IExpression Condition);
		
		public LateBoundLabel Label { const get; private set; }
		public IExpression Condition { const get; private set; }
		
		public bool IsEmpty { const get return Condition.EvaluatesTo<bool>(false); }
		
		public const IStatement Optimize()
		{
			var optCond = Condition.Optimize();
			if (optCond.EvaluatesTo<bool>(false))
			{
				return new EmptyStatement();
			}
			return new LateBoundLabelBranchStatement(Label, optCond);
		}
		
		public void Emit(IBlockGenerator BlockGenerator)
		{
			var cg = (IBranchingCodeGenerator)BlockGenerator.CodeGenerator;
			var boundLabel = Label.Bind(cg);
			var cond = Condition.Emit(cg);
			BlockGenerator.EmitBlock(boundLabel.EmitBranch(cond));
		}
	}
	
	public class LateBoundLabelMarkStatement : IStatement
	{
		public const this(set LateBoundLabel Label);
		
		public LateBoundLabel Label { const get; private set; }
		
		public bool IsEmpty { const get return false; }
		
		public const IStatement Optimize()
		{
			return this;
		}
		
		public void Emit(IBlockGenerator BlockGenerator)
		{
			var cg = (IBranchingCodeGenerator)BlockGenerator.CodeGenerator;
			var boundLabel = Label.Bind(cg);
			BlockGenerator.EmitBlock(boundLabel.EmitMark());
		}
	}
}