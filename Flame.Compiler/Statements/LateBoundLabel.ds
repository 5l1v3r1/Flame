using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Expressions;

namespace Flame.Compiler.Statements
{
	public class LateBoundLabel
	{
		public const this();

		private ILabel boundLabel;

		public ILabel Bind(IBranchingCodeGenerator CodeGenerator)
		{
			if (boundLabel == null)
			{
				boundLabel = CodeGenerator.CreateLabel();
			}
			return boundLabel;
		}

		public const IStatement CreateBranchStatement(IExpression Condition)
		{
			return new LateBoundLabelBranchStatement(this, Condition);
		}
		public const IStatement CreateBranchStatement()
		{
			return CreateBranchStatement(new BooleanExpression(true));
		}

		public const IStatement CreateMarkStatement()
		{
			return new LateBoundLabelMarkStatement(this);
		}
	}

	public class LateBoundLabelBranchStatement : IStatement
	{
		public const this(set LateBoundLabel Label, set IExpression Condition);

		public LateBoundLabel Label { const get; private set; }
		public IExpression Condition { const get; private set; }

		public IStatement Accept(INodeVisitor Visitor)
		{
			var visitedCond = Visitor.Visit(Condition);
			if (visitedCond == Condition)
				return this;
			else
				return new LateBoundLabelBranchStatement(Label, visitedCond);
		}

		public bool IsEmpty { const get return Condition.EvaluatesTo<bool>(false); }

		public const IStatement Optimize()
		{
			var optCond = Condition.Optimize();
			if (optCond.EvaluatesTo<bool>(false))
				return EmptyStatement;
			else
				return new LateBoundLabelBranchStatement(Label, optCond);
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IBranchingCodeGenerator)Generator;
			var boundLabel = Label.Bind(cg);
			var cond = Condition.Emit(cg);
			return boundLabel.EmitBranch(cond);
		}
	}

	public class LateBoundLabelMarkStatement : IStatement
	{
		public const this(set LateBoundLabel Label);

		public LateBoundLabel Label { const get; private set; }

		public IStatement Accept(INodeVisitor Visitor)
		{
			return this;
		}

		public bool IsEmpty { const get return false; }

		public const IStatement Optimize()
		{
			return this;
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IBranchingCodeGenerator)Generator;
			var boundLabel = Label.Bind(cg);
			return boundLabel.EmitMark();
		}
	}
}
