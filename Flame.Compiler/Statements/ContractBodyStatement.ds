using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Emit;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
	public class ContractBodyStatement : IStatement, IPredicateNode
	{
		public const this(
			set IStatement Body,
			set IStatement Precondition,
			set IStatement Postcondition)
			in { Body != null }
			in { Precondition != null }
			in { Postcondition != null }
		{ }

		public IStatement Body { const get; private set; }
		public IStatement Precondition { const get; private set; }
		public IStatement Postcondition { const get; private set; }

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.Visit(Precondition);
			Visitor.Visit(Postcondition);
			Visitor.Visit(Body);
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			// Visit the body last, to avoid confusing -fdead-code-elimination
			var pre = Visitor.Visit(Precondition);
			var post = Visitor.Visit(Postcondition);
			return new ContractBodyStatement(
				Visitor.Visit(Body), pre, post);
		}

		/// <summary>
		/// Tests if this contract's precondition and postcondition are
		/// actually both empty.
		/// </summary>
		public bool IsEmptyContract
		{
			get
			{
				return Precondition.IsEmpty && Postcondition.IsEmpty;
		   }
		}

		public IStatement Optimize()
		{
			if (IsEmptyContract)
			{
				return Body.Optimize();
			}
			else
			{
				return new ContractBodyStatement(
					Body.Optimize(),
					Precondition.Optimize(),
					Postcondition.Optimize());
			}
		}

		public bool IsConstantNode
		{
			get { return false; }
		}

		public ICodeBlock Emit(ICodeGenerator Target)
		{
			if (Target is IContractCodeGenerator)
			{
				var cg = (IContractCodeGenerator)Target;
				return cg.EmitContractBlock(
					Precondition.Emit(cg), Postcondition.Emit(cg),
					Body.Emit(cg));
			}
			else if (Target is IExceptionCodeGenerator)
			{
				// We can just lower the contract body statement.
				return LowerContractVisitor.LowerContractStatement(this).Emit(Target);
			}
			else
			{
				return Body.Emit(Target);
			}
		}
	}
}
