using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Emit;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
	public class ContractBodyStatement : IStatement, IPredicateNode
	{
		public const this(set IStatement Body, set [IExpression] Preconditions, set [IExpression] Postconditions);

		public IStatement Body { const get; private set; }
		public [IExpression] Preconditions { const get; private set; }
		public [IExpression] Postconditions { const get; private set; }

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.VisitAll(Preconditions);
			Visitor.VisitAll(Postconditions);
			Visitor.Visit(Body);
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var precond = Visitor.VisitAll(Preconditions);
			var postcond = Visitor.VisitAll(Postconditions);

			return new ContractBodyStatement(Visitor.Visit(Body),
				precond,
				postcond);
		}

		/// <summary>
		/// Tests if this contract's preconditions and postconditions are
		/// actually both empty.
		/// </summary>
		public bool IsEmptyContract
		{
			const get
			{
				return !Enumerable.Any<IExpression>(Preconditions) &&
					   !Enumerable.Any<IExpression>(Postconditions);
		   }
		}

		public const IStatement Optimize()
		{
			if (IsEmptyContract)
			{
				return Body.Optimize();
			}
			else
			{
				return new ContractBodyStatement(Body.Optimize(), Preconditions.OptimizeAll(), Postconditions.OptimizeAll());
			}
		}

		public bool IsConstantNode
		{
			const get return IsEmptyContract;
		}

		public ICodeBlock Emit(ICodeGenerator Target)
		{
			if (Target is IContractCodeGenerator)
			{
				var cg = (IContractCodeGenerator)Target;

				var pre = Preconditions.EmitAll(cg);
				var post = Postconditions.EmitAll(cg);
				var body = Body.Emit(cg);
				return cg.EmitContractBlock(pre, post, body);
			}
			else if (Target is IExceptionCodeGenerator)
			{
				// We can just lower the contract body statement.
				return LowerContractVisitor.LowerContractStatement(this).Emit(Target);
			}
			else
			{
				return Body.Emit(Target);
			}
		}
	}
}
