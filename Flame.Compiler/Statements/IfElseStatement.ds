using System;
using System.Collections.Generic;
using Flame.Compiler.Flow;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Statements
{
	/// <summary>
	/// Defines an if-else statement, which selects a path to execute at run-time,
	/// based on the result of a condition expression.
	/// </summary>
	public class IfElseStatement : IStatement, IFlowStatement
	{
		/// <summary>
		/// Creates an if-else statement based on the given condition and 'if' body.
		/// The 'else' body is assumed to be the empty statement.
		/// </summary>
		public const this(set IExpression Condition, set IStatement IfBody)
		{
			this.ElseBody = EmptyStatement;
		}
		/// <summary>
		/// Creates an if-else statement based on the given condition, 'if' body
		/// and 'else' body.
		/// </summary>
		public const this(set IExpression Condition, set IStatement IfBody, set IStatement ElseBody);

		/// <summary>
		/// Gets the if-else statement's condition expression, which determines
		/// which path is taken.
		/// </summary>
		public IExpression Condition { const get; private set; }

		/// <summary>
		/// Gets the if-else statement's 'if' body. This path will be taken
		/// if the condition expression evaluates to `true`.
		/// </summary>
		public IStatement IfBody { const get; private set; }

		/// <summary>
		/// Gets the if-else statement's 'else' body. This path will be taken
		/// if the condition expression evaluates to `false`.
		/// </summary>
		public IStatement ElseBody { const get; private set; }

		/// <summary>
		/// Tries to determine statically which path will be taken.
		/// If this can be done, the selected path is returned.
		/// Otherwise, this statement is returned.
		/// </summary>
		public IStatement Simplify()
		{
			var condVal = Condition.EvaluateConstant();

			if (condVal.EvaluatesTo<bool>(true))
			{
				// Simplify `if (true) ifBody; else elseBody;` to `ifBody;`
				return IfBody;
			}
			else if (condVal.EvaluatesTo<bool>(false))
			{
				// Simplify `if (true) ifBody; else elseBody;` to `elseBody;`
				return ElseBody;
			}
			else
			{
				// Condition could not be evaluated at compile-time. Nothing to simplify.
				return this;
			}
		}

		private const IfElseStatement CreateIfElse(IExpression NewCond, IStatement NewIf, IStatement NewElse)
		{
			if (this.Condition == NewCond && this.IfBody == NewIf &&
				this.ElseBody == NewElse)
			{
				return this;
			}
			else
			{
				return new IfElseStatement(NewCond, NewIf, NewElse);
			}
		}

		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
			: IFlowStatement.AcceptFlow<TState, TFlow>
		{
			var transCond = Visitor.Visit(Condition);
			var startState = Visitor.CurrentFlow;

			var transIf = Visitor.Visit(IfBody);
			var ifFlow = Visitor.CreateDeltaFlow(startState, Visitor.CurrentFlow);

			Visitor.CurrentFlow = startState; // Reset flow to create else flow
			var transElse = Visitor.Visit(ElseBody);

			var elseFlow = Visitor.CreateDeltaFlow(startState, Visitor.CurrentFlow);

			Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startState, Visitor.CreateSelectFlow(ifFlow, elseFlow));

			return CreateIfElse(transCond, transIf, transElse);
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transCond = Visitor.Visit(Condition);
			var transIf = Visitor.Visit(IfBody);
			var transElse = Visitor.Visit(ElseBody);

			return CreateIfElse(transCond, transIf, transElse);
		}

		/// <summary>
		/// Creates a number of basic blocks that are semantically equivalent
		/// to this flow statement.
		/// </summary>
		public void ToBlocks(BlockBuilder Builder)
		{
			// Generate the following blocks:
			//
			// @if():
			//     cond = <cond-expr>
			//     if cond
			//         then @if.then()
			//         else @if.else()
			//
			// @if.then():
			//     <then-body>
			//     @next()
			//
			// @if.else():
			//     <else-body>
			//     @next()

			var ifBlock = Builder.CreateBlock(
				"if.then", IfBody, new JumpFlow(new BlockBranch(Builder.NextBlockTag)));
			var elseBlock = Builder.CreateBlock(
				"if.else", ElseBody, new JumpFlow(new BlockBranch(Builder.NextBlockTag)));

			var condVariable = new SSAVariable("cond", Condition.Type);

			Builder.CreateCurrentBlock(
				condVariable.CreateSetStatement(Condition),
				new SelectFlow(condVariable,
					new BlockBranch(ifBlock),
					new BlockBranch(elseBlock)));
		}

		public bool IsEmpty : IStatement.IsEmpty
		{
			const get
			{
				var evalCond = Condition.EvaluateConstant();
				return (evalCond.EvaluatesTo<bool>(false) || IfBody.IsEmpty) &&
				       (evalCond.EvaluatesTo<bool>(true)  || ElseBody.IsEmpty);
			}
		}

		public IStatement Optimize() : IStatement.Optimize
		{
			var optCond = Condition.Optimize();
			var condVal = optCond.EvaluateConstant();

			if (condVal.EvaluatesTo<bool>(true))
			{
				// Simplify `if (true) ifBody; else elseBody;` to `ifBody;`
				return IfBody.Optimize();
			}
			else if (condVal.EvaluatesTo<bool>(false))
			{
				// Simplify `if (true) ifBody; else elseBody;` to `elseBody;`
				return ElseBody.Optimize();
			}
			else
			{
				var optIf = IfBody.Optimize();
				var optElse = ElseBody.Optimize();

				if (optIf.IsEmpty && optElse.IsEmpty)
				{
					// If body and else body were both empty, so we really only
					// want to keep the side-effects (if any) from the condition.

					return new ExpressionStatement(optCond).Simplify();
				}
				else
				{
					// Condition could not be evaluated at compile-time. Nothing to simplify.
					return CreateIfElse(optCond, optIf, optElse);
				}
			}
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			var conditionBlock = Condition.Emit(Generator);
			var ifBodyBlock = IfBody.Emit(Generator);
			var elseBodyBlock = ElseBody.Emit(Generator);
			return Generator.EmitIfElse(conditionBlock, ifBodyBlock, elseBodyBlock);
		}
	}
}
