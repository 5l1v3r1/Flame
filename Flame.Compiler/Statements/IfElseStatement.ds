using System;
using System.Collections.Generic;

namespace Flame.Compiler.Statements
{
	public class IfElseStatement : IStatement
	{
		public this(set IExpression Condition, set IStatement IfBody);
		public this(set IExpression Condition, set IStatement IfBody, set IStatement ElseBody);

		public IExpression Condition { const get; private set; }
		public IStatement IfBody { const get; private set; }
		public IStatement ElseBody { const get; private set; }

		public bool IsEmpty : IStatement.IsEmpty
		{
			const get
			{
				if (ElseBody == null)
				{
					return IfBody.IsEmpty;
				}
				else
				{
					return IfBody.IsEmpty && ElseBody.IsEmpty;
				}
			}
		}

		public IStatement Optimize() : IStatement.Optimize
		{
			var optCond = Condition.Optimize();
			var optIf = IfBody.Optimize();
			if (ElseBody == null)
			{
				return new IfElseStatement(optCond, optIf);
			}
			else
			{
				return new IfElseStatement(optCond, optIf, ElseBody.Optimize());
			}
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			var conditionBlock = Condition.Emit(Generator);
			var ifBodyBlock = IfBody.Emit(Generator);
			ICodeBlock elseBodyBlock;
			if (ElseBody != null)
			{
				elseBodyBlock = ElseBody.Emit(Generator);
			}
			else
			{
				elseBodyBlock = Generator.EmitVoid();
			}
			return Generator.EmitIfElse(conditionBlock, ifBodyBlock, elseBodyBlock);
		}
	}
}
