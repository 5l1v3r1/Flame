using System;
using System.Collections.Generic;

namespace Flame.Compiler.Statements
{
	public class IfElseStatement : IStatement
	{
		public this(set IExpression Condition, set IStatement IfBody);
		public this(set IExpression Condition, set IStatement IfBody, set IStatement ElseBody);

		public IExpression Condition { const get; private set; }
		public IStatement IfBody { const get; private set; }
		public IStatement ElseBody { const get; private set; }

		public override IStatement Accept(INodeVisitor Visitor)
		{
			var transCond = Visitor.Visit(Condition);
			var transIf = Visitor.Visit(IfBody);

			IStatement transElse;
			if (ElseBody == null)
				transElse = null;
			else
				transElse = Visitor.Visit(ElseBody);

			if (transCond == Condition && transIf == IfBody &&
				transElse == ElseBody)
			{
				return this;
			}
			else
			{
				return new IfElseStatement(transCond, transIf, transElse);
			}
		}

		public bool IsEmpty : IStatement.IsEmpty
		{
			const get
			{
				if (ElseBody == null)
				{
					return IfBody.IsEmpty || Condition.EvaluatesTo<bool>(false);
				}
				else
				{
					var evalCond = Condition.EvaluateConstant();
					return (evalCond.EvaluatesTo<bool>(false) || IfBody.IsEmpty) &&
					       (evalCond.EvaluatesTo<bool>(true)  || ElseBody.IsEmpty);
				}
			}
		}

		public IStatement Optimize() : IStatement.Optimize
		{
			var optCond = Condition.Optimize();
			var condVal = optCond.EvaluateConstant();
			if (ElseBody == null)
			{
				if (condVal.EvaluatesTo<bool>(false))
				{
					return new EmptyStatement();
				}
				else return new IfElseStatement(optCond, IfBody.Optimize());
			}
			else if (condVal.EvaluatesTo<bool>(true))
			{
				return IfBody.Optimize();
			}
			else if (condVal.EvaluatesTo<bool>(false))
			{
				return ElseBody.Optimize();
			}
			else
			{
				return new IfElseStatement(optCond, IfBody.Optimize(), ElseBody.Optimize());
			}
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			var conditionBlock = Condition.Emit(Generator);
			var ifBodyBlock = IfBody.Emit(Generator);
			ICodeBlock elseBodyBlock;
			if (ElseBody != null)
			{
				elseBodyBlock = ElseBody.Emit(Generator);
			}
			else
			{
				elseBodyBlock = Generator.EmitVoid();
			}
			return Generator.EmitIfElse(conditionBlock, ifBodyBlock, elseBodyBlock);
		}
	}
}
