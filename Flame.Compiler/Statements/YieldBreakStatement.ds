using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Statements
{
	public class YieldBreakStatement : IFlowStatement
	{
		public const this();

		public bool IsEmpty { const get return false; }

		public IStatement Accept(INodeVisitor Visitor)
		{
			return this;
		}

		public const IStatement Optimize()
		{
			return this;
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IYieldCodeGenerator)Generator;
			return cg.EmitYieldBreak();
		}

		/// <summary>
		/// Accepts and interacts with a flow visitor.
		/// </summary>
		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
			: IFlowStatement.AcceptFlow<TState, TFlow>
		{
			Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(Visitor.CurrentFlow, Visitor.TerminatedFlow);
			return this;
		}
	}
}
