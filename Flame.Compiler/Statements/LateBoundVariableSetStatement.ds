using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Statements
{
    public class LateBoundVariableSetStatement : VariableSetStatementBase<ILateBoundVariable>
    {
        public const this(set ILateBoundVariable Variable, set IExpression Value);

        public override IStatement Accept(INodeVisitor Visitor)
        {
            var expr = Visitor.Visit(Value);

            if (expr == Value)
            {
                return this;
            }
            else
            {
                return new LateBoundVariableSetStatement(Variable, expr);
            }
        }

        public override const IStatement Optimize()
        {
            return new LateBoundVariableSetStatement(Variable, Value.Optimize());
        }

        public override ICodeBlock Emit(ICodeGenerator Generator)
        {
            if (!Variable.IsBound)
            {
                Variable.BindVariable(Generator);
            }
            return Variable.BoundVariable.CreateSetStatement(Value).Emit(Generator);
        }
    }
    public class LateBoundVariableReleaseStatement : VariableReleaseStatementBase<ILateBoundVariable>
    {
        public const this(set ILateBoundVariable Variable);

        public override ICodeBlock Emit(ICodeGenerator Generator)
        {
            if (Variable.IsBound)
            {
                return Variable.BoundVariable.CreateReleaseStatement().Emit(Generator);
            }
            else
            {
                return Generator.EmitVoid();
            }
        }
    }
}
