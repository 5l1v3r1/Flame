using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;
using Flame.Compiler.Flow;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
	/// <summary>
	/// Defines a type of statement that throws the given exception expression.
	/// </summary>
	public class ThrowStatement : FlowTerminatingStatementBase
	{
		/// <summary>
		/// Creates a new throw statement from the given exception expression.
		/// </summary>
		public const this(set IExpression Exception);

		/// <summary>
		/// Gets the expression that creates the exception object this statement
		/// throws.
		/// </summary>
		public IExpression Exception { const get; private set; }

		private const ThrowStatement CreateThrow(IExpression NewValue)
		{
			if (Exception == NewValue)
			{
				return this;
			}
			else
			{
				return new ThrowStatement(NewValue);
			}
		}

		public override IStatement Accept(INodeVisitor Visitor)
		{
			var transVal = Visitor.Visit(Exception);

			return CreateThrow(transVal);
		}

		/// <summary>
		/// Creates a basic block that represents this
		/// flow-terminating statement.
		/// </summary>
		public override void ToBlocks(BlockBuildingVisitor Visitor)
		{
			if (Visitor.InTryBlock)
			{
				// Create the following blocks:
				//
				// @enter():
				//     guarded: @exit()
				//     handlers:
				//         @catch_0()
				//         ...
				//         @catch_n()
				//     finally: @finally()
				//
				// @exit():
				//     throw ex;
				//     terminated

				var exitTag = Visitor.Builder.CreateBlock(
					"exit", this.Accept(Visitor), TerminatedFlow);

				Visitor.Builder.CreateCurrentBlock(
					EmptyStatement, Visitor.CreateGuardedFlow(exitTag));
			}
			else
			{
				// Create the following block:
				//
				// @enter():
				//     throw ex;
				//     terminated

				Visitor.Builder.CreateCurrentBlock(
					this.Accept(Visitor), TerminatedFlow);
			}
		}

		public override IStatement Optimize()
		{
			return new ThrowStatement(Exception.Optimize());
		}

		public override ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IExceptionCodeGenerator)Generator;
			var ex = Exception.Emit(cg);
			return cg.EmitThrow(ex);
		}
	}
}
