using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Statements
{
	public class ThrowStatement : IFlowStatement
	{
		public const this(set IExpression Exception);

		public IExpression Exception { const get; private set; }

		public bool IsEmpty { const get return false; }

		private const ThrowStatement CreateThrow(IExpression NewValue)
		{
			if (Exception == NewValue)
			{
				return this;
			}
			else
			{
				return new ThrowStatement(NewValue);
			}
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transVal = Visitor.Visit(Exception);

			return CreateThrow(transVal);
		}

		public const IStatement Optimize()
		{
			return new ThrowStatement(Exception.Optimize());
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IExceptionCodeGenerator)Generator;
			var ex = Exception.Emit(cg);
			return cg.EmitThrow(ex);
		}

		/// <summary>
		/// Accepts and interacts with a flow visitor.
		/// </summary>
		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
			: IFlowStatement.AcceptFlow<TState, TFlow>
		{
			var result = Accept(Visitor);
			Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(Visitor.CurrentFlow, Visitor.TerminatedFlow);
			return result;
		}
	}
}
