using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Statements
{
    public class FieldSetStatement : IStatement, IVariableNode
    {
        public const this(set IField Field, set IExpression Target, set IExpression Value);

        public IField Field { const get; private set; }
        public IExpression Target { const get; private set; }
        public IExpression Value { const get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            var transTarget = Visitor.Visit(Target);
            var transVal = Visitor.Visit(Value);

            if (transTarget == Target && transVal == Value)
            {
                return this;
            }
            else
            {
                return new FieldSetStatement(Field, transTarget, transVal);
            }
        }

        public bool IsEmpty : IStatement.IsEmpty
        {
            const get { return false; }
        }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new FieldVariable(Field, Target);
        }

        public VariableNodeAction Action
        {
            const get return VariableNodeAction.Set;
        }

        public const IStatement Optimize() : IStatement.Optimize
        {
        	IExpression optTarget;
        	if (Target == null)
        	{
        		optTarget = null;
        	}
        	else
        	{
        		optTarget = Target.Optimize();
        	}
            var optVal = Value.Optimize();
            return new FieldSetStatement(Field, optTarget, optVal);
        }

        public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
        {
        	ICodeBlock targetBlock;
        	if (Target == null)
        	{
        		targetBlock = null;
        	}
        	else
        	{
        		targetBlock = Target.Emit(Generator);
        	}

            return Generator.EmitSetField(Field, targetBlock, Value.Emit(Generator));
        }
    }
}
