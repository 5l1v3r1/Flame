using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Statements
{
	public class YieldReturnStatement : IStatement
	{
		public const this(set IExpression Value);

		public IExpression Value { const get; private set; }

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transVal = Visitor.Visit(Value);

			if (transVal == Value)
			{
				return this;
			}
			else
			{
				return new YieldReturnStatement(transVal);
			}
		}

		public bool IsConstantNode { const get return false; }

		public const IStatement Optimize()
		{
			if (Value != null)
			{
				return new YieldReturnStatement(Value.Optimize());
			}
			else
			{
				return this;
			}
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IYieldCodeGenerator)Generator;
			return cg.EmitYieldReturn(Value.Emit(cg));
		}
	}
}
