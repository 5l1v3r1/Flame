using System;
using System.Collections.Generic;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
	/// <summary>
	/// Defines a type of flow statement that represents a 'while' statement in
	/// C family programming languages.
	/// </summary>
	public class WhileStatement : IStatement, IFlowStatement
	{
		public const this(set IExpression Condition, set IStatement Body)
		{
			this.Tag = new UniqueTag();
		}
		public const this(set UniqueTag Tag, set IExpression Condition, set IStatement Body);

		/// <summary>
		/// Gets this while statement's unique tag.
		/// </summary>
		public UniqueTag Tag { const get; private set; }

		/// <summary>
		/// Gets this while statement's condition expression. The while loop
		/// will execute the body for as long as this expression evalutes
		/// to true.
		/// </summary>
		public IExpression Condition { const get; private set; }

		/// <summary>
		/// Gets this while statement's body, which will be executed as long
		/// as the condition expression evaluates to true.
		/// </summary>
		public IStatement Body { const get; private set; }

		public bool IsConstantNode : IStatement.IsConstantNode
		{
			const get
			{
				return true;
			}
		}

		private const WhileStatement CreateWhile(IExpression NewCondition, IStatement NewBody)
		{
			if (NewCondition == Condition && NewBody == Body)
			{
				return this;
			}
			else
			{
				return new WhileStatement(Tag, NewCondition, NewBody);
			}
		}

		public void ToBlocks(BlockBuildingVisitor Visitor)
		{
			// Create a tagged block, and let that do the heavy lifting.
			return Lower().ToBlocks(Visitor);
		}

		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
			: IFlowStatement.AcceptFlow<TState, TFlow>
		{
			var startFlow = Visitor.CurrentFlow;

			var transCond = Visitor.Visit(Condition);

			var transBody = Visitor.Visit(Body);
			var bodyFlow = Visitor.CreateDeltaFlow(startFlow, Visitor.CurrentFlow);

			Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startFlow, Visitor.CreateLoopFlow(Tag, bodyFlow));

			return CreateWhile(transCond, transBody);
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transCond = Visitor.Visit(Condition);
			var transBody = Visitor.Visit(Body);

			return CreateWhile(transCond, transBody);
		}

		public IStatement Optimize() : IStatement.Optimize
		{
			var optCond = Condition.Optimize();
			if (optCond.EvaluatesTo<bool>(false))
			{
				return EmptyStatement;
			}

			var optBody = Body.Optimize();
			return CreateWhile(optCond, optBody);
		}

		/// <summary>
		/// Lowers this while block to an equivalent tagged block IR tree.
		/// </summary>
		public TaggedStatement Lower()
		{
			// "Lower" a while block like this:
			//
			// while (cond) stmt;
			//
			// ==>
			//
			// block:
			// {
			//     if (!cond) break block;
			//     stmt;
			//     continue block;
			// }

			var ifBreak = new IfElseStatement(new NotExpression(Condition),
										      new BreakStatement(Tag));
			var loopBody = new BlockStatement(new IStatement[]
			{
				ifBreak.Simplify(),
				Body,
				new ContinueStatement(Tag)
			});
			return new TaggedStatement(Tag, loopBody);
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			if (Generator is IWhileCodeGenerator)
			{
				var whileCg = (IWhileCodeGenerator)Generator;
				var conditionBlock = Condition.Emit(whileCg);
				var bodyBlock = Body.Emit(whileCg);
				return whileCg.EmitWhile(Tag, conditionBlock, bodyBlock);
			}
			else
			{
				return Lower().Emit(Generator);
			}
		}
	}
}
