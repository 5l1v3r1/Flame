using System;
using System.Collections.Generic;

namespace Flame.Compiler.Statements
{
	public class WhileStatement : IStatement, IFlowStatement
	{
		public const this(set IExpression Condition, set IStatement Body)
		{
			this.Tag = new BlockTag();
		}
		public const this(set BlockTag Tag, set IExpression Condition, set IStatement Body);

		public BlockTag Tag { const get; private set; }
		public IExpression Condition { const get; private set; }
		public IStatement Body { const get; private set; }

		public bool IsEmpty : IStatement.IsEmpty
		{
			const get
			{
				return Condition.EvaluatesTo<bool>(false);
			}
		}

		private const WhileStatement CreateWhile(IExpression NewCondition, IStatement NewBody)
		{
			if (NewCondition == Condition && NewBody == Body)
			{
				return this;
			}
			else
			{
				return new WhileStatement(Tag, NewCondition, NewBody);
			}
		}

		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
			: IFlowStatement.AcceptFlow<TState, TFlow>
		{
			var startFlow = Visitor.CurrentFlow;

			var transCond = Visitor.Visit(Condition);

			var transBody = Visitor.Visit(Body);
			var bodyFlow = Visitor.CreateDeltaFlow(startFlow, Visitor.CurrentFlow);

			Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startFlow, Visitor.CreateLoopFlow(bodyFlow));

			return CreateWhile(transCond, transBody);
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transCond = Visitor.Visit(Condition);
			var transBody = Visitor.Visit(Body);

			return CreateWhile(transCond, transBody);
		}

		public IStatement Optimize() : IStatement.Optimize
		{
			var optCond = Condition.Optimize();
			if (optCond.EvaluatesTo<bool>(false))
			{
				return EmptyStatement;
			}

			var optBody = Body.Optimize();
			return CreateWhile(optCond, optBody);
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : INode.Emit
		{
			var conditionBlock = Condition.Emit(Generator);
			var bodyBlock = Body.Emit(Generator);
			if (Generator is IWhileCodeGenerator)
			{
				var whileCg = (IWhileCodeGenerator)Generator;
				return whileCg.EmitWhile(Tag, conditionBlock, bodyBlock);
			}
			else
			{
				// "Lower" a while block like this:
				//
				// while (cond) stmt;
				//
				// ==>
				//
				// block:
				// {
				//     if (!cond) break block;
				//     stmt;
				//     continue block;
				// }

				var breakBlock = Generator.EmitIfElse(Generator.EmitNot(conditionBlock),
												      Generator.EmitBreak(Tag),
													  Generator.EmitVoid());
				var continueBlock = Generator.EmitContinue(Tag);
				var seqBlock = Generator.EmitSequence(Generator.EmitSequence(breakBlock, bodyBlock), continueBlock);
				return Generator.EmitTagged(Tag, seqBlock);
			}
		}
	}
}
