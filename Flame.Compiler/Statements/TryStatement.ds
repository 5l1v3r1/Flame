using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Statements
{
	public class CatchClause
	{
		private const this(set ManuallyBoundVariable exVariable, set IStatement Body);
		public const this(IVariableMember Member, set IStatement Body)
		{
			this.exVariable = new ManuallyBoundVariable(Member);
		}
		public const this(IVariableMember Member) 
		{
			this.exVariable = new ManuallyBoundVariable(Member);
		}
	
		private ManuallyBoundVariable exVariable;
	
		public IVariable ExceptionVariable { const get return exVariable; }
		public IStatement Body { const get; set; }
		
		public const CatchClause Optimize()
		{
			return new CatchClause(exVariable, Body.Optimize());
		}
		
		public void Emit(ITryBlockGenerator Generator)
		{
			var clause = Generator.EmitCatchClause(exVariable.Member);
			exVariable.BindVariable(clause.ExceptionVariable);
			Body.Emit(clause);
		}
	}

	public class TryStatement : IStatement
	{
		public const this(set IStatement TryBody);
		public const this(set IStatement TryBody, set IStatement FinallyBody);
		public const this(set IStatement TryBody, set [CatchClause] CatchClauses);
		public const this(set IStatement TryBody, set IStatement FinallyBody, set [CatchClause] CatchClauses);
	
		public IStatement TryBody { const get; private set; }
		public IStatement FinallyBody { const get; private set; }
		public [CatchClause] CatchClauses { const get; private set; }
		
		public bool IsEmpty
		{
			const get return TryBody.IsEmpty && FinallyBody.IsEmpty;
		}
		
		public const IStatement Optimize()
		{
			var optTry = TryBody.Optimize();
			var optFinally = FinallyBody.Optimize();
			List<CatchClause> optClauses = new List<CatchClause>();
			foreach (var item in CatchClauses)
			{
				optClauses.Add(item.Optimize());
			}
			return new TryStatement(optTry, optFinally, optClauses);
		}
		
		public void Emit(IBlockGenerator Generator)
		{
			var cg = (IExceptionCodeGenerator)Generator.CodeGenerator;
			var block = cg.CreateTryBlock();
			TryBody.Emit(block.TryBody);
			FinallyBody.Emit(block.FinallyBody);
			foreach (var item in CatchClauses)
			{
				item.Emit(block);
			}
			Generator.EmitBlock(block);
		}
	}
}