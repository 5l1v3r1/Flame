using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Statements
{
	public class CatchClause
	{
		private const this(set ManuallyBoundVariable exVariable, set IStatement Body);
		public const this(IVariableMember Member, set IStatement Body)
		{
			this.exVariable = new ManuallyBoundVariable(Member);
		}
		public const this(IVariableMember Member)
		{
			this.exVariable = new ManuallyBoundVariable(Member);
			this.Body = EmptyStatement;
		}

		private ManuallyBoundVariable exVariable;

		public IVariable ExceptionVariable { const get return exVariable; }
		public IStatement Body { const get; set; }

		public CatchClause ConvertType(MemberConverter Converter)
		{
			if (exVariable.IsBound)
			{
				return this; // Too bad. We can't safely convert this exception variable's type.
			}

			var exType = exVariable.Type;
			var convExType = Converter.Convert(exType);
			if (object.ReferenceEquals(exType, convExType))
			{
				return this;
			}
			else
			{
				var convExVariable = new ManuallyBoundVariable(new RetypedVariableMember(exVariable.Member, convExType));
				var convMapping = new Dictionary<IVariable, IVariable>();
				convMapping[exVariable] = convExVariable;
				var variableSubst = new VariableSubstitutingVisitor(convMapping);
				var visitedBody = variableSubst.Visit(Body);
				return new CatchClause(convExVariable, visitedBody);
			}
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.Visit(Body);
		}

		public CatchClause Accept(INodeVisitor Visitor)
		{
			var visitedBody = Visitor.Visit(Body);

			if (visitedBody == Body)
			{
				return this;
			}
			else
			{
				return new CatchClause(exVariable, visitedBody);
			}
		}

		public const CatchClause Optimize()
		{
			return new CatchClause(exVariable, Body.Optimize());
		}

		public ICatchClause Emit(IExceptionCodeGenerator Generator)
		{
			var header = Generator.EmitCatchHeader(exVariable.Member);
			exVariable.BindVariable(header.ExceptionVariable);
			var body = Body.Emit(Generator);
			return Generator.EmitCatchClause(header, body);
		}

		public UniqueTag ToBlock(BlockBuildingVisitor Visitor, FinallyFlow OutFlow)
		{
			var exVar = new LocalVariable(ExceptionVariable.Type);
			exVariable.BindVariable(exVar);
			var newBody = new BlockStatement(new IStatement[]
			{
				exVar.CreateSetStatement(new CaughtExceptionExpression(exVar.Type)),
				Body
			}).Simplify();

			// If a 'catch' block throws an exception, then control will
			// be transferred to the 'finally' block. Control will never
			// be transferred directly to some exception handler, so
			// create a guarded block with no exception handlers and
			// a single 'finally' branch.

			return Visitor.CreateTryBlock(
				"catch", newBody, OutFlow,
				new List<ExceptionBranch>(), OutFlow.Branch);
		}
	}

	public class TryStatement : IStatement, IPredicateNode, IMemberNode, IFlowStatement
	{
		public const this(set IStatement TryBody, set IStatement FinallyBody)
		{
			this.CatchClauses = Enumerable.Empty<CatchClause>();
		}
		public const this(set IStatement TryBody, set [CatchClause] CatchClauses)
		{
			this.FinallyBody = EmptyStatement;
		}
		public const this(set IStatement TryBody, set IStatement FinallyBody, set [CatchClause] CatchClauses);

		public IStatement TryBody { const get; private set; }
		public IStatement FinallyBody { const get; private set; }
		public [CatchClause] CatchClauses { const get; private set; }

		public IMemberNode ConvertMembers(MemberConverter Converter)
		{
			var convCatches = new List<CatchClause>();
			bool sameStatement = true;
			foreach (var item in CatchClauses)
			{
				var visitedClause = item.ConvertType(Converter);
				if (visitedClause != item)
				{
					sameStatement = false;
				}
				convCatches.Add(visitedClause);
			}
			if (sameStatement) return this;
			else return new TryStatement(TryBody, FinallyBody, convCatches);
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.Visit(TryBody);
			Visitor.Visit(FinallyBody);
			foreach (var item in CatchClauses)
			{
				item.AcceptPredicate(Visitor);
			}
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var visitedTryBody = Visitor.Visit(TryBody);
			var visitedFinallyBody = Visitor.Visit(FinallyBody);
			var visitedCatchClauses = new List<CatchClause>();

			bool sameStatement = visitedTryBody == TryBody && visitedFinallyBody == FinallyBody;
			foreach (var item in CatchClauses)
			{
				var visitedClause = item.Accept(Visitor);
				if (visitedClause != item)
				{
					sameStatement = false;
				}
				visitedCatchClauses.Add(visitedClause);
			}

			if (sameStatement) return this;
			else return new TryStatement(visitedTryBody, visitedFinallyBody, visitedCatchClauses);
		}

		/// <summary>
		/// Creates a number of basic blocks that are semantically equivalent
		/// to this flow statement.
		/// </summary>
		public void ToBlocks(BlockBuildingVisitor Visitor)
		{
			// Generate the following blocks:
			//
			// @entry:
			//     try @try()
			//
			// @try():
			//     <try-body>
			//     finally @finally()
			//
			// @catch_i():
			//     var ex = caught-exception;
			//     <catch-body>
			//     finally @finally()
			//
			// @finally():
			//     <finally-body>
			//     leave @next()
			//
			// And then there is only the small matter of what to do when
			// an exception is thrown. Here's what exceptions do:
			//
			//     If an exception is thrown in the 'try' region, then:
			//         - a matching handler may catch it. If so, then
			//             - the 'catch' handler is invoked
			//             - the 'finally' region is invoked
			//             - control flow continues normally
			//         - otherwise,
			//             - the 'finally' region is invoked
			//             - the exception propagates upward
			//
			//     If an exception is thrown in a 'catch' region, then:
			//         - the 'finally' region is invoked
			//         - the exception propagates upward
			//
			//     If an exception is thrown in a 'finally' region, then:
			//         - the exception propagates upward
			//
			// To ensure correctness, we will insert guarded flow. This type
			// of basic block flow instruction introduces a safe point before
			// executing a basic block that *may* throw an exception.
			//
			// We will insert guarded flow as follows:
			//
			//   * In the 'try' body, guarded flow will refer to the 'try'
			//     statement's associated 'catch' and 'finally' handlers, as
			//     the 'try' body may transfer control to either a 'catch'
			//     or 'finally' handler (if there is no 'catch' handler).
			//
			//   * In the 'catch' body, guarded flow will refer to the 'try'
			//     statement's associated 'finally' handler only: no matter what
			//     happens, control-flow will visit this region first.
			//
			//   * In the 'finally' body, guarded flow will refer to the
			//     enclosing scope's 'catch' and 'finally' handlers.
			//     Additionally, we will insert a single guarded flow block
			//     just before the block that contains the 'leave' instruction,
			//     because uncaught exceptions may want to propagate upward.

			var nextBlockTag = Visitor.Builder.NextBlockTag;

			// Create the 'finally' block.
			var finallyTag = new UniqueTag("finally");
			var leaveFlow = new LeaveFlow(new BlockBranch(nextBlockTag));
			if (Visitor.InTryBlock)
			{
				var finallyGuardTag = new UniqueTag("finally.guard");
				Visitor.CreateBlock(
					finallyTag, FinallyBody,
					Visitor.CreateGuardedFlow(finallyGuardTag));
				Visitor.Builder.CreateBlock(
					finallyGuardTag, EmptyStatement, leaveFlow);
			}
			else
			{
				Visitor.CreateBlock(finallyTag, FinallyBody, leaveFlow);
			}

			var finallyBr = new BlockBranch(finallyTag);
			var finallyFlow = new FinallyFlow(finallyBr);

			// Create the exception handlers ('catch' blocks)
			var ehBlocks = new List<ExceptionBranch>();
			foreach (var clause in CatchClauses)
			{
				var ehTag = clause.ToBlock(Visitor, finallyFlow);
				ehBlocks.Add(new ExceptionBranch(
					clause.ExceptionVariable.Type, new BlockBranch(ehTag)));
			}

			// Create the 'try' blocks
			var tryTag = Visitor.CreateTryBlock("try", TryBody, ehBlocks, finallyBr);

			Visitor.Builder.CreateCurrentBlock(
				EmptyStatement, new TryFlow(new BlockBranch(tryTag)));
		}

		/// <summary>
		/// Accepts and interacts with a flow visitor.
		/// </summary>
		public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
		{
			// HACK: Just lie to the visitor and pretend this is linear flow.
			//       This is evil, but the visitor would have assumed this
			//       to be the case anyway had we not implemented IFlowStatement.
			return Accept(Visitor);
		}

		public bool IsConstantNode
		{
			const get return true;
		}

		public const IStatement Optimize()
		{
			var optTry = TryBody.Optimize();
			var optFinally = FinallyBody.Optimize();
			List<CatchClause> optClauses = new List<CatchClause>();
			foreach (var item in CatchClauses)
			{
				optClauses.Add(item.Optimize());
			}
			return new TryStatement(optTry, optFinally, optClauses);
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IExceptionCodeGenerator)Generator;
			var tryBlock = TryBody.Emit(Generator);
			var finallyBlock = FinallyBody.Emit(Generator);
			var catchBlocks = new List<ICatchClause>();
			foreach (var item in CatchClauses)
			{
				catchBlocks.Add(item.Emit(cg));
			}
			return cg.EmitTryBlock(tryBlock, finallyBlock, catchBlocks);
		}
	}
}
