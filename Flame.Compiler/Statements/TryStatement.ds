using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Emit;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Statements
{
	public class CatchClause
	{
		private const this(set ManuallyBoundVariable exVariable, set IStatement Body);
		public const this(IVariableMember Member, set IStatement Body)
		{
			this.exVariable = new ManuallyBoundVariable(Member);
		}
		public const this(IVariableMember Member)
		{
			this.exVariable = new ManuallyBoundVariable(Member);
		}

		private ManuallyBoundVariable exVariable;

		public IVariable ExceptionVariable { const get return exVariable; }
		public IStatement Body { const get; set; }

		public const CatchClause Optimize()
		{
			return new CatchClause(exVariable, Body.Optimize());
		}

		public ICatchClause Emit(IExceptionCodeGenerator Generator)
		{
			var header = Generator.EmitCatchHeader(exVariable.Member);
			exVariable.BindVariable(header.ExceptionVariable);
			var body = Body.Emit(Generator);
			return Generator.EmitCatchClause(header, body);
		}
	}

	public class TryStatement : IStatement
	{
		public const this(set IStatement TryBody, set IStatement FinallyBody)
		{
			this.CatchClauses = Enumerable.Empty<CatchClause>();
		}
		public const this(set IStatement TryBody, set [CatchClause] CatchClauses)
		{
			this.FinallyBody = new EmptyStatement();
		}
		public const this(set IStatement TryBody, set IStatement FinallyBody, set [CatchClause] CatchClauses);

		public IStatement TryBody { const get; private set; }
		public IStatement FinallyBody { const get; private set; }
		public [CatchClause] CatchClauses { const get; private set; }

		public bool IsEmpty
		{
			const get return TryBody.IsEmpty && FinallyBody.IsEmpty;
		}

		public const IStatement Optimize()
		{
			var optTry = TryBody.Optimize();
			var optFinally = FinallyBody.Optimize();
			List<CatchClause> optClauses = new List<CatchClause>();
			foreach (var item in CatchClauses)
			{
				optClauses.Add(item.Optimize());
			}
			return new TryStatement(optTry, optFinally, optClauses);
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			var cg = (IExceptionCodeGenerator)Generator;
			var tryBlock = TryBody.Emit(Generator);
			var finallyBlock = FinallyBody.Emit(Generator);
			var catchBlocks = new List<ICatchClause>();
			foreach (var item in CatchClauses)
			{
				catchBlocks.Add(item.Emit(cg));
			}
			return cg.EmitTryBlock(tryBlock, finallyBlock, catchBlocks);
		}
	}
}
