using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Statements
{
    public class StoreAtAddressStatement : IStatement, ISetVariableNode
    {
        public const this(set IExpression Pointer, set IExpression Value);

        public IExpression Pointer { const get; private set; }
        public IExpression Value { const get; private set; }

        public IStatement Accept(INodeVisitor Visitor)
        {
            var transPtr = Visitor.Visit(Pointer);
            var transVal = Visitor.Visit(Value);

            if (transPtr == Pointer && transVal == Value)
            {
                return this;
            }
            else
            {
                return new StoreAtAddressStatement(transPtr, transVal);
            }
        }

        public bool IsConstantNode
        {
            const get { return false; }
        }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new AtAddressVariable(Pointer);
        }

        public VariableNodeAction Action
        {
            const get return VariableNodeAction.Set;
        }

        public IStatement Optimize()
        {
            return new StoreAtAddressStatement(Pointer.Optimize(), Value.Optimize()).Simplify();
        }

        public IStatement Simplify()
        {
            var essentialExpr = Pointer.GetEssentialExpression();
            if (essentialExpr is IVariableNode)
            {
                var varNode = (IVariableNode)essentialExpr;
                if (varNode.Action == VariableNodeAction.AddressOf)
                {
                    // `*(&a) = b` can safely be replaced by `a = b`
                    return varNode.GetVariable().CreateSetStatement(Value);
                }
            }
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
        	var cg = (IUnmanagedCodeGenerator)Generator;
            return cg.EmitStoreAtAddress(Pointer.Emit(cg), Value.Emit(cg));
        }

        public override string ToString()
        {
            return "*(" + Pointer.ToString() + ") = " + Value.ToString();
        }
    }
}
