using System;
using System.Collections.Generic;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;

namespace Flame.Compiler.Statements
{
    public class ForStatement : ComplexStatement, IPredicateNode, IFlowStatement
    {
    	public const this(set UniqueTag Tag, set IStatement Setup,
                          set IExpression Condition, set IStatement Change,
                          set IStatement Body, set IStatement End);
        public const this(set IStatement Setup,set IExpression Condition,
                          set IStatement Change, set IStatement Body,
                          set IStatement End)
        {
            this.Tag = new UniqueTag();
        }
    	public const this(set IStatement Setup, set IExpression Condition, set IStatement Change, set IStatement Body)
        {
            this.Tag = new UniqueTag();
        	this.End = EmptyStatement;
        }
        public const this(set IExpression Condition, set IStatement Change, set IStatement Body)
        {
            this.Tag = new UniqueTag();
        	this.Setup = EmptyStatement;
        	this.End = EmptyStatement;
        }
        public const this()
        {
            this.Tag = new UniqueTag();
            this.Setup = EmptyStatement;
            this.Condition = new BooleanExpression(false);
            this.Body = EmptyStatement;
            this.Change = EmptyStatement;
            this.End = EmptyStatement;
        }

        public UniqueTag Tag { const get; private set; }
        public IStatement Setup { const get; private set; }
        public IExpression Condition { const get; private set; }
        public IStatement Body { const get; private set; }
        public IStatement Change { const get; private set; }
        public IStatement End { const get; private set; }

        private const ForStatement CreateFor(IStatement NewSetup, IExpression NewCondition,
                                             IStatement NewChange, IStatement NewBody,
                                             IStatement NewEnd)
        {
            if (NewSetup == Setup && NewCondition == Condition &&
                NewBody == Body && NewChange == Change &&
                NewEnd == End)
            {
                return this;
            }
            else
            {
                return new ForStatement(Tag, NewSetup, NewCondition, NewChange, NewBody, NewEnd);
            }
        }

        public override IStatement Optimize()
        {
            var optSetup = Setup.Optimize();
            var optCond = Condition.Optimize();

            if (optCond.EvaluatesTo<bool>(false))
                return optSetup;

            var stmt = CreateFor(optSetup, optCond, Change.Optimize(), Body.Optimize(), End.Optimize());
            if (stmt.IsEmpty)
            {
            	return EmptyStatement;
            }
            return stmt;
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            Visitor.Visit(Setup);
            Visitor.Visit(Condition);
            Visitor.Visit(Body);
            Visitor.Visit(Change);
            Visitor.Visit(End);
        }

        public IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
            : IFlowStatement.AcceptFlow<TState, TFlow>
        {
            var transSetup = Visitor.Visit(Setup);
            var startFlow = Visitor.CurrentFlow;

            var transCond = Visitor.Visit(Condition);
            var transBody = Visitor.Visit(Body);
            var transChange = Visitor.Visit(Change);
            var bodyFlow = Visitor.CreateDeltaFlow(startFlow, Visitor.CurrentFlow);

            Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startFlow, Visitor.CreateLoopFlow(Tag, bodyFlow));

            var transEnd = Visitor.Visit(End);

            return CreateFor(transSetup, transCond, transChange, transBody, transEnd);
        }

        public override IStatement Accept(INodeVisitor Visitor)
        {
            var transSetup = Visitor.Visit(Setup);
            var transCond = Visitor.Visit(Condition);
            var transBody = Visitor.Visit(Body);
            var transChange = Visitor.Visit(Change);
            var transEnd = Visitor.Visit(End);

            return CreateFor(transSetup, transCond, transChange, transBody, transEnd);
        }

        public override ICodeBlock Emit(ICodeGenerator Generator)
        {
        	if (Generator is IForCodeGenerator)
        	{
        		var cg = (IForCodeGenerator)Generator;
        		var setupBlock = Setup.Emit(cg);
        		var condBlock = Condition.Emit(cg);
        		var deltaBlock = Change.Emit(cg);
                var bodyBlock = Body.Emit(cg);
        		var forBlock = cg.EmitForBlock(Tag, setupBlock, condBlock, deltaBlock, bodyBlock);
        		if (forBlock != null) // Code generator may choose to refuse our
                                      // painstakingly constructed for block if it so chooses
        		{
        			if (!End.IsEmpty)
        			{
        				var endBlock = End.Emit(cg);
                        return cg.EmitSequence(forBlock, endBlock);
        			}
                    else
                    {
                        return forBlock;
                    }
        		}
        	}
            return LoweredStatement.Emit(Generator);
        }

        protected override const IStatement Lower()
        {
        	var list = new List<IStatement>();
            list.Add(Setup);

            var loopBody = new List<IStatement>();
            loopBody.Add(Body);
            loopBody.Add(Change);
            var loop = new WhileStatement(Tag, Condition, new BlockStatement(loopBody));
            list.Add(loop);

            list.Add(End);
            BlockStatement block = new BlockStatement(list);
            return block;
        }
    }
}
