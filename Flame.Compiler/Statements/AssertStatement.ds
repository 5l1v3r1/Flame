using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Statements
{
	/// <summary>
	/// Defines a statement that checks if an expression evaluates to `true`.
	/// If not, the user is notified in an implementation-defined manner.
	/// </summary>
	public class AssertStatement : IStatement
	{
		/// <summary>
		/// Creates an assertion statement from the given expression.
		/// The message is set to 'null'.
		/// </summary>
		public this(set IExpression Expression)
		{
			this.Message = null;
		}

		/// <summary>
		/// Creates an assertion statement from the given
		/// expression and an optional message.
		/// </summary>
		public this(set IExpression Expression, set IExpression Message);

		/// <summary>
		/// Gets the expression that is tested for equality to `true`.
		/// </summary>
		public IExpression Expression { get; private set; }

		/// <summary>
		/// Gets the expression (of type `string`) that produces a message
		/// which describes what this assertion tests.
		/// It generated message may be prose, or a snippet of code.
		/// </summary>
		public IExpression Message { get; private set; }

		public bool IsConstantNode
		{
			get { return Expression.EvaluatesTo<bool>(true); }
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transVal = Visitor.Visit(Expression);
			IExpression transMsg;
			if (Message == null)
				transMsg = null;
			else
				transMsg = Visitor.Visit(Message);

			if (transVal == Expression && transMsg == Message)
				return this;
			else
				return new AssertStatement(transVal, transMsg);
		}

		public IStatement Optimize()
		{
			var optAssert = new AssertStatement(
				Expression.Optimize(), Message.OptimizeOrNull());
			if (optAssert.IsEmpty)
				return EmptyStatement;
			else
				return optAssert;
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			if (Generator is IExceptionCodeGenerator)
			{
				var cg = (IExceptionCodeGenerator)Generator;
				return cg.EmitAssert(
					Expression.Emit(cg), Message.EmitOrNull(cg));
			}
			else
			{
				return Generator.EmitVoid(); // Oh, well.
			}
		}

		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("assert(");
			sb.Append(Expression.ToString());
			if (Message != null)
			{
				sb.Append(", \"");
				sb.Append(Message.ToString());
				sb.Append("\"");
			}
			sb.Append(")");
			return sb.ToString();
		}
	}
}
