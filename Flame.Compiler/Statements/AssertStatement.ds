using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Statements
{
	public class AssertStatement : IStatement
	{
		public const this(set IExpression Expression);

		public IExpression Expression { const get; private set; }

		public bool IsEmpty
		{
			const get return Expression.EvaluatesTo<bool>(true);
		}

		public IStatement Accept(INodeVisitor Visitor)
		{
			var transVal = Visitor.Visit(Expression);

			if (transVal == Expression)
			{
				return this;
			}
			else
			{
				return new AssertStatement(transVal);
			}
		}

		public const IStatement Optimize()
		{
			var optAssert = new AssertStatement(Expression.Optimize());
			if (optAssert.IsEmpty)
			{
				return new EmptyStatement();
			}
			return optAssert;
		}

		public ICodeBlock Emit(ICodeGenerator Generator)
		{
			if (Generator is IExceptionCodeGenerator)
			{
				var cg = (IExceptionCodeGenerator)Generator;
				var expr = Expression.Emit(cg);
				return cg.EmitAssert(expr);
			}
			else
			{
				return Generator.EmitVoid(); // Oh, well.
			}
		}
	}
}
