using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Expressions;

namespace Flame.Compiler
{
	public static class PrimitiveExpressionExtensions
	{
		public static const IExpression ToExpression(this IBoundObject Value)
		{
			var valType = Value.Type;
			if (valType.Equals(PrimitiveTypes.Boolean))
			{
				return new BooleanExpression(Value.GetValue<bool>());
			}
			else if (valType.Equals(PrimitiveTypes.Null))
			{
				return NullExpression;
			}
			else if (valType.Equals(PrimitiveTypes.Void))
			{
				return VoidExpression;
			}
			else if (valType.Equals(PrimitiveTypes.Int64))
			{
				return new Int64Expression(Value.GetValue<int64>());
			}
			else if (valType.Equals(PrimitiveTypes.UInt64))
			{
				return new UInt64Expression(Value.GetValue<uint64>());
			}
			else if (valType.Equals(PrimitiveTypes.UInt32))
			{
				return new UInt32Expression(Value.GetValue<uint32>());
			}
			else if (valType.Equals(PrimitiveTypes.Int16))
			{
				return new Int16Expression(Value.GetValue<int16>());
			}
			else if (valType.Equals(PrimitiveTypes.Int8))
			{
				return new Int8Expression(Value.GetValue<int8>());
			}
			else if (valType.Equals(PrimitiveTypes.UInt16))
			{
				return new UInt16Expression(Value.GetValue<uint16>());
			}
			else if (valType.Equals(PrimitiveTypes.UInt8))
			{
				return new UInt8Expression(Value.GetValue<uint8>());
			}
			else if (valType.Equals(PrimitiveTypes.Int32))
			{
				return new Int32Expression(Value.GetValue<int32>());
			}
			else if (valType.Equals(PrimitiveTypes.Bit64))
			{
				return new Bit64Expression(Value.GetValue<bit64>());
			}
			else if (valType.Equals(PrimitiveTypes.Bit32))
			{
				return new Bit32Expression(Value.GetValue<bit32>());
			}
			else if (valType.Equals(PrimitiveTypes.Bit16))
			{
				return new Bit16Expression(Value.GetValue<bit16>());
			}
			else if (valType.Equals(PrimitiveTypes.Bit8))
			{
				return new Bit8Expression(Value.GetValue<bit8>());
			}
			else if (valType.Equals(PrimitiveTypes.Float64))
			{
				return new Float64Expression(Value.GetValue<float64>());
			}
			else if (valType.Equals(PrimitiveTypes.Float32))
			{
				return new Float32Expression(Value.GetValue<float32>());
			}
			else if (valType.Equals(PrimitiveTypes.Char))
			{
				return new CharExpression(Value.GetValue<char>());
			}
			else if (valType.Equals(PrimitiveTypes.String))
			{
				var val = Value.GetValue<string>();
				if (val == null)
					return new ReinterpretCastExpression(NullExpression, PrimitiveTypes.String);
				else
					return new StringExpression(val);
			}
			else
			{
				return null;
			}
		}

		/// <summary>
		/// Gets a boolean value that indicates if primitive expressions can be created for this type.
		/// </summary>
		public static bool IsPrimitiveExpressionType(this IType Type)
		{
			return Type.IsPrimitive;
		}
	}
}
