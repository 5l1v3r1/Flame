using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Flow
{
	/// <summary>
	/// Defines a control flow graph: a self-contained sequence of basic
	/// blocks, with an entry point.
	/// </summary>
	public class FlowGraph
	{
		/// <summary>
		/// Creates a new flow graph from the given entry point tag and
		/// tag-basic block mapping.
		/// </summary>
		public const this(
			set UniqueTag EntryPointTag,
			IReadOnlyDictionary<UniqueTag, BasicBlock> Blocks)
		{
			this.allBlocks = Blocks;
		}

		/// <summary>
		/// Creates a new flow graph from the given entry point tag and sequence
		/// of basic blocks.
		/// </summary>
		public const this(set UniqueTag EntryPointTag, [BasicBlock] Blocks)
		{
			var blockDict = new Dictionary<UniqueTag, BasicBlock>();
			foreach (var item in Blocks)
			{
				blockDict.Add(item.Tag, item);
			}
			this.allBlocks = blockDict;
		}

		private IReadOnlyDictionary<UniqueTag, BasicBlock> allBlocks;

		/// <summary>
		/// Gets the unique tag that identifies the entry point block in
		/// this control flow graph.
		/// </summary>
		public UniqueTag EntryPointTag { const get; private set; }

		/// <summary>
		/// Gets the sequence of all blocks in this control flow graph.
		/// </summary>
		public [BasicBlock] Blocks { get { return allBlocks.Values; } }

		/// <summary>
		/// Gets the sequence of all block tags in this control flow graph.
		/// </summary>
		public [UniqueTag] BlockTags { get { return allBlocks.Keys; } }

		/// <summary>
		/// Gets this control flow graph's entry point graph.
		/// </summary>
		public BasicBlock EntryPointBlock
		{
			get { return GetBlock(EntryPointTag); }
		}

		/// <summary>
		/// Gets the block associated with the given tag in this control flow
		/// graph.
		/// </summary>
		public BasicBlock GetBlock(UniqueTag Tag)
		{
			return allBlocks[Tag];
		}

		/// <summary>
		/// Tests if this flow graph is "empty" from the perspective of a statement:
		/// all reachable blocks have empty bodies.
		/// </summary>
		public bool IsEmpty
		{
			get
			{
				foreach (var tag in FindReachableBlocks())
				{
					var block = GetBlock(tag);
					if (!block.Contents.IsEmpty || !block.Flow.IsConstant)
						return false;
				}
				return true;
			}
		}

		/// <summary>
		/// Accepts the given node visitor.
		/// </summary>
		public FlowGraph Accept(INodeVisitor Visitor)
		{
			var newBlocks = new Dictionary<UniqueTag, BasicBlock>();
			foreach (var item in Blocks)
			{
				var visitedBlock = item.Accept(Visitor);
				newBlocks[visitedBlock.Tag] = visitedBlock;
			}
			return new FlowGraph(EntryPointTag, newBlocks);
		}

		/// <summary>
		/// Applies simple optimizations to this control flow graph.
		/// </summary>
		public FlowGraph Optimize()
		{
			var newBlocks = new Dictionary<UniqueTag, BasicBlock>();
			foreach (var item in Blocks)
			{
				var visitedBlock = item.Optimize();
				newBlocks[visitedBlock.Tag] = visitedBlock;
			}
			return new FlowGraph(EntryPointTag, newBlocks).EliminateUnreachable();
		}

		alias PredecessorPair = Tuple<UniqueTag, IReadOnlyList<SSAVariable>>;

		/// <summary>
		/// Creates a dictionary that maps basic block tags to sequences of
		/// (predecessor block tag, argument list) pairs.
		/// </summary>
		/// <remarks>
		/// This is O(n*m), where n represents the number of blocks,
		/// and m is equal to the number of branches per block.
		/// </remarks>
		public IReadOnlyDictionary<UniqueTag, [PredecessorPair]> GetPredecessors()
		{
			var results = new Dictionary<UniqueTag, [PredecessorPair]>();
			foreach (var item in Blocks)
			{
				foreach (var branch in item.Flow.Branches)
				{
					[PredecessorPair] preds;
					if (!results.TryGetValue(branch.TargetTag, &preds))
					{
						preds = new HashSet<PredecessorPair>();
						results[branch.TargetTag] = preds;
					}
					var predList = (HashSet<PredecessorPair>)preds;
					// Add the (predecessor block tag, argument list) to the
					// list of predecessors for the target block.
					predList.Add(new PredecessorPair(item.Tag, branch.Arguments));
				}
			}
			return results;
		}

		/// <summary>
		/// Marks the block identified by the given tag - and all blocks that
		/// are reachable from this block - as reachable by adding them to
		/// the given set.
		/// </summary>
		private void MarkReachable(UniqueTag Tag, HashSet<UniqueTag> Results)
		{
			// Mark this block as reachable.
			if (Results.Add(Tag))
			{
				// Mark all blocks that are reachable from this block
				// as reachable.
				foreach (var item in GetBlock(Tag).Flow.Branches)
				{
					MarkReachable(item.TargetTag, Results);
				}
			}
		}

		/// <summary>
		/// Computes the set of all reachable blocks in this flow graph.
		/// </summary>
		public [UniqueTag] FindReachableBlocks()
		{
			var results = new HashSet<UniqueTag>();
			MarkReachable(EntryPointTag, results);
			return results;
		}

		/// <summary>
		/// Creates a flow graph that contains all blocks that are
		/// reachable in this flow graph.
		/// </summary>
		public FlowGraph EliminateUnreachable()
		{
			var reachable = new HashSet<UniqueTag>();
			MarkReachable(EntryPointTag, reachable);
			var results = new Dictionary<UniqueTag, BasicBlock>();
			foreach (var item in Blocks)
			{
				if (reachable.Contains(item.Tag))
				{
					results[item.Tag] = item;
				}
			}
			return new FlowGraph(EntryPointTag, results);
		}
	}
}
