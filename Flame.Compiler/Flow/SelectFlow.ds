using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Flow
{
    /// <summary>
    /// A type of basic block control flow statement that transfers control
    /// to one of two basic blocks, based on a condition.
    /// </summary>
    public class SelectFlow : BlockFlow
    {
        /// <summary>
        /// Creates a basic block flow node that performs the first branch
        /// if the given boolean expression evaluates to true, and performs
        /// the second branch otherwise.
        /// </summary>
        public const this(
            set IExpression Condition,
            set BlockBranch ThenBranch, set BlockBranch ElseBranch);

        /// <summary>
        /// Gets a boolean expression this conditional branch relies on to
        /// to select a basic block.
        /// </summary>
        public IExpression Condition { const get; private set; }

        /// <summary>
        /// Gets the basic block branch that will be executed if the condition
        /// local evaluates to true.
        /// </summary>
        public BlockBranch ThenBranch { const get; private set; }

        /// <summary>
        /// Gets the basic block branch that will be executed if the condition
        /// local evaluates to false.
        /// </summary>
        public BlockBranch ElseBranch { const get; private set; }

        public override [BlockBranch] Branches
        {
            get
            {
                return new BlockBranch[] { ThenBranch, ElseBranch };
            }
        }

        /// <summary>
        /// Checks if this control flow node has no side-effects.
        /// </summary>
        public override bool IsConstant
        {
            get
            {
                return Condition.IsConstant;
            }
        }

        /// <summary>
        /// Accepts the given basic block visitor.
        /// </summary>
        public override BlockFlow Accept(IBasicBlockVisitor Visitor)
        {
            return new SelectFlow(
                Visitor.Visit(Condition),
                Visitor.Visit(ThenBranch), Visitor.Visit(ElseBranch));
        }
    }
}
