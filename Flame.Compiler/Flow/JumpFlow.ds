using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Flow
{
    /// <summary>
    /// A base class for basic block control flow nodes that unconditionally
    /// transfers control to another block.
    /// </summary>
    public abstract class JumpFlowBase : BlockFlow
    {
        /// <summary>
        /// Creates a basic block flow statement that unconditionally
        /// performs the given branch.
        /// </summary>
        public const this(set BlockBranch Branch);

        /// <summary>
        /// Gets the block branch that describes this jump flow node's
        /// contents.
        /// </summary>
        public BlockBranch Branch { const get; private set; }

        /// <summary>
        /// Creates a new jump flow instruction of the current type from the
        /// given block branch.
        /// </summary>
        public abstract JumpFlowBase Create(BlockBranch Branch);

        public override [BlockBranch] Branches
        {
            get
            {
                return new BlockBranch[] { Branch };
            }
        }

        /// <summary>
        /// Accepts the given basic block visitor.
        /// </summary>
        public override BlockFlow Accept(IBasicBlockVisitor Visitor)
        {
            return Create(Visitor.Visit(Branch));
        }
    }

    /// <summary>
    /// A type of basic block control flow node that unconditionally
    /// transfers control to another block.
    /// </summary>
    public class JumpFlow : JumpFlowBase
    {
        /// <summary>
        /// Creates a basic block flow statement that unconditionally
        /// performs the given branch.
        /// </summary>
        public const this(BlockBranch Branch)
            : base(Branch);

        /// <summary>
        /// Creates a new jump flow instruction of the current type from the
        /// given block branch.
        /// </summary>
        public override JumpFlowBase Create(BlockBranch Branch)
        {
            return new JumpFlow(Branch);
        }
    }
}
