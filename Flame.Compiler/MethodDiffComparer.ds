using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Pixie;

namespace Flame.Compiler
{
    public virtual class MethodDiffComparer
    {
        public this(TypeDiffComparer Comparer)
        {
            this.Comparer = Comparer;
        }
        public this(TypeRenderer Renderer)
        {
            this.Comparer = new TypeDiffComparer(Renderer);
        }
        public this()
        {
            this.Comparer = new TypeDiffComparer();
        }

        /// <summary>
        /// Gets the type diff comparer that this method diff comparer uses
        /// to compare types.
        /// </summary>
        /// <returns>The type diff comparer.</returns>
        public TypeDiffComparer Comparer { get; private set; }

        /// <summary>
        /// Gets the type renderer that this method diff comparer uses
        /// to render types.
        /// </summary>
        /// <returns>The type renderer.</returns>
        public TypeRenderer Renderer { get { return Comparer.Renderer; } }

        public virtual MarkupNode CompareArguments([IType] ArgumentTypes, IMethod Method)
        {
            var argArray = Enumerable.ToArray<IType>(ArgumentTypes);
            var paramArray = Method.GetParameters();
            var nodes = new List<MarkupNode>();
            nodes.Add(Renderer.CreateTextNode("("));
            for (int i = 0; i < paramArray.Length; i++)
            {
                if (i > 0)
                {
                    nodes.Add(Renderer.CreateTextNode(", "));
                }
                if (i < argArray.Length)
                {
                    if (argArray[i] == null)
                    {
                        nodes.Add(Renderer.Convert(paramArray[i].ParameterType, Comparer.DifferentElementStyle));
                    }
                    else
                    {
                        nodes.Add(Comparer.Compare(argArray[i], paramArray[i].ParameterType));
                    }
                }
                else
                {
                    nodes.Add(Renderer.Convert(paramArray[i].ParameterType, Comparer.MissingElementStyle));
                }
            }

            if (paramArray.Length < argArray.Length)
                nodes.Add(Renderer.CreateTextNode(")", Comparer.ExtraElementStyle));
            else
                nodes.Add(Renderer.CreateTextNode(")"));

            return new MarkupNode("node", nodes);
        }
    }
}
