using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    public class MultiplyExpression : BinaryOperatorExpression
    {
        public const this(set IExpression LeftOperand, set IExpression RightOperand);
        
        protected override Operator GetOperator() { return Operator.Multiply; }

        public override IBoundObject Evaluate()
        {
            var lObj = LeftOperand.Evaluate();
        	var rObj = RightOperand.Evaluate();
        	var resultType = Type;
        	if (resultType.Equals(PrimitiveTypes.Int8))
        	{
        		return new Int8Expression(lObj.GetValue<int8>() * rObj.GetValue<int8>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Int16))
        	{
        		return new Int16Expression(lObj.GetValue<int16>() * rObj.GetValue<int16>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Int32))
        	{
        		return new Int32Expression(lObj.GetValue<int32>() * rObj.GetValue<int32>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Int64))
        	{
        		return new Int64Expression(lObj.GetValue<int64>() * rObj.GetValue<int64>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt8))
        	{
        		return new UInt8Expression(lObj.GetValue<uint8>() * rObj.GetValue<uint8>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt16))
        	{
        		return new UInt16Expression(lObj.GetValue<uint16>() * rObj.GetValue<uint16>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt32))
        	{
        		return new UInt32Expression(lObj.GetValue<uint32>() * rObj.GetValue<uint32>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt64))
        	{
        		return new UInt64Expression(lObj.GetValue<uint64>() * rObj.GetValue<uint64>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Float32))
        	{
        		return new Float32Expression(lObj.GetValue<float32>() * rObj.GetValue<float32>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Float64))
        	{
        		return new Float64Expression(lObj.GetValue<float64>() * rObj.GetValue<float64>());
        	}
            return null;
        }

        public override const IExpression Optimize()
        {
            var optA = LeftOperand.Optimize();
            var optB = RightOperand.Optimize();
            var expr = new MultiplyExpression(optA, optB);
            if (expr.IsConstant && expr.Type.IsPrimitiveExpressionType())
            {
            	return expr.Evaluate().ToExpression();
            }
            else if (optA is MultiplyExpression && optB.IsConstant)
            {
            	var lmul = (MultiplyExpression)optA;
            	if (lmul.LeftOperand.IsConstant)
            	{
            		return new MultiplyExpression(new MultiplyExpression(lmul.LeftOperand, optB).Optimize(), lmul.RightOperand);
            	}
            	else if (lmul.RightOperand.IsConstant)
            	{
            		return new MultiplyExpression(lmul.LeftOperand, new MultiplyExpression(lmul.RightOperand, optB).Optimize());
            	}
            }
            else if (optB is MultiplyExpression && optA.IsConstant)
            {
            	var rmul = (MultiplyExpression)optB;
            	if (rmul.LeftOperand.IsConstant)
            	{
            		return new MultiplyExpression(new MultiplyExpression(rmul.LeftOperand, optA).Optimize(), rmul.RightOperand);
            	}
            	else if (rmul.RightOperand.IsConstant)
            	{
            		return new MultiplyExpression(rmul.LeftOperand, new MultiplyExpression(rmul.RightOperand, optA).Optimize());
            	}
            }
            return expr;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitMultiply(Left, Right);
        }
    }
}