using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type of expression that creates new object instances,
    /// based on a constructor and a sequence of arguments.
    /// </summary>
    public class NewObjectExpression : IExpression, IPredicateNode,
                                       IMemberNode, IFlowExpression
    {
        /// <summary>
        /// Creates an expression that produces an object instance,
        /// by allocating storage and initializing it with the given
        /// constructor, which is passed the given sequence of argument
        /// expression.
        /// </summary>
        public const this(set IMethod Constructor, set [IExpression] Arguments);

        /// <summary>
        /// Gets this new-object expression's constructor.
        /// </summary>
        public IMethod Constructor { const get; private set; }

        /// <summary>
        /// Gets this new-object expression's argument list.
        /// </summary>
        public [IExpression] Arguments { const get; private set; }

        /// <summary>
        /// Gets the type this new-object expression will create an instance
        /// of.
        /// </summary>
        public IType Type { const get { return Constructor.DeclaringType; } }

        public IExpression Accept(INodeVisitor Visitor)
        {
            var newArgs = new List<IExpression>();
            bool same = true;
            foreach (var arg in Arguments)
            {
                var visitedArg = Visitor.Visit(arg);
                newArgs.Add(visitedArg);
                if (visitedArg != arg)
                {
                    same = false;
                }
            }

            if (same)
                return this;
            else
                return new NewObjectExpression(Constructor, newArgs);
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            foreach (var arg in Arguments)
                Visitor.Visit(arg);
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            return new NewObjectExpression(
                Converter.Convert(Constructor), Arguments);
        }

        public bool IsConstantNode
        {
            const get
            {
                return Constructor.IsConstant;
            }
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return new NewObjectExpression(Constructor, Arguments.OptimizeAll());
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.EmitNewObject(Constructor, Arguments.EmitAll(Generator));
        }

        /// <summary>
		/// Accepts and interacts with a flow visitor.
		/// </summary>
		public IExpression AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
		{
			// HACK: Just lie to the visitor and pretend this is linear flow.
			//       This is evil, but the visitor would have assumed this
			//       to be the case anyway had we not implemented IFlowStatement.
			return Accept(Visitor);
		}

		/// <summary>
		/// Converts this invocation-expression to a series of blocks.
		/// </summary>
		public SSAVariable ToBlocks(BlockBuildingVisitor Visitor)
		{
			// Create an SSA local to hold the result.
			var resultVar = new SSAVariable("newobj_result", Type);
			var setStmt = resultVar.CreateSetStatement(this.Accept(Visitor));
			// Create the following blocks:
			//
			//     @enter:
			//         guarded: @guarded
			//         finally: @finally
			//         handlers:
			//             @catch_1
			//             ...
			//             @catch_n
			//
			//     @guarded:
			//         invocation_result = <newobj>;
			//         jump @next
			//
			Visitor.Builder.CreateCurrentBlock(
				EmptyStatement,
				Visitor.CreateGuardedFlow(Visitor.Builder.NextBlockTag));
			Visitor.Builder.Next();
			Visitor.Builder.CreateCurrentBlock(
				setStmt,
				new JumpFlow(new BlockBranch(Visitor.Builder.NextBlockTag)));
			return resultVar;
		}

        public override string ToString()
        {
            var result = new StringBuilder();
            result.Append("new(");
            result.Append(Constructor.ToString());
            foreach (var item in Arguments)
            {
                result.Append(", ");
                result.Append(item.ToString());
            }
            result.Append(")");
            return (string)result;
        }
    }
}
