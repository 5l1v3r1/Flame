using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// Defines a type of expression that shifts its left-hand operand to the
    /// left by the number of positions indicated by its right-hand operand.
    /// </summary>
    public class LeftShiftExpression : BinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.LeftShift; } }

        public override IBoundObject Evaluate()
        {
            return null;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitLeftShift(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new LeftShiftExpression(Left, Right);
        }
    }
}
