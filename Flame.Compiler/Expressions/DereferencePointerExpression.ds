using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A unary expression that dereferences a pointer expression.
    /// </summary>
    public class DereferencePointerExpression : IExpression, IVariableNode
    {
        /// <summary>
        /// Creates an expression that dereferences the pointer created by the
        /// given expression.
        /// </summary>
        public const this(set IExpression Expression);

        /// <summary>
        /// Gets this pointer-dereferencing expression's operand.
        /// </summary>
        public IExpression Expression { const get; private set; }

        public IExpression Accept(INodeVisitor Visitor)
        {
            var transPtr = Visitor.Visit(Expression);

            if (transPtr == Expression)
            {
                return this;
            }
            else
            {
                return new DereferencePointerExpression(transPtr);
            }
        }

        public IType Type
        {
            const get { return Expression.Type.AsContainerType().ElementType; }
        }

        public bool IsConstant
        {
            const get { return false; }
        }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new AtAddressVariable(Expression);
        }

        public VariableNodeAction Action
        {
            const get return VariableNodeAction.Get;
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return new DereferencePointerExpression(Expression.Optimize()).Simplify();
        }

        public IExpression Simplify()
        {
            var essentialExpr = Expression.GetEssentialExpression();
            if (essentialExpr is IVariableNode)
            {
                var varNode = (IVariableNode)essentialExpr;
                if (varNode.Action == VariableNodeAction.AddressOf)
                {
                    // `*(&a)` can safely be replaced by `a`
                    return varNode.GetVariable().CreateGetExpression();
                }
            }
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return ((IUnmanagedCodeGenerator)Generator).EmitDereferencePointer(Expression.Emit(Generator));
        }

        public override const string ToString()
        {
            return "*(" + Expression + ")";
        }
    }
}
