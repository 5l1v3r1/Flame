using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Expressions
{
	/// <summary>
	/// A base class for high-level expressions that lower themselves to
	/// lower-level expressions.
	/// </summary>
	public abstract class ComplexExpressionBase : IExpression
	{
		/// <summary>
		/// Initializes a complex expression.
		/// </summary>
		public const this()
		{
			this.lowered = new Lazy<IExpression>(this.Lower);
		}

		/// <summary>
		/// Lowers this expression to a semantically equivalent expression.
		/// </summary>
		protected abstract IExpression Lower();

		private Lazy<IExpression> lowered;

		/// <summary>
		/// Gets this expression's semantically equivalent lowered expression.
		/// </summary>
		public IExpression LoweredExpression
		{
			get
			{
				return lowered.Value;
			}
		}

		public virtual IType Type
		{
			virtual const get return LoweredExpression.Type;
		}

		public virtual IExpression Accept(INodeVisitor Visitor)
		{
			return Visitor.Visit(LoweredExpression);
		}

		public virtual const IExpression Optimize()
		{
			return LoweredExpression.Optimize();
		}

		public virtual const ICodeBlock Emit(ICodeGenerator CodeGenerator)
		{
			return LoweredExpression.Emit(CodeGenerator);
		}

		/// <summary>
        /// Gets a boolean value that indicates if the expression is a constant expression. A constant expression can be evaluated at compile-time.
        /// </summary>
        public virtual bool IsConstant { const get return LoweredExpression.IsConstant; }
        /// <summary>
        /// Performs a compile-time evaluation of the expression. If it cannot be evaluated, null is returned.
        /// </summary>
        /// <returns></returns>
        public virtual const IBoundObject Evaluate()
        {
        	return LoweredExpression.Evaluate();
        }
	}
}
