using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
    public class SingletonGetExpression : IExpression, IMemberNode
    {
    	private const this(set SingletonVariable Variable, set IExpression getExpr);
        public const this(set SingletonVariable Variable);

		public SingletonVariable Variable { const get; private set; }

        public IType Type { const get return Variable.Type; }

		private IExpression getExpr;
		private IExpression InstanceGetExpression
		{
			const get
			{
				if (getExpr == null)
				{
					getExpr = Variable.InstanceVariable.CreateGetExpression();
				}
				return getExpr;
			}
		}

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var convVar = Variable.ConvertType(Converter);
            if (object.ReferenceEquals(convVar, Variable))
            {
                return this;
            }
            else return new SingletonGetExpression(convVar);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public bool IsConstant
        {
            const get { return InstanceGetExpression.IsConstant; }
        }

        public const IBoundObject Evaluate()
        {
        	return InstanceGetExpression.Evaluate();
        }

        public const IExpression Optimize()
        {
            return new SingletonGetExpression(Variable, InstanceGetExpression.Optimize());
        }

        public const ICodeBlock Emit(ICodeGenerator Generator)
        {
        	if (Generator.Method.DeclaringType.Equals(Type))
        	{
        		return new ThisGetExpression(Type).Emit(Generator);
        	}
        	else
        	{
            	return InstanceGetExpression.Emit(Generator);
            }
        }
    }
}
