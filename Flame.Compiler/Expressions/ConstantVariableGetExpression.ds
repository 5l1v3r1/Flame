using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
    public class ConstantVariableGetExpression : VariableGetExpressionBase<ConstantVariable>
    {
		public const this(set ConstantVariable Variable);

        public override IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

		public override bool IsConstant
        {
            const get { return Variable.Value.IsConstant; }
        }

        public override const IBoundObject Evaluate()
        {
            return Variable.Value.Evaluate();
        }

        public override IExpression Optimize()
        {
        	if (IsConstant && Type.IsPrimitiveExpressionType())
        	{
        		return Evaluate().ToExpression();
        	}
            else
            {
            	/*var optVar = new ConstantVariable(new ExpressionVariable(Variable.Variable.CreateGetExpression().Optimize()), Variable.Value.Optimize());
            	return optVar.CreateGetExpression();*/
            	return Variable.Variable.CreateGetExpression().Optimize(); // This approach yields better results when combined with math optimizations, which perform type checks at runtime
            }
        }

        public override ICodeBlock Emit(ICodeGenerator Generator)
        {
        	return Variable.Variable.CreateGetExpression().Emit(Generator);
        }
    }
}
