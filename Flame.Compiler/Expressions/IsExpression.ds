using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    public class IsExpression : IExpression, IMemberNode, IPredicateNode
    {
        public const this(set IExpression Target, set IType TestType);

        public IExpression Target { const get; private set; }
        /// <summary>
        /// Gets the type to test against.
        /// </summary>
        public IType TestType { const get; private set; }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var convType = Converter.Convert(TestType);
            if (object.ReferenceEquals(convType, TestType))
            {
                return this;
            }
            else return new IsExpression(Target, convType);
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            Visitor.Visit(Target);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            var transVal = Visitor.Visit(Target);

            if (transVal == Target)
            {
                return this;
            }
            else
            {
                return new IsExpression(transVal, TestType);
            }
        }

        public IType Type
        {
            const get { return PrimitiveTypes.Boolean; }
        }

        public bool IsConstant
        {
            const get { return Target.IsConstant; }
        }

        public const IBoundObject Evaluate()
        {
            if (IsConstant)
            {
            	var eval = Target.Evaluate();
            	if (eval == null) return null;

            	var evalType = eval.Type;
            	if (evalType.Equals(PrimitiveTypes.Null)) return new BooleanExpression(TestType.Equals(PrimitiveTypes.Null));
                else return new BooleanExpression(evalType.Is(TestType));
            }
            else
            {
                return null;
            }
        }

        public const IExpression Optimize()
        {
            if (IsConstant)
            {
                return new BooleanExpression(Target.Evaluate().Type.Is(TestType));
            }
            else
            {
                return new IsExpression(Target.Optimize(), TestType);
            }
        }

        public const ICodeBlock Emit(ICodeGenerator Generator)
        {
            var targetBlock = Target.Emit(Generator);
            return Generator.EmitIsOfType(TestType, targetBlock);
        }
    }
}
