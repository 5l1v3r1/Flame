using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type of expression that computes the remainder of its operands.
    /// </summary>
    public class RemainderExpression : BinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.Remainder; } }

        public override IBoundObject Evaluate()
        {
            var lObj = LeftOperand.Evaluate();
            if (lObj == null)
                return null;
        	var rObj = RightOperand.Evaluate();
            if (rObj == null)
                return null;

        	var resultType = Type;
            if (resultType.IsInteger)
            {
                return new IntegerExpression(
                    lObj.GetValue<IntegerValue>().Remainder(
                        rObj.GetValue<IntegerValue>()));
            }
            else
            {
                return null;
            }
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitBinary(Left, Right, Op);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new RemainderExpression(Left, Right);
        }
    }
}
