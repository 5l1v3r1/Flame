using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type of expression that computes the remainder of its operands.
    /// </summary>
    public class RemainderExpression : BinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.Remainder; } }

        public override IBoundObject Evaluate()
        {
            var lObj = LeftOperand.Evaluate();
            if (lObj == null)
                return null;
        	var rObj = RightOperand.Evaluate();
            if (rObj == null)
                return null;

        	var resultType = Type;
        	if (resultType.Equals(PrimitiveTypes.Int8))
        	{
        		return new Int8Expression(lObj.GetValue<int8>() % rObj.GetValue<int8>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Int16))
        	{
        		return new Int16Expression(lObj.GetValue<int16>() % rObj.GetValue<int16>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Int32))
        	{
        		return new Int32Expression(lObj.GetValue<int32>() % rObj.GetValue<int32>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Int64))
        	{
        		return new Int64Expression(lObj.GetValue<int64>() % rObj.GetValue<int64>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt8))
        	{
        		return new UInt8Expression(lObj.GetValue<uint8>() % rObj.GetValue<uint8>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt16))
        	{
        		return new UInt16Expression(lObj.GetValue<uint16>() % rObj.GetValue<uint16>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt32))
        	{
        		return new UInt32Expression(lObj.GetValue<uint32>() % rObj.GetValue<uint32>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.UInt64))
        	{
        		return new UInt64Expression(lObj.GetValue<uint64>() % rObj.GetValue<uint64>());
        	}
            return null;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitBinary(Left, Right, Op);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new RemainderExpression(Left, Right);
        }
    }
}
