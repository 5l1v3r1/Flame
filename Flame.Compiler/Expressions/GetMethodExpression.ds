using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type of expression that creates a delegate that wraps a method and its
    /// calling expression.
    /// </summary>
    public class GetMethodExpression : IDelegateExpression, IMemberNode
    {
        /// <summary>
        /// Creates a get-method expression from the given method and calling expression.
        /// The resulting delegate is created by the given operator.
        /// </summary>
        public this(IMethod Target, IExpression Caller, Operator Op)
        {
            this.Target = Target;
            this.Caller = Caller;
            this.Op = Op;
        }

        /// <summary>
        /// Creates a get-method expression from the given method and calling
        /// expression.
        /// </summary>
        public this(IMethod Target, IExpression Caller)
        {
            this.Target = Target;
            this.Caller = Caller;

            if (!Target.IsConstructor && Target.IsVirtual)
            {
                Op = Operator.GetVirtualDelegate;
            }
            else
            {
                Op = Operator.GetDelegate;
            }
        }

        /// <summary>
        /// Gets the get-method expression's calling expression.
        /// </summary>
        public IExpression Caller { get; private set; }

        /// <summary>
        /// Gets the method that is wrapped in a delegate.
        /// </summary>
        public IMethod Target { get; private set; }

        /// <summary>
        /// Gets the operator that creates the resulting delegate.
        /// </summary>
        public Operator Op { get; private set; }

        /// <inheritdoc/>
        public IEnumerable<IType> ParameterTypes
        {
            get { return Target.Parameters.GetTypes(); }
        }

        /// <inheritdoc/>
        public IType ReturnType
        {
            get { return Target.ReturnType; }
        }

        public IExpression CreateInvocationExpression(IEnumerable<IExpression> Arguments)
        {
            return new InvocationExpression(this, Arguments);
        }

        public IDelegateExpression MakeGenericExpression(IEnumerable<IType> TypeArguments)
        {
            return new GetMethodExpression(Target.MakeGenericMethod(TypeArguments), Caller, Op);
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var convMethod = Converter.Convert(Target);
            if (object.ReferenceEquals(Target, convMethod))
            {
                return this;
            }
            else
            {
                return new GetMethodExpression(convMethod, Caller, Op);
            }
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            if (Caller == null) return this;

            var transCaller = Visitor.Visit(Caller);

            if (transCaller == Caller)
            {
                return this;
            }
            else
            {
                return new GetMethodExpression(Target, transCaller, Op);
            }
        }

        public IType Type
        {
            get
            {
                return MethodType.Create(Target);
            }
        }

        public bool IsConstantNode
        {
            get { return true; }
        }

        public IBoundObject Evaluate()
        {
            var callerObj = Caller.EvaluateOrNull();
            if (callerObj != null)
                return new BoundMethod(Target, callerObj);
            else
                return null;
        }

        public IExpression Optimize()
        {
            var callerExpr = Caller.OptimizeOrNull();
            return new GetMethodExpression(Target, callerExpr, Op);
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.EmitMethod(Target, Caller.EmitOrNull(Generator), Op);
        }

        public override string ToString()
        {
            var result = new StringBuilder();
            result.Append("get-method(");
            result.Append(Op.ToString());
            result.Append(", ");
            result.Append(Target.FullName.ToString());
            if (Caller != null)
            {
                result.Append(", ");
                result.Append(Caller.ToString());
            }
            result.Append(")");
            return result.ToString();
        }
    }
}
