using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// Defines a base class for expressions that take a single operand.
    /// </summary>
    /// <remarks>
    /// Not all unary expressions are associated with a specific unary operator.
    /// </remarks>
    public abstract class UnaryExpression : IExpression, IPredicateNode
    {
        /// <summary>
        /// Initializes this unary expression with the given operand.
        /// </summary>
        public const this(set IExpression Value);

        /// <summary>
        /// The value the unary expression will be performed on.
        /// </summary>
        public IExpression Value { const get; private set; }

        public virtual IType Type
        {
            virtual get { return Value.Type; }
        }

        public virtual bool IsConstantNode
        {
            get { return true; }
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            Visitor.Visit(Value);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            var operand = Visitor.Visit(Value);
            if (Value == operand)
            {
                return this;
            }
            else
            {
                return Create(operand);
            }
        }

        public virtual IExpression Optimize()
        {
            var optVal = Value.Optimize();
            var expr = Create(optVal);
            if (expr.IsConstant &&
                expr.Type.IsPrimitiveExpressionType())
            {
                var evalExpr = expr.Evaluate();
                if (evalExpr != null)
                   return evalExpr.ToExpression();
            }
            return expr;
        }

        protected abstract IExpression Create(IExpression Operand);

        public abstract IBoundObject Evaluate();
        public abstract ICodeBlock Emit(ICodeGenerator Generator);
    }

    /// <summary>
    /// Defines a base class for expressions that apply an operator to a single
    /// operand.
    /// </summary>
    public abstract class UnaryOperatorExpression : UnaryExpression
    {
        /// <summary>
        /// Initializes this unary operator expression with the given expression.
        /// </summary>
        public const this(IExpression Value)
            : base(Value);

        /// <summary>
        /// Gets the unary operator that this expression applies to its operand.
        /// </summary>
        public abstract Operator Op { get; }

        protected virtual ICodeBlock EmitPrimitive(ICodeBlock Block, ICodeGenerator Generator)
        {
            return Generator.EmitUnary(Block, Op);
        }

        public virtual override ICodeBlock Emit(ICodeGenerator Generator)
        {
            var innerBlock = Value.Emit(Generator);
            return EmitPrimitive(innerBlock, Generator);
        }

        public override const string ToString()
        {
            return "unary(\"" + Op + "\", " + Value + ")";
        }
    }

    /// <summary>
	/// Defines a unary expression that does not know how to evaluate itself,
	/// and simply instructs the code generator to create a unary operator block.
	/// </summary>
    public class PrimitiveUnaryExpression : UnaryOperatorExpression
    {
        /// <summary>
        /// Initializes this unary operator expression with the given expression
        /// and operator.
        /// </summary>
        public const this(Operator Op, IExpression Value)
            : base(Value)
        {
            this.unaryOp = Op;
        }

        private Operator unaryOp;
        /// <summary>
        /// Gets the unary operator that this expression applies to its operand.
        /// </summary>
        public override Operator Op { const get { return unaryOp; } }

        public override IBoundObject Evaluate()
        {
            return null;
        }

        protected override IExpression Create(IExpression Operand)
        {
            return new PrimitiveUnaryExpression(unaryOp, Operand);
        }
    }

    /// <summary>
	/// A helper class that can be used to create optimal built-in
	/// unary expressions.
	/// </summary>
    public static class DirectUnaryExpression
    {
        /// <summary>
        /// Creates a unary expression from the given operation and operand.
        /// </summary>
        public const IExpression Create(Operator UnaryOp, IExpression Operand)
        {
            if (UnaryOp == Operator.Not)
                return new NotExpression(Operand);
            else if (UnaryOp == Operator.Subtract)
                return new NegateExpression(Operand);
            else if (UnaryOp == Operator.Hash)
                return new HashExpression(Operand);
            else
                return new PrimitiveUnaryExpression(UnaryOp, Operand);
        }
    }
}
