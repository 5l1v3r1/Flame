using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// Defines a base class for expressions that take a single operand.
    /// </summary>
    /// <remarks>
    /// Not all unary expressions are associated with a specific unary operator.
    /// </remarks>
    public abstract class UnaryExpression : IExpression, IPredicateNode
    {
        /// <summary>
        /// Initializes this unary expression with the given operand.
        /// </summary>
        public const this(set IExpression Value);

        /// <summary>
        /// The value the unary expression will be performed on.
        /// </summary>
        public IExpression Value { const get; private set; }

        public virtual IType Type
        {
            virtual const get { return Value.Type; }
        }

        public virtual bool IsConstant
        {
            const get { return Value.IsConstant; }
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            Visitor.Visit(Value);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            var operand = Visitor.Visit(Value);
            if (Value == operand)
            {
                return this;
            }
            else
            {
                return Create(operand);
            }
        }

        protected const abstract IExpression Create(IExpression Operand);

        public const abstract IBoundObject Evaluate();
        public const abstract IExpression Optimize();
        public abstract ICodeBlock Emit(ICodeGenerator Generator);
    }

    /// <summary>
    /// Defines a base class for expressions that apply an operator to a single
    /// operand.
    /// </summary>
    public abstract class UnaryOperatorExpression : UnaryExpression
    {
        /// <summary>
        /// Initializes this unary operator expression with the given expression.
        /// </summary>
        public const this(IExpression Value)
            : base(Value);

        /// <summary>
        /// Gets the unary operator that this expression applies to its operand.
        /// </summary>
        public abstract Operator Op { const get; }

        private IType cachedType;
        public virtual override IType Type
        {
            virtual override const get
            {
                if (cachedType == null)
                {
                    cachedType = GetExpressionType();
                }
                return cachedType;
            }
        }

        public virtual override bool IsConstant
        {
            const get
            {
                return Value.IsConstant &&
                       (OperatorOverload == null || OperatorOverload.IsConstant);
            }
        }

        /// <summary>
        /// Gets the operator overload for this unary expression if an overload exists. Otherwise, null.
        /// </summary>
        protected virtual IMethod GetOpOverload()
        {
            return Op.GetOperatorOverload(new IExpression[] { Value });
        }

        private IMethod opOverload;
        /// <summary>
        /// Gets the operator overload for this unary expression if an overload exists. Otherwise, null.
        /// </summary>
        public IMethod OperatorOverload
        {
            const get
            {
                if (opOverload == null)
                {
                    opOverload = GetOpOverload();
                }
                return opOverload;
            }
        }

        protected IExpression OverloadInvocation
        {
            const get
            {
                if (OperatorOverload == null) return null;
                else return new RelaxedInvocation(OperatorOverload, new IExpression[] { Value });
            }
        }

        protected virtual IType GetExpressionType()
        {
            if (OperatorOverload != null) return OperatorOverload.ReturnType;
            else return Value.Type;
        }

        protected virtual const ICodeBlock EmitPrimitive(ICodeBlock Block, ICodeGenerator Generator)
        {
            return Generator.EmitUnary(Block, Op);
        }

        public virtual override ICodeBlock Emit(ICodeGenerator Generator)
        {
            var innerBlock = Value.Emit(Generator);
            var primBlock = EmitPrimitive(innerBlock, Generator);
            if (primBlock != null)
            {
                return primBlock;
            }
            else if (OperatorOverload != null)
            {
                return OverloadInvocation.Emit(Generator);
            }
            else
            {
                return null;
            }
        }

        public override const string ToString()
        {
            return "unary(\"" + Op + "\", " + Value + ")";
        }
    }

    /// <summary>
    /// A type of unary expressions whose default behavior is to reduce themselves
    /// to specialized implementations if at all possible. Otherwise,
    /// a default unary operator code sequence is generated.
    /// </summary>
    public class DirectUnaryExpression : UnaryOperatorExpression
    {
        /// <summary>
        /// Creates a unary expression that applies the given
        /// unary operator to the given operand.
        /// </summary>
        public const this(Operator UnaryOp, IExpression Operand)
            : base(Operand)
        {
            this.oper = UnaryOp;
            this.loweredExpr = new Lazy<IExpression>(lowerThisExpr);
        }

        private Operator oper;
        /// <summary>
        /// Gets the unary operator that this expression applies to its operand.
        /// </summary>
        public override Operator Op { const get { return oper; } }

        private Lazy<IExpression> loweredExpr;
        private IExpression lowerThisExpr()
        {
            return CreateUnaryExpression(Op, Value);
        }

        /// <summary>
        /// Gets the potentially more specialized expression this unary
        /// expression is "lowered" to.
        /// </summary>
        public IExpression LoweredExpression
        {
            const get { return loweredExpr.Value; }
        }

        /// <summary>
        /// Gets a boolean value that indicates whether this unary expression
        /// can be lowered to a specialized unary expression.
        /// </summary>
        public bool CanLower
        {
            const get { return !(LoweredExpression is DirectUnaryExpression); }
        }

        protected const override IExpression Create(IExpression Operand)
        {
            return CreateUnaryExpression(Op, Operand);
        }

        /// <summary>
        /// Creates a unary expression from the given operation and operand.
        /// </summary>
        public static const IExpression CreateUnaryExpression(Operator UnaryOp, IExpression Operand)
        {
            if (UnaryOp == Operator.Not)
                return new NotExpression(Operand);
            else if (UnaryOp == Operator.Subtract)
                return new NegateExpression(Operand);
            else if (UnaryOp == Operator.Hash)
                return new HashExpression(Operand);
            else
                return new DirectUnaryExpression(UnaryOp, Operand);
        }

        public override IBoundObject Evaluate()
        {
            if (CanLower)
                return LoweredExpression.Evaluate();
            else
                return null;
        }

        protected override IType GetExpressionType()
        {
            if (CanLower)
                return LoweredExpression.Type;
            else if (OperatorOverload != null)
                return OperatorOverload.ReturnType;
            else
                return Value.Type;
        }

        public override bool IsConstant
        {
            const get
            {
                if (CanLower)
                    return LoweredExpression.IsConstant;
                else
                    return Value.IsConstant &&
                           (OperatorOverload == null || OperatorOverload.IsConstant);
            }
        }

        public const override IExpression Optimize()
        {
            if (CanLower)
                return LoweredExpression.Optimize();
            else
                return new DirectUnaryExpression(Op, Value.Optimize());
        }

        public override ICodeBlock Emit(ICodeGenerator Generator)
        {
            if (CanLower)
            {
                return LoweredExpression.Emit(Generator);
            }

            var innerBlock = Value.Emit(Generator);
            var primBlock = EmitPrimitive(innerBlock, Generator);
            if (primBlock != null)
            {
                return primBlock;
            }
            else if (OperatorOverload != null)
            {
                return OverloadInvocation.Emit(Generator);
            }
            else
            {
                return null;
            }
        }
    }
}
