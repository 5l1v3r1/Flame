using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    public class HashExpression : UnaryOperatorExpression
    {
        public const this(IExpression Value)
            : base(Value);

        protected override const IExpression Create(IExpression Operand)
        {
            return new HashExpression(Operand);
        }

        public const IBoundObject Evaluate()
        {
        	return null;
        }

        public const IExpression Optimize()
        {
        	return new HashExpression(Value.Optimize());
        }

        public override Operator Op { const get return Operator.Hash; }

        /// <summary>
        /// Gets the operator overload for this unary expression if an overload exists. Otherwise, null.
        /// </summary>
        protected override IMethod GetOpOverload()
        {
            var overrideOverload = PrimitiveMethods.GetHashCode.GetImplementation(Value.Type);
            if (overrideOverload != null)
                return overrideOverload;
            return Op.GetOperatorOverload(new IExpression[] { Value });
        }
    }
}
