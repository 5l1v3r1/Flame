using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type of expression that ascertains the size of a type.
    /// </summary>
    public class SizeOfExpression : IExpression, IMemberNode
    {
        /// <summary>
        /// Creates an expression that computes the given type's size.
        /// </summary>
        public this(IType Target)
        {
            this.Target = Target;
        }

        /// <summary>
        /// Gets the type whose size is to be computed.
        /// </summary>
        public IType Target { get; private set; }

        /// <summary>
        /// Gets the type of value returned by this size-of expression.
        /// </summary>
        public IType Type
        {
            get { return PrimitiveTypes.Int32; }
        }

        public bool IsConstantNode
        {
            get { return true; }
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var elemType = Converter.Convert(Target);
            if (object.ReferenceEquals(elemType, Target))
            {
                return this;
            }
            else
            {
                return new SizeOfExpression(elemType);
            }
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return ((IUnmanagedCodeGenerator)Generator).EmitSizeOf(Target);
        }

        public override string ToString()
        {
            return "sizeof(" + Target.FullName + ")";
        }
    }
}
