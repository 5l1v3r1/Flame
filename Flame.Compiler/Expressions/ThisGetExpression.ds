using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
    public class ThisGetExpression : IExpression, IVariableNode, IMemberNode
    {
        public const this(set IType Type);

        public IType Type { const get; private set; }

        public bool IsConstantNode
        {
            const get { return true; }
        }

        public const IVariable GetVariable()
        {
            return new ThisVariable(Type);
        }

        public VariableNodeAction Action
        {
            const get return VariableNodeAction.Get;
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var convType = Converter.Convert(Type);
            if (object.ReferenceEquals(convType, Type))
                return this;
            else
                return new ThisGetExpression(convType);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.GetThis().EmitGet();
        }

        public override const string ToString()
        {
            return "this(" + Type.FullName + ")";
        }
    }
}
