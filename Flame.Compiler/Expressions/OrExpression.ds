using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// Defines a type of expression that computes the bitwise 'or' of its
    /// operands.
    /// </summary>
    public class OrExpression : BinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.Or; } }

        public override IBoundObject Evaluate()
        {
            var lObj = LeftOperand.Evaluate();
            if (lObj == null)
                return null;
        	var rObj = RightOperand.Evaluate();
            if (rObj == null)
                return null;

        	var resultType = Type;
        	if (resultType.Equals(PrimitiveTypes.Boolean))
        	{
        		return new BooleanExpression(
                    lObj.GetValue<bool>() || rObj.GetValue<bool>());
        	}
            else if (resultType.IsInteger)
            {
                return new IntegerExpression(
                    lObj.GetValue<IntegerValue>().BitwiseOr(
                        rObj.GetValue<IntegerValue>()));
            }
            else if (resultType.IsBit)
            {
                return new BitExpression(
                    lObj.GetValue<BitValue>().BitwiseOr(
                        rObj.GetValue<BitValue>()));
            }
            else
            {
                return null;
            }
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitOr(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new OrExpression(Left, Right);
        }
    }
}
