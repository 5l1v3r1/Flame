using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Expressions
{
    public abstract class VariableGetExpressionBase<T> : IExpression,
        IVariableNode, IEquatable<VariableGetExpressionBase<T>>
        where T : object, IVariable
    {
    	public const this();
    	public const this(set T Variable);

        public T Variable { const get; protected set; }

        public virtual VariableNodeAction Action { virtual const get return VariableNodeAction.Get; }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return Variable;
        }

        public virtual IType Type
        {
            virtual const get { return Variable.Type; }
        }

        public virtual bool IsConstantNode
        {
            const get { return true; }
        }

        public virtual const IBoundObject Evaluate()
        {
            return null;
        }

        public virtual IExpression Optimize()
        {
            return this;
        }

        public abstract IExpression Accept(INodeVisitor Visitor);
        public abstract const ICodeBlock Emit(ICodeGenerator CodeGenerator);

        public override const int GetHashCode()
        {
            return Variable.GetHashCode();
        }
        public virtual bool Equals(VariableGetExpressionBase<T> Other)
        {
            return Variable.Equals(Other.Variable);
        }
        public virtual override bool Equals(object Other)
        {
            return Other is VariableGetExpressionBase<T>
                && Equals((VariableGetExpressionBase<T>)Other);
        }
    }
}
