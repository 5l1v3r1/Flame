using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type of expression that tests if its left-hand operand is greater
    /// than its right operand.
    /// </summary>
    public class GreaterThanExpression : ConditionalExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.CheckGreaterThan; } }

        public override const IBoundObject Evaluate()
        {
            var first = LeftOperand.Evaluate();
            var second = RightOperand.Evaluate();
            var cmp = LessThanExpression.Compare(first, second);
            if (cmp.HasValue)
                return new BooleanExpression(cmp.Value > 0);
            else
                return null;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitGreaterThan(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new GreaterThanExpression(Left, Right);
        }
    }

    /// <summary>
    /// A type of expression that tests if its left-hand operand is greater
    /// than or equal to its right operand.
    /// </summary>
    public class GreaterThanOrEqualsExpression : ConditionalExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.CheckGreaterThanOrEqual; } }

        public override const IBoundObject Evaluate()
        {
            var first = LeftOperand.Evaluate();
            var second = RightOperand.Evaluate();
            var cmp = LessThanExpression.Compare(first, second);
            if (cmp.HasValue)
                return new BooleanExpression(cmp.Value >= 0);
            else
                return null;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
        	return Generator.EmitGreaterThanOrEquals(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new GreaterThanOrEqualsExpression(Left, Right);
        }
    }
}
