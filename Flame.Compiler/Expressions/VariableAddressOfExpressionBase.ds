using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Expressions
{
    public abstract class VariableAddressOfExpressionBase<T> : IExpression,
        IVariableNode, IEquatable<VariableAddressOfExpressionBase<T>>
        where T : object, IVariable
    {
    	public this();
    	public this(set T Variable);

        public T Variable { get; protected set; }

        public virtual VariableNodeAction Action
        {
            virtual get { return VariableNodeAction.AddressOf; }
        }

        public IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return Variable;
        }

        public virtual IType Type
        {
            virtual get
            {
                return Variable.Type.MakePointerType(PointerKind.ReferencePointer);
            }
        }

        public virtual bool IsConstantNode
        {
            get { return true; }
        }

        public virtual const IBoundObject Evaluate()
        {
            return null;
        }

        public virtual IExpression Optimize()
        {
            return this;
        }

        public abstract IExpression Accept(INodeVisitor Visitor);
        public abstract ICodeBlock Emit(ICodeGenerator CodeGenerator);

        public override int GetHashCode()
        {
            return Variable.GetHashCode();
        }
        public virtual bool Equals(VariableAddressOfExpressionBase<T> Other)
        {
            return Variable.Equals(Other.Variable);
        }
        public virtual override bool Equals(object Other)
        {
            return Other is VariableAddressOfExpressionBase<T>
                && Equals((VariableAddressOfExpressionBase<T>)Other);
        }
    }
}
