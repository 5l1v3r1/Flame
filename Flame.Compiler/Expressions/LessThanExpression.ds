using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type of expression that tests if its left-hand operand is less
    /// than its right operand.
    /// </summary>
    public class LessThanExpression : ConditionalExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.CheckLessThan; } }

        public static const Nullable<int> Compare(IBoundObject First, IBoundObject Second)
        {
            if (First == null || Second == null)
                return default(Nullable<int>);

            object firstObj = First.GetObjectValue();
            object secondObj = Second.GetObjectValue();

            if (object.ReferenceEquals(firstObj, secondObj))
            {
                return new Nullable<int>(0);
            }
            else if (firstObj is IComparable)
            {
                return new Nullable<int>(((IComparable)firstObj).CompareTo(secondObj));
            }
            else if (secondObj is IComparable)
            {
                return new Nullable<int>(-((IComparable)secondObj).CompareTo(firstObj));
            }
            else
            {
                return default(Nullable<int>);
            }
        }

        public override const IBoundObject Evaluate()
        {
            var first = LeftOperand.Evaluate();
            var second = RightOperand.Evaluate();
            var cmp = Compare(first, second);
            if (cmp.HasValue)
                return new BooleanExpression(cmp.Value < 0);
            else
                return null;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitLessThan(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new LessThanExpression(Left, Right);
        }
    }

    /// <summary>
    /// A type of expression that tests if its left-hand operand is less
    /// than or equal to its right operand.
    /// </summary>
    public class LessThanOrEqualsExpression : ConditionalExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.CheckLessThanOrEqual; } }

        public override const IBoundObject Evaluate()
        {
            var first = LeftOperand.Evaluate();
            var second = RightOperand.Evaluate();
            var cmp = LessThanExpression.Compare(first, second);
            if (cmp.HasValue)
                return new BooleanExpression(cmp.Value <= 0);
            else
                return null;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitLessThanOrEquals(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new LessThanOrEqualsExpression(Left, Right);
        }
    }
}
