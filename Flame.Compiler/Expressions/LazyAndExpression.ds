using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A base class for short-circuiting binary expressions.
    /// </summary>
    public abstract class ShortCircuitBinaryExpression : BinaryOperatorExpression, IFlowExpression
    {
        public const this(set IExpression LeftOperand, set IExpression RightOperand);

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        public IExpression AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
        {
            // Represents the following flow:
            //
            //             lhs
            //           /     \
            //          /       \
            //        rhs      empty
            //          \       /
            //           \     /

            var transLhs = Visitor.Visit(LeftOperand);

            var startState = Visitor.CurrentFlow;
            var transRhs = Visitor.Visit(RightOperand);
            var nonEmptyFlow = Visitor.CreateDeltaFlow(startState, Visitor.CurrentFlow);

            Visitor.CurrentFlow = startState; // Reset flow to create empty flow flow
            var emptyFlow = Visitor.CreateDeltaFlow(Visitor.CurrentFlow, Visitor.CurrentFlow);

            Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startState, Visitor.CreateSelectFlow(nonEmptyFlow, emptyFlow));

            if (transLhs == LeftOperand && transRhs == RightOperand)
                return this;
            else
                return new LazyAndExpression(transLhs, transRhs);
        }
    }

    /// <summary>
    /// Defines a short-circuiting boolean 'and' operator.
    /// </summary>
    public class LazyAndExpression : ShortCircuitBinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        protected override Operator GetOperator() { return Operator.LogicalAnd; }

        public override bool IsConstant
        {
            override const get
            {
                return LeftOperand.IsConstant && RightOperand.IsConstant &&
                    LeftOperand.Type.Equals(PrimitiveTypes.Boolean) &&
                    RightOperand.Type.Equals(PrimitiveTypes.Boolean);
            }
        }

        public override const IBoundObject Evaluate()
        {
            return new BooleanExpression(LeftOperand.Evaluate().GetValue<bool>() && RightOperand.Evaluate().GetValue<bool>());
        }

        public override const IExpression Optimize()
        {
            var optA = LeftOperand.Optimize();
            var optB = RightOperand.Optimize();
            var expr = new LazyAndExpression(optA, optB);
            if (expr.IsConstant && expr.Type.IsPrimitiveExpressionType())
            {
                var evalExpr = expr.Evaluate();
                if (evalExpr != null)
                   return evalExpr.ToExpression();
            }
            return expr;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
        	return Generator.EmitLogicalAnd(Left, Right);
        }
    }
}
