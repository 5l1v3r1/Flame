using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A base class for short-circuiting binary expressions.
    /// </summary>
    public abstract class ShortCircuitBinaryExpression : BinaryExpression, IFlowExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public abstract override SSAVariable ToBlocks(BlockBuildingVisitor Visitor);

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        public IExpression AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor)
            : IFlowExpression.AcceptFlow<TState, TFlow>
        {
            // Represents the following flow:
            //
            //             lhs
            //           /     \
            //          /       \
            //        rhs      empty
            //          \       /
            //           \     /

            var transLhs = Visitor.Visit(LeftOperand);

            var startState = Visitor.CurrentFlow;
            var transRhs = Visitor.Visit(RightOperand);
            var nonEmptyFlow = Visitor.CreateDeltaFlow(startState, Visitor.CurrentFlow);

            Visitor.CurrentFlow = startState; // Reset flow to create empty flow flow
            var emptyFlow = Visitor.CreateDeltaFlow(Visitor.CurrentFlow, Visitor.CurrentFlow);

            Visitor.CurrentFlow = Visitor.CreateCollapsedFlow(startState, Visitor.CreateSelectFlow(nonEmptyFlow, emptyFlow));

            if (transLhs == LeftOperand && transRhs == RightOperand)
                return this;
            else
                return Create(transLhs, transRhs);
        }
    }

    /// <summary>
    /// Defines a short-circuiting boolean 'and' operator.
    /// </summary>
    public class LazyAndExpression : ShortCircuitBinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.LogicalAnd; } }

        public override bool IsConstantNode
        {
            override get { return true; }
        }

        public override IBoundObject Evaluate()
        {
            var lValue = LeftOperand.Evaluate();

            if (lValue == null)
                return null;
            else if (lValue.GetValue<bool>())
                return RightOperand.Evaluate();
            else
                return new BooleanExpression(false);
        }

        /// <summary>
        /// Lowers this logical 'and' expression by creating an equivalent
        /// selection expression.
        /// </summary>
        public const SelectExpression Lower()
        {
            // Left ? Right : false
            return new SelectExpression(
                LeftOperand, RightOperand, new BooleanExpression(false));
        }

        /// <summary>
        /// Reduces this logical 'and' expression to a sequence of basic blocks.
        /// </summary>
        public override SSAVariable ToBlocks(BlockBuildingVisitor Visitor)
        {
            return Lower().ToBlocks(Visitor);
        }

        /// <summary>
        /// Gets a "flattened" sequence of operands of this logical and expression and
        /// its children, if any.
        /// For example, `a &amp;&amp; b &amp;&amp; c` would return the following
        /// sequence of operands: [a, b, c].
        /// </summary>
        public IReadOnlyList<IExpression> GetFlattenedOperands()
        {
            var results = new List<IExpression>();
            if (LeftOperand is LazyAndExpression)
            {
                results.AddRange(((LazyAndExpression)LeftOperand).GetFlattenedOperands());
            }
            else
            {
                results.Add(LeftOperand);
            }
            if (RightOperand is LazyAndExpression)
            {
                results.AddRange(((LazyAndExpression)RightOperand).GetFlattenedOperands());
            }
            else
            {
                results.Add(RightOperand);
            }
            return results;
        }

        /// <summary>
        /// "Simplifies" this lazy-and expression by applying
        /// a number of simplification rules. Child nodes are not simplified.
        /// This is a lot like a non-recursive version of Optimize.
        /// </summary>
        public IExpression Simplify()
        {
            if (LeftOperand.Type.Equals(PrimitiveTypes.Boolean))
            {
                // true && x == x
                // false && x == false

                var lValue = LeftOperand.EvaluateConstant();
                if (lValue != null)
                {
                    if (lValue.GetValue<bool>())
                        return RightOperand;
                    else
                        return new BooleanExpression(false);
                }
            }
            if (RightOperand.Type.Equals(PrimitiveTypes.Boolean))
            {
                // x && true == x
                // x && false != false // if lhs has side-effects
                // x && false == (x, false) // always works

                var rValue = LeftOperand.EvaluateConstant();
                if (rValue != null)
                {
                    if (rValue.GetValue<bool>())
                        return LeftOperand;
                    else if (LeftOperand.IsConstant)
                        return new BooleanExpression(false);
                    else
                        return new InitializedExpression(
                            new ExpressionStatement(LeftOperand),
                            new BooleanExpression(false));
                }
            }
            if (LeftOperand is LazyAndExpression || RightOperand is LazyAndExpression)
            {
                // Rewrite `(a && b) && c` as `a && (b && c)` to exploit short-circuiting
                // behavior: if 'a' happens to be false in either expression,
                // the entire expression will evaluate to false. However, due to
                // the way these expression trees are constructed, the former
                // will have the false value "bubble up" to the top-level node.
                // The latter will not: it will immediately report a value of false.
                //
                // A logical-and tree like this:
                //
                //      *
                //    /   \
                //   /     \
                //  *       *
                //        /   \
                //       /     \
                //         ...
                //
                // seems to make more sense than:
                //
                //           *
                //         /   \
                //        /     \
                //       *       *
                //     /   \
                //    /     \
                //      ...

                var flOps = GetFlattenedOperands();

                var result = flOps[flOps.Count - 1];
                for (int i = flOps.Count - 2; i >= 0; i--)
                {
                    result = new LazyAndExpression(flOps[i], result);
                }

                return result;
            }
            return this;
        }

        public override const IExpression Optimize()
        {
            var optA = LeftOperand.Optimize();
            var optB = RightOperand.Optimize();
            var expr = new LazyAndExpression(optA, optB).Simplify();
            if (expr.IsConstant)
            {
                var evalExpr = expr.Evaluate();
                if (evalExpr != null)
                   return evalExpr.ToExpression();
            }
            return expr;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
        	return Generator.EmitLogicalAnd(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new LazyAndExpression(Left, Right);
        }
    }
}
