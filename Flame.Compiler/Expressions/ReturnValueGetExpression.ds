using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
	public class ReturnValueGetExpression : IExpression, IMemberNode
    {
        public const this(set IType Type);

        public IType Type { const get; private set; }

		public IMemberNode ConvertMembers(MemberConverter Converter)
		{
			var convType = Converter.Convert(Type);
			if (object.ReferenceEquals(Type, convType))
			{
				return this;
			}
			else return new ReturnValueGetExpression(convType);
		}

		public IExpression Accept(INodeVisitor Visitor)
		{
			return this;
		}

        public bool IsConstantNode
        {
            const get { return true; }
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return ((IContractCodeGenerator)Generator).ReturnVariable.EmitGet();
        }
    }
}
