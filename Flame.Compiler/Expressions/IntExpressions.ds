using System;
using System.Collections.Generic;

namespace Flame.Compiler.Expressions
{
	/// <summary>
    /// An expression that contains a constant integer value.
    /// </summary>
    public class IntegerExpression : ConstantExpression<IntegerValue>
    {
        public this(IntegerValue Value)
			: base(Value)
        { }

        public this(byte Value)
            : base(new IntegerValue(Value))
        { }

        public this(ushort Value)
            : base(new IntegerValue(Value))
        { }

        public this(uint Value)
            : base(new IntegerValue(Value))
        { }

        public this(ulong Value)
            : base(new IntegerValue(Value))
        { }

		public this(sbyte Value)
			: base(new IntegerValue(Value))
		{ }

		public this(short Value)
			: base(new IntegerValue(Value))
		{ }

		public this(int Value)
			: base(new IntegerValue(Value))
		{ }

		public this(long Value)
			: base(new IntegerValue(Value))
		{ }

        public IType Type
        {
            get
			{
				return PrimitiveTypes.GetIntegerType(
					Value.Spec.Size, Value.Spec.IsSigned);
			}
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.EmitInteger(Value.Normalized);
        }
    }
}
