using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Emit;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// Represents a lambda's "header": its signature and capture list.
    /// </summary>
    public class LambdaHeader
    {
        public const this(set IMethod Signature, set IReadOnlyList<IExpression> CaptureList);

        /// <summary>
        /// Gets this lambda expression's signature.
        /// </summary>
        public IMethod Signature { const get; private set; }

        /// <summary>
        /// Gets the lambda expression's list of captured variables.
        /// </summary>
        public IReadOnlyList<IExpression> CaptureList { const get; private set; }

        public LambdaHeader Apply(IExpression(IExpression) Func)
        {
            bool changes = false;
            var newCaptures = new IExpression[CaptureList.Count];
            foreach (var from in CaptureList, var to in newCaptures)
            {
                to = Func(from);
                if (to != from)
                    changes = true;
            }

            if (changes)
                return new LambdaHeader(Signature, (IReadOnlyList<IExpression>)newCaptures);
            else
                return this;
        }

        private IExpression OptimizeExpr(IExpression Value)
        {
            return Value.Optimize();
        }

        public LambdaHeader Optimize()
        {
            return Apply(OptimizeExpr);
        }

        public LambdaHeader Accept(INodeVisitor Visitor)
        {
            return Apply(Visitor.Visit);
        }

        public LambdaHeader ConvertMembers(MemberConverter Converter)
        {
            var newMethod = Converter.Convert(Signature);
            if (Signature == newMethod)
                return this;
            else
                return new LambdaHeader(newMethod, CaptureList);
        }

        public ILambdaHeaderBlock Emit(ILambdaCodeGenerator Generator)
        {
            return Generator.EmitLambdaHeader(Signature, CaptureList.EmitAll(Generator));
        }
    }

    /// <summary>
    /// A type that contains a bound emit lambda header block.
    /// </summary>
    public class LambdaBoundHeaderBlock
    {
        /// <summary>
        /// Creates a bound header block that has not been bound to any block.
        /// </summary>
        public const this();

        /// <summary>
        /// Creates a bound header block that is already bound to the given block.
        /// </summary>
        public const this(set ILambdaHeaderBlock BoundBlock);

        /// <summary>
        /// Gets this lambda expression's bound header block, which is non-null
        /// only during a call to `Emit`.
        /// </summary>
        public ILambdaHeaderBlock BoundBlock { const get; set; }

        /// <summary>
        /// Tests if an emit lambda header block has been bound to this instance.
        /// </summary>
        public bool IsBound { const get return BoundBlock != null; }

        /// <summary>
        /// Binds the given emit lambda header block to this instance.
        /// </summary>
        public ILambdaHeaderBlock Bind(ILambdaHeaderBlock Block)
        {
            this.BoundBlock = Block;
            return Block;
        }

        /// <summary>
        /// Releases the bound emit lambda header block.
        /// </summary>
        public void Release()
        {
            this.BoundBlock = null;
        }
    }

    /// <summary>
    /// A type of expression that describes an anonymous function with explicit,
    /// by-value capture: variables outside the lambda are not permitted within.
    /// </summary>
    public class LambdaExpression : IExpression, ICopyableNode<IExpression>,
                                    IMemberNode, ILambdaNode<IExpression>
    {
        public const this(set LambdaHeader Header, set IStatement Body)
        {
            this.BoundHeaderBlock = new LambdaBoundHeaderBlock();
        }
        public const this(set LambdaHeader Header, set IStatement Body, set LambdaBoundHeaderBlock BoundHeaderBlock);

        /// <summary>
        /// Gets the lambda expression's header.
        /// </summary>
        public LambdaHeader Header { const get; private set; }

        /// <summary>
        /// Gets the lambda expression's body.
        /// </summary>
        public IStatement Body { const get; private set; }

        /// <summary>
        /// Gets this lambda expression's bound header block, which is non-null
        /// only during a call to `Emit`.
        /// </summary>
        public LambdaBoundHeaderBlock BoundHeaderBlock { const get; private set; }

        public IMethod Signature { const get return Header.Signature; }

        public bool IsConstant
        {
            const get return Header.CaptureList.AreConstant;
        }

        public IType Type
        {
            const get return MethodType.Create(Header.Signature);
        }

        public const IBoundObject Evaluate()
        {
            return null;
        }

        private LambdaExpression CreateLambda(LambdaHeader NewHeader,
            IStatement NewBody, LambdaBoundHeaderBlock NewBoundHeader)
        {
            if (Header == NewHeader && Body == NewBody && BoundHeaderBlock == NewBoundHeader)
            {
                return this;
            }
            else
            {
                return new LambdaExpression(NewHeader, NewBody, NewBoundHeader);
            }
        }

        private LambdaExpression CreateLambdaCopy(
            LambdaHeader NewHeader, IStatement NewBody,
            LambdaBoundHeaderBlock NewBoundHeader)
        {
            var newLambda = CreateLambda(NewHeader, NewBody, NewBoundHeader);
            if (newLambda == this)
                return newLambda;
            else
                // Copy the lambda to remove dependencies on
                // the previous lambda header.
                return (LambdaExpression)newLambda.Copy();
        }

        public IExpression Optimize()
        {
            return CreateLambda(Header.Optimize(), Body.Optimize(), BoundHeaderBlock);
        }

        private IStatement VisitBody(INodeVisitor Visitor)
        {
            if (Visitor is ILambdaVisitor)
            {
                return ((ILambdaVisitor)Visitor).VisitBody(Body, Header.Signature);
            }
            else
            {
                return Body;
            }
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return CreateLambdaCopy(Header.Accept(Visitor), VisitBody(Visitor), BoundHeaderBlock);
        }

        /// <summary>
        /// Tests if the given argument is a captured value expression
        /// that gets one of this lambda expression's captured values.
        /// </summary>
        public const bool IsCapturedValueExpression(IExpression Value)
        {
            if (Value is LambdaCapturedValueExpression)
            {
                var captValExpr = (LambdaCapturedValueExpression)Value;
                return captValExpr.BoundHeaderBlock == BoundHeaderBlock;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Tests if the given argument is a lambda delegate expression
        /// that creates a delegate for this lambda function.
        /// </summary>
        public const bool IsThisDelegateExpression(IExpression Value)
        {
            if (Value is LambdaDelegateExpression)
            {
                var captValExpr = (LambdaDelegateExpression)Value;
                return captValExpr.BoundHeaderBlock == BoundHeaderBlock;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Checks if the given expression depends on this lambda expression.
        /// </summary>
        public const bool IsDependentExpression(IExpression Value)
        {
            return IsCapturedValueExpression(Value) || IsThisDelegateExpression(Value);
        }

        private const IExpression TransformDependentExpr(IExpression Value)
        {
            if (Value is LambdaCapturedValueExpression)
            {
                var captValExpr = (LambdaCapturedValueExpression)Value;
                return new LambdaCapturedValueExpression(Header, BoundHeaderBlock, captValExpr.Index);
            }
            else // Value is LambdaDelegateExpression
            {
                return new LambdaDelegateExpression(Header, BoundHeaderBlock);
            }
        }

        /// <summary>
        /// Creates a copy of this lambda expression that is not dependent on
        /// any of this expression instance's data.
        /// </summary>
        public IExpression Copy()
        {
            var newLambda = new LambdaExpression(Header, Body);

            // There are no dependencies to get rid of in the body,
            // but there could be recursive calls. Rewrite body
            // to be absolutely sure.

            var rewriter = new ExpressionRewriter(this.IsDependentExpression, newLambda.TransformDependentExpr);
            newLambda.Body = rewriter.Visit(Body);
            return newLambda;
        }

        /// <summary>
        /// Converts the node's members with the given member converter.
        /// </summary>
        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            return CreateLambdaCopy(Header.ConvertMembers(Converter), Body, BoundHeaderBlock);
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            var lambdaGen   = (ILambdaCodeGenerator)Generator;

            var headerBlock = BoundHeaderBlock.Bind(Header.Emit(lambdaGen));
            var bodyBlock   = Body.Emit(headerBlock.LambdaCodeGenerator);

            var result = lambdaGen.EmitLambda(headerBlock, bodyBlock);

            BoundHeaderBlock.Release();

            return result;
        }
    }

    /// <summary>
    /// An expression that accesses one of the values that a lambda
    /// has captured.
    /// </summary>
    public class LambdaCapturedValueExpression : IExpression
    {
        public const this(set LambdaHeader Header,
                          set LambdaBoundHeaderBlock BoundHeaderBlock,
                          set int Index);

        /// <summary>
        /// Gets the lambda header that this captured value
        /// expression is associated with.
        /// </summary>
        public LambdaHeader Header { const get; private set; }

        /// <summary>
        /// Gets the bound lambda header block this captured value expression is
        /// associated with.
        /// </summary>
        public LambdaBoundHeaderBlock BoundHeaderBlock { const get; private set; }

        /// <summary>
        /// Gets the index in the lambda capture list of the captured value
        /// that is accessed by this expression.
        /// </summary>
        public int Index { const get; private set; }

        public IExpression CapturedValue { const get return Header.CaptureList[Index]; }

        public bool IsConstant { const get return CapturedValue.IsConstant; }
        public IType Type { const get return CapturedValue.Type; }
        public IBoundObject Evaluate()
        {
            return CapturedValue.Evaluate();
        }

        public IExpression Optimize()
        {
            if (CapturedValue.IsConstant &&
                CapturedValue.Type.IsPrimitiveExpressionType())
            {
                var eval = CapturedValue.Evaluate();
                if (eval != null)
                {
                    return eval.ToExpression();
                }
            }

            return this;
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator CodeGenerator)
        {
            return BoundHeaderBlock.BoundBlock.EmitGetCapturedValue(Index);
        }
    }

    /// <summary>
    /// An expression that yields a delegate to the enclosing lambda.
    /// </summary>
    public class LambdaDelegateExpression : IExpression
    {
        /// <summary>
        /// Creates a new lambda delegate expression from the given lambda header
        /// and bound header block.
        /// </summary>
        public const this(set LambdaHeader Header,
                          set LambdaBoundHeaderBlock BoundHeaderBlock);

        /// <summary>
        /// Gets the lambda header that this lambda delegate expression
        /// is associated with.
        /// </summary>
        public LambdaHeader Header { const get; private set; }

        /// <summary>
        /// Gets the bound lambda header block this lambda delegate expression is
        /// associated with.
        /// </summary>
        public LambdaBoundHeaderBlock BoundHeaderBlock { const get; private set; }

        public bool IsConstant { const get return true; }
        public IType Type { const get return MethodType.Create(Header.Signature); }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator CodeGenerator)
        {
            return BoundHeaderBlock.BoundBlock.ThisLambdaBlock;
        }
    }
}
