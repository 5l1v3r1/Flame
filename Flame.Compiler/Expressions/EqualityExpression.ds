using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// Defines a type of expression that compares its arguments for equality.
    /// </summary>
    public class EqualityExpression : ConditionalExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.CheckEquality; } }

        public static const IBoundObject CheckObjectEquality(IBoundObject First, IBoundObject Second)
        {
            if (First == null || Second == null)
                return null;

            object firstObj = First.GetObjectValue();
            object secondObj = Second.GetObjectValue();

            if (object.ReferenceEquals(firstObj, secondObj))
            {
                return new BooleanExpression(true);
            }
            else if (firstObj == null || secondObj == null)
            {
                return new BooleanExpression(false);
            }
            else
            {
                return new BooleanExpression(firstObj.Equals(secondObj) && secondObj.Equals(firstObj));
            }
        }

        public override const IBoundObject Evaluate()
        {
            var first = LeftOperand.Evaluate();
            var second = RightOperand.Evaluate();
            return CheckObjectEquality(first, second);
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitEquals(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new EqualityExpression(Left, Right);
        }
    }
}
