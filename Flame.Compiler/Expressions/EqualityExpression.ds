using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    public class EqualityExpression : ConditionalExpression
    {
        public const this(set IExpression LeftOperand, set IExpression RightOperand);

        protected override Operator GetOperator() { return Operator.CheckEquality; }

        public override bool IsConstant
        {
            override const get
            {
                return LeftOperand.IsConstant && RightOperand.IsConstant;
            }
        }

        public static const IBoundObject CheckObjectEquality(IBoundObject First, IBoundObject Second)
        {
            object firstObj = First.GetObjectValue();
            object secondObj = Second.GetObjectValue();

            if (object.ReferenceEquals(firstObj, secondObj))
            {
                return new BooleanExpression(true);
            }
            else if (firstObj == null || secondObj == null)
            {
                return new BooleanExpression(false);
            }
            else
            {
                return new BooleanExpression(firstObj.Equals(secondObj) && secondObj.Equals(firstObj));
            }
        }

        public override const IBoundObject Evaluate()
        {
            var first = LeftOperand.Evaluate();
            var second = RightOperand.Evaluate();
            return CheckObjectEquality(first, second);
        }

        public override const IExpression Optimize()
        {
            var optA = LeftOperand.Optimize();
            var optB = RightOperand.Optimize();
            var expr = new EqualityExpression(optA, optB);
            if (expr.IsConstant && expr.Type.IsPrimitiveExpressionType())
            {
                var evalExpr = expr.Evaluate();
                if (evalExpr != null)
                   return evalExpr.ToExpression();
            }
            return expr;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitEquals(Left, Right);
        }
    }
}
