using System;
using System.Collections.Generic;

namespace Flame.Compiler.Expressions
{
    public abstract class ConstantExpression<T> : IExpression, Flame.IBoundPrimitive<T>
        where T : object
    {
        public const this()
        {
            this.Value = default(T);
        }
        public const this(set T Value);

        public T Value { const get; protected set; }

        public void SetField(IField Field, IBoundObject Value) : IBoundObject.SetField
        {
        }
		public IBoundObject GetField(IField Field) : IBoundObject.GetField
		{
			return null;
		}

        public abstract IType Type { const get; }

        public bool IsConstantNode
        {
            const get { return true; }
        }

        public IBoundObject Evaluate()
        {
            return this;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public abstract ICodeBlock Emit(ICodeGenerator Generator);

        public override bool Equals(object Other)
        {
            if (Other is ConstantExpression<T>)
            {
                return Value.Equals(((ConstantExpression<T>)Other).Value);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override virtual string ToString()
        {
            return Value.ToString();
        }
    }
}
