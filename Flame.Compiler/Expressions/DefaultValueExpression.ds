using System;
using System.Collections.Generic;

namespace Flame.Compiler.Expressions
{
    public class DefaultValueExpression : IExpression, IMemberNode
    {
        public this(set IType Type);

        public IType Type { get; private set; }

        public bool IsConstant
        {
            const get
            {
                return Type.IsPrimitiveExpressionType();
            }
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var elemType = Converter.Convert(Type);
            if (object.ReferenceEquals(elemType, Type))
            {
                return this;
            }
            else return new DefaultValueExpression(elemType);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return this;
        }

        /*public object Evaluate()
        {
            if ((Type.IsGenericParameter() && (Type as IGenericParameter).IsReferenceTypeConstrained()) || Type.IsReferenceType())
            {
                return null;
            }
            else
            {
                return Type.GetDefaultValue().Value;
            }
        }*/

        public IBoundObject Evaluate()
        {
        	return Type.GetDefaultValue();
        }

        public IExpression Optimize()
        {
            if (this.IsConstant && Type.IsPrimitiveExpressionType())
            {
                var evalExpr = Evaluate();
                if (evalExpr != null)
                {
                    return evalExpr.ToExpression();
                }
            }
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.EmitDefaultValue(Type);
        }
    }
}
