using System;
using System.Collections.Generic;

namespace Flame.Compiler.Expressions
{
    public class DefaultValueExpression : IExpression
    {
        public this(set IType Type);

        public IType Type { get; private set; }

        public bool IsConstant
        {
            get
            {
                /*if (Type.IsGenericParameter() && !(Type as IGenericParameter).IsReferenceTypeConstrained())
                {
                    return false;
                }
                else
                {
                    return true;
                }*/
                return false;
            }
        }

        /*public object Evaluate()
        {
            if ((Type.IsGenericParameter() && (Type as IGenericParameter).IsReferenceTypeConstrained()) || Type.IsReferenceType())
            {
                return null;
            }
            else
            {
                return Type.GetDefaultValue().Value;
            }
        }*/
        
        public IBoundObject Evaluate()
        {
        	return Type.GetDefaultValue();
        }

        public IExpression Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.EmitDefaultValue(Type);
        }
    }
}