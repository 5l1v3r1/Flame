using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// Defines a short-circuiting boolean 'or' operator.
    /// </summary>
    public class LazyOrExpression : ShortCircuitBinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.LogicalOr; } }

        public override bool IsConstant
        {
            override get
            {
                return LeftOperand.IsConstant && RightOperand.IsConstant &&
                    LeftOperand.Type.Equals(PrimitiveTypes.Boolean) &&
                    RightOperand.Type.Equals(PrimitiveTypes.Boolean);
            }
        }

        public override IBoundObject Evaluate()
        {
            var lValue = LeftOperand.Evaluate();

            if (lValue == null)
                return null;
            else if (lValue.GetValue<bool>())
                return new BooleanExpression(true);
            else
                return RightOperand.Evaluate();
        }

        /// <summary>
        /// Lowers this logical 'or' expression by creating an equivalent
        /// selection expression.
        /// </summary>
        public const SelectExpression Lower()
        {
            // Left ? true : Right
            return new SelectExpression(
                LeftOperand, new BooleanExpression(true), RightOperand);
        }

        /// <summary>
        /// Reduces this logical 'or' expression to a sequence of basic blocks.
        /// </summary>
        public override SSAVariable ToBlocks(BlockBuildingVisitor Visitor)
        {
            return Lower().ToBlocks(Visitor);
        }

        public override const IExpression Optimize()
        {
            var optA = LeftOperand.Optimize();
            var optB = RightOperand.Optimize();
            var expr = new LazyOrExpression(optA, optB);
            if (expr.IsConstant && expr.Type.IsPrimitiveExpressionType())
            {
                var evalExpr = expr.Evaluate();
                if (evalExpr != null)
                   return evalExpr.ToExpression();
            }
            return expr;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
        	return Generator.EmitLogicalOr(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new LazyOrExpression(Left, Right);
        }
    }
}
