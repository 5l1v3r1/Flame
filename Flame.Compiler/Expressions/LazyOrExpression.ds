using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    public class LazyOrExpression : BinaryOperatorExpression
    {
        public const this(set IExpression LeftOperand, set IExpression RightOperand);

        protected override Operator GetOperator() { return Operator.LogicalOr; }

        public override bool IsConstant
        {
            override const get
            {
                return LeftOperand.IsConstant && RightOperand.IsConstant &&
                    LeftOperand.Type.Equals(PrimitiveTypes.Boolean) &&
                    RightOperand.Type.Equals(PrimitiveTypes.Boolean);
            }
        }

        public override const IBoundObject Evaluate()
        {
            return new BooleanExpression(LeftOperand.Evaluate().GetValue<bool>() || RightOperand.Evaluate().GetValue<bool>());
        }

        public override const IExpression Optimize()
        {
            var optA = LeftOperand.Optimize();
            var optB = RightOperand.Optimize();
            var expr = new LazyOrExpression(optA, optB);
            if (expr.IsConstant && expr.Type.IsPrimitiveExpressionType())
            {
                var evalExpr = expr.Evaluate();
                if (evalExpr != null)
                   return evalExpr.ToExpression();
            }
            return expr;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
        	return Generator.EmitLogicalOr(Left, Right);
        }
    }
}
