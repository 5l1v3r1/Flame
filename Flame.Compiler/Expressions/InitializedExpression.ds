using System;
using System.Collections.Generic;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Expressions
{
	public class InitializedExpression : IExpression, IPredicateNode
	{
		public const this(set IStatement Initialization, set IExpression Value)
		{
			this.Finalization = EmptyStatement;
		}
		public const this(set IStatement Initialization, set IExpression Value, set IStatement Finalization);

		public IStatement Initialization { const get; private set; }
		public IExpression Value { const get; private set; }
		public IStatement Finalization { const get; private set; }

		public IType Type : IExpression.Type { const get return Value.Type; }

		public void AcceptPredicate(INodeVisitor Visitor) : IPredicateNode.AcceptPredicate
		{
			Visitor.Visit(Initialization);
			Visitor.Visit(Value);
			Visitor.Visit(Finalization);
		}

		public IExpression Accept(INodeVisitor Visitor) : IExpression.Accept
		{
			var transInit = Visitor.Visit(Initialization);
			var transValue = Visitor.Visit(Value);
			var transFinal = Visitor.Visit(Finalization);

			if (transInit == Initialization && transValue == Value && transFinal == Finalization)
			{
				return this;
			}
			else
			{
				return new InitializedExpression(transInit, transValue, transFinal);
			}
		}

		public bool IsConstant : IExpression.IsConstant
		{
			const get return Initialization.IsEmpty &&
							 Value.IsConstant &&
							 Finalization.IsEmpty;
		}

		public IBoundObject Evaluate() : IExpression.Evaluate
		{
			return Value.Evaluate();
		}

		public IExpression Optimize() : IExpression.Optimize
		{
			var optInit = Initialization.Optimize();
			var optVal  = Value.Optimize();
			var optFin  = Finalization.Optimize();

			if (optInit.IsEmpty && optFin.IsEmpty)
			{
				return optVal;
			}
			else
			{
				return new InitializedExpression(optInit, optVal, optFin);
			}
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : IExpression.Emit
		{
			var expr = Value.Emit(Generator);

			bool initEmpty = Initialization.IsEmpty;
			bool finalEmpty = Finalization.IsEmpty;
			if (initEmpty && finalEmpty)
			{
				return expr;
			}
			else if (finalEmpty)
			{
				var initBlock = Initialization.Emit(Generator);
				return Generator.EmitSequence(initBlock, expr);
			}
			else if (initEmpty)
			{
				var finalBlock = Finalization.Emit(Generator);
				return Generator.EmitSequence(expr, finalBlock);
			}
			else
			{
				var initBlock = Initialization.Emit(Generator);
				var finalBlock = Finalization.Emit(Generator);
				return Generator.EmitSequence(Generator.EmitSequence(initBlock, expr), finalBlock);
			}
		}
	}
}
