using System;
using System.Collections.Generic;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Expressions
{
	public class InitializedExpression : IExpression
	{
		public const this(set IStatement Initialization, set IExpression Value)
		{
			this.Finalization = new EmptyStatement();
		}
		public const this(set IStatement Initialization, set IExpression Value, set IStatement Finalization);
	
		public IStatement Initialization { const get; private set; }
		public IExpression Value { const get; private set; }
		public IStatement Finalization { const get; private set; }
		
		public IType Type : IExpression.Type { const get return Value.Type; }
	
		public bool IsConstant : IExpression.IsConstant
		{
			const get return false;
		}
		
		public IBoundObject Evaluate() : IExpression.Evaluate
		{
			return null;
		}
		
		public IExpression Optimize() : IExpression.Optimize
		{
			return new InitializedExpression(Initialization.Optimize(), Value.Optimize(), Finalization.Optimize());
		}
		
		public ICodeBlock Emit(ICodeGenerator Generator) : IExpression.Emit
		{
			var block = Generator.CreateBlock();
			Initialization.Emit(block);
			var expr = Value.Emit(Generator);
			block.EmitBlock(expr);
			Finalization.Emit(block);
			return block;
		}
	}
}