using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    public class NotExpression : UnaryOperatorExpression
    {
        public const this(IExpression Value)
            : base(Value);

        public override Operator Op { const get return Operator.Not; }

        protected override IExpression Create(IExpression Operand)
        {
            return new NotExpression(Operand);
        }

        public override IBoundObject Evaluate()
        {
            var boundObject = Value.Evaluate();
            if (boundObject == null)
                return null;

            var valTy = Value.Type;
            if (valTy.Equals(PrimitiveTypes.Boolean))
            {
                return new BooleanExpression(!boundObject.GetValue<bool>());
            }
            else if (valTy.IsInteger)
            {
                return new IntegerExpression(boundObject.GetValue<IntegerValue>().OnesComplement);
            }
            else if (valTy.IsBit)
            {
                return new BitExpression(boundObject.GetValue<BitValue>().Complement);
            }
            else
            {
                return null;
            }
        }

        public IExpression Simplify()
        {
            if (Value is NotExpression)
            {
                return ((NotExpression)Value).Value;
            }
            else if (Value is EqualityExpression)
            {
                var ceq = ((EqualityExpression)Value);
                return new InequalityExpression(ceq.LeftOperand, ceq.RightOperand);
            }
            else if (Value is InequalityExpression)
            {
                var cne = ((InequalityExpression)Value);
                return new EqualityExpression(cne.LeftOperand, cne.RightOperand);
            }
            else if (Value is LessThanExpression)
            {
                var clt = (LessThanExpression)Value;
                return new GreaterThanOrEqualsExpression(clt.LeftOperand, clt.RightOperand);
            }
            else if (Value is GreaterThanExpression)
            {
                var cgt = (GreaterThanExpression)Value;
                return new LessThanOrEqualsExpression(cgt.LeftOperand, cgt.RightOperand);
            }
            else if (Value is GreaterThanOrEqualsExpression)
            {
                var cge = (GreaterThanOrEqualsExpression)Value;
                return new LessThanExpression(cge.LeftOperand, cge.RightOperand);
            }
            else if (Value is LessThanOrEqualsExpression)
            {
                var cle = (LessThanOrEqualsExpression)Value;
                return new GreaterThanExpression(cle.LeftOperand, cle.RightOperand);
            }
            else
            {
                return this;
            }
        }

        public override IExpression Optimize()
        {
            var Value = Value.Optimize();
            var optExpr = new NotExpression(Value);
            if (optExpr.IsConstant && optExpr.Type.IsPrimitiveExpressionType())
            {
                var evalExpr = optExpr.Evaluate();
                if (evalExpr != null)
                   return evalExpr.ToExpression();
            }
            return optExpr.Simplify();
        }
    }
}
