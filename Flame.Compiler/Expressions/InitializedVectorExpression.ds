using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Expressions
{
	public class InitializedVectorExpression : IExpression, IPredicateNode, IMemberNode
	{
		public const this(set IType ElementType, set IExpression[] Elements);

		public IType ElementType { const get; private set; }
		public IExpression[] Elements { const get; private set; }

		public IType Type : IExpression.Type
		{
			const get return ElementType.MakeVectorType(new int[] { Elements.Length });
		}

		public IMemberNode ConvertMembers(MemberConverter Converter)
		{
			var convElemType = Converter.Convert(ElementType);
			if (object.ReferenceEquals(convElemType, ElementType))
			{
				return this;
			}
			else return new InitializedVectorExpression(convElemType, Elements);
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.VisitAll(Elements);
		}

		public IExpression Accept(INodeVisitor Visitor) : IExpression.Accept
		{
			var transElems = Visitor.VisitAll(Elements);

			return new InitializedVectorExpression(ElementType, transElems);
		}

		public const IExpression Optimize() : IExpression.Optimize
		{
			var optElems = new IExpression[Elements.Length];
			foreach (var item in Elements, var output in optElems)
			{
				output = item.Optimize();
			}
			return new InitializedVectorExpression(ElementType, optElems);
		}

		public bool IsConstantNode : IExpression.IsConstantNode
		{
			const get
			{
				return true;
			}
		}

		public IBoundObject Evaluate() : IExpression.Evaluate
		{
			return null;
		}

		public ICodeBlock Emit(ICodeGenerator Generator) : IExpression.Emit
		{
			if (Generator is IInitializingCodeGenerator)
			{
				var cg = (IInitializingCodeGenerator)Generator;
				var elemBlocks = new ICodeBlock[Elements.Length];
				foreach (var item in Elements, var output in elemBlocks)
				{
					output = item.Emit(cg);
				}
				return cg.EmitInitializedVector(ElementType, elemBlocks);
			}
			else
			{
				var enumExpr = new NewVectorExpression(ElementType, new int[] { Elements.Length });

				var localVar = new LocalVariable(enumExpr.Type);

				IStatement[] initStatements = new IStatement[Elements.Length + 1];
	            initStatements[0] = localVar.CreateSetStatement(enumExpr);
	            for (int i = 0; i < Elements.Length; i++)
	            {
	                var elemVar = new ElementVariable(
						localVar.CreateGetExpression(),
						new IExpression[] { new Int32Expression(i) });
	                initStatements[i + 1] = elemVar.CreateSetStatement(Elements[i]);
	            }

	            var expr = new InitializedExpression(
					new BlockStatement(initStatements),
	                localVar.CreateGetExpression(),
	                localVar.CreateReleaseStatement());

	            return expr.Emit(Generator);
			}
		}
	}
}
