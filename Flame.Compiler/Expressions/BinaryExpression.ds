using System;
using System.Collections.Generic;

namespace Flame.Compiler.Expressions
{
	/// <summary>
	/// A base class for expressions that apply some binary
	/// operator.
	/// </summary>
	public abstract class BinaryExpression : IExpression, IPredicateNode
	{
		/// <summary>
		/// Creates a binary expression from the given operand expressions.
		/// </summary>
		public const this(set IExpression LeftOperand, set IExpression RightOperand);

		/// <summary>
		/// Gets the binary expression's left operand.
		/// </summary>
		public IExpression LeftOperand { const get; private set; }

		/// <summary>
		/// Gets the binary expression's right operand.
		/// </summary>
		public IExpression RightOperand { const get; private set; }

		/// <summary>
		/// Gets this binary expression's operator.
		/// </summary>
		public abstract Operator Op { abstract get; }

		/// <summary>
		/// Gets this binary expression's type.
		/// </summary>
		public virtual IType Type
		{
			virtual get
			{
				return LeftOperand.Type;
			}
		}

		/// <summary>
		/// Checks if this binary expression is constant.
		/// </summary>
		public virtual bool IsConstant
		{
			virtual get
			{
				return LeftOperand.IsConstant && RightOperand.IsConstant;
			}
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.Visit(LeftOperand);
			Visitor.Visit(RightOperand);
		}

		public virtual IExpression Accept(INodeVisitor Visitor)
		{
			var transLeft = Visitor.Visit(LeftOperand);
			var transRight = Visitor.Visit(RightOperand);
			if (transLeft == LeftOperand && transRight == RightOperand)
			{
				return this;
			}
			else
			{
				return Create(transLeft, transRight);
			}
		}

		public virtual IExpression Optimize()
		{
			var optA = LeftOperand.Optimize();
			var optB = RightOperand.Optimize();
			var expr = Create(optA, optB);
			if (expr.IsConstant &&
				expr.Type.IsPrimitiveExpressionType())
			{
				var evalExpr = expr.Evaluate();
				if (evalExpr != null)
				   return evalExpr.ToExpression();
			}
			return expr;
		}

		public override ICodeBlock Emit(ICodeGenerator Generator)
		{
			return Generator.EmitBinary(
				LeftOperand.Emit(Generator), RightOperand.Emit(Generator), Op);
		}

		/// <summary>
		/// Creates a binary expression of this expression type from the given
		/// operands. These expressions are guaranteed to have the same type
		/// as the operands of this expression.
		/// </summary>
		protected abstract IExpression Create(IExpression Left, IExpression Right);

		/// <summary>
		/// Creates an operator application code block from the given
		/// operands, with the given code generator.
		/// </summary>
		protected abstract ICodeBlock EmitPrimitive(
			ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator);

		public abstract IBoundObject Evaluate();

		public override const string ToString()
		{
			return "binary(" + Op + ", " + LeftOperand + ", " + RightOperand + ")";
		}
	}

	/// <summary>
	/// Defines a binary expression that does not know how to evaluate itself,
	/// and simply instructs the code generator to create a binary block.
	/// </summary>
	public class PrimitiveBinaryExpression : BinaryExpression
	{
		/// <summary>
		/// Creates a primitive binary expression from the given operands and
		/// operator. The result type is assumed to be the type of the left
		/// operand.
		/// </summary>
		public const this(
			IExpression LeftOperand, Operator Op,
			IExpression RightOperand)
			: base(LeftOperand, RightOperand)
		{
			this.exprType = LeftOperand.Type;
			this.binOp = Op;
		}

		/// <summary>
		/// Creates a primitive binary expression from the given operands,
		/// operator and result type.
		/// </summary>
		public const this(
			IExpression LeftOperand, Operator Op,
			IExpression RightOperand, IType ResultType)
			: base(LeftOperand, RightOperand)
		{
			this.exprType = ResultType;
			this.binOp = Op;
		}

		private Operator binOp;
		public override Operator Op
		{
			override const get
			{
				return binOp;
			}
		}

		private IType exprType;
		public override IType Type
		{
			override const get
			{
				return exprType;
			}
		}

		protected override const IExpression Create(IExpression Left, IExpression Right)
		{
			return new PrimitiveBinaryExpression(Left, Op, Right, exprType);
		}

		public override const IBoundObject Evaluate()
		{
			return null;
		}

		protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
		{
			return Generator.EmitBinary(Left, Right, Op);
		}
	}

	/// <summary>
	/// A helper class that can be used to create optimal built-in
	/// binary expressions.
	/// </summary>
	public static class DirectBinaryExpression
	{
		/// <summary>
		/// Creates a new binary expression from the given left operand,
		/// operator and right operand.
		/// </summary>
		public const IExpression Create(
			IExpression LeftOperand, Operator Op, IExpression RightOperand)
		{
			if (Op == Operator.Add)
				return new AddExpression(LeftOperand, RightOperand);
			else if (Op == Operator.Subtract)
				return new SubtractExpression(LeftOperand, RightOperand);
			else if (Op == Operator.Multiply)
				return new MultiplyExpression(LeftOperand, RightOperand);
			else if (Op == Operator.Divide)
				return new DivideExpression(LeftOperand, RightOperand);
			else if (Op == Operator.Remainder)
				return new RemainderExpression(LeftOperand, RightOperand);
			else if (Op == Operator.Or)
				return new OrExpression(LeftOperand, RightOperand);
			else if (Op == Operator.And)
				return new AndExpression(LeftOperand, RightOperand);
			else if (Op == Operator.Xor)
				return new XorExpression(LeftOperand, RightOperand);
			else if (Op == Operator.LogicalOr)
				return new LazyOrExpression(LeftOperand, RightOperand);
			else if (Op == Operator.LogicalAnd)
				return new LazyAndExpression(LeftOperand, RightOperand);
			else if (Op == Operator.RightShift)
				return new RightShiftExpression(LeftOperand, RightOperand);
			else if (Op == Operator.LeftShift)
				return new LeftShiftExpression(LeftOperand, RightOperand);
			else if (Op == Operator.CheckEquality)
				return new EqualityExpression(LeftOperand, RightOperand);
			else if (Op == Operator.CheckInequality)
				return new InequalityExpression(LeftOperand, RightOperand);
			else if (Op == Operator.CheckGreaterThan)
				return new GreaterThanExpression(LeftOperand, RightOperand);
			else if (Op == Operator.CheckLessThan)
				return new LessThanExpression(LeftOperand, RightOperand);
			else if (Op == Operator.CheckGreaterThanOrEqual)
				return new GreaterThanOrEqualsExpression(LeftOperand, RightOperand);
			else if (Op == Operator.CheckLessThanOrEqual)
				return new LessThanOrEqualsExpression(LeftOperand, RightOperand);
			else if (Op == Operator.Concat)
				return new ConcatExpression(LeftOperand, RightOperand);
			else
				return new PrimitiveBinaryExpression(LeftOperand, Op, RightOperand);
		}
	}
}
