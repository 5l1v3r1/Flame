using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A type that represents addition expressions.
    /// </summary>
    public class AddExpression : BinaryExpression
    {
        public const this(IExpression LeftOperand, IExpression RightOperand)
            : base(LeftOperand, RightOperand);

        public override Operator Op { override const get { return Operator.Add; } }

        public override IBoundObject Evaluate()
        {
            var lObj = LeftOperand.Evaluate();
            if (lObj == null)
                return null;
        	var rObj = RightOperand.Evaluate();
            if (rObj == null)
                return null;

        	var resultType = Type;
            if (resultType.IsInteger)
            {
                return new IntegerExpression(
                    lObj.GetValue<IntegerValue>().Add(
                        rObj.GetValue<IntegerValue>()));
            }
        	else if (resultType.Equals(PrimitiveTypes.Float32))
        	{
        		return new Float32Expression(lObj.GetValue<float32>() + rObj.GetValue<float32>());
        	}
        	else if (resultType.Equals(PrimitiveTypes.Float64))
        	{
        		return new Float64Expression(lObj.GetValue<float64>() + rObj.GetValue<float64>());
        	}
            return null;
        }

        public override const IExpression Optimize()
        {
            var optA = LeftOperand.Optimize();
            var optB = RightOperand.Optimize();
            var expr = new AddExpression(optA, optB);
            if (expr.IsConstant && expr.Type.IsPrimitiveExpressionType())
            {
                var evalExpr = expr.Evaluate();
                if (evalExpr != null)
                    return evalExpr.ToExpression();
            }
            if (optA is AddExpression && optB.IsConstant)
            {
            	var ladd = (AddExpression)optA;
            	if (ladd.LeftOperand.IsConstant)
            	{
            		return new AddExpression(new AddExpression(ladd.LeftOperand, optB).Optimize(), ladd.RightOperand);
            	}
            	else if (ladd.RightOperand.IsConstant)
            	{
            		return new AddExpression(ladd.LeftOperand, new AddExpression(ladd.RightOperand, optB).Optimize());
            	}
            }
            else if (optA is SubtractExpression && optB.IsConstant)
            {
            	var lsub = (SubtractExpression)optA;
            	if (lsub.LeftOperand.IsConstant)
            	{
            		return new SubtractExpression(new AddExpression(lsub.LeftOperand, optB).Optimize(), lsub.RightOperand);
            	}
            	else if (lsub.RightOperand.IsConstant)
            	{
            		return new SubtractExpression(lsub.LeftOperand, new SubtractExpression(lsub.RightOperand, optB).Optimize());
            	}
            }
            else if (optB is AddExpression && optA.IsConstant)
            {
            	var radd = (AddExpression)optB;
            	if (radd.LeftOperand.IsConstant)
            	{
            		return new AddExpression(new AddExpression(radd.LeftOperand, optA).Optimize(), radd.RightOperand);
            	}
            	else if (radd.RightOperand.IsConstant)
            	{
            		return new AddExpression(radd.LeftOperand, new AddExpression(radd.RightOperand, optA).Optimize());
            	}
            }
            else if (optB is SubtractExpression && optA.IsConstant)
            {
            	var rsub = (SubtractExpression)optB;
            	if (rsub.LeftOperand.IsConstant)
            	{
            		return new SubtractExpression(new AddExpression(rsub.LeftOperand, optA).Optimize(), rsub.RightOperand);
            	}
            	else if (rsub.RightOperand.IsConstant)
            	{
            		return new SubtractExpression(rsub.LeftOperand, new SubtractExpression(rsub.RightOperand, optA).Optimize());
            	}
            }
            return expr;
        }

        protected override const ICodeBlock EmitPrimitive(ICodeBlock Left, ICodeBlock Right, ICodeGenerator Generator)
        {
            return Generator.EmitAdd(Left, Right);
        }

        protected override IExpression Create(IExpression Left, IExpression Right)
        {
            return new AddExpression(Left, Right);
        }
    }
}
