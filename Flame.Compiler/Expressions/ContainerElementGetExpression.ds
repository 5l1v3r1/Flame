using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
	public class ContainerElementGetExpression : IExpression, IVariableNode, IPredicateNode
    {
        public const this(set IExpression Target, set [IExpression] IndexArguments);

		public IExpression Target { const get; private set; }
		public [IExpression] IndexArguments { const get; private set; }
        public IType Type
        {
	        const get
			{
				return Target.Type.AsContainerType().ElementType;
			}
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			Visitor.Visit(Target);
			Visitor.VisitAll(IndexArguments);
		}

		public IExpression Accept(INodeVisitor Visitor)
		{
			var transTarget = Visitor.Visit(Target);
			var args = Visitor.VisitAll(IndexArguments);

			if (transTarget == Target && Enumerable.SequenceEqual<IExpression>(args, IndexArguments))
			{
				return this;
			}
			else
			{
				return new ContainerElementGetExpression(transTarget, args);
			}
		}

        public bool IsConstantNode
        {
            const get { return true; }
        }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new ElementVariable(Target, IndexArguments);
        }

		public VariableNodeAction Action
		{
			const get return VariableNodeAction.Get;
		}

        public const IBoundObject Evaluate()
        {
            return null;
        }

        public const IExpression Optimize()
        {
            return this;
        }

        public const ICodeBlock Emit(ICodeGenerator Generator)
        {
        	var targetBlock = Target.Emit(Generator);
        	var argBlocks = IndexArguments.EmitAll(Generator);
            return Generator.GetElement(targetBlock, argBlocks).EmitGet();
        }
    }
}
