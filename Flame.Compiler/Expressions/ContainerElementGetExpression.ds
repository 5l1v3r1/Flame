using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
	public class ContainerElementGetExpression : IExpression, IVariableNode
    {
        public const this(set IExpression Target, set IEnumerable<IExpression> IndexArguments);

		public IExpression Target { const get; private set; }
		public IEnumerable<IExpression> IndexArguments { const get; private set; }
        public IType Type
        {
	        const get
			{
				return Target.Type.AsContainerType().GetElementType();
			}
		}

        public bool IsConstant
        {
            const get { return false; }
        }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new ElementVariable(Target, IndexArguments);
        }

        public const IBoundObject Evaluate()
        {
            return null;
        }

        public const IExpression Optimize()
        {
            return this;
        }

        public const ICodeBlock Emit(ICodeGenerator Generator)
        {
        	var targetBlock = Target.Emit(Generator);
        	var argBlocks = IndexArguments.EmitAll(Generator);
            return Generator.GetElement(targetBlock, argBlocks).EmitGet();
        }
    }
}
