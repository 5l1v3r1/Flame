using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
    public class FieldGetExpression : IExpression, IVariableNode, IMemberNode, IPredicateNode
    {
        public this(set IField Field, set IExpression Target);

        public IField Field { get; private set; }
        public IExpression Target { get; private set; }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var resultField = Converter.Convert(Field);
            if (object.ReferenceEquals(Field, resultField))
                return this;
            else
                return new FieldGetExpression(resultField, Target);
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            if (Target != null)
                Visitor.Visit(Target);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            if (Target == null) return this;

            var transTarget = Visitor.Visit(Target);

            if (transTarget == Target)
            {
                return this;
            }
            else
            {
                return new FieldGetExpression(Field, transTarget);
            }
        }

        public IType Type
        {
            get { return Field.FieldType; }
        }

        public IVariable GetVariable() : IVariableNode.GetVariable
        {
            return new FieldVariable(Field, Target);
        }

        public VariableNodeAction Action
        {
            get return VariableNodeAction.Get;
        }

        public bool IsConstantNode
        {
            get
            {
                return true;
            }
        }

        public IBoundObject Evaluate()
        {
            if (Field.IsStatic)
            {
                if (Field.IsConstant)
                {
                    if (Field is ILiteralField)
                        return ((ILiteralField)Field).Value;
                    else if (Field is IInitializedField)
                        return ((IInitializedField)Field).InitialValue.EvaluateOrNull();
                }
            }
            else
            {
                var tgt = Target.Evaluate();
                if (tgt != null)
                    return Field.GetField(tgt);
            }
            return null;
        }

        private IExpression EvaluateAsExpression()
        {
            var eval = Evaluate();
            if (eval != null)
            {
                var primExpr = PrimitiveExpressionExtensions
                    .ToExpression(eval);

                if (primExpr == null)
                    return null;

                var targetType = Type;
                var exprType = primExpr.Type;
                if (!exprType.Equals(targetType))
                {
                    if (exprType.IsEnum != targetType.IsEnum)
                    {
                        // Insert a static cast to preserve the type of
                        // the expression.
                        return new StaticCastExpression(
                            primExpr, targetType);
                    }
                    else
                    {
                        // Insert a reinterpret cast to preserve the type of
                        // the expression.
                        return new ReinterpretCastExpression(
                            primExpr, targetType);
                    }
                }
                else
                {
                    // No cast necessary.
                    return primExpr;
                }
            }
            else
            {
                return null;
            }
        }

        public IExpression Optimize()
        {
            var result = EvaluateAsExpression();
            if (result == null)
                return this;
            else
                return result;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            ICodeBlock targetBlock;
            if (Target == null)
            {
                targetBlock = null;
                var evalExpr = EvaluateAsExpression();
                if (evalExpr != null)
                    return evalExpr.Emit(Generator);
            }
            else
            {
                targetBlock = Target.Emit(Generator);
            }

            return Generator.EmitGetField(Field, targetBlock);
        }

        public override string ToString()
        {
            return GetVariable().ToString();
        }
    }
    public class FieldGetPointerExpression : IExpression, IVariableNode, IPredicateNode, IMemberNode
    {
        public this(set IField Field, set IExpression Target);

        public IField Field { get; private set; }
        public IExpression Target { get; private set; }

        public IType Type
        {
            get { return Field.FieldType.MakePointerType(PointerKind.ReferencePointer); }
        }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var resultField = Converter.Convert(Field);
            if (object.ReferenceEquals(Field, resultField))
                return this;
            else
                return new FieldGetPointerExpression(resultField, Target);
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            if (Target != null)
                Visitor.Visit(Target);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            if (Target == null) return this;

            var transTarget = Visitor.Visit(Target);

            if (transTarget == Target)
            {
                return this;
            }
            else
            {
                return new FieldGetPointerExpression(Field, transTarget);
            }
        }

        public IVariable GetVariable() : IVariableNode.GetVariable
        {
            return new FieldVariable(Field, Target);
        }

        public VariableNodeAction Action
        {
            get return VariableNodeAction.AddressOf;
        }

        public bool IsConstantNode
        {
            get { return true; }
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            var cg = (IUnmanagedCodeGenerator)Generator;

            ICodeBlock targetBlock;
            if (Target == null)
            {
                targetBlock = null;
            }
            else
            {
                targetBlock = Target.Emit(Generator);
            }

            return cg.EmitGetFieldAddress(Field, targetBlock);
        }

        public override string ToString()
        {
            return "&" + GetVariable().ToString();
        }
    }
}
