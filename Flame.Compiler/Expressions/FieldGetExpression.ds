using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
	public class FieldGetExpression : IExpression, IVariableNode
    {
        public const this(set IField Field, set IExpression Target);

        public IField Field { const get; private set; }
        public IExpression Target { const get; private set; }

		public IExpression Accept(INodeVisitor Visitor)
		{
			var transTarget = Visitor.Visit(Target);

			if (transTarget == Target)
			{
				return this;
			}
			else
			{
				return new FieldGetExpression(Field, transTarget);
			}
		}

        public IType Type
        {
            const get { return Field.FieldType; }
        }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new FieldVariable(Field, Target);
        }

		public VariableNodeAction Action
		{
			const get return VariableNodeAction.Get;
		}

        public bool IsConstant
        {
            const get
            {
            	if (Field.IsConstant)
            	{
            		if (Target == null)
            		{
            			return true;
            		}
            		else
            		{
            			return Target.IsConstant;
            		}
            	}
            	else
            	{
            		return false;
            	}
           	}
        }

        public IBoundObject Evaluate()
        {
            if (Field.IsStatic)
            {
            	if (Field is IInitializedField)
            	{
            		return ((IInitializedField)Field).GetValue().Evaluate();
            	}
                return Field.GetField(null);
            }
            else
            {
                return Field.GetField(Target.Evaluate());
            }
        }

        public IExpression Optimize()
        {
            if (IsConstant && Type.IsPrimitive)
            {
                return PrimitiveExpressionExtensions.ToExpression(this.Evaluate());
            }
            else
            {
                return this;
            }
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
        	ICodeBlock targetBlock;
        	if (Target == null)
        	{
        		targetBlock = null;
        		if (IsConstant)
        		{
        			var evaluatedExpr = PrimitiveExpressionExtensions.ToExpression(this.Evaluate());
        			if (evaluatedExpr != null)
        				return evaluatedExpr.Emit(Generator);
        		}
        	}
        	else
        	{
        		targetBlock = Target.Emit(Generator);
        	}

        	return Generator.EmitGetField(Field, targetBlock);
        }
    }
    public class FieldGetPointerExpression : IExpression, IVariableNode
    {
        public const this(set IField Field, set IExpression Target);

        public IField Field { const get; private set; }
        public IExpression Target { const get; private set; }

        public IType Type
        {
            const get { return Field.FieldType.MakePointerType(PointerKind.ReferencePointer); }
        }

		public IExpression Accept(INodeVisitor Visitor)
		{
			var transTarget = Visitor.Visit(Target);

			if (transTarget == Target)
			{
				return this;
			}
			else
			{
				return new FieldGetPointerExpression(Field, transTarget);
			}
		}

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new FieldVariable(Field, Target);
        }

		public VariableNodeAction Action
		{
			const get return VariableNodeAction.AddressOf;
		}

        public bool IsConstant
        {
            const get { return false; }
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
        	var cg = (IUnmanagedCodeGenerator)Generator;

        	ICodeBlock targetBlock;
        	if (Target == null)
        	{
        		targetBlock = null;
        	}
        	else
        	{
        		targetBlock = Target.Emit(Generator);
        	}

            return cg.EmitGetFieldAddress(Field, targetBlock);
        }
    }
}
