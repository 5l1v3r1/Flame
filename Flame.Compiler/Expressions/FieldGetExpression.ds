using System;
using System.Collections.Generic;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Expressions
{
	public class FieldGetExpression : IExpression, IVariableNode, IMemberNode, IPredicateNode
    {
        public const this(set IField Field, set IExpression Target);

        public IField Field { const get; private set; }
        public IExpression Target { const get; private set; }

		public IMemberNode ConvertMembers(MemberConverter Converter)
		{
			var resultField = Converter.Convert(Field);
            if (object.ReferenceEquals(Field, resultField))
                return this;
        	else
				return new FieldGetExpression(resultField, Target);
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			if (Target != null)
				Visitor.Visit(Target);
		}

		public IExpression Accept(INodeVisitor Visitor)
		{
			if (Target == null) return this;

			var transTarget = Visitor.Visit(Target);

			if (transTarget == Target)
			{
				return this;
			}
			else
			{
				return new FieldGetExpression(Field, transTarget);
			}
		}

        public IType Type
        {
            const get { return Field.FieldType; }
        }

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new FieldVariable(Field, Target);
        }

		public VariableNodeAction Action
		{
			const get return VariableNodeAction.Get;
		}

        public bool IsConstantNode
        {
            const get
            {
            	return true;
           	}
        }

        public IBoundObject Evaluate()
        {
            if (Field.IsStatic)
            {
				if (Field.IsConstant)
				{
					if (Field is ILiteralField)
						return ((ILiteralField)Field).Value;
					else if (Field is IInitializedField)
            			return ((IInitializedField)Field).GetValue().Evaluate();
				}
            }
            else
            {
				var tgt = Target.Evaluate();
				if (tgt != null)
                	return Field.GetField(tgt);
            }
			return null;
        }

        public IExpression Optimize()
        {
            if (Type.IsPrimitive)
            {
				var eval = this.Evaluate();
				if (eval != null)
                	return PrimitiveExpressionExtensions.ToExpression(eval);
            }
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
        	ICodeBlock targetBlock;
        	if (Target == null)
        	{
        		targetBlock = null;
				var eval = this.Evaluate();
				if (eval != null)
				{
	    			var evaluatedExpr = PrimitiveExpressionExtensions.ToExpression(eval);
	    			if (evaluatedExpr != null)
	    				return evaluatedExpr.Emit(Generator);
				}
        	}
        	else
        	{
        		targetBlock = Target.Emit(Generator);
        	}

        	return Generator.EmitGetField(Field, targetBlock);
        }

		public override const string ToString()
		{
			if (Target == null)
				return "field(null, " + Field.FullName + ")";
			else
				return "field(" + Target + ", " + Field.FullName + ")";
		}
    }
    public class FieldGetPointerExpression : IExpression, IVariableNode, IPredicateNode, IMemberNode
    {
        public const this(set IField Field, set IExpression Target);

        public IField Field { const get; private set; }
        public IExpression Target { const get; private set; }

        public IType Type
        {
            const get { return Field.FieldType.MakePointerType(PointerKind.ReferencePointer); }
        }

		public IMemberNode ConvertMembers(MemberConverter Converter)
		{
			var resultField = Converter.Convert(Field);
			if (object.ReferenceEquals(Field, resultField))
				return this;
			else
				return new FieldGetPointerExpression(resultField, Target);
		}

		public void AcceptPredicate(INodeVisitor Visitor)
		{
			if (Target != null)
				Visitor.Visit(Target);
		}

		public IExpression Accept(INodeVisitor Visitor)
		{
			if (Target == null) return this;

			var transTarget = Visitor.Visit(Target);

			if (transTarget == Target)
			{
				return this;
			}
			else
			{
				return new FieldGetPointerExpression(Field, transTarget);
			}
		}

        public const IVariable GetVariable() : IVariableNode.GetVariable
        {
        	return new FieldVariable(Field, Target);
        }

		public VariableNodeAction Action
		{
			const get return VariableNodeAction.AddressOf;
		}

        public bool IsConstantNode
        {
            const get { return true; }
        }

        public IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
        	var cg = (IUnmanagedCodeGenerator)Generator;

        	ICodeBlock targetBlock;
        	if (Target == null)
        	{
        		targetBlock = null;
        	}
        	else
        	{
        		targetBlock = Target.Emit(Generator);
        	}

            return cg.EmitGetFieldAddress(Field, targetBlock);
        }

		public override const string ToString()
		{
			if (Target == null)
				return "&field(null, " + Field.FullName + ")";
			else
				return "&field(" + Target + ", " + Field.FullName + ")";
		}
    }
}
