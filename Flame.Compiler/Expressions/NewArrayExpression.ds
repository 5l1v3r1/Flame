using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Flame.Compiler.Expressions
{
    public class NewArrayExpression : IExpression, IMemberNode
    {
        public const this(set IType ElementType, set IReadOnlyList<IExpression> Dimensions);
        public const this(set IType ElementType, [IExpression] Dimensions)
    	{
    		this.Dimensions = (IReadOnlyList<IExpression>)Enumerable.ToArray<IExpression>(Dimensions);
    	}
        public const this(set IType ElementType, IList<IExpression> Dimensions)
        {
        	this.Dimensions = (IReadOnlyList<IExpression>)Enumerable.ToArray<IExpression>(Dimensions);
        }
        public const this(set IType ElementType, IExpression[] Dimensions)
        {
        	this.Dimensions = (IReadOnlyList<IExpression>)Dimensions;
        }

        public IType ElementType { const get; private set; }
        public IReadOnlyList<IExpression> Dimensions { const get; private set; }

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var elemType = Converter.Convert(ElementType);
            if (object.ReferenceEquals(elemType, ElementType))
            {
                return this;
            }
            else return new NewArrayExpression(elemType, Dimensions);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            var transDims = Visitor.VisitAll(Dimensions);

            if (Enumerable.SequenceEqual<IExpression>(transDims, Dimensions))
            {
                return this;
            }
            else
            {
                return new NewArrayExpression(ElementType, transDims);
            }
        }

        public IType Type
        {
            const get
            {
                return ElementType.MakeArrayType(Dimensions.Count);
            }
        }

        public bool IsConstantNode
        {
            const get return true;
        }

        public const IBoundObject Evaluate()
        {
            return null;
        }

        public IExpression Optimize()
        {
            return new NewArrayExpression(ElementType, Dimensions.OptimizeAll());
        }

        public ICodeBlock Emit(ICodeGenerator Generator)
        {
            return Generator.EmitNewArray(ElementType, Dimensions.EmitAll(Generator));
        }
    }
}
