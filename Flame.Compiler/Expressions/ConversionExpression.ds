using System;
using System.Collections.Generic;

namespace Flame.Compiler.Expressions
{
    /// <summary>
    /// A base class for conversion expressions.
    /// </summary>
    public abstract class ConversionExpressionBase : IExpression, IMemberNode, IPredicateNode
    {
        /// <summary>
        /// Creates a conversion expression that converts the given value
        /// to the given type.
        /// </summary>
        public const this(set IExpression Value, set IType TargetType);

        /// <summary>
        /// Gets the value that is to be converted to the given type.
        /// </summary>
        public IExpression Value { const get; private set; }

        /// <summary>
        /// Gets the type the value is to be converted to.
        /// </summary>
        public IType TargetType { const get; private set; }

        /// <summary>
        /// Gets the conversion expression's type, which is the same as its
        /// target type.
        /// </summary>
        public IType Type { const get { return TargetType; } }

        /// <summary>
        /// Creates a new conversion expression that converts the given
        /// value to the given type.
        /// </summary>
        protected abstract ConversionExpressionBase Create(
            IExpression NewValue, IType NewType);

        /// <summary>
        /// Tells if this conversion expression does not have side-effects.
        /// </summary>
        public abstract bool IsConstantNode { get; }

        /// <summary>
        /// Evaluates this conversion expression at compile-time.
        /// </summary>
        public abstract IBoundObject Evaluate();

        /// <summary>
        /// Creates a code block for this conversion expression.
        /// </summary>
        public abstract ICodeBlock Emit(ICodeGenerator CodeGenerator);

        public IMemberNode ConvertMembers(MemberConverter Converter)
        {
            var elemType = Converter.Convert(Type);
            if (object.ReferenceEquals(elemType, Type))
                return this;
            else
                return Create(Value, elemType);
        }

        public void AcceptPredicate(INodeVisitor Visitor)
        {
            Visitor.Visit(Value);
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            var transVal = Visitor.Visit(Value);

            if (transVal == Value)
                return this;
            else
                return Create(transVal, TargetType);
        }

        /// <summary>
        /// Optimizes this conversion expression.
        /// </summary>
        public virtual IExpression Optimize()
        {
            return Create(Value.Optimize(), Type).Simplify();
        }

        /// <summary>
        /// Tries to apply simple node-based simplifications.
        /// </summary>
        public virtual IExpression Simplify()
        {
            if (Value.Type.IsEquivalent(TargetType))
            {
                return Value;
            }
            else if (Value.IsConstant)
            {
                var evalExpr = Value.Evaluate();
                if (evalExpr != null)
                {
                    return evalExpr.ToExpression();
                }
            }

            return this;
        }
    }

    /// <summary>
    /// A helper class that creates conversion expressions.
    /// </summary>
    public static class ConversionExpression
    {
        /// <summary>
        /// Strips away all top-level conversions and metadata from the given
        /// expression, and returns the result.
        /// </summary>
        public IExpression GetRawValueExpression(IExpression Expression)
        {
            if (Expression is ConversionExpressionBase)
            {
                return GetRawValueExpression(
                    ((ConversionExpressionBase)Expression).Value);
            }
            else if (Expression is IMetadataNode<IExpression>)
            {
                return GetRawValueExpression(
                    ((IMetadataNode<IExpression>)Expression).Value);
            }
            else
            {
                return Expression;
            }
        }

        /// <summary>
        /// Creates an expression that converts the given value to the given type.
        /// </summary>
        public IExpression Create(IExpression Value, IType Type)
        {
            var interExpr = IntersectionExpression.FilterIntersection(Value, Type);
            var interType = interExpr.Type;
            if (interType.IsEquivalent(Type))
            {
                return interExpr;
            }
            else if (MaybeUseUnbox(interType))
            {
                if (IsNonBoxPointer(Type))
                    return new UnboxReferenceExpression(interExpr, Type);
                else if (UseUnboxValueAsUnbox(Type))
                    return new UnboxValueExpression(interExpr, Type);
            }

            if (UseDynamicCast(interType, Type))
            {
                if (UseReinterpretAsDynamicCast(interType, Type))
                    return new ReinterpretCastExpression(interExpr, Type);
                else
                    return new DynamicCastExpression(interExpr, Type);
            }
            else if (UseExplicitBox(interType, Type))
            {
                return new DynamicCastExpression(
                    new BoxExpression(interExpr), Type).Simplify();
            }
            else
            {
                return new StaticCastExpression(interExpr, Type);
            }
        }

        private bool IsSpecialType(IType Type)
        {
            return Type.IsDelegate || Type.IsPrimitive
                || Type.IsIntersectionType || Type.IsEnum;
        }

        /// <summary>
        /// Tests if the given type is a pointer type that is not a box
        /// pointer.
        /// </summary>
        public bool IsNonBoxPointer(IType Type)
        {
            var ptrTy = Type.AsPointerType();
            return ptrTy != null
                && !ptrTy.PointerKind.Equals(PointerKind.BoxPointer);
        }

        /// <summary>
        /// Tests if a boxing conversion should be used to convert the given
        /// source type to the given target type. This box may need to be
        /// accompanied by a dynamic cast.
        /// </summary>
        public bool UseExplicitBox(IType SourceType, IType TargetType)
        {
            return !SourceType.IsReferenceType
                && !SourceType.IsPointer
                && TargetType.IsReferenceType
                && !IsNonBoxPointer(TargetType)
                && !IsSpecialType(TargetType);
        }

        /// <summary>
        /// Tests if a single boxing conversion should be used to convert the
        /// given source type to the given target type.
        /// </summary>
        public bool UseBox(IType SourceType, IType TargetType)
        {
            return UseExplicitBox(SourceType, TargetType)
                && SourceType.Is(TargetType);
        }

        /// <summary>
        /// Checks if the given source type might be a candidate for an
        /// unboxing conversion.
        /// </summary>
        public bool MaybeUseUnbox(IType SourceType)
        {
            return SourceType.IsReferenceType
                && !IsSpecialType(SourceType)
                && !IsNonBoxPointer(SourceType);
        }

        /// <summary>
        /// Tests if a value of the given source type should be cast to a value
        /// of the given target type using an unbox-value operation, provided
        /// that an unboxing operation will be used.
        /// </summary>
        public bool UseUnboxValueAsUnbox(IType TargetType)
        {
            return !TargetType.IsReferenceType
                && !IsSpecialType(TargetType);
        }

        /// <summary>
        /// Tests if a reference-unboxing operation should be used to convert
        /// a value of the given source type to the given target type.
        /// </summary>
        public bool UseUnboxReference(IType SourceType, IType TargetType)
        {
            return MaybeUseUnbox(SourceType)
                && IsNonBoxPointer(TargetType);
        }

        /// <summary>
        /// Tests if a value-unboxing operation should be used to convert
        /// a value of the given source type to the given target type.
        /// </summary>
        public bool UseUnboxValue(IType SourceType, IType TargetType)
        {
            return MaybeUseUnbox(SourceType)
                && UseUnboxValueAsUnbox(TargetType);
        }

        private bool IsReferenceOrPointerType(IType Type)
        {
            if (IsSpecialType(Type))
                return false;

            return Type.Equals(PrimitiveTypes.Null)
                || Type.IsReferenceType
                || Type.IsPointer;
        }

        /// <summary>
        /// Tests if a value of the given source type can be cast dynamically to a value
        /// of the given target type.
        /// </summary>
        public bool UseDynamicCast(IType SourceType, IType TargetType)
        {
            return IsReferenceOrPointerType(SourceType)
                && IsReferenceOrPointerType(TargetType);
        }

        /// <summary>
        /// Tests if a value of the given source type can safely be cast to a value
        /// of the given target type using a reinterpret cast, provided that it
        /// can already be used in the context of a dynamic cast.
        /// </summary>
        public bool UseReinterpretAsDynamicCast(IType SourceType, IType TargetType)
        {
            return SourceType.Is(TargetType);
        }

        /// <summary>
        /// Tests if a value of the given source type can safely be cast to a value
        /// of the given target type using a reinterpret cast.
        /// </summary>
        public bool UseReinterpretCast(IType SourceType, IType TargetType)
        {
            return UseDynamicCast(SourceType, TargetType)
                && UseReinterpretAsDynamicCast(SourceType, TargetType);
        }
    }
}
