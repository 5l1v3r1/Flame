using System;
using System.Collections.Generic;

namespace Flame.Compiler
{
	/// <summary>
	/// Defines common functionality for compiler feedback providers:
	/// objects that create various compiler logs for individual compilation
	/// processes.
	/// </summary>
	public interface ICompilerFeedbackProvider
	{
		/// <summary>
		/// Creates a new compiler log for the compilation process with the given
		/// name.
		/// </summary>
		ICompilerLog CreateLog(string ProcessName);
	}

	/// <summary>
	/// Provides common functionality for compiler logs:
	/// objects that allow various modules in various stages of the compilation
	/// process to provide feedback to the user.
	/// </summary>
    public interface ICompilerLog : IDisposable
    {
		/// <summary>
		/// Gets the compiler log's options.
		/// </summary>
    	ICompilerOptions Options { const get; }

		/// <summary>
		/// Writes an error message to the compiler log.
		/// </summary>
        void LogError(LogEntry Entry);
		/// <summary>
		/// Writes a warning message to the compiler log.
		/// </summary>
        void LogWarning(LogEntry Entry);
		/// <summary>
		/// Writes an informative message to the compiler log.
		/// </summary>
        void LogMessage(LogEntry Entry);

		/// <summary>
		/// Writes an event message to the compiler log.
		/// </summary>
        void LogEvent(LogEntry Entry);
    }

    /// <summary>
    /// Describes an assembly that has access to a compiler log.
    /// </summary>
    public interface ILogAssembly : IAssembly
    {
        /// <summary>
	    /// Gets the assembly's compiler log.
	    /// </summary>
    	ICompilerLog Log { const get; }
    }

    public static class CompilerLogExtensions
    {
		/// <summary>
		/// Logs an error to the compiler log based on the given error message.
		/// </summary>
    	public static void LogError(this ICompilerLog Log, string Message)
        {
            Log.LogError(new LogEntry(Message));
        }

		/// <summary>
		/// Logs an event to the compiler log based on the given event name.
		/// </summary>
        public static void LogEvent(this ICompilerLog Log, string EventName)
        {
            Log.LogEvent(new LogEntry(EventName));
        }

		/// <summary>
		/// Logs an exception to the compiler log as an error.
		/// </summary>
		public static void LogException(this ICompilerLog Log, Exception ex)
		{
			var entry = new LogEntry("Exception", ex.ToString());
			Log.LogError(entry);
		}

		/// <summary>
		/// "Concatenates" two source locations.
		/// The resulting source location is a source location that contains every
		/// position the argument locations contain, as well as every position inbetween.
		/// The resulting location's source document is the right-hand argument's document
		/// if the left-hand's document is null. Otherwise, it is the left-hand argument's
		/// document.
		/// </summary>
        public static const SourceLocation Concat(this SourceLocation Location, SourceLocation Other)
        {
        	if (Location == null || Location.Position < 0) return Other;
        	else if (Other == null || Other.Position < 0) return Location;

        	int pos = Math.Min(Location.Position, Other.Position);
        	int len = Math.Max(Location.Position + Location.Length, Other.Position + Other.Length) - pos;
        	if (Location.Document == null)
        	{
        		return new SourceLocation(Other.Document, pos, len);
        	}
        	else
        	{
        		return new SourceLocation(Location.Document, pos, len);
        	}
        }
    }

	/// <summary>
	/// Describes a compiler log entry.
	/// </summary>
    public class LogEntry
    {
		/// <summary>
		/// Creates a new log entry from the given name.
		/// </summary>
        public const this(set string Name)
        {
        	this.Message = Name;
        }
		/// <summary>
		/// Creates a new log entry from the given name and message.
		/// </summary>
        public const this(set string Name, set string Message)
        {
        	this.Location = new SourceLocation(null);
        }
		/// <summary>
		/// Creates a new log entry from the given name and source location.
		/// </summary>
        public const this(set string Name, set SourceLocation Location)
        {
        	this.Message = Name;
        }
		/// <summary>
		/// Creates a new log entry from the given name, message and source
		/// location.
		/// </summary>
        public const this(set string Name, set string Message, set SourceLocation Location);

		/// <summary>
		/// Gets the log entry's name.
		/// </summary>
        public string Name { const get; private set; }
		/// <summary>
		/// Gets the log entry's message.
		/// </summary>
        public string Message { const get; private set; }
		/// <summary>
		/// Gets the log entry's source code location.
		/// </summary>
        public SourceLocation Location { const get; private set; }
    }

	/// <summary>
	/// Defines a region of text in a source document.
	/// </summary>
    public class SourceLocation
    {
		/// <summary>
		/// Creates a new source location from the given document.
		/// </summary>
        public const this(set ISourceDocument Document)
        {
            this.Position = -1;
            this.Length = 0;
        }
		/// <summary>
		/// Creates a new source location from the given document and position.
		/// </summary>
        public const this(set ISourceDocument Document, set int Position)
        {
        	this.Length = 0;
        }
		/// <summary>
		/// Creates a new source location from the given document, position and length.
		/// </summary>
        public const this(set ISourceDocument Document, set int Position, set int Length);

		/// <summary>
		/// Gets the source document this source location is associated with.
		/// </summary>
        public ISourceDocument Document { const get; private set; }
		/// <summary>
		/// Gets the position in the source document.
		/// </summary>
        public int Position { const get; private set; }
		/// <summary>
		/// Gets the source location's length.
		/// </summary>
        public int Length { const get; private set; }

		/// <summary>
		/// Finds out if this source location actually identifies a location,
		/// instead of only specifying a source document.
		/// </summary>
		public bool HasLocation { const get return Position > 0 && Length > 0; }

		/// <summary>
		/// Gets the source location's position in the source document's row-column grid.
		/// </summary>
        public SourceGridPosition GridPosition
        {
        	const get return Document.ToGridPosition(Position);
        }
    }
}
