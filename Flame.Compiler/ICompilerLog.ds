using System;
using System.Collections.Generic;

namespace Flame.Compiler
{
	/// <summary>
	/// Defines common functionality for compiler feedback providers:
	/// objects that create various compiler logs for individual compilation
	/// processes.
	/// </summary>
	public interface ICompilerFeedbackProvider
	{
		/// <summary>
		/// Creates a new compiler log for the compilation process with the given
		/// name.
		/// </summary>
		ICompilerLog CreateLog(string ProcessName);
	}

	/// <summary>
	/// Provides common functionality for compiler logs:
	/// objects that allow various modules in various stages of the compilation
	/// process to provide feedback to the user.
	/// </summary>
    public interface ICompilerLog : IDisposable
    {
		/// <summary>
		/// Gets the compiler log's options.
		/// </summary>
    	ICompilerOptions Options { const get; }

		/// <summary>
		/// Writes an error message to the compiler log.
		/// </summary>
        void LogError(LogEntry Entry);
		/// <summary>
		/// Writes a warning message to the compiler log.
		/// </summary>
        void LogWarning(LogEntry Entry);
		/// <summary>
		/// Writes an informative message to the compiler log.
		/// </summary>
        void LogMessage(LogEntry Entry);

		/// <summary>
		/// Writes an event message to the compiler log.
		/// </summary>
        void LogEvent(LogEntry Entry);
    }

    /// <summary>
    /// Describes an assembly that has access to a compiler log.
    /// </summary>
    public interface ILogAssembly : IAssembly
    {
        /// <summary>
	    /// Gets the assembly's compiler log.
	    /// </summary>
    	ICompilerLog Log { const get; }
    }
}
