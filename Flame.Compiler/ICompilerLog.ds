using System;
using System.Collections.Generic;

namespace Flame.Compiler
{
	public interface ICompilerFeedbackProvider
	{
		ICompilerLog CreateLog(string ProcessName);
	}

    public interface ICompilerLog : IDisposable
    {
    	ICompilerOptions Options { const get; }
    
        void LogError(LogEntry Entry);
        void LogWarning(LogEntry Entry);
        void LogMessage(LogEntry Entry);

        void LogEvent(LogEntry Entry);
    }
    
    /// <summary>
    /// Describes an assembly that has access to a compiler log.
    /// </summary>
    public interface ILogAssembly : IAssembly
    {
        /// <summary>
	    /// Gets the assembly's compiler log.
	    /// </summary>
    	ICompilerLog Log { const get; }
    }
    
    public static class CompilerLogExtensions
    {
    	public static void LogError(this ICompilerLog Log, string Message)
        {
            Log.LogError(new LogEntry(Message));
        }
        public static void LogEvent(this ICompilerLog Log, string EventName)
        {
            Log.LogEvent(new LogEntry(EventName));
        }
    }
    
    public class LogEntry
    {
        public const this(set string Name)
        {
        	this.Message = Name;
        }
        public const this(set string Name, set string Message)
        {
        	this.Location = new SourceLocation(null);
        }
        public const this(set string Name, set SourceLocation Location)
        {
        	this.Message = Name;
        }
        public const this(set string Name, set string Message, set SourceLocation Location);
		
        public string Name { const get; private set; }
        public string Message { const get; private set; }
        public SourceLocation Location { const get; private set; }
    }
    
    public class SourceLocation
    {
        public const this(set ISourceDocument Document)
        {
            this.Position = -1;
            this.Length = 0;
        }
        public const this(set ISourceDocument Document, set int Position)
        {
        	this.Length = 0;
        }
        public const this(set ISourceDocument Document, set int Position, set int Length);

        public ISourceDocument Document { const get; private set; }
        public int Position { const get; private set; }
        public int Length { const get; private set; }
        
        public SourceGridPosition GridPosition
        {
        	const get return Document.ToGridPosition(Position);
        }
        
        public const SourceLocation Concat(SourceLocation Other)
        {
        	int pos = Math.Min(Position, Other.Position);
        	int len = Math.Max(Position + Length, Other.Position + Length) - pos;
        	if (this.Document == null)
        	{
        		return new SourceLocation(Other.Document, pos, len);
        	}
        	else
        	{
        		return new SourceLocation(Document, pos, len);
        	}
        }
    }
}