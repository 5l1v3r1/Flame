using System;
using System.Collections.Generic;
using System.Text;
using Flame.Attributes;
using Flame.Primitives;

namespace Flame.Compiler
{
    /// <summary>
    /// Defines common functionality for members that expose their source locations.
    /// </summary>
	public interface ISourceMember : IMember
	{
        /// <summary>
        /// Gets the member's source location.
        /// </summary>
        SourceLocation Location { const get; }
	}

	/// <summary>
	/// An attribute that encodes a source location. This is a convenient
	/// alternative to implementing ISourceMember, but it is less flexible,
	/// because the source location cannot be computed on request when
	/// using this attribute.
	/// </summary>
	public class SourceLocationAttribute : IAttribute
	{
		static this()
		{
			attrType = new PrimitiveType<IAttribute>("SourceLocationAttribute", 0, null);
		}
		private static IType attrType;
		public static IType AccessAttributeType { const get return attrType; }

		public const this(set SourceLocation Location);

		/// <summary>
		/// Gets the actual source location stored in this
		/// attribute.
		/// </summary>
		public SourceLocation Location { const get; private set; }
		public IType AttributeType { const get return attrType; }

		public IBoundObject Value
		{
			const get
			{
				return new BoundPrimitive<IAttribute>(AttributeType, this);
			}
		}
	}

	public static class SourceMemberExtensions
	{
		/// <summary>
		/// Tries to get the given member's source location.
		/// </summary>
		public static const SourceLocation GetSourceLocation(this IMember Member)
		{
			if (Member == null)
			{
				return null;
			}
			else if (Member is ISourceMember)
			{
				return ((ISourceMember)Member).Location;
			}
			else
			{
				var attr = Member.GetAttribute(SourceLocationAttribute.AccessAttributeType);
				if (attr is SourceLocationAttribute)
					return ((SourceLocationAttribute)attr).Location;
				else
					return null;
			}
		}
	}
}
