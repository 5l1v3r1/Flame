using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler.Build
{
    /// <summary>
    /// Defines a base interface for member builders.
    /// </summary>
    public interface IMemberBuilder<T> : IMember
        where T : IMember
    {
        /// <summary>
        /// "Initializes" this instance. This is method is typically
        /// added after declaring and registering the member builder,
        /// and gives it the opportunity to perform eager evaluation of
        /// its signature template.
        /// </summary>
        void Initialize();

        /// <summary>
        /// "Builds" this member builder. This signifies the end of interaction
        /// with the member builder interaction, and allows the member builder
        /// to store all the data it has acquired.
        /// </summary>
        T Build();
    }

    /// <summary>
    /// Extension methods for member builders.
    /// </summary>
    public static class MemberBuilderExtensions
    {
        /// <summary>
        /// Assigns the given field builder the given initial value.
        /// Doing so is assumed to be a valid operation, and an assertion
        /// makes sure that this is indeed the case.
        /// </summary>
        /// <remarks>
        /// Note that the assertion is optimized away in release builds: only
        /// debug builds will verify that setting the field's value is legal.
        /// </remarks>
        public static void SetValue(this IFieldBuilder Field, IExpression Value)
        {
            bool success = Field.TrySetValue(Value);
            assert(success);
        }
    }
}
