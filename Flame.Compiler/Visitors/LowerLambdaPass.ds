using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// Lowers `LambdaExpression`s to closure classes.
    /// </summary>
    public static class LowerLambdaPass : IPass<BodyPassArgument, IStatement>
    {
        // Lower `[cap_type0 cap_var0, ...] ret_type(args) => stmt` to:
        //
        //       private class __lambda_closure$xxx
        //       {
        //            public const this(capture_list);
        //            private cap_type0 cap_var0;
        //            ...
        //            public lambda_invoke(args) stmt;
        //       }
        //
        // and lower the special case of `[] ret_type(args) => stmt` to
        //
        //       private static __lambda_invoke$xxx(args) stmt;

        public override IStatement Apply(BodyPassArgument Args)
        {
            var visitor = new LowerLambdaVisitor(Args);
            return visitor.Visit(Args.Body);
        }
    }

    public class LowerLambdaVisitor : NodeVisitorBase
    {
        public const this(set BodyPassArgument Args);

        public BodyPassArgument Args { const get; private set; }
        public IEnvironment Environment { const get return Args.Environment; }
        public IType DeclaringType { const get return Args.DeclaringType; }
        public IMethod DeclaringMethod { const get return Args.DeclaringMethod; }
        public IRandomAccessOptions TypeMetadata { const get return Args.Metadata.TypeMetadata; }

        private int nameCounter
        {
            const get return TypeMetadata.GetOption<int>("lambda-counter", 0);
            set TypeMetadata.SetOption<int>("lambda-counter", value);
        }

        public override const bool Matches(IExpression Value)
        {
            return Value is LambdaExpression;
        }
        public override const bool Matches(IStatement Value)
        {
            return false;
        }

        private string GenerateName(string Prefix)
        {
            int count = nameCounter;
            string result = Prefix + "$" + count;
            nameCounter = count + 1;
            return result;
        }

        private DescribedBodyMethod CopySignature(IMethod Signature, string Name,
            IType DeclType, bool IsStatic, bool IsAutonomous,
            IConverter<IType, IType> Converter)
        {
            var descMethod = new DescribedBodyMethod(Name, DeclType);

            if (IsAutonomous)
            {
                foreach (var item in GenericExtensions.CloneGenericParameters(
                                                DeclaringMethod.GenericParameters,
                                                descMethod))
                {
                    descMethod.AddGenericParameter(item);
                }
                Converter = new CompositeConverter<IType, IType, IType>(
                    Converter, new TypeParameterConverter(descMethod));
            }

            descMethod.ReturnType = Converter.Convert(Signature.ReturnType);
            descMethod.IsStatic = IsStatic;

            foreach (var item in Signature.Parameters)
            {
                var convParam = new DescribedParameter(item.Name, Converter.Convert(item.ParameterType));
                foreach (var attr in item.Attributes)
                {
                    convParam.AddAttribute(attr);
                }
                descMethod.AddParameter(convParam);
            }

            foreach (var item in Signature.Attributes)
                descMethod.AddAttribute(item);

            if (IsAutonomous)
                descMethod.AddAttribute(new AccessAttribute(AccessModifier.Private));
            else
                descMethod.AddAttribute(new AccessAttribute(AccessModifier.Public));

            return descMethod;
        }

        private DescribedBodyMethod CopySignature(IMethod Signature, string Name, IType DeclType, bool IsStatic)
        {
            var typeConv = new EmptyConverter<IType>();
            return CopySignature(Signature, Name, DeclType, IsStatic, true, typeConv);
        }

        private Tuple<MemberConverter, IStatement> ConvertGenerics(IGenericMember Owner, IStatement Body)
        {
            if (!Owner.IsGeneric)
            {
                var typeConv = new MemberConverter(new EmptyConverter<IType>(),
                                                   new EmptyConverter<IMethod>(),
                                                   new EmptyConverter<IField>());
                return Tuple.Create<MemberConverter, IStatement>(typeConv, Body);
            }
            else
            {
                var typeConv = MemberNodeVisitor.CreateMemberConverter(new TypeParameterConverter(Owner));
                var newBody = MemberNodeVisitor.ConvertMembers(typeConv, Body);
                return Tuple.Create<MemberConverter, IStatement>(typeConv, newBody);
            }
        }

        private IExpression LowerCapturelessLambda(LambdaExpression Lambda, IStatement LambdaBody)
        {
            // Special case where capture list is empty.

            string name = GenerateName("__lambda_invoke");
            var lambdaMethod = CopySignature(Lambda.Signature, name, DeclaringType, true);

            var convGenerics = ConvertGenerics(lambdaMethod, LambdaBody);
            lambdaMethod.Body = convGenerics.Item2;

            if (lambdaMethod.IsGeneric)
                return new GetMethodExpression(lambdaMethod.MakeGenericMethod(lambdaMethod.GenericParameters), null);
            else
                return new GetMethodExpression(lambdaMethod, null);
        }

        private IMethod GetGenericMethod(IType Type, IMethod Method)
        {
            if (!Type.IsGeneric)
            {
                return Method;
            }
            else
            {
                var inst = new GenericType(Type, DeclaringMethod.GenericParameters);
                return new GenericInstanceMethod(Method, inst);
            }
        }

        private IExpression LowerCapturingLambda(LambdaExpression Lambda, IStatement LambdaBody)
        {
            var nsBuilder = (INamespace)DeclaringType;
            string name = GenerateName("__lambda_closure");
            var closureType = new DescribedType(name, nsBuilder);
            closureType.AddAttribute(new AccessAttribute(AccessModifier.Private));
            if (Environment.RootType != null)
            {
                closureType.AddBaseType(Environment.RootType);
            }
            foreach (var item in GenericExtensions.CloneGenericParameters(
                                            DeclaringMethod.GenericParameters,
                                            closureType))
            {
                closureType.AddGenericParameter(item);
            }

            var convGenerics  = ConvertGenerics(closureType, LambdaBody);
            var typeConverter = convGenerics.Item1;

            var closureCtor = new DescribedBodyMethod("this", closureType, PrimitiveTypes.Void, false);
            closureCtor.IsConstructor = true;

            var closureThis = ThisReferenceVariable.Create(closureType).CreateGetExpression();

            var ctorBody = new List<IStatement>();
            if (Environment.RootType != null)
            {
                var rootCtor = Environment.RootType.GetConstructor(new IType[] { }, false);
                ctorBody.Add(new ExpressionStatement(
                    new InvocationExpression(rootCtor, closureThis, Enumerable.Empty<IExpression>())));
            }

            var capturedValues = new List<IExpression>();

            foreach (var item in Lambda.Header.CaptureList)
            {
                var captField = new DescribedField("captured_" + capturedValues.Count,
                                                   closureType,
                                                   typeConverter.Convert(item.Type),
                                                   false);
                captField.AddAttribute(new AccessAttribute(AccessModifier.Private));
                closureType.AddField(captField);

                var ctorParam = new DescribedParameter(captField.Name, captField.FieldType);
                var ctorArg   = new ArgumentVariable(ctorParam, capturedValues.Count);

                var genCaptField = ThisVariable.GetThisType(closureType).GetField(captField.Name, captField.IsStatic);
                var captVal = new FieldVariable(genCaptField, closureThis);

                closureCtor.AddParameter(ctorParam);
                capturedValues.Add(captVal.CreateGetExpression());
                ctorBody.Add(captVal.CreateSetStatement(ctorArg.CreateGetExpression()));
            }

            ctorBody.Add(new ReturnStatement());

            closureCtor.Body = new BlockStatement(ctorBody);
            closureType.AddMethod(closureCtor);

            var invokeMethod = CopySignature(Lambda.Signature, "lambda_invoke", closureType, false, false, typeConverter.TypeConverter);

            var substClosure = new SubstituteLambdaCapturedValuesClosure(capturedValues);
            var rewriter = new ExpressionRewriter(Lambda.IsCapturedValueExpression, substClosure.Substitute);
            invokeMethod.Body = rewriter.Visit(convGenerics.Item2);
            closureType.AddMethod(invokeMethod);

            var genericCtor = GetGenericMethod(closureType, closureCtor);
            var genericInv = GetGenericMethod(closureType, invokeMethod);

            return new GetMethodExpression(genericInv, new InvocationExpression(genericCtor, null, Lambda.Header.CaptureList));
        }

        private IExpression LowerLambda(LambdaExpression Lambda)
        {
            // Lower nested lambdas first
            var newBody = Visit(Lambda.Body);
            if (Lambda.Header.CaptureList.Count == 0)
                return LowerCapturelessLambda(Lambda, newBody);
            else
                return LowerCapturingLambda(Lambda, newBody);
        }

        protected override IExpression Transform(IExpression Value)
        {
            return LowerLambda((LambdaExpression)Value);
        }

        protected override IStatement Transform(IStatement Value)
        {
            return Value.Accept(this);
        }
    }

    public class SubstituteLambdaCapturedValuesClosure
    {
        public const this(set IReadOnlyList<IExpression> CapturedValues);

        public IReadOnlyList<IExpression> CapturedValues { const get; private set; }

        public IExpression Substitute(IExpression Value)
        {
            var captValExpr = (LambdaCapturedValueExpression)Value;
            return CapturedValues[captValExpr.Index];
        }
    }
}
