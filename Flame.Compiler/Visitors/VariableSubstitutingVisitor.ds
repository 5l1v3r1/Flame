using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Variables;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// Defines a base class for node visitors that substitute variable nodes.
    /// </summary>
    public abstract class VariableSubstitutingVisitorBase : NodeVisitorBase
    {
        public const this();

        /// <summary>
        /// Determines whether the given variable can be substituted or not.
        /// </summary>
        protected abstract bool CanSubstituteVariable(IVariable Variable);

        /// <summary>
        /// Substitutes the given variable.
        /// </summary>
        /// <pre>
        /// CanSubstituteVariable(Variable) == true
        /// </pre>
        protected abstract IVariable SubstituteVariable(IVariable Variable);

        public override virtual const bool Matches(IExpression Value)
        {
            return Value is IVariableNode;
        }
        public override virtual const bool Matches(IStatement Value)
        {
            return Value is IVariableNode;
        }

        /// <summary>
        /// Tries to substitute the given variable. If this cannot be done,
        /// null is returned.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Default substitution behavior is as follows: first, the visitor will try to
        /// chase late-bound variable indirection: if a late-bound variable
        /// is bound to another variable and said other variable can be substituted,
        /// the result of that substitution is returned. Otherwise,
        /// the variable's candidacy for substitution is considered. If
        /// `CanSubstituteVariable(Variable) == true`, `SubstituteVariable(Variable)`
        /// is returned.
        /// </para>
        ///
        /// <para>
        /// This has the following implications:
        /// <list>
        ///     <item>
        ///     A late-bound variable that is bound to another variable which
        ///     cannot be substituted, but is itself a candidate for substitution,
        ///     will indeed be substituted.
        ///     </item>
        ///     <item>
        ///     A manually-bound variable that is bound to a variable which can
        ///     be substituted, will be substituted, as manually-bound variables are
        ///     themselves late-bound variables.
        ///     </item>
        /// </list>
        /// </para>
        /// </remarks>
        protected virtual IVariable SubstituteVariableRecursivelyOrNull(IVariable Variable)
        {
            // First, try to use late-bound variable indirection.
            if (Variable is ILateBoundVariable)
            {
                var innerVal = ((ILateBoundVariable)Variable).BoundVariable;
                if (innerVal != null)
                {
                    // If we can substitute the late-bound variable's bound variable,
                    // we'll return that result.
                    var result = SubstituteVariableRecursivelyOrNull(innerVal);
                    if (result != null)
                        return result;
                }
            }
            // The given variable was either not a late-bound variable, or its
            // bound variable couldn't be substituted. Either way, we'll try
            // to replace the variable itself now.
            if (CanSubstituteVariable(Variable))
                return SubstituteVariable(Variable);
            else
                return null;
        }

        protected virtual IExpression TransformVariableAccess(IExpression Expression)
        {
            var node = (IVariableNode)Expression;
            var variable = node.GetVariable();

            var targetVariable = SubstituteVariableRecursivelyOrNull(variable);
            if (targetVariable != null)
            {
                if (node.Action == VariableNodeAction.AddressOf)
                {
                    return ((IUnmanagedVariable)targetVariable).CreateAddressOfExpression().Accept(this);
                }
                else if (node.Action == VariableNodeAction.Get)
                {
                    return targetVariable.CreateGetExpression().Accept(this);
                }
            }
            return Expression.Accept(this);
        }

        protected virtual IStatement TransformVariableAccess(IStatement Statement)
        {
            var node = (IVariableNode)Statement;
            var variable = node.GetVariable();

            var targetVariable = SubstituteVariableRecursivelyOrNull(variable);
            if (targetVariable != null)
            {
                if (node.Action == VariableNodeAction.Set)
                {
                    return targetVariable.CreateSetStatement(((ISetVariableNode)node).Value).Accept(this);
                }
                else if (node.Action == VariableNodeAction.Release)
                {
                    return targetVariable.CreateReleaseStatement().Accept(this);
                }
            }
            return Statement.Accept(this);
        }

        protected override virtual IExpression Transform(IExpression Expression)
        {
            return TransformVariableAccess(Expression);
        }

        protected override virtual IStatement Transform(IStatement Statement)
        {
            return TransformVariableAccess(Statement);
        }
    }

    public class VariableSubstitutingVisitor : VariableSubstitutingVisitorBase
    {
        public const this(set IReadOnlyDictionary<IVariable, IVariable> Mapping);

        public IReadOnlyDictionary<IVariable, IVariable> Mapping { const get; private set; }

        protected override bool CanSubstituteVariable(IVariable Variable)
        {
            return Mapping.ContainsKey(Variable);
        }
        protected override IVariable SubstituteVariable(IVariable Variable)
        {
            return Mapping[Variable];
        }
    }

    public class LocalTypeSubstitutingVisitor : VariableSubstitutingVisitorBase,
                                                ILambdaVisitor
    {
        public const this(set IConverter<IType, IType> TypeConverter)
        {
            this.substVariables = new Dictionary<IVariable, IVariable>();
            this.memberConverter = MemberNodeVisitor.CreateMemberConverter(TypeConverter);
        }

        public IConverter<IType, IType> TypeConverter { const get; private set; }

        private Dictionary<IVariable, IVariable> substVariables;
        private MemberConverter memberConverter;

        protected override bool CanSubstituteVariable(IVariable Variable)
        {
            return Variable is LocalVariableBase;
        }

        protected override IVariable SubstituteVariable(IVariable Variable)
        {
            if (substVariables.ContainsKey(Variable))
            {
                return substVariables[Variable];
            }
            else
            {
                assert(Variable is LocalVariableBase);
                var localVar = (LocalVariableBase)Variable;
                var result = localVar.ConvertType(memberConverter);
                substVariables[localVar] = result;
                return result;
            }
        }

        /// <summary>
        /// Visits the given expression, which logically belongs to the given method.
        /// </summary>
        public IExpression VisitBody(IExpression Value, IMethod OwningMember)
        {
            return Visit(Value); // We really don't care about who owns this expression.
                                 // All that matters here is that the local variables'
                                 // types get replaced.
        }

        /// <summary>
        /// Visits the given statement, which logically belongs to the given method.
        /// </summary>
        public IStatement VisitBody(IStatement Value, IMethod OwningMember)
        {
            return Visit(Value); // We really don't care about who owns this expression.
                                 // All that matters here is that the local variables'
                                 // types get replaced.
        }
    }
}
