using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Variables;
using Flame.Compiler.Emit;

namespace Flame.Compiler.Visitors
{
    public abstract class VariableSubstitutingVisitorBase : NodeVisitorBase
    {
        public const this();

        protected abstract bool CanSubstituteVariable(IVariable Variable);
        protected abstract IVariable SubstituteVariable(IVariable Variable);

        public override virtual const bool Matches(IExpression Value)
        {
            return Value is IVariableNode;
        }
        public override virtual const bool Matches(IStatement Value)
        {
            return Value is IVariableNode;
        }

        protected virtual T ApplyRecursively<T>(IVariable Variable, T(IVariable) Function)
        {
            if (Variable is LateBoundVariable)
            {
                var innerVal = ((LateBoundVariable)Variable).BoundVariable;
                if (innerVal != null)
                    return ApplyRecursively<T>(innerVal, Function);
            }
            return Function(Variable);
        }

        protected bool CanSubstituteVariableRecursively(IVariable Variable)
        {
            return ApplyRecursively<bool>(Variable, CanSubstituteVariable);
        }

        protected IVariable SubstituteVariableRecursively(IVariable Variable)
        {
            return ApplyRecursively<IVariable>(Variable, SubstituteVariable);
        }

        protected override virtual IExpression Transform(IExpression Expression)
        {
            var node = (IVariableNode)Expression;
            var variable = node.GetVariable();

            if (CanSubstituteVariableRecursively(variable))
            {
                var targetVariable = SubstituteVariableRecursively(variable);
                if (node.Action == VariableNodeAction.AddressOf)
                {
                    return ((IUnmanagedVariable)targetVariable).CreateAddressOfExpression();
                }
                else if (node.Action == VariableNodeAction.Get)
                {
                    return targetVariable.CreateGetExpression();
                }
            }
            return Expression.Accept(this);
        }

        protected override virtual IStatement Transform(IStatement Statement)
        {
            var node = (IVariableNode)Statement;
            var variable = node.GetVariable();

            if (CanSubstituteVariableRecursively(variable))
            {
                var targetVariable = SubstituteVariableRecursively(variable);
                if (node.Action == VariableNodeAction.Set)
                {
                    return targetVariable.CreateSetStatement(Visit(((ISetVariableNode)node).Value));
                }
                else if (node.Action == VariableNodeAction.Release)
                {
                    return targetVariable.CreateReleaseStatement();
                }
            }
            return Statement.Accept(this);
        }
    }

    public class VariableSubstitutingVisitor : VariableSubstitutingVisitorBase
    {
        public const this(set IReadOnlyDictionary<IVariable, IVariable> Mapping);

        public IReadOnlyDictionary<IVariable, IVariable> Mapping { const get; private set; }

        protected override bool CanSubstituteVariable(IVariable Variable)
        {
            return Mapping.ContainsKey(Variable);
        }
        protected override IVariable SubstituteVariable(IVariable Variable)
        {
            return Mapping[Variable];
        }
    }

    public class LocalTypeSubstitutingVisitor : VariableSubstitutingVisitorBase
    {
        public const this(set IConverter<IType, IType> TypeConverter)
        {
            this.substVariables = new Dictionary<IVariable, IVariable>();
        }

        public IConverter<IType, IType> TypeConverter { const get; private set; }

        private Dictionary<IVariable, IVariable> substVariables;

        protected override bool CanSubstituteVariable(IVariable Variable)
        {
            return Variable is LateBoundVariable && !(Variable is ManuallyBoundVariable);
        }
        protected override IVariable SubstituteVariable(IVariable Variable)
        {
            if (substVariables.ContainsKey(Variable))
            {
                return substVariables[Variable];
            }
            else
            {
                var lbVar = (LateBoundVariable)Variable;
                var varType = lbVar.Type;
                var convType = TypeConverter.Convert(varType);
                if (varType == convType)
                {
                    substVariables[Variable] = lbVar;
                }
                else
                {
                    var newLbVar = new LateBoundVariable(new RetypedVariableMember(lbVar.Member, convType));
                    substVariables[Variable] = newLbVar;
                    return newLbVar;
                }
            }
        }
    }
}
