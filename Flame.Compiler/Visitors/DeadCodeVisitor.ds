using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// Defines a flow visitor that trims dead code.
    /// </summary>
    public class DeadCodeVisitor : NodeVisitorBase, IFlowVisitor<bool, bool>
    {
        public const this()
        {
            this.CurrentFlow = true;
            this.deadCodeStmts = new List<SourceStatement>();
        }

        private List<SourceStatement> deadCodeStmts;

        public bool CurrentFlow { const get; private set; }
        public [SourceStatement] DeadCodeStatements { const get return deadCodeStmts; }

        /// <summary>
        /// Computes the "sum" of a flow state and a control flow delta.
        /// </summary>
        public const bool CreateCollapsedFlow(bool First, bool Second)
        {
            return CreateSequenceFlow(First, Second);
        }

        /// <summary>
        /// Computes the "difference" between two flow states, such that
        /// the "sum" of the first flow state and the result of this operation
        /// results in the second state.
        /// </summary>
        public const bool CreateDeltaFlow(bool First, bool Second)
        {
            return Second;
        }

        /// <summary>
        /// Creates a flow delta that represents the sequential execution of
        /// two flow deltas.
        /// </summary>
        public const bool CreateSequenceFlow(bool First, bool Second)
        {
            return First && Second;
        }

        /// <summary>
        /// Selects precisely one of two flow paths.
        /// </summary>
        public const bool CreateSelectFlow(bool First, bool Second)
        {
            return First || Second;
        }

        /// <summary>
        /// Creates a flow state that "loops", i.e. will be executed zero or more
        /// times.
        /// </summary>
        public const bool CreateLoopFlow(bool Flow)
        {
            return true;
        }

        public override const bool Matches(IExpression Value)
        {
            return Value is IFlowExpression;
        }
        public override const bool Matches(IStatement Value)
        {
            return !CurrentFlow || Value is IFlowStatement || TerminatesFlow(Value);
        }

        protected const bool TerminatesFlow(IStatement Statement)
        {
            return Statement is ReturnStatement || Statement is ThrowStatement ||
                   Statement is YieldBreakStatement || Statement is BreakStatement ||
                   Statement is ContinueStatement; // Break and continue should always
                                                   // occur within the context of a loop.
        }

        private IStatement EliminateDeadStatement(IStatement Statement)
        {
            if (Statement is SourceStatement)
            {
                deadCodeStmts.Add((SourceStatement)Statement);
            }
            else
            {
                Statement.Accept(this); // Try to find dead code source statements.
            }

            return new EmptyStatement();
        }

        protected override IExpression Transform(IExpression Expression)
        {
            return ((IFlowExpression)Expression).AcceptFlow<bool, bool>(this);
        }
        protected override IStatement Transform(IStatement Statement)
        {
            if (Statement is IFlowStatement)
            {
                bool oldFlow = CurrentFlow;
                var result = ((IFlowStatement)Statement).AcceptFlow<bool, bool>(this);
                if (!oldFlow && !CurrentFlow)
                {
                    return EliminateDeadStatement(result); // Don't restart the flow now.
                }
                return result;
            }
            else if (!CurrentFlow)
            {
                var result = Statement.Accept(this);
                if (!CurrentFlow)
                {
                    return EliminateDeadStatement(result); // Don't restart the flow now.
                }
                return result;
            }
            else // This must mean that this statement is a flow terminating statement.
            {
                CurrentFlow = false;
                return Statement;
            }
        }
    }
}
