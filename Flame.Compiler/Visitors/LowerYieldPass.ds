using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler.Build;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// A pass that reduces methods with yield return/yield break statements to
    /// enumerable/enumerator implementations.
    ///
    /// Requirements for this pass to run:
    ///  * The enclosing type of the method must be a namespace (implements INamespace).
    ///  * The output assembly's code generators must support labels.
    /// </summary>
    public abstract class LowerYieldPassBase : BodyPassBase
    {
        /// <summary>
        /// Implements the enumerable pattern for the given type based on the
        /// given implementation for the get enumerator method.
        /// </summary>
        public abstract void ImplementEnumerable(IEnvironment Environment,
            DescribedType TargetType, IType ElementType, IStatement GetEnumeratorBody);

        /// <summary>
		/// Implements the enumerator pattern for the given type based on the
        /// provided implementations for the move next method and current item property.
		/// </summary>
        public abstract void ImplementEnumerator(IEnvironment Environment,
            DescribedType TargetType, IType ElementType, IStatement MoveNextBody,
            IStatement GetCurrentBody);

        private DescribedType CreateNestedType(INamespace DeclaringNamespace,
                                               IMethod Method)
        {
            var descNestedType = new DescribedType("__" + Method.Name + "_enumerator", DeclaringNamespace);
            descNestedType.AddAttribute(new AccessAttribute(AccessModifier.Private));
            descNestedType.AddAttribute(PrimitiveAttributes.HiddenAttribute);
            foreach (var item in GenericExtensions.CloneGenericParameters(
                                            Method.GenericParameters,
                                            descNestedType))
            {
                descNestedType.AddGenericParameter(item);
            }

            return descNestedType;
        }

        /// <summary>
        /// Applies this pass to the given method, method body, type builder and environment.
        /// </summary>
        public override IStatement Apply(IEnvironment Environment,
                                         IMethod Method, IStatement Body)
        {
            if (!Method.ReturnType.IsEnumerableType || !YieldNodeFindingVisitor.UsesYield(Body))
            {
                return Body;
            }

            var nsBuilder = (INamespace)Method.DeclaringType;

            var nestedType = CreateNestedType(nsBuilder, Method);

            MemberConverter typeConv;
            IStatement oldMoveBody;
            if (!nestedType.IsGeneric)
            {
                typeConv = new MemberConverter(new EmptyConverter<IType>(),
                                               new EmptyConverter<IMethod>(),
                                               new EmptyConverter<IField>());
                oldMoveBody = Body;
            }
            else
            {
                typeConv = MemberNodeVisitor.CreateMemberConverter(new TypeParameterConverter(nestedType));
                oldMoveBody = MemberNodeVisitor.ConvertMembers(typeConv, Body);
            }

            var elemType = typeConv.Convert(Method.ReturnType.GetEnumerableElementType());

            var enumerableType = Environment.EnumerableType;
            if (enumerableType != null)
                nestedType.AddBaseType(enumerableType.MakeGenericType(new IType[] { elemType }));

            var enumeratorType = Environment.EnumeratorType;
            if (enumeratorType != null)
                nestedType.AddBaseType(enumeratorType.MakeGenericType(new IType[] { elemType }));

            var stateField = new DescribedField("enumerator_state", nestedType, PrimitiveTypes.Int32, false);
            stateField.AddAttribute(new AccessAttribute(AccessModifier.Private));
            stateField.AddAttribute(PrimitiveAttributes.HiddenAttribute);
            nestedType.AddField(stateField);

            var valueField = new DescribedField("enumerator_value", nestedType, elemType, false);
            valueField.AddAttribute(new AccessAttribute(AccessModifier.Private));
            valueField.AddAttribute(PrimitiveAttributes.HiddenAttribute);
            nestedType.AddField(valueField);

            var enumeratorThisVariable = ThisReferenceVariable.Create(nestedType);
            var stateVar = new FieldVariable(enumeratorThisVariable.Type.GetField(stateField.Name, stateField.IsStatic),
                                             enumeratorThisVariable.CreateGetExpression());
            var valueVar = new FieldVariable(enumeratorThisVariable.Type.GetField(valueField.Name, valueField.IsStatic),
                                             enumeratorThisVariable.CreateGetExpression());

            var currentBody = new ReturnStatement(valueVar.CreateGetExpression());

            var visitor = new LowerYieldNodeVisitor(nestedType, enumeratorThisVariable,
                                                    stateVar, valueVar, typeConv);
            var moveBody = visitor.CreateBody(visitor.Visit(oldMoveBody));

            ImplementEnumerator(Environment, nestedType, elemType, moveBody, currentBody);
            ImplementEnumerable(Environment, nestedType, elemType,
                new ReturnStatement(enumeratorThisVariable.CreateGetExpression()));

            var enumCtor = new DescribedBodyMethod("this", nestedType, PrimitiveTypes.Void, false);
            enumCtor.AddAttribute(new AccessAttribute(AccessModifier.Public));
            enumCtor.IsConstructor = true;

            var initExprs = new List<IExpression>();
            var initStatements = new List<IStatement>();

            if (Environment.RootType != null)
            {
                initStatements.Add(new ExpressionStatement(new InvocationExpression(
                    Environment.RootType.GetConstructor(new IType[] { }, false),
                    enumeratorThisVariable.CreateGetExpression(),
                    new IExpression[] { })));
            }

            int argCount = 0;
            foreach (var item in visitor.CapturedArguments)
            {
                var descParam = new DescribedParameter("arg" + argCount, item.Value.Type);
                enumCtor.AddParameter(descParam);
                initStatements.Add(item.Value.CreateSetStatement(new ArgumentVariable(descParam, argCount).CreateGetExpression()));
                initExprs.Add(item.Key.CreateGetExpression());
                argCount++;
            }
            initStatements.Add(new ReturnStatement(null));

            enumCtor.Body = new BlockStatement(initStatements);
            nestedType.AddMethod(enumCtor);

            if (nestedType.IsGeneric)
            {
                var inst = new GenericType(nestedType, Method.GenericParameters);
                var genCtor = new GenericInstanceMethod(enumCtor, inst);
                return new ReturnStatement(new NewObjectExpression(genCtor, initExprs));
            }
            else
            {
                return new ReturnStatement(new NewObjectExpression(enumCtor, initExprs));
            }
        }
    }

    public class YieldNodeFindingVisitor : AnyPredicateVisitorBase
    {
        public const this();

        /// <summary>
        /// Finds out whether the given statement uses yield break or yield return.
        /// </summary>
        public static const bool UsesYield(IStatement Statement)
        {
            var visitor = new YieldNodeFindingVisitor();
            visitor.Visit(Statement);
            return visitor.IsSatisfied;
        }

        /// <summary>
        /// Finds out whether the given node satisfies the predicate.
        /// </summary>
        protected override const bool Satisfies(INode Node)
        {
            return Node is YieldBreakStatement || Node is YieldReturnStatement;
        }
    }

    public class LowerYieldNodeVisitor : NodeVisitorBase
    {
        public const this(DescribedType Type, set IVariable EnumeratorThisVariable,
                          set IVariable StateVariable, set IVariable ValueVariable,
                          MemberConverter Converter)
        {
            this.variableVisitor = new VariableCapturingVisitor(Type, Converter);
            this.states = new List<LateBoundLabel>();
        }

        public DescribedType Type { const get { return variableVisitor.Type; } }
        public IVariable EnumeratorThisVariable { const get; private set; }
        public IVariable StateVariable { const get; private set; }
        public IVariable ValueVariable { const get; private set; }
        public IReadOnlyDictionary<IVariable, IVariable> CapturedArguments { const get return variableVisitor.CapturedArguments; }

        private VariableCapturingVisitor variableVisitor;
        private List<LateBoundLabel> states;

        public const IStatement CreatePrologue()
        {
            var results = new List<IStatement>();

            var getStateExpr = StateVariable.CreateGetExpression();

            // State values:
            //  * -1: iteration is over
            //  *  0: initial state
            //  *  n where n > 0: any other state

            // if (state == -1) return false; <-- iteration is over
            results.Add(new IfElseStatement(
                new EqualityExpression(getStateExpr, new Int32Expression(-1)),
                new ReturnStatement(new BooleanExpression(false))));

            // Otherwise, branch to an appropriate location
            for (int i = 0; i < states.Count; i++)
            {
                var stateExpr = new Int32Expression(i + 1);
                results.Add(states[i].CreateBranchStatement(
                    new EqualityExpression(getStateExpr, stateExpr)));
            }

            // State zero is essentially the fall-through value.
            // This is convenient, because int32 fields are zero-initialized.

            return new BlockStatement(results);
        }

        public const IStatement CreateBody(IStatement Body)
        {
            var mOneExpr = new Int32Expression(-1);

            return new BlockStatement(new IStatement[]
            {
                CreatePrologue(),
                Body,
                StateVariable.CreateSetStatement(mOneExpr), // This amounts to a yield break
                new ReturnStatement(new BooleanExpression(false))
            });
        }

        public override const bool Matches(IExpression Value)
        {
            return variableVisitor.Matches(Value);
        }
        public override const bool Matches(IStatement Value)
        {
            return Value is YieldBreakStatement || Value is YieldReturnStatement ||
                   Value is ForeachStatement || variableVisitor.Matches(Value);
        }

        protected override IExpression Transform(IExpression Expression)
        {
            return variableVisitor.Visit(Expression);
        }

        protected override IStatement Transform(IStatement Statement)
        {
            if (Statement is ForeachStatement)
            {
                return Visit(((ForeachStatement)Statement).AcceptCollections(this).Lower());
            }
            else if (Statement is YieldBreakStatement)
            {
                var mOneExpr = new Int32Expression(-1); // Makes sure we don't iterate any further beyond this point.
                return new BlockStatement(new IStatement[]
                {
                    StateVariable.CreateSetStatement(mOneExpr),
                    new ReturnStatement(new BooleanExpression(false)) // Nec plus ulta.
                });
            }
            else if (Statement is YieldReturnStatement)
            {
                var newLabel = new LateBoundLabel();
                states.Add(newLabel);

                var yieldVal = variableVisitor.Visit(((YieldReturnStatement)Statement).Value);

                var stateExpr = new Int32Expression(states.Count);
                return new BlockStatement(new IStatement[]
                {
                    StateVariable.CreateSetStatement(stateExpr), // Update the current state
                    ValueVariable.CreateSetStatement(yieldVal), // Update the return value
                    new ReturnStatement(new BooleanExpression(true)), // More where this came from.
                    newLabel.CreateMarkStatement() // Mark the resumption point
                });
            }
            else
            {
                return variableVisitor.Visit(Statement);
            }
        }
    }
}
