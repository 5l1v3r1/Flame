using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler.Build;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Visitors
{
    public class VariableCapturingVisitor : VariableSubstitutingVisitorBase
    {
        public const this(set string FieldPrefix, set DescribedType Type, set MemberConverter Converter)
        {
            this.captArgs = new Dictionary<IVariable, IVariable>();
            this.capturedVariables = new Dictionary<IVariable, IVariable>();
            this.thisVariable = ThisReferenceVariable.Create(Type);
        }
        public const this(set DescribedType Type, set MemberConverter Converter)
        {
            this.FieldPrefix = "captured";
            this.captArgs = new Dictionary<IVariable, IVariable>();
            this.capturedVariables = new Dictionary<IVariable, IVariable>();
            this.thisVariable = ThisReferenceVariable.Create(Type);
        }

        public string FieldPrefix { const get; private set; }
        public DescribedType Type { const get; private set; }
        public MemberConverter Converter { const get; private set; }

        public IReadOnlyDictionary<IVariable, IVariable> CapturedArguments { const get return captArgs; }

        private Dictionary<IVariable, IVariable> captArgs;
        private Dictionary<IVariable, IVariable> capturedVariables;
        private IVariable thisVariable;

        private const string CreateFieldName(string Name)
        {
            string prefix;
            if (string.IsNullOrWhiteSpace(Name))
            {
                prefix = FieldPrefix + "_temp";
            }
            else
            {
                prefix = (FieldPrefix + "_" + Name).TrimEnd(new char[] { '_' });
            }
            string result = prefix;

            for (int i = 1; Type.GetField(new SimpleName(result), false) != null; i++)
            {
                result = prefix + i;
            }

            return result;
        }

        private IField GetGenericField(IField Field)
        {
            if (Type.IsGeneric)
            {
                var genThis = new GenericType(Type, Type.GenericParameters);
                return new GenericInstanceField(Field, genThis);
            }
            else
            {
                return Field;
            }
        }

        private IVariable CaptureVariable(IVariable Variable, string Name, bool IsArgument)
        {
            var captField = new DescribedField(CreateFieldName(Name), Type,
                                               Converter.Convert(Variable.Type),
                                               false);
            captField.AddAttribute(new AccessAttribute(AccessModifier.Private));
            captField.AddAttribute(PrimitiveAttributes.HiddenAttribute);

            Type.AddField(captField);
            var captFieldVar = new FieldVariable(GetGenericField(captField),
                                                 thisVariable.CreateGetExpression());

            if (IsArgument)
            {
                captArgs[Variable] = captFieldVar;
            }

            capturedVariables[Variable] = captFieldVar;

            return captFieldVar;
        }

        public IVariable GetCapturedVariable(IVariable Variable, string Name, bool IsArgument)
        {
            if (capturedVariables.ContainsKey(Variable))
            {
                return capturedVariables[Variable];
            }

            return CaptureVariable(Variable, Name, IsArgument);
        }

        protected override IVariable SubstituteVariableRecursivelyOrNull(IVariable Variable)
        {
            if (Variable is ILateBoundVariable)
            {
                var innerVal = ((ILateBoundVariable)Variable).BoundVariable;
                if (innerVal != null)
                {
                    if (capturedVariables.ContainsKey(Variable)) // Variables pushed down
                    {
                        capturedVariables[innerVal] = capturedVariables[Variable];
                    }

                    var result = SubstituteVariableRecursivelyOrNull(innerVal);
                    if (result != null)
                    {
                        if (!capturedVariables.ContainsKey(result)) // Variables bubble up
                        {
                            capturedVariables[Variable] = result;
                        }
                        return result;
                    }
                }
            }

            // The given variable was either not a late-bound variable, or its
            // bound variable couldn't be substituted. Either way, we'll try
            // to replace the variable itself now.
            if (CanSubstituteVariable(Variable))
                return SubstituteVariable(Variable);
            else
                return null;
        }

        public override virtual const bool Matches(IStatement Value)
        {
            return Value is IVariableNode && ((IVariableNode)Value).Action != VariableNodeAction.Release;
        }

        protected override bool CanSubstituteVariable(IVariable Variable)
        {
            return Variable is ILateBoundVariable || Variable is LocalVariableBase ||
                   Variable is ArgumentVariable || Variable is ThisVariable ||
                   capturedVariables.ContainsKey(Variable);
        }
        protected override IVariable SubstituteVariable(IVariable Variable)
        {
            if (capturedVariables.ContainsKey(Variable))
            {
                return capturedVariables[Variable];
            }

            if (Variable is ILateBoundVariable)
            {
                return CaptureVariable(Variable, "", false);
            }
            else if (Variable is LocalVariableBase)
            {
                return CaptureVariable(Variable, "local_" + ((LocalVariableBase)Variable).Member.Name, false);
            }
            else if (Variable is ArgumentVariable)
            {
                return CaptureVariable(Variable, "arg_" + ((ArgumentVariable)Variable).Parameter.Name, true);
            }
            else if (Variable is ThisVariable)
            {
                if (thisVariable.Type.Equals(Variable.Type))
                    return thisVariable;
                else
                    return CaptureVariable(Variable, "this", true);
            }
            else
            {
                return null; // Whaaaaaat?
            }
        }
    }
}
