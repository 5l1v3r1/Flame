using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// A node visitor that visits all error and warning nodes, and logs their
    /// contents.
    /// Said nodes are optionally simplified to their inner nodes.
    /// </summary>
    public class LoggingVisitor : ContextlessVisitorBase
    {
        /// <summary>
        /// Creates a new logging visitor from the given compiler log and a
        /// flag that tells if error and warning nodes are to be
        /// simplified to their inner nodes, and another that determines whether
        /// source nodes are to be reduced to their contents, as well.
        /// </summary>
        public const this(set ICompilerLog Log, set bool StripMessages,
                          set bool StripSource);

        /// <summary>
        /// Gets the compiler log that is used to write errors and warnings to.
        /// </summary>
        public ICompilerLog Log { const get; private set; }

        /// <summary>
        /// Gets a boolean value that tells if error and warning nodes are to be
        /// stripped away, replaced by their inner nodes.
        /// </summary>
        public bool StripMessages { const get; private set; }

        /// <summary>
        /// Gets a boolean value that tells if source nodes are to be removed,
        /// and replaced by their inner nodes.
        /// </summary>
        public bool StripSource { const get; private set; }

        /// <summary>
        /// The logging visitor's current location, obtained from source statements
        /// and expressions.
        /// </summary>
        private SourceLocation currentLocation;

        public override const bool Matches(IExpression Value)
        {
            return Value is ErrorExpression || Value is WarningExpression ||
                   Value is SourceExpression;
        }

        public override const bool Matches(IStatement Value)
        {
            return Value is SourceStatement;
        }

        private IExpression Transform(LogEntryExpression Expression)
        {
            var message = Expression.Message;

            if (Expression is ErrorExpression)
                Log.LogError(message.WithLocation(currentLocation));
            else
                Log.LogWarning(message.WithLocation(currentLocation));

            if (StripMessages)
                return Visit(Expression.Value);
            else
                return Expression.Accept(this);
        }

        private IExpression Transform(SourceExpression Expression)
        {
            var oldLoc = currentLocation;
            if (Expression.Location != null)
            {
                currentLocation = Expression.Location;
            }

            IExpression result;
            if (!StripSource)
                result = Expression.Accept(this);
            else
                result = Visit(Expression.Value);

            currentLocation = oldLoc;
            return result;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            if (Expression is SourceExpression)
                return Transform((SourceExpression)Expression);
            else
                return Transform((LogEntryExpression)Expression);
        }

        protected override IStatement Transform(IStatement Statement)
        {
            var srcStmt = (SourceStatement)Statement;
            var oldLoc = currentLocation;
            if (srcStmt.Location != null)
            {
                currentLocation = srcStmt.Location;
            }

            IStatement result;
            if (!StripSource)
                result = srcStmt.Accept(this);
            else
                result = Visit(srcStmt.Value);

            currentLocation = oldLoc;
            return result;
        }
    }
}
