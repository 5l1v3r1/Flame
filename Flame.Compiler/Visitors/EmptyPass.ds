
namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// Defines a generic empty pass, which merely returns its input argument.
    /// </summary>
    public class EmptyPass<T> : IPass<T, T>
    {
        /// <summary>
        /// Applies this pass to the given value.
        /// </summary>
        public const T Apply(T Value)
        {
            return Value;
        }
    }

    /// <summary>
    /// Defines an empty visitor, which does not in any way modify its input.
    /// </summary>
    public static class EmptyVisitor : NodeVisitorBase
    {
        public override const bool Matches(IExpression Value)
        {
            return true; // Match it, then ignore it.
        }
        public override const bool Matches(IStatement Value)
        {
            return true; // Match it, then ignore it.
        }
        protected override IExpression Transform(IExpression Expression)
        {
            return Expression; // Just ignore.
        }
        protected override IStatement Transform(IStatement Statement)
        {
            return Statement; // Just ignore.
        }
    }

    /// <summary>
    /// Defines a generic constant pass, returns a constant value.
    /// </summary>
    public class ConstantPass<TInput, TOutput> : IPass<TInput, TOutput>
    {
        /// <summary>
        /// Creates a constant pass from the given constant result.
        /// </summary>
        public this(TOutput Result)
        {
            this.Result = Result;
        }

        /// <summary>
        /// Gets the constant value that is returned by this pass.
        /// </summary>
        public TOutput Result { get; private set; }

        /// <summary>
        /// Applies this pass to the given value.
        /// </summary>
        public const TOutput Apply(TInput Value)
        {
            return Result;
        }
    }
}
