using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// A node visitor that takes source location nodes into account when
    /// visiting a node tree.
    /// </summary>
    public abstract class LocationVisitorBase : NodeVisitorBase
    {
        /// <summary>
        /// Creates a new location visitor base.
        /// </summary>
        public const this();

        /// <summary>
        /// Gets the location visitor's current location, obtained from source statements
        /// and expressions.
        /// </summary>
        public SourceLocation CurrentLocation { const get; private set; }

        protected abstract const bool MatchesCore(IExpression Value);
        protected abstract const bool MatchesCore(IStatement Value);
        protected abstract IExpression TransformCore(IExpression Value);
        protected abstract IStatement TransformCore(IStatement Value);

        public override const bool Matches(IExpression Value)
        {
            return Value is SourceExpression || MatchesCore(Value);
        }

        public override const bool Matches(IStatement Value)
        {
            return Value is SourceStatement || MatchesCore(Value);
        }

        private IExpression Transform(SourceExpression Expression)
        {
            var oldLoc = CurrentLocation;
            if (Expression.Location != null)
            {
                CurrentLocation = Expression.Location;
            }

            IExpression result;
            if (MatchesCore(Expression))
            {
                result = TransformCore(Expression);
            }
            else
            {
                result = Expression.Accept(this);
            }

            CurrentLocation = oldLoc;
            return result;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            if (Expression is SourceExpression)
                return Transform((SourceExpression)Expression);
            else
                return TransformCore(Expression);
        }

        private IStatement Transform(SourceStatement Statement)
        {
            var oldLoc = CurrentLocation;
            if (Statement.Location != null)
            {
                CurrentLocation = Statement.Location;
            }

            IStatement result;
            if (MatchesCore(Statement))
            {
                result = TransformCore(Statement);
            }
            else
            {
                result = Statement.Accept(this);
            }

            CurrentLocation = oldLoc;
            return result;
        }

        protected override IStatement Transform(IStatement Statement)
        {
            if (Statement is SourceStatement)
                return Transform((SourceStatement)Statement);
            else
                return TransformCore(Statement);
        }
    }

    /// <summary>
    /// A location visitor that finds the topmost source locations,
    /// and stores them for later retrieval.
    /// </summary>
    public class LocationFinder : LocationVisitorBase
    {
        public this()
        {
            this.locs = new List<SourceLocation>();
        }

        private List<SourceLocation> locs;

        /// <summary>
        /// Gets the list of all topmost source locations.
        /// </summary>
        public IReadOnlyList<SourceLocation> Locations { get { return locs; } }

        /// <summary>
        /// Gets the concatenation of all topmost source locations.
        /// </summary>
        public SourceLocation ConcatLocation
        {
            get
            {
                SourceLocation result = null;
                foreach (var item in locs)
                    result = result.Concat(item);
                return result;
            }
        }

        protected override const bool MatchesCore(IExpression Value)
        {
            return CurrentLocation != null;
        }

        protected override const bool MatchesCore(IStatement Value)
        {
            return CurrentLocation != null;
        }

        protected override IExpression TransformCore(IExpression Value)
        {
            assert(CurrentLocation != null);
            locs.Add(CurrentLocation);
            return Value;
        }

        protected override IStatement TransformCore(IStatement Value)
        {
            assert(CurrentLocation != null);
            locs.Add(CurrentLocation);
            return Value;
        }
    }
}
