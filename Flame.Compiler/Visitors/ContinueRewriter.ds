using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// A node visitor that replaces all `continue` statements to a specific block
    /// with a given statement.
    /// </summary>
    public class ContinueRewriter : NodeVisitorBase
    {
        /// <summary>
        /// Creates a continue rewriter that replaces all `continue` statements to the given block
        /// with the given statement.
        /// </summary>
        public const this(set UniqueTag Target, set IStatement RewrittenContinue);

        /// <summary>
        /// Gets the block target of all `continue` statements that are to be rewritten.
        /// </summary>
        public UniqueTag Target { const get; private set; }

        /// <summary>
        /// Gets the statement every `continue` statement to the block target
        /// is replaced with.
        /// </summary>
        public IStatement RewrittenContinue { const get; private set; }

        /// <summary>
        /// Gets a boolean value that tells whether at least one `continue` statement
        /// has been rewritten or not.
        /// </summary>
        public bool HasRewritten { const get; private set; }

        /// <summary>
        /// Rewrites the given statement by replacing every `continue` to a given specific block
        /// by another statement.
        /// </summary>
        public static IStatement RewriteContinue(UniqueTag Target, IStatement RewrittenContinue,
                                                 IStatement Statement)
        {
            var rewriter = new ContinueRewriter(Target, RewrittenContinue);
            return rewriter.Visit(Statement);
        }

        /// <summary>
        /// Rewrites the statement by replacing `continue` statements
        /// with `break` statements to a tagged statement, which has the
        /// given tag. If at least one statement has to be rewritten, or the
        /// given boolean is true, then the result is wrapped in a tagged
        /// statement for the given tag.
        /// </summary>
        public static IStatement RewriteContinueToBreak(
            UniqueTag OldTag, IStatement Statement,
            UniqueTag NewTag, bool ForceEnclose)
        {
            var rewriter = new ContinueRewriter(OldTag, new BreakStatement(NewTag));
            var rewritten = rewriter.Visit(Statement);

            if (ForceEnclose || rewriter.HasRewritten)
            {
                return new TaggedStatement(NewTag, rewritten);
            }
            else
            {
                return rewritten;
            }
        }

        public override const bool Matches(IExpression Value)
        {
            return false;
        }

        public override const bool Matches(IStatement Value)
        {
            if (Value is ContinueStatement)
            {
                var contStmt = (ContinueStatement)Value;
                return contStmt.Target == Target;
            }
            else return false;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            return Expression;
        }

        protected override IStatement Transform(IStatement Statement)
        {
            HasRewritten = true;
            return RewrittenContinue;
        }
    }
}
