using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// A statement pass that converts tree-based IR nodes into a CFG-based
    /// representation.
    /// </summary>
    public static class ConstructFlowGraphPass : IPass<IStatement, IStatement>
    {
        /// <summary>
        /// The pass name for the control-flow graph construction pass.
        /// </summary>
        public const string ConstructFlowGraphPassName = "construct-cfg";

        public IStatement Apply(IStatement Value)
        {
            var visitor = new BlockBuildingVisitor();
            var epTag = visitor.Builder.CurrentBlockTag;
            visitor.CreateCurrentBlock(Value, UnreachableFlow);
            return new FlowGraphStatement(visitor.Builder.ToFlowGraph(epTag));
        }
    }

    /// <summary>
    /// A base class for flow graph visitors.
    /// </summary>
    public abstract class FlowGraphVisitorBase : StatementVisitorBase
    {
        /// <summary>
        /// Visits the given flow graph.
        /// </summary>
        protected abstract FlowGraph Visit(FlowGraph Graph);

        public override const bool Matches(IStatement Value)
        {
            return Value is FlowGraphStatement;
        }

        protected override IStatement Transform(IStatement Statement)
        {
            var stmt = (FlowGraphStatement)Statement;
            var newGraph = new FlowGraphStatement(Visit(stmt.Graph));
            return newGraph.Accept(this);
        }
    }

    /// <summary>
    /// A visitor class that converts control-flow statements and expressions
    /// into basic blocks.
    /// </summary>
    public class BlockBuildingVisitor : NodeVisitorBase, IBasicBlockVisitor
    {
        /// <summary>
        /// Creates a basic block constructing visitor from the given block
        /// builder.
        /// </summary>
        public const this(set BlockBuilder Builder)
        {
            this.unspilledStatements = new List<MovableStatement>();
            this.unspilledExpressions = new List<Tuple<SpillableExpression, InsertStatement>>();
        }

        /// <summary>
        /// Creates a basic block constructing visitor.
        /// </summary>
        public const this()
        {
            this.Builder = new BlockBuilder(new UniqueTag("entry_point"));

            this.unspilledStatements = new List<MovableStatement>();
            this.unspilledExpressions = new List<Tuple<SpillableExpression, InsertStatement>>();
        }

        /// <summary>
        /// Gets this visitor's basic block builder.
        /// </summary>
        public BlockBuilder Builder { const get; private set; }

        // A list of unspilled movable statements.
        // These are predecessor sibling statements
        // from the perspective of the node that is
        // currently being visited.
        private List<MovableStatement> unspilledStatements;

        // A list of unspilled expressions, along with
        // their spill target statements.
        // These are predecessor sibling expressions
        // from the perspective of the the that is
        // currently being visited.
        private List<Tuple<SpillableExpression, InsertStatement>> unspilledExpressions;

        /// <summary>
        /// "Spills" all unspilled statements and expressions into the current
        /// basic block.
        /// </summary>
        private void Spill()
        {
            var spillTarget = new InsertStatement();

            foreach (var item in unspilledExpressions)
            {
                item.Item1.Spill(item.Item2);
            }
            unspilledExpressions.Clear();
            foreach (var item in unspilledStatements)
            {
                item.Move(spillTarget);
            }
            unspilledStatements.Clear();

            Builder.CreateCurrentBlock(
                spillTarget.Unwrap(),
                new JumpFlow(new BlockBranch(Builder.NextBlockTag)));
            Builder.Next();
        }

        /// <summary>
        /// Creates the current block from the given statement.
        /// This statement may contain control-flow nodes: they will
        /// be lowered to basic blocks. The created block will jump
        /// to the next block when it is done.
        /// </summary>
        public void CreateCurrentBlock(IStatement Statement)
        {
            var visited = Visit(Statement);

            Builder.CreateCurrentBlock(
                visited,
                new JumpFlow(new BlockBranch(Builder.NextBlockTag)));
        }

        /// <summary>
        /// Creates the current block from the given statement and final flow.
        /// This statement may contain control-flow nodes: they will
        /// be lowered to basic blocks.
        /// </summary>
        public void CreateCurrentBlock(IStatement Statement, BlockFlow Flow)
        {
            CreateCurrentBlock(new List<SSAVariable>(), Statement, Flow);
        }

        /// <summary>
        /// Creates the current block from the given statement and final flow.
        /// This statement may contain control-flow nodes: they will
        /// be lowered to basic blocks.
        /// </summary>
        public void CreateCurrentBlock(
            IReadOnlyList<SSAVariable> Parameters, IStatement Statement,
            BlockFlow Flow)
        {
            if (Parameters.Count > 0)
            {
                // If this block has a non-empty parameter list, then we'll
                // emit a empty-bodied block that captures the parameter list first.
                // The point of this is to keep CFG construction both safe and
                // simple: invididual nodes are always expected to build "current"
                // blocks with empty parameter lists.
                // Without this, flow control statements can and will create
                // parameterless "current" blocks, even though this call
                // promises to create a current block with the given parameter
                // list.

                Builder.CreateCurrentBlock(
                    Parameters, EmptyStatement,
                    new JumpFlow(new BlockBranch(Builder.NextBlockTag)));
                Builder.Next();
            }

            var visited = Visit(Statement);
            if (Flow is JumpFlow || Flow is TerminatedFlowBase)
            {
                Builder.CreateCurrentBlock(visited, Flow);
            }
            else
            {
                Builder.CreateCurrentBlock(
                    visited, new JumpFlow(new BlockBranch(Builder.NextBlockTag)));
                Builder.Next();
                Builder.CreateCurrentBlock(EmptyStatement, Flow.Accept(this));
            }
        }

        /// <summary>
        /// Creates a block with the given tag, parameter list, body and block flow.
        /// </summary>
        public UniqueTag CreateBlock(
            UniqueTag Tag, IReadOnlyList<SSAVariable> Parameters,
            IStatement Statement, BlockFlow Flow)
        {
            // Remember all sibling expressions/statements.
            var siblExprs = unspilledExpressions;
            var siblStmts = unspilledStatements;

            unspilledStatements = new List<MovableStatement>();
            unspilledExpressions = new List<Tuple<SpillableExpression, InsertStatement>>();

            var curBlockTag = Builder.CurrentBlockTag;
            var nextBlockTag = Builder.NextBlockTag;
            Builder.NextBlockTag = Tag;
            Builder.Next();
            CreateCurrentBlock(Parameters, Statement, Flow);
            Builder.CurrentBlockTag = curBlockTag;
            Builder.NextBlockTag = nextBlockTag;

            // Restore the sibling statements/expressions. Discard any
            // references to child statements.
            // We won't spill them now if they haven't been spilled already.
            unspilledStatements = siblStmts;
            unspilledExpressions = siblExprs;

            return Tag;
        }

        /// <summary>
        /// Creates a block with the given tag, body and block flow.
        /// </summary>
        public UniqueTag CreateBlock(UniqueTag Tag, IStatement Statement, BlockFlow Flow)
        {
            return CreateBlock(Tag, new List<SSAVariable>(), Statement, Flow);
        }

        /// <summary>
        /// Creates a block with the given tag, body and destination tag.
        /// </summary>
        public UniqueTag CreateBlock(UniqueTag Tag, IStatement Statement, UniqueTag Destination)
        {
            return CreateBlock(Tag, Statement, new JumpFlow(new BlockBranch(Destination)));
        }

        /// <summary>
        /// Creates a block with the given name, body and block flow.
        /// </summary>
        public UniqueTag CreateBlock(string Name, IStatement Statement, BlockFlow Flow)
        {
            return CreateBlock(new UniqueTag(Name), Statement, Flow);
        }

        /// <summary>
        /// Creates a block with the given name, body and destination tag.
        /// </summary>
        public UniqueTag CreateBlock(string Name, IStatement Statement, UniqueTag Destination)
        {
            return CreateBlock(new UniqueTag(Name), Statement, Destination);
        }

        public override const bool Matches(IExpression Value)
        {
            return true;
        }
        public override const bool Matches(IStatement Value)
        {
            return true;
        }
        protected override IExpression Transform(IExpression Expression)
        {
            if (Expression is IFlowExpression)
            {
                // All right then. Spill all sibling statements/expressions.
                Spill();

                // Have the expression reduce itself to a number of basic blocks.
                // An SSA local variable is returned that contains the expression's
                // result.
                var resultVar = ((IFlowExpression)Expression).ToBlocks(this);
                // Move on to the next block.
                Builder.Next();

                // Clear any child unspilled statements/expressions.
                unspilledStatements = new List<MovableStatement>();
                unspilledExpressions = new List<Tuple<SpillableExpression, InsertStatement>>();

                // Flow expression has been encoded as an empty block.
                // All we have to do now is load its result variable.
                return resultVar.CreateGetExpression();
            }
            else
            {
                // Remember all sibling expressions and statements.
                var siblExprs = unspilledExpressions;
                var siblStmts = unspilledStatements;

                unspilledStatements = new List<MovableStatement>(siblStmts);
                unspilledExpressions = new List<Tuple<SpillableExpression, InsertStatement>>(siblExprs);

                // Visit this statement's children, with a new set of unspilled
                // expressions and statements.
                var visited = Expression.Accept(this);

                // Restore the sibling statements/expressions. Discard any
                // references to child statements.
                // We won't spill them now if they haven't been spilled already.
                unspilledStatements = siblStmts;
                unspilledExpressions = siblExprs;

                // Add this expression to the sequence of unspilled sibling
                // expressions, then. To do this, we'll also need to append
                // a spill target statement to the list of unspilled statements,
                // to preserve the order of operations.
                var spillExpr = new SpillableExpression(visited);
                var spillTarget = new InsertStatement();
                unspilledStatements.Add(new MovableStatement(spillTarget));
                unspilledExpressions.Add(
                    new Tuple<SpillableExpression, InsertStatement>(spillExpr, spillTarget));
                return spillExpr;
            }
        }

        protected override IStatement Transform(IStatement Statement)
        {
            if (Statement is IFlowStatement)
            {
                // All right then. Spill all sibling statements/expressions.
                Spill();

                // Have the statement reduce itself to a number of basic blocks.
                ((IFlowStatement)Statement).ToBlocks(this);
                // Move on to the next block.
                Builder.Next();

                // Clear any child unspilled statements/expressions.
                unspilledStatements = new List<MovableStatement>();
                unspilledExpressions = new List<Tuple<SpillableExpression, InsertStatement>>();

                // Flow statement has been encoded as an empty block.
                // Return an empty statement here so the flow statement doesn't
                // hang around in a basic block.
                return EmptyStatement;
            }
            else
            {
                // Remember all sibling expressions and statements.
                var siblExprs = unspilledExpressions;
                var siblStmts = unspilledStatements;

                unspilledStatements = new List<MovableStatement>(siblStmts);
                unspilledExpressions = new List<Tuple<SpillableExpression, InsertStatement>>(siblExprs);

                // Visit this statement's children, with a new set of unspilled
                // expressions and statements.
                var visited = Statement.Accept(this);

                // Restore the sibling statements/expressions. Discard any
                // references to child statements.
                // We won't spill them now if they haven't been spilled already.
                unspilledStatements = siblStmts;
                unspilledExpressions = siblExprs;

                // Add this statement to the sequence of unspilled sibling
                // statements, then.
                var movStmt = new MovableStatement(visited);
                unspilledStatements.Add(movStmt);
                return movStmt;
            }
        }

        /// <summary>
        /// Visits the given SSA local variable, which will always be
        /// a parameter definition.
        /// </summary>
        public SSAVariable VisitParameter(SSAVariable Variable)
        {
            return Variable;
        }

        /// <summary>
        /// Visits the given block branch instruction.
        /// </summary>
        public BlockBranch Visit(BlockBranch Branch)
        {
            return Branch;
        }
    }
}
