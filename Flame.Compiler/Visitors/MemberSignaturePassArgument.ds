using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame.Compiler.Visitors
{
    /// <summary>
    /// Defines a data structure that holds information
    /// pertaining to member signature passes.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class MemberSignaturePassArgument<T>
        where T : IMember
    {
        /// <summary>
        /// Creates a new member signature pass argument from the given member, pass environment
        /// and pass metadata.
        /// </summary>
        /// <param name="Member"></param>
        /// <param name="PassEnvironment"></param>
        /// <param name="Metadata"></param>
        public this(set T Member, set IBodyPassEnvironment PassEnvironment, set IRandomAccessOptions GlobalMetadata)
        { }

        /// <summary>
        /// Gets the member signature this pass is
        /// being applied to.
        /// </summary>
        public T Member { get; private set; }

        /// <summary>
        /// Gets the pass environment for this pass.
        /// </summary>
        public IBodyPassEnvironment PassEnvironment { get; private set; }

        /// <summary>
        /// Gets the global pass metadata.
        /// </summary>
        /// <returns>The global pass metadata.</returns>
        public IRandomAccessOptions GlobalMetadata { get; private set; }

        /// <summary>
        /// Gets the compiler log.
        /// </summary>
        public ICompilerLog Log { get { return PassEnvironment.Log; } }

        /// <summary>
        /// Gets the environment.
        /// </summary>
        public IEnvironment Environment { get { return PassEnvironment.Environment; } }
    }

    /// <summary>
    /// Gets the result of a member signature pass.
    /// </summary>
    public class MemberSignaturePassResult
    {
        /// <summary>
        /// Creates a member signature pass result with a null name
        /// and no additional attributes.
        /// </summary>
        public this()
        {
            this.Name = null;
            this.AdditionalAttributes = Enumerable.Empty<IAttribute>();
            this.attributeTweakFuncs = null;
        }

        /// <summary>
        /// Creates a member signature pass result from the given
        /// name.
        /// </summary>
        public this(set string Name)
        {
            this.AdditionalAttributes = Enumerable.Empty<IAttribute>();
            this.attributeTweakFuncs = null;
        }

        /// <summary>
        /// Creates a member signature pass result from the given
        /// name and additional attributes.
        /// </summary>
        public this(set string Name, set IEnumerable<IAttribute> AdditionalAttributes)
        {
            this.attributeTweakFuncs = null;
        }

        /// <summary>
        /// Creates a member signature pass result from the given
        /// name, additional attributes and an attribute-tweaking function.
        /// </summary>
        public this(
            set string Name, set IEnumerable<IAttribute> AdditionalAttributes,
            Action<AttributeMapBuilder> TweakAttributes)
        {
            this.attributeTweakFuncs = new List<Action<AttributeMapBuilder>>();
            this.attributeTweakFuncs.Add(TweakAttributes);
        }

        /// <summary>
        /// Creates a member signature pass result from the given
        /// name, additional attributes and a list of attribute-tweaking functions.
        /// </summary>
        private this(
            set string Name, set IEnumerable<IAttribute> AdditionalAttributes,
            List<void(AttributeMapBuilder)> AttributeTweakFunctions)
        {
            this.attributeTweakFuncs = AttributeTweakFunctions;
        }

        /// <summary>
        /// Gets the member's (new) name, if any.
        /// Otherwise, null.
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        /// Gets a sequence of additional attributes that have
        /// been inferred.
        /// </summary>
        public IEnumerable<IAttribute> AdditionalAttributes { get; private set; }

        /// <summary>
        /// A list of functions that modify the attribute map builder. Null if
        /// the list is empty.
        /// </summary>
        private List<void(AttributeMapBuilder)> attributeTweakFuncs;

        /// <summary>
        /// Modifies the attribute map builder.
        /// </summary>
        public void TweakAttributes(AttributeMapBuilder Builder)
        {
            if (attributeTweakFuncs == null)
                return;

            foreach (var func in attributeTweakFuncs)
                func(Builder);
        }

        /// <summary>
        /// Combines the given member signature pass result with this one.
        /// The other's name is preferred over this instance's name.
        /// </summary>
        /// <param name="Other"></param>
        /// <returns></returns>
        public MemberSignaturePassResult Combine(MemberSignaturePassResult Other)
        {
            string newName;
            if (string.IsNullOrEmpty(Other.Name))
            {
                newName = this.Name;
            }
            else
            {
                newName = Other.Name;
            }

            var attrs = Enumerable.Union<IAttribute>(
                this.AdditionalAttributes, Other.AdditionalAttributes);

            var attrTweaks = attributeTweakFuncs;
            if (attrTweaks == null)
            {
                attrTweaks = Other.attributeTweakFuncs;
            }
            else if (Other.attributeTweakFuncs != null)
            {
                attrTweaks = new List<void(AttributeMapBuilder)>(
                    attributeTweakFuncs.Count + Other.attributeTweakFuncs.Count);
                attrTweaks.AddRange(attributeTweakFuncs);
                attrTweaks.AddRange(Other.attributeTweakFuncs);
            }

            return new MemberSignaturePassResult(newName, attrs, attrTweaks);
        }
    }
}
