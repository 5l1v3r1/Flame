using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Expressions;

namespace Flame.Compiler
{
	public static class OperatorExpressionExtensions
	{
		/// <summary>
		/// Gets the best operator overload for the given operator with the given arguments.
		/// </summary>
		public static const IMethod GetOperatorOverload(this Operator Op, [IExpression] Arguments)
		{
			var argTypes = new List<IType>();
			foreach (var item in Arguments)
				argTypes.Add(item.Type);
			return Op.GetOperatorOverload(argTypes);
		}

		/// <summary>
		/// Creates an invocation expression for this operator with the given arguments.
		/// </summary>
		public static const IExpression CreateOperatorInvocation(this Operator Op, [IExpression] Arguments)
		{
			var method = Op.GetOperatorOverload(Arguments);
			if (method == null) return null;
			return new RelaxedInvocation(method, Arguments);
		}
	}
}
