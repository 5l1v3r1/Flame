using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler
{
    public struct CodeLine
    {
        public const this(set string Text);
        public const this(set string Text, set int Indentation);

        /// <summary>
        /// Gets a boolean flag that indicates if this code line is a line of whitespace, i.e. contains only a single null character ('\0').
        /// A truly empty code line (text "") will not be output by a CodeBuilder. A whiteline, however, will be.
        /// </summary>
        public bool IsWhiteline
        {
            const get return Text.Equals("\0");
        }

        /// <summary>
        /// Gets a boolean value that indicates if this code line corresponds to the empty line pattern.
        /// </summary>
        public bool IsEmpty
        {
            const get return Text == null || Text == "" || IsWhiteline;
        }

        /// <summary>
        /// Gets a boolean value that indicates if this code line is whitespace.
        /// </summary>
        public bool IsWhitespace
        {
            const get
            {
                return IsEmpty || string.IsNullOrWhiteSpace(Text);
            }
        }

        /// <summary>
        /// Gets the code line's text length.
        /// </summary>
        public int Length
        {
            const get if (IsEmpty) return 0; else return Text.Length;
        }

        /// <summary>
        /// Gets the code line's total length. This includes the line's
        /// indentation.
        /// </summary>
        public const int GetTotalLength(int IndentationLength)
        {
            return Length + Indentation * IndentationLength;
        }

        /// <summary>
        /// Gets or sets the code line's text.
        /// </summary>
        public string Text { const get; set; }
        /// <summary>
        /// Gets or sets this code line's indentation.
        /// </summary>
        public int Indentation { const get; set; }

        public override const string ToString()
        {
            return this.ToString("\t");
        }
        public const string ToString(string IndentationString)
        {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < Indentation; i++)
            {
                sb.Append(IndentationString);
            }
            if (!IsEmpty)
            {
                sb.Append(Text);
            }
            return sb.ToString();
        }
    }
}
