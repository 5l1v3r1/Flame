using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler
{
    public class CodeBuilder
    {
        public const this()
        {
			Init();
        }
        public const this(string Code)
        {
        	Init();
            string[] codeLines = Code.Replace("\r", "").Split(new char[] { '\n' });
            string indentString = GetIndentationString(codeLines);
            this.IndentationString = indentString;
            foreach (var item in codeLines)
            {
            	AddFormattedLine(item);
            }
        }
        public const this(CodeBuilder Other)
        {
        	this.indentation = Other.indentation;
        	this.lines = new List<CodeLine>(Other.lines);
        	this.IndentationString = Other.IndentationString;
        }

        private void Init()
        {
        	indentation = 0;
            lines = new List<CodeLine>();
            IndentationString = "\t";
        }

        private List<CodeLine> lines;
        private int indentation;
        public string IndentationString { const get; set; }

        #region Increase/Decrease Indentation

        public CodeBuilder IncreaseIndentation()
        {
            indentation++;
            return this;
        }
        public CodeBuilder DecreaseIndentation()
        {
            if (indentation > 0)
            {
                indentation--;
            }
            return this;
        }

        #endregion

        #region Append

        public CodeBuilder Append(char Character)
        {
            return Append(Character.ToString());
        }
        public CodeBuilder Append(string Text)
        {
            if (lines.Count == 0)
            {
                AddLine();
            }
            string[] splitText = Text.Replace("\r", "").Split(new char[] { '\n' });
            var oldLine = lines[lines.Count - 1];
            lines[lines.Count - 1] = new CodeLine(oldLine.Text + splitText[0], oldLine.Indentation);
            for (int i = 1; i < splitText.Length; i++)
            {
	        	AddLine(splitText[i]);
	        }
            return this;
        }
        public CodeBuilder Append(CodeBuilder Builder)
        {
        	var builderLines = Builder.lines;
            if (builderLines.Count > 0)
            {
                if (lines.Count == 0)
                {
                    AddLine();
                }
                var oldLine = lines[lines.Count - 1];
                string firstLineText = builderLines[0].Text;
                lines[lines.Count - 1] = new CodeLine(oldLine.Text + firstLineText, oldLine.Indentation);
                for (int i = 1; i < builderLines.Count; i++)
                {
                    CodeLine item = builderLines[i];
                    AddLine(new CodeLine(item.Text, item.Indentation + indentation));
                }
            }
            return this;
        }
        public CodeBuilder AppendLine(string Text)
        {
            Append(Text);
            return AddLine();
        }
        public CodeBuilder AppendLine()
        {
            return AddLine();
        }

        #endregion

        #region AddLine

        public CodeBuilder AddLine()
        {
            return AddLine("");
        }
        public CodeBuilder AddEmptyLine()
        {
            return AddLine("\0");
        }
        public CodeBuilder AddLine(string Text)
        {
            lines.Add(new CodeLine(Text, indentation));
            return this;
        }
        public CodeBuilder AddLine(CodeLine Line)
        {
            lines.Add(Line);
            return this;
        }
        public CodeBuilder AddCodeBuilder(CodeBuilder Builder)
        {
            foreach (var item in Builder.lines)
            {
                AddLine(new CodeLine(item.Text, item.Indentation + indentation));
            }
            return this;
        }
        /// <summary>
        /// Adds a line to the code builder that has already been formatted.
        /// The current indentation is adjusted to fit the line.
        /// </summary>
        public CodeBuilder AddFormattedLine(string Text)
        {
        	if (string.IsNullOrEmpty(Text))
        	{
        		AddEmptyLine();
        	}
        	else
        	{
        		if (IndentationString.StartsWith(" "))
        		{
        			Text = Untabify(Text);
        		}
	        	int indent = 0;
	        	while (IndentationString.Length > 0 && LongestCommonSubstring(IndentationString, Text, 0, indent * IndentationString.Length).Length == IndentationString.Length)
	        	{
	        		indent++;
	        	}
	        	this.indentation = indent;
	        	AddLine(Text.Substring(indent * IndentationString.Length));
        	}
            return this;
        }

        #endregion

        #region RemoveLine

        public CodeBuilder RemoveLine(int Index)
        {
        	lines.RemoveAt(Index);
            return this;
        }

        #endregion

        #region TrimStart

        public CodeBuilder TrimStart(char[] Characters)
        {
        	while (lines.Count > 0)
        	{
        		string trimmed = lines[0].Text.TrimStart(Characters);
        		var newLine = new CodeLine(trimmed, lines[0].Indentation);
        		if (newLine.IsEmpty)
        		{
        			lines.RemoveAt(0);
        		}
        		else
        		{
        			lines[0] = newLine;
        			return this;
        		}
        	}
            return this;
        }

        public CodeBuilder TrimStart()
        {
        	return TrimStart(new char[0]);
        }

        #endregion

        #region TrimEnd

        public CodeBuilder TrimEnd(char[] Characters)
        {
        	while (lines.Count > 0)
        	{
        		string trimmed = lines[lines.Count - 1].Text.TrimEnd(Characters);
        		var newLine = new CodeLine(trimmed, lines[lines.Count - 1].Indentation);
        		if (newLine.IsEmpty)
        		{
        			lines.RemoveAt(lines.Count - 1);
        		}
        		else
        		{
        			lines[lines.Count - 1] = newLine;
                    return this;
        		}
        	}
            return this;
        }

        public CodeBuilder TrimEnd()
        {
        	return TrimEnd(new char[0]);
        }

        #endregion

        #region Trim

        public CodeBuilder Trim(char[] Characters)
        {
        	TrimStart(Characters);
        	return TrimEnd(Characters);
        }

        public CodeBuilder Trim()
        {
        	TrimStart();
        	return TrimEnd();
        }

        #endregion

        #region Code lines

        /// <summary>
        /// Gets the code builder's first non-whitespace line of code,
        /// starting at the given start line and ending after having examined the given number of lines.
        /// If no matching line is found, a whiteline is returned.
        /// </summary>
        public const CodeLine GetCodeLine(int StartLine, int Count)
        {
        	for (int i = StartLine; i < StartLine + Count; i++)
        	{
        		if (!this[i].IsWhitespace)
        		{
        			return this[i];
        		}
        	}
        	return new CodeLine("\0");
        }

        /// <summary>
        /// Gets the code builder's last non-whitespace last of code,
        /// starting at the given start line and ending after having examined the given number of lines.
        /// If no matching line is found, a whiteline is returned.
        /// </summary>
        public const CodeLine GetLastCodeLine(int StartLine, int Count)
        {
        	for (int i = StartLine + Count - 1; i >= StartLine; i--)
        	{
        		if (!this[i].IsWhitespace)
        		{
        			return this[i];
        		}
        	}
        	return new CodeLine("\0");
        }

        /// <summary>
        /// Gets the code builder's first non-whitespace line of code,
        /// starting at the given start line.
        /// If matching line is found, a whiteline is returned.
        /// </summary>
        public const CodeLine GetCodeLine(int StartLine)
        {
        	return GetCodeLine(StartLine, LineCount - StartLine);
        }

        /// <summary>
        /// Gets the code builder's last non-whitespace line of code,
        /// starting at the given start line.
        /// If matching line is found, a whiteline is returned.
        /// </summary>
        public const CodeLine GetLastCodeLine(int StartLine)
        {
        	return GetLastCodeLine(StartLine, LineCount - StartLine);
        }

        /// <summary>
        /// Counts the number of non-whitespace code lines in a region
        /// with the given length, starting at the given start line.
        /// </summary>
        public const int GetCodeLineCount(int StartLine, int Count)
        {
        	int result = 0;
        	for (int i = StartLine; i < StartLine + Count; i++)
        		if (!this[i].IsWhitespace)
        	{
        		result++;
        	}
        	return result;
        }

        /// <summary>
        /// Counts the number of non-whitespace code lines in a region
        /// from the given start index to the end of the code builder.
        /// </summary>
        public const int GetCodeLineCount(int StartLine)
        {
        	return GetCodeLineCount(StartLine, LineCount - StartLine);
        }

        /// <summary>
        /// Gets the code builder's first non-whitespace line of code.
        /// </summary>
        public CodeLine FirstCodeLine
        {
        	const get return GetCodeLine(0);
        }

        /// <summary>
        /// Gets the code builder's last non-whitespace line of code.
        /// </summary>
        public CodeLine LastCodeLine
        {
        	const get return GetLastCodeLine(0);
        }

        /// <summary>
        /// Gets the total amount of non-whitespace code lines in the code builder.
        /// </summary>
        public int CodeLineCount
        {
        	const get return GetCodeLineCount(0);
        }

        #endregion

        #region Properties

		/// <summary>
		/// Gets the number of lines the code builder currently has.
		/// </summary>
        public int LineCount
        {
            const get
            {
                return lines.Count;
            }
        }

        /// <summary>
        /// Gets a boolean value that tells if this code builder consists of whitespace only.
        /// </summary>
        public bool IsWhitespace
        {
        	const get
        	{
        		foreach (var item in lines)
				{
					if (!item.IsWhitespace)
						return false;
				}
				return true;
        	}
        }

        /// <summary>
        /// Gets or sets the code line at the given index.
        /// </summary>
        public CodeLine this[int index]
        {
            const get { return lines[index]; }
            set { lines[index] = value; }
        }

        #endregion

		/// <summary>
		/// Inserts a code line at the given index.
		/// </summary>
        public CodeBuilder InsertLine(int Index, CodeLine Line)
        {
            lines.Insert(Index, Line);
            return this;
        }

        public const char CharacterAt(int Index)
        {
        	int count = 0;
            for (int i = 0; i < lines.Count; i++)
            {
            	StringBuilder sb = new StringBuilder();
                var line = lines[i];
                if (line.IsWhiteline)
                {
                	for (int32 j = 0; i < line.Indentation; j++)
                	{
                		sb.Append(IndentationString);
                	}
                	sb.AppendLine();
                }
                else if (!line.IsWhitespace)
                {
                    sb.AppendLine(lines[i].ToString(IndentationString));
                }

                if (Index < count + sb.Length)
                {
                	return sb[Index - count];
                }
                else
                {
                	count += sb.Length;
                }
            }
            return default(char);
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < lines.Count; i++)
            {
                var line = lines[i];
                if (line.IsWhiteline)
                {
                	for (int32 j = 0; i < line.Indentation; j++)
                	{
                		sb.Append(IndentationString);
                	}
                	sb.AppendLine();
                }
                else if (!line.IsWhitespace)
                {
                    sb.AppendLine(lines[i].ToString(IndentationString));
                }
            }
            return sb.ToString().TrimEnd(new char[] { '\r', '\n', '\t', ' ' });
        }

        #region Static

        private static const string Untabify(string Value)
        {
        	return Value.Replace("\t", "    ");
        }

        private static const string LongestCommonSubstring(string First, string Second, int FirstOffset, int SecondOffset)
        {
    	    int i = FirstOffset;
    	    int j = SecondOffset;
    		while (i < First.Length && j < Second.Length)
    		{
    			if (First[i] != Second[j])
    			{
    				break;
    			}
    			i++;
    			j++;
    		}
    		return First.Substring(FirstOffset, i - FirstOffset);
        }

        private static const string LongestCommonSubstring(string First, string Second)
        {
        	return LongestCommonSubstring(First, Second, 0, 0);
        }

        private static const string GetIndentationString(string IndentString, string Line)
        {
        	if (IndentString.Length == 0)
        	{
        		int i = 0;
        		while (i < Line.Length && (Line[i] == '\t' || Line[i] == ' '))
        		{
        			i++;
        		}
        		return Line.Substring(0, i);
        	}
        	else if (Line.StartsWith(IndentString))
        	{
        		return IndentString;
        	}
        	else if (Line.StartsWith("\t") && IndentString.StartsWith(" ") && Line[0] != IndentString[0])
        	{
        		return GetIndentationString(Untabify(IndentString), Untabify(Line));
        	}
        	else
        	{
        		string lcs = LongestCommonSubstring(IndentString, Line);

        		if (lcs.Length > 0) return lcs;
        		else
        		{
        			return IndentString;
        		}
        	}
        }

        /// <summary>
        /// Gets the best match for an indentation that suits the given indented lines.
        /// An indentation string is defined as a sequence of tab or space characters that precede every line in the given sequence zero or more times.
        /// </summary>
        public static const string GetIndentationString([string] IndentedLines)
        {
        	string bestMatch = "";
        	foreach (var item in IndentedLines)
        	{
        		bestMatch = GetIndentationString(bestMatch, item);
        	}
        	return bestMatch;
        }

        #endregion
    }
}
