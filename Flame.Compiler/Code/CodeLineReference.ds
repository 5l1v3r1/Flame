/*using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Flame.Compiler
{
    public class CodeLineReference
    {
        assembly this(CodeBuilder Builder, int LineMapping)
        {
            this.builder = Builder;
            this.mapping = LineMapping;
        }

        private CodeBuilder builder;
        private int32 mapping;

        public string Text
        {
            const get { return builder.GetMappedLine(mapping).Text; }
            set { builder.SetMappedLine(mapping, new CodeLine(value, builder.GetMappedLine(mapping).Indentation)); }
        }

        public bool IsWhitespace
        {
            const get
            {
                return builder.GetMappedLine(mapping).IsWhitespace;
            }
        }

        public void Clear()
        {
            Text = "";
        }
        public void RemoveLine()
        {
            builder.RemoveMappedLine(mapping);
            mapping = -1;
        }
        public bool IsFirstLine
        {
            const get
            {
                return builder.GetMappedLineIndex(mapping) == 0;
            }
        }
        public bool IsLastLine
        {
            const get
            {
                return builder.GetMappedLineIndex(mapping) == builder.LineCount - 1;
            }
        }
        public CodeLineReference LastLine
        {
            get
            {
                int index = builder.GetMappedLineIndex(mapping);
                return builder.CreateLineReference(index - 1);
            }
        }
        public CodeLineReference NextLine
        {
            get
            {
                int index = builder.GetMappedLineIndex(mapping);
                return builder.CreateLineReference(index + 1);
            }
        }
        public CodeLineReference ReserveLineBefore()
        {
            int index = builder.GetMappedLineIndex(mapping);
            return builder.InsertReservedLine(index);
        }
        public CodeLineReference ReserveLineAfter()
        {
            int index = builder.GetMappedLineIndex(mapping);
            return builder.InsertReservedLine(index + 1);
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            else if (obj is CodeLineReference)
            {
                return (obj as CodeLineReference).mapping == mapping && (obj as CodeLineReference).builder == builder;
            }
            else
            {
                return false;
            }
        }

        public override int32 GetHashCode()
        {
            return mapping;
        }

        public static bool operator ==(CodeLineReference A, CodeLineReference B)
        {
            if (ReferenceEquals(A, null))
            {
                return (ReferenceEquals(B, null));
            }
            else
            {
                return A.Equals(B);
            }
        }
        public static bool operator !=(CodeLineReference A, CodeLineReference B)
        {
            return !(A == B);
        }

        public override string ToString()
        {
            return Text;
        }
    }
}*/
