using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Emit;

namespace Flame.Compiler
{
    /// <summary>
    /// Defines a code node: the root type for independent code generation.
    /// Code nodes specify the *how* of generating code blocks based on a
    /// code generator.
    /// </summary>
    public interface INode
    {
        /// <summary>
        /// Creates a code block that captures this code node.
        /// </summary>
        ICodeBlock Emit(ICodeGenerator CodeGenerator);
    }

    /// <summary>
    /// Defines a node visitor: an object that transforms code nodes.
    /// </summary>
    public interface INodeVisitor
    {
        /// <summary>
        /// "Visits" an expression: an expression is taken as input and transformed another expression.
        /// </summary>
        IExpression Visit(IExpression Value);

        /// <summary>
        /// "Visits" a statement: an statement is taken as input and transformed another statement.
        /// </summary>
        IStatement Visit(IStatement Value);
    }

    /// <summary>
    /// Defines a node that provides a fast path for predicate visitors, i.e.
    /// visitors that retrieve some of the node's properties, but do not
    /// in any way modify the node itself.
    /// </summary>
    /// <remarks>
    /// Implementing this interface is especially useful for nodes with a variable
    /// amount of children, which may thus have to perform complex logic or allocate
    /// a new block on every call to 'Accept', even though the nature of the
    /// node visitor makes this unnecessary.
    /// </remarks>
    public interface IPredicateNode : INode
    {
        /// <summary>
        /// Accepts the predicate node visitor.
        /// Said visitor promises not to modify this node or any of its contents.
        /// Furthermore, calling 'AcceptPredicate' must always produce the same state changes
        /// as calling 'Accept' when using the same visitor, but may do so
        /// more efficiently.
        /// </summary>
        void AcceptPredicate(INodeVisitor Visitor);
    }

    public static class VisitorExtensions
    {
        public static IExpression[] VisitAll(this INodeVisitor Visitor, IExpression[] Values)
        {
            var results = new IExpression[Values.Length];
            foreach (var output in results, var input in Values)
            {
                output = Visitor.Visit(input);
            }
            return results;
        }

        public static IExpression[] VisitAll(this INodeVisitor Visitor, [IExpression] Values)
        {
            return Visitor.VisitAll(Enumerable.ToArray<IExpression>(Values));
        }

        public static IStatement[] VisitAll(this INodeVisitor Visitor, IStatement[] Values)
        {
            var results = new IStatement[Values.Length];
            foreach (var output in results, var input in Values)
            {
                output = Visitor.Visit(input);
            }
            return results;
        }

        public static IStatement[] VisitAll(this INodeVisitor Visitor, [IStatement] Values)
        {
            return Visitor.VisitAll(Enumerable.ToArray<IStatement>(Values));
        }
    }
}
