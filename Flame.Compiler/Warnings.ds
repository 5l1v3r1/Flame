using System;
using System.Collections.Generic;
using System.Text;
using Pixie;

namespace Flame.Compiler
{
    public static class Warnings
    {
        static this()
        {
            // Warning groups
            Warnings.Everything = new WarningDescription("everything", null, false);
            Warnings.PedanticRoot = new WarningDescription("pedantic", null, Warnings.Everything, false);
            Warnings.Pedantic = new WarningDescription("pedantic", Warnings.PedanticRoot);
            Warnings.All = new WarningDescription("all", Warnings.Everything, true);
            Warnings.Build = new WarningDescription("build", Warnings.Everything, true);
            Warnings.Extra = new WarningDescription("extra", Warnings.Everything);

            // -Wall warnings
            Warnings.Shadow = new WarningDescription("shadow", Warnings.All);
            Warnings.GenericOperators = new WarningDescription("generic-operators", Warnings.All);
            Warnings.Operators = new WarningDescription("operators", Warnings.All);
            Warnings.ConstantDiscarded = new WarningDescription("constant-discarded", Warnings.All);
            Warnings.DanglingElse = new WarningDescription("dangling-else", Warnings.All);
            Warnings.IncompleteInitialization = new WarningDescription("incomplete-initialization", Warnings.All);
            Warnings.VariableLengthInitialization = new WarningDescription("variable-length-initialization", Warnings.All);

            // -Wextra warnings
            Warnings.Bitcast = new WarningDescription("bitcast", Warnings.Extra);
            Warnings.EmptyBody = new WarningDescription("empty-body", Warnings.Extra);
            Warnings.HiddenNullCheck = new WarningDescription("hidden-null-check", Warnings.Extra);
            Warnings.MeaninglessCast = new WarningDescription("meaningless-cast", Warnings.Extra);
            Warnings.ConstantAssert = new WarningDescription("constant-assert", Warnings.Extra);

            // -Wpedantic warnings
            Warnings.CSharpUsingAlias = new WarningDescription("csharp-using-alias", Warnings.Pedantic);
            Warnings.CppUsingNamespace = new WarningDescription("cpp-using-namespace", Warnings.Pedantic);
            Warnings.LonelyTry = new WarningDescription("lonely-try", Warnings.Pedantic);

            // -Wbuild warnings
            Warnings.UnusedOption = new WarningDescription("unused-option", Warnings.Build);
            Warnings.MissingDependency = new WarningDescription("missing-dependency", Warnings.Build);
        }

        /// <summary>
        /// The root warning group, which covers all warnings.
        /// </summary>
        public static WarningDescription Everything { const get; private set; }

        /// <summary>
        /// The "conventional" warning group, which is turned on by default.
        /// It corresponds to -Wall and -Wno-all.
        /// </summary>
        public static WarningDescription All { const get; private set; }

        /// <summary>
        /// The "build" warning group, which is turned on by default.
        /// This warning group contains warnings that relate to the build
        /// process, such as missing dependencies or unused options.
        /// </summary>
        public static WarningDescription Build { const get; private set; }

        /// <summary>
        /// The "extra" warning group, which contains a number of possibly
        /// useful warnings that are not turned on by default.
        /// </summary>
        public static WarningDescription Extra { const get; private set; }

        /// <summary>
        /// The -pedantic option, which turns on non-essential warnings that typically
        /// relate to language-level constructs, especially non-standard extensions.
        /// </summary>
        public static WarningDescription PedanticRoot { const get; private set; }

        /// <summary>
        /// The -Wpedantic and -Wno-pedantic options. These two are a sub-warning
        /// group of -pedantic. If you want to create a warning that fires
        /// only in pedantic mode, use these as a parent warning description,
        /// rather than -pedantic.
        /// </summary>
        public static WarningDescription Pedantic { const get; private set; }

        /// <summary>
        /// The warning description for shadowed locals.
        /// </summary>
        /// <example>
        /// for (int i = 0; i &lt; 5; i++)
        /// {
        ///     for (int i = 0; i &lt; 5; i++)
        ///              ^~~~~
        ///     {
        ///
        ///     }
        /// }
        /// </example>
        public static WarningDescription Shadow { const get; private set; }

        /// <summary>
        /// The warning name for undefined operators on generic parameters.
        /// </summary>
        /// <example>
        /// T z = x + y;
        ///       ^~~~~
        /// </example>
        public static WarningDescription GenericOperators { const get; private set; }

        /// <summary>
        /// The warning name for undefined operators.
        /// </summary>
        /// <example>
        /// bool x = true, y = false;
        /// bool z = x + y;
        ///          ^~~~~
        /// </example>
        public static WarningDescription Operators { const get; private set; }

        /// <summary>
        /// The warning description for bitcasts.
        /// </summary>
        /// <example>
        /// int x = -5;
        /// bit32 y = (bit32)x;
        /// bit16 z = (bit16)y;
        ///            ^~~~~
        /// x = (int)(bit32)z;
        /// </example>
        public static WarningDescription Bitcast { const get; private set; }

        /// <summary>
        /// The warning description for meaningless casts.
        /// </summary>
        /// <example>
        /// int x = 5;
        /// int y = (int)x;
        ///          ^~~
        /// </example>
        public static WarningDescription MeaninglessCast { const get; private set; }

        /// <summary>
        /// The warning name for discarded constants.
        /// </summary>
        /// <example>
        /// 5;
        ///  ^
        /// </example>
        public static WarningDescription ConstantDiscarded { const get; private set; }

        /// <summary>
        /// The warning name for constant assertions.
        /// </summary>
        /// <example>
        /// assert(true);
        /// ^~~~~~
        /// </example>
        public static WarningDescription ConstantAssert { const get; private set; }

        /// <summary>
        /// The warning name for C# style alias directives, which are technically
        /// not legal D#.
        /// </summary>
        /// <example>
        /// using x = y;
        /// ^~~~~
        /// </example>
        public static WarningDescription CSharpUsingAlias { const get; private set; }

        /// <summary>
        /// The warning name for C++ style directives, which are not legal D#.
        /// </summary>
        /// <example>
        /// using namespace x;
        ///       ^~~~~~~~~
        /// </example>
        public static WarningDescription CppUsingNamespace { const get; private set; }

        /// <summary>
        /// The warning name for control flow statements with empty bodies.
        /// </summary>
        /// <example>
        /// while (flag);
        ///             ^
        /// </example>
        public static WarningDescription EmptyBody { const get; private set; }

        /// <summary>
        /// The warning name for dangling else statements.
        /// </summary>
        /// <example>
        /// if (x)
        /// if (y) return x;
        /// else return y;
        /// ^~~~
        /// </example>
        public static WarningDescription DanglingElse { const get; private set; }

        /// <summary>
        /// The warning name for try statements without associated catch or finally blocks.
        /// </summary>
        /// <example>
        /// try { Console.WriteLine("Hi"); }
        /// ^~~
        /// return 0;
        /// </example>
        public static WarningDescription LonelyTry { const get; private set; }

        /// <summary>
        /// The warning name for hidden or convoluted null checks.
        /// </summary>
        /// <example>
        /// public static int Derp(object x)
        /// {
        ///     if (x is object) return 0;
        ///           ^~~~~~~~~
        ///     else return 1;
        /// }
        /// </example>
        public static WarningDescription HiddenNullCheck { const get; private set; }

        /// <summary>
        /// The warning name for incomplete initialization of container types.
        /// </summary>
        /// <example>
        /// public static int[] Herp(int First, int Second)
        /// {
        ///     return new int[2] { First };
        ///                       ^~~~~~~~~
        /// }
        /// </example>
        public static WarningDescription IncompleteInitialization { const get; private set; }

        /// <summary>
        /// The warning name for constant initialization of variable-length container types.
        /// </summary>
        /// <example>
        /// public static int[] Derp(int Size, int First)
        /// {
        ///     return new int[Size] { First };
        ///                          ^~~~~~~~~
        /// }
        /// </example>
        public static WarningDescription VariableLengthInitialization { const get; private set; }

        /// <summary>
        /// A warning name for unused Compiler options.
        /// </summary>
        /// <example>
        /// compiler File.src -unknown-option
        ///                   ^~~~~~~~~~~~~~~
        /// </example>
        public static WarningDescription UnusedOption { const get; private set; }

        /// <summary>
        /// A warning name for missing library dependencies.
        /// </summary>
        public static WarningDescription MissingDependency { const get; private set; }
    }
}
