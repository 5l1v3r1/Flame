using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler.Flow;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Compiler
{
    /// <summary>
    /// Defines a control flow expression: an expression that interacts with a control flow
    /// visitor.
    /// </summary>
    public interface IFlowExpression : IExpression
    {
        /// <summary>
        /// Creates a number of basic blocks that are semantically equivalent
        /// to this flow expression. An SSA local variable is returned that
        /// contains this expression's result.
        /// </summary>
        SSAVariable ToBlocks(BlockBuildingVisitor Visitor);

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        IExpression AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor);
    }

    /// <summary>
    /// Defines a control flow statement: a statement that interacts with a control flow
    /// visitor.
    /// </summary>
    public interface IFlowStatement : IStatement
    {
        /// <summary>
        /// Creates a number of basic blocks that are semantically equivalent
        /// to this flow statement.
        /// </summary>
        void ToBlocks(BlockBuildingVisitor Visitor);

        /// <summary>
        /// Accepts and interacts with a flow visitor.
        /// </summary>
        IStatement AcceptFlow<TState, TFlow>(IFlowVisitor<TState, TFlow> Visitor);
    }

    /// <summary>
    /// Defines a flow visitor: a node visitor that flow nodes can interact with.
    /// </summary>
    public interface IFlowVisitor<TState, TDelta> : INodeVisitor
    {
        /// <summary>
        /// Gets or sets the current flow state.
        /// </summary>
        TState CurrentFlow { const get; set; }

        /// <summary>
        /// Gets a flow delta that represents flow termination:
        /// sequential flow that succeeds it will never be executed.
        /// </summary>
        TDelta TerminatedFlow { const get; }

        /// <summary>
        /// Computes the "sum" of a flow state and a control flow delta.
        /// </summary>
        const TState CreateCollapsedFlow(TState First, TDelta Second);

        /// <summary>
        /// Computes the "difference" between two flow states, such that
        /// the "sum" of the first flow state and the result of this operation
        /// results in the second state.
        /// </summary>
        const TDelta CreateDeltaFlow(TState First, TState Second);

        /// <summary>
        /// Creates a flow delta that represents the sequential execution of
        /// two flow deltas.
        /// </summary>
        const TDelta CreateSequenceFlow(TDelta First, TDelta Second);

        /// <summary>
        /// Creates a flow delta that represents selecting precisely one of two
        /// flow deltas.
        /// </summary>
        const TDelta CreateSelectFlow(TDelta First, TDelta Second);

        /// <summary>
        /// Creates a flow delta that will be executed zero or more
        /// times.
        /// </summary>
        const TDelta CreateLoopFlow(UniqueTag Tag, TDelta Body);
    }

    /// <summary>
    /// Defines common functionality for flow visitors with a specific intrest
    /// in local flow.
    /// </summary>
    public interface ILocalFlowVisitor<TState, TDelta> : IFlowVisitor<TState, TDelta>
    {
        /// <summary>
        /// Gets a flow delta that represents global flow termination:
        /// this signifies the end of this function call.
        /// </summary>
        TDelta TerminatedGlobalFlow { const get; }

        /// <summary>
        /// Creates a terminated local flow delta, which terminates the current
        /// iteration of the given block, but does not end the function's execution.
        /// </summary>
        const TDelta CreateTerminatedLocalFlow(UniqueTag Tag);
    }
}
