/// <summary>
/// Describes an interface.
/// </summary>
public interface ISomeInterface
{
    /// <summary>
    /// Gets an integer value.
    /// </summary>
    /// <remarks>
    /// "const" marks the getter as a referentially transparent - or pure - function.
    /// </remarks>
    int Value { const get; }
}

/// <summary>
/// A singleton object that implements ISomeInterface.
/// </summary>
/// <remarks>
/// "static" means that this class is a singleton.
/// </remarks>
public static class SomeSingleton : ISomeInterface
{
    // Methods marked "static" in a singleton will be treated as regular instance methods.
    static this()
    {
        this.Value = 0; // It is legal to use "this" in a singleton.
    }

    public int Value { const get; private set; }
}

/// <summary>
/// Uses the singleton.
/// </summary>
public class SomeClass
{
    /// <summary>
    /// Creates a new SomeClass instance.
    /// </summary>
    public const this()
    {
        this.Implementation = SomeSingleton; // Singleton has only one instance, can be retrieved by using its type as an expression
    }

    /// <summary>
    /// Stores the interface implementation.
    /// </summary>
    public ISomeInterface Implementation { const get; private set; }

    /// <summary>
    /// Gets the underlying implementation's value.
    /// </summary>
    public const int GetValue()
    {
        return Implementation.Value;
    }
}