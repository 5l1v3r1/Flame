using Flame.RT;
using System;

namespace std
{
    [Header("algorithm")]
    [GlobalType]
    public static class algorithm
    {
        // This compiles only because the CLR back-end lets it, even though the generated IL is invalid.
        // That's good news for the <algorithm> plug, but generics are not templates,
        // and this is one place where that really shines through.
        // This code file may have to be revisited once the CLR back-end adopts a more strict set of rules.

        public const T min<T>(T a, T b)
        {
            if (a > b) return b;
            else return a;
        }
        public const T max<T>(T a, T b)
        {
            if (a > b) return a;
            else return b;
        }

        public IForwardIterator begin<T>([T] Container)
        {
            throw new NotImplementedException();
        }

        public IForwardIterator end<T>([T] Container)
        {
            throw new NotImplementedException();
        }

        public IForwardIterator find<T>([T] Container, T Value)
        {
            throw new NotImplementedException();
        }

        public void iter_swap(IForwardIterator first, IForwardIterator second)
        {
            throw new NotImplementedException(); // There is really just no decent way to implement this
        }

        public void reverse(IBidirectionalIterator first, IBidirectionalIterator last)
        {
            throw new NotImplementedException(); // There is really just no decent way to implement this
        }
    }
}
