using Flame.RT;
using System;
using System.Collections;
using System.Collections.Generic;

namespace std
{
    [Header("vector")]
    public struct vector<T> : [T]
    {
        public const this()
        {
            this.data = new T[0];
        }
        public const this(int Length)
        {
            this.data = new T[Length];
        }
        public const this(int Length, T InitialValue)
        {
            this.data = new T[Length];
            foreach (var item in this.data)
            {
                item = InitialValue;
            }
        }
        public const this(uint Length)
        {
            this.data = new T[Length];
        }
        public const this(uint Length, T InitialValue)
        {
            this.data = new T[Length];
            foreach (var item in this.data)
            {
                item = InitialValue;
            }
        }
        public const this(vector<T> Other)
        {
            this.data = new T[Other.size()];
            Other.CopyTo(this.data);
        }
        public const this(T[] Values)
        {
            this.data = Values;
            var newData = new T[this.size()];
            this.CopyTo(newData);
            this.data = newData;
        }
        public const this(initializer_list<T> Values)
        {
            this.data = new T[0];
            foreach (var item in Values)
            {
                push_back(item);
            }
        }
        public const this(IForwardIterator Begin, IForwardIterator End)
        {
            throw new NotImplementedException(); // Nope. Nope. Nope.
        }

        #region Implementation Details

        private T[] data;

        /// <summary>
        /// Copies the array list's contents to the provided target array.
        /// </summary>
        /// <post>
        /// Copies all elements from the list, starting at index 0 up to and including the last index of this list or the target array, whichever comes first.
        /// </post>
        private void CopyTo(T[] Target)
        {
            foreach (var input in data, var output in Target)
                output = input;
        }

        #endregion

        #region Iterators

        public const IBidirectionalIterator begin()
        {
            throw new NotImplementedException(); // Not implemented
        }
        public const IBidirectionalIterator end()
        {
            throw new NotImplementedException(); // Not implemented
        }

        #endregion

        public const uint size()
        {
            return (uint)data.Length;
        }

        public const uint max_size()
        {
            return uint32.MaxValue;
        }

        public const uint capacity()
        {
            return (uint)data.Length;
        }

        public const bool empty()
        {
            return size() == (uint)0;
        }

        public void resize(uint n)
        {
            var newData = new T[n];
            CopyTo(newData);
            this.data = newData;
        }
        public void resize(uint n, T val)
        {
            uint oldSize = size();
            resize(n);
            for (uint i = oldSize; i < n; i++)
            {
                this[i] = val;
            }
        }

        public void shrink_to_fit();
        public void reserve(uint n);

        public void push_back(T Item)
        {
            resize((uint)(data.Length + 1));
            this.data[data.Length - 1] = Item;
        }
        public void pop_back()
        {
            resize((uint)(data.Length - 1));
        }

        public T this[int Index]
        {
            const get
            {
                return data[Index];
            }
            set
            {
                data[Index] = value;
            }
        }
        public T this[uint Index]
        {
            const get
            {
                return data[(int)Index];
            }
            set
            {
                data[(int)Index] = value;
            }
        }

        public const T front() { return this[0]; }
        public const T back() { return this[size() - (uint)1]; }

        public const T at(int Index) { return this[Index]; }
        public const T at(uint Index) { return this[Index]; }

        public void swap(vector<T>* Other)
        {
            vector<T> temp = this;
            this = *Other;
            *Other = temp;
        }
        public void swap(vector<T>^ Other)
        {
            swap((vector<T>*)Other);
        }

        public const [<T>] GetEnumerator()
        {
            return new List<T>(data).GetEnumerator();
        }
        public const IEnumerator GetObjectEnumerator() : IEnumerable.GetEnumerator
        {
            return GetEnumerator();
        }

        public const T[] operator cast()
        {
            T[] temp = new T[this.size()];
            this.CopyTo(temp);
            return temp;
        }
    }
}
