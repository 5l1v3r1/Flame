using Flame.RT;
using System.Collections;
using System.Collections.Generic;

namespace std
{
    [Header("unordered_map")]
    public struct unordered_map<TKey, TValue> : [pair<TKey, TValue>]
    {
        public const this()
        {
            this.data = new Dictionary<TKey, TValue>();
        }

        private Dictionary<TKey, TValue> data;

        public const bool empty() return (int)size() == 0;
        public const uint size() return (uint)data.Count;
        public const uint max_size() return uint.MaxValue;

        public void clear()
        {
            data = new Dictionary<TKey, TValue>();
        }

        public const uint count(TKey Key)
        {
            if (data.ContainsKey(Key)) return (uint)1;
            else return (uint)0;
        }

        public TValue this[TKey Key]
        {
            const get
            {
                return data[Key];
            }
            set
            {
                data = new Dictionary<TKey, TValue>(data);
                data[Key] = value;
            }
        }

        public const [<pair<TKey, TValue>>] GetGenericEnumerator() : IEnumerable<pair<TKey, TValue>>.GetEnumerator
        {
            return null; // Not implemented
        }

        public const IEnumerator GetObjectEnumerator() : IEnumerable.GetEnumerator
        {
            return null; // Not implemented
        }
    }
}
