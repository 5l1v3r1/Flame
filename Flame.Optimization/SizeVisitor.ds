using System;
using Flame.Compiler;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// A node visitor that computes an approximate size of a syntax tree.
    /// Metadata nodes are optionally ignored.
    /// </summary>
    public class SizeVisitor : INodeVisitor
    {
        public const this(set bool IgnoreMetadata);

        /// <summary>
        /// Gets a boolean value that specifies whether metadata is ignored
        /// or not.
        /// </summary>
        public bool IgnoreMetadata { get; private set; }

        /// <summary>
        /// Gets the approximate total size of all syntax nodes this visitor
        /// has come across.
        /// </summary>
        public int Size { get; private set; }

        /// <summary>
        /// Approximates the given statement's size, based on the given parameters.
        /// </summary>
        public static int ApproximateSize(IStatement Statement, bool IgnoreMetadata)
        {
            var visitor = new SizeVisitor(IgnoreMetadata);
            visitor.Visit(Statement);
            return visitor.Size;
        }

        /// <summary>
        /// Approximates the given statement's size. Metadata nodes are
        /// ignored.
        /// </summary>
        public static int ApproximateSize(IStatement Statement)
        {
            return ApproximateSize(Statement, true);
        }

        /// <summary>
        /// "Visits" an expression: an expression is taken as input and transformed another expression.
        /// </summary>
        public IExpression Visit(IExpression Value)
        {
            if (!IgnoreMetadata || !(Value is IMetadataNode<IExpression>))
                Size++;

            if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                return Value;
            }
            else
            {
                Value.Accept(this);
                return Value;
            }
        }

        /// <summary>
        /// "Visits" a statement: an statement is taken as input and transformed another statement.
        /// </summary>
        public IStatement Visit(IStatement Value)
        {
            if (Value.IsEmpty)
                return Value;

            if (!IgnoreMetadata || !(Value is IMetadataNode<IStatement>))
                Size++;
            if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                return Value;
            }
            else
            {
                Value.Accept(this);
                return Value;
            }
        }
    }
}
