using System;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// A node visitor that computes an approximate size of a syntax tree.
    /// Metadata nodes are optionally ignored.
    /// </summary>
    public virtual class SizeVisitor : INodeVisitor
    {
        public const this(set bool IgnoreMetadata);

        /// <summary>
        /// Gets a boolean value that specifies whether metadata is ignored
        /// or not.
        /// </summary>
        public bool IgnoreMetadata { get; private set; }

        /// <summary>
        /// Gets the approximate total size of all syntax nodes this visitor
        /// has come across.
        /// </summary>
        public int Size { get; protected set; }

        /// <summary>
        /// Approximates the given statement's size, based on the given parameters.
        /// </summary>
        public static int ApproximateSize(IStatement Statement, bool IgnoreMetadata)
        {
            var visitor = new SizeVisitor(IgnoreMetadata);
            visitor.Visit(Statement);
            return visitor.Size;
        }

        /// <summary>
        /// Approximates the given statement's size. Metadata nodes are
        /// ignored.
        /// </summary>
        public static int ApproximateSize(IStatement Statement)
        {
            return ApproximateSize(Statement, true);
        }

        /// <summary>
        /// "Visits" an expression: an expression is taken as input and transformed into another expression.
        /// This is the default implementation of the 'Visit' method.
        /// </summary>
        protected IExpression DefaultVisitImpl(IExpression Value)
        {
            if (!IgnoreMetadata || !(Value is IMetadataNode<IExpression>))
                Size++;

            if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                return Value;
            }
            else
            {
                Value.Accept(this);
                return Value;
            }
        }

        /// <summary>
        /// "Visits" an expression: an expression is taken as input and transformed into another expression.
        /// </summary>
        public virtual IExpression Visit(IExpression Value)
        {
            return DefaultVisitImpl(Value);
        }

        /// <summary>
        /// "Visits" a statement: an statement is taken as input and transformed into another statement.
        /// This is the default implementation of the 'Visit' method.
        /// </summary>
        protected IStatement DefaultVisitImpl(IStatement Value)
        {
            if (Value.IsEmpty)
                return Value;

            if (!IgnoreMetadata || !(Value is IMetadataNode<IStatement>))
                Size++;
            if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                return Value;
            }
            else
            {
                Value.Accept(this);
                return Value;
            }
        }

        /// <summary>
        /// "Visits" a statement: an statement is taken as input and transformed into another statement.
        /// </summary>
        public virtual IStatement Visit(IStatement Value)
        {
            return DefaultVisitImpl(Value);
        }
    }

    /// <summary>
    /// A size visitor that is tailored for block duplication.
    /// </summary>
    public class BlockDuplicationSizeVisitor : SizeVisitor
    {
        public this(IBodyPassEnvironment PassEnvironment)
            : base(true)
        {
            this.CallSize = 6;
            this.NonInlinableCallSize = 2;
            this.PassEnvironment = PassEnvironment;
        }

        public this(
            int CallSize, int NonInlinableCallSize,
            IBodyPassEnvironment PassEnvironment)
            : base(true)
        {
            this.CallSize = CallSize;
            this.NonInlinableCallSize = NonInlinableCallSize;
            this.PassEnvironment = PassEnvironment;
        }

        /// <summary>
        /// Gets or sets the size that is assigned to invocation expressions.
        /// </summary>
        /// <returns>The size that is assigned to invocation expressions.</returns>
        public int CallSize { get; private set; }

        /// <summary>
        /// Gets or sets the size that is assigned to direct calls which cannot be
        /// inlined.
        /// </summary>
        /// <returns>The size that is assigned to direct calls which cannot be inlined.</returns>
        public int NonInlinableCallSize { get; private set; }

        /// <summary>
        /// Gets this size visitor's pass environment, which is used to decide if direct
        /// method calls might be inlined.
        /// </summary>
        /// <returns>The size visitor's pass environment.</returns>
        public IBodyPassEnvironment PassEnvironment { get; private set; }

        /// <summary>
        /// "Visits" an expression: an expression is taken as input and transformed into another expression.
        /// </summary>
        public override IExpression Visit(IExpression Value)
        {
            if (Value is InvocationExpression)
            {
                // What we want to avoid here is a situation where we duplicate a basic block containing
                // a method call and then inline the method calls. It's probably a whole lot more
                // profitable to first inline the method calls and then duplicate the basic blocks.
                // We discourage inlining here by inflating the 'size' of invocation expressions, especially
                // if they are inlinable or might be inlinable in the future.

                var invExpr = (InvocationExpression)Value;
                var dissected = DissectedCallHelpers.DissectCall(invExpr);

                if (dissected == null || !InliningExtensions.CanInline(dissected.Method, dissected.ThisValue))
                {
                    // We can't inline this call *right now.* But that doesn't preclude that we may be able
                    // to inline it in the future.
                    Size += CallSize;
                }
                else if (PassEnvironment.GetMethodBody(dissected.Method) == null)
                {
                    // We will never be able to inline this call because we don't have the method body
                    // to do so.
                    Size += NonInlinableCallSize;
                }
                else
                {
                    // We can inline the call.
                    Size += CallSize;
                }

                invExpr.AcceptPredicate(this);
                return invExpr;
            }
            else
            {
                return DefaultVisitImpl(Value);
            }
        }
    }
}
