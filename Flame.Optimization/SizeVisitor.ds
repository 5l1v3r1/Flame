using System;
using Flame.Compiler;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// A node visitor that computes an approximate size of a syntax tree.
    /// </summary>
    public class SizeVisitor : IFlowVisitor<int, int>
    {
        public const this(set bool IsOptimistic, set int LoopWeight)
        {
            this.CurrentFlow = 0;
        }

        public int CurrentFlow { const get; set; }
        public bool IsOptimistic { const get; private set; }
        public int LoopWeight { const get; private set; }

        public int TerminatedFlow { const get return 0; }

        /// <summary>
        /// Approximates the given statement's size, based on the given parameters.
        /// </summary>
        public static const int ApproximateSize(IStatement Statement, bool IsOptimistic, int LoopWeight)
        {
            var visitor = new SizeVisitor(IsOptimistic, LoopWeight);
            visitor.Visit(Statement);
            return visitor.CurrentFlow;
        }

        /// <summary>
        /// Computes the "sum" of a flow state and a control flow delta.
        /// </summary>
        public const int CreateCollapsedFlow(int First, int Second)
        {
            return CreateSequenceFlow(First, Second);
        }

        /// <summary>
        /// Computes the "difference" between two flow states, such that
        /// the "sum" of the first flow state and the result of this operation
        /// results in the second state.
        /// </summary>
        public const int CreateDeltaFlow(int First, int Second)
        {
            return Second - First;
        }

        /// <summary>
        /// Creates a flow delta that represents the sequential execution of
        /// two flow deltas.
        /// </summary>
        public const int CreateSequenceFlow(int First, int Second)
        {
            return First + Second;
        }

        /// <summary>
        /// Selects precisely one of two flow paths.
        /// </summary>
        public const int CreateSelectFlow(int First, int Second)
        {
            if (IsOptimistic)
            {
                return Math.Min(First, Second);
            }
            else
            {
                return Math.Max(First, Second);
            }
        }

        /// <summary>
        /// Creates a flow state that "loops", i.e. will be executed zero or more
        /// times.
        /// </summary>
        public const int CreateLoopFlow(UniqueTag Tag, int Flow)
        {
            return Flow * LoopWeight;
        }

        /// <summary>
        /// "Visits" an expression: an expression is taken as input and transformed another expression.
        /// </summary>
        public IExpression Visit(IExpression Value)
        {
            CurrentFlow++;
            if (Value is IFlowExpression)
            {
                return ((IFlowExpression)Value).AcceptFlow<int, int>(this);
            }
            else if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                return Value;
            }
            else
            {
                Value.Accept(this);
                return Value;
            }
        }

        /// <summary>
        /// "Visits" a statement: an statement is taken as input and transformed another statement.
        /// </summary>
        public IStatement Visit(IStatement Value)
        {
            if (Value.IsEmpty)
            {
                return Value;
            }

            CurrentFlow++;
            if (Value is IFlowStatement)
            {
                return ((IFlowStatement)Value).AcceptFlow<int, int>(this);
            }
            else if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                return Value;
            }
            else
            {
                Value.Accept(this);
                return Value;
            }
        }
    }
}
