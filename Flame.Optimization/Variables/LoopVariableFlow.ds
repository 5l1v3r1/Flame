using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Variables;

namespace Flame.Optimization.Variables
{
    public class LoopVariableFlow : IVariableFlow
    {
        public const this(set InsertStatement PreInsert, set IVariableFlow LoopBody,
                          set InsertStatement LoopPostInsert);

        public InsertStatement PreInsert { const get; private set; }
        public IVariableFlow LoopBody { const get; private set; }
        public InsertStatement LoopPostInsert { const get; private set; }

        public VariableDefinitionReach UpdateReach(VariableDefinitionReach Reach, VariableDefinitionChain Chain)
        {
            var oldAccess = new HashSet<IDefinitionAccess>(Reach.Reach);

            var loopReach = LoopBody.UpdateReach(Reach, Chain);

            if (loopReach == Reach)
                return loopReach;

            var newAccess = new HashSet<IDefinitionAccess>(Reach.Reach);
            newAccess.ExceptWith(oldAccess);

            VariableDefinitionReach result;
            if (newAccess.Count > 0)
            {
                var matReach = VariableFlowHelpers.Materialize(Reach, PreInsert);
                Reach.Transfer(matReach, newAccess);
                result = VariableFlowHelpers.Phi(matReach, PreInsert, loopReach, LoopPostInsert);
            }
            else
            {
                result = VariableFlowHelpers.Phi(Reach, PreInsert, loopReach, LoopPostInsert);
            }
            Chain.AddDefinition(result);
            return result;
        }
    }
}
