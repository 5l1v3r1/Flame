using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;

namespace Flame.Optimization.Variables
{
    /// <summary>
    /// Defines terminated variable flow: a flow state that represents terminated flow.
    /// This is mainly intended for unknown flow termination types, as it enforces
    /// extremely conservative behavior.
    /// </summary>
    public class TerminatedVariableFlow : IVariableFlow
    {
        public const this(set InsertStatement PreInsert);

        public InsertStatement PreInsert { const get; private set; }

        public const [BlockTerminationPoint] GetTerminationPoints(VariableDefinitionChain Chain, UniqueTag Tag)
        {
            return Enumerable.Empty<BlockTerminationPoint>();
        }

        public VariableDefinitionReach UpdateReach(VariableDefinitionReach Reach, VariableDefinitionChain Chain)
        {
            // Materialize to stay on the safe side.
            return VariableFlowHelpers.Materialize(Chain, Reach, PreInsert);
        }
    }

    /// <summary>
    /// Defines terminated block variable flow: a "break" or "continue" statement.
    /// </summary>
    public class TerminatedBlockVariableFlow : IVariableFlow
    {
        public const this(set InsertStatement PreInsert, set UniqueTag Target)
        {
            this.terminationPoints = new Dictionary<VariableDefinitionChain, BlockTerminationPoint>();
        }

        public InsertStatement PreInsert { const get; private set; }
        public UniqueTag Target { const get; private set; }

        private Dictionary<VariableDefinitionChain, BlockTerminationPoint> terminationPoints;

        public const [BlockTerminationPoint] GetTerminationPoints(VariableDefinitionChain Chain, UniqueTag Tag)
        {
            if (Tag == Target && terminationPoints.ContainsKey(Chain))
                return new BlockTerminationPoint[] { terminationPoints[Chain] };
            else
                return Enumerable.Empty<BlockTerminationPoint>();
        }

        public VariableDefinitionReach UpdateReach(VariableDefinitionReach Reach, VariableDefinitionChain Chain)
        {
            this.terminationPoints[Chain] = new BlockTerminationPoint(Reach, PreInsert);
            return Reach;
        }
    }
}
