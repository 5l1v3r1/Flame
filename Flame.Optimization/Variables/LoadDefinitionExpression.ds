using System;
using Flame.Compiler;
using Flame.Compiler.Expressions;

namespace Flame.Optimization.Variables
{
    public class LoadDefinitionExpression : IExpression, IDefinitionAccessNode
    {
        public const this(set VariableDefinitionChain Chain, set IDefinitionAccess Access);
        public const this(set VariableDefinitionChain Chain)
        {
            this.Access = new UnconditionalAccess();
        }

        public VariableDefinitionChain Chain { const get; private set; }
        public IDefinitionAccess Access { const get; private set; }

        public IType Type { const get return Chain.Type; }

        public IExpression Unwrap()
        {
            return Chain.GetDefinition(Access).CreateGetExpression();
        }

        public bool IsConstantNode { const get return Unwrap().IsConstantNode; }
        public IBoundObject Evaluate()
        {
            return Unwrap().Evaluate();
        }

        public IExpression Accept(INodeVisitor Visitor)
        {
            return Visitor.Visit(Unwrap());
        }

        public IExpression Optimize()
        {
            return Unwrap().Optimize();
        }

        public ICodeBlock Emit(ICodeGenerator CodeGenerator)
        {
            return Unwrap().Emit(CodeGenerator);
        }
    }
}
