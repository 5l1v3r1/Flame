using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Optimization.Variables
{
    /// <summary>
    /// A type of statement that represents an assignment associated with a single
    /// variable definition.
    /// The assignment remains live as long as the definition is live.
    /// </summary>
    public class VariableDefinitionStatement : IStatement, IVariableDefinitionStatement
    {
        /// <summary>
        /// Creates a new variable definition statement from the given parameters.
        /// Note that the given definition must have an underlying variable.
        /// </summary>
        public const this(set VariableDefinitionReach Definition, set IExpression Value);

        /// <summary>
        /// Gets the variable definition reach this statement depends on.
        /// If this reach is live, the assignment is performed.
        /// Otherwise, the assignment's right-hand side is simply popped.
        /// </summary>
        public VariableDefinitionReach Definition { const get; private set; }

        /// <summary>
        /// Gets the right-hand side of the variable assignment operation.
        /// </summary>
        public IExpression Value { const get; private set; }

        public bool IsConstantNode
        {
            const get return Unwrap().IsConstantNode;
        }

        public IStatement Unwrap()
        {
            if (Definition.IsLive)
                return Definition.Definition.Variable.CreateSetStatement(Value);
            else
                return new ExpressionStatement(Value);
        }

        public IStatement Optimize()
        {
            return Unwrap().Optimize();
        }

        public IStatement Accept(INodeVisitor Visitor)
        {
            return Visitor.Visit(Unwrap());
        }

        public ICodeBlock Emit(ICodeGenerator CodeGenerator)
        {
            return Unwrap().Emit(CodeGenerator);
        }
    }

    /// <summary>
    /// A type of statement that marks a variable's definition, but does not
    /// do anything beyond that.
    /// </summary>
    public class VariableDefinitionMarker : IStatement, IVariableDefinitionStatement
    {
        /// <summary>
        /// Creates a new variable definition marker statement.
        /// </summary>
        public const this(set VariableDefinitionReach Definition);

        /// <summary>
        /// Gets the variable definition that is marked here.
        /// </summary>
        public VariableDefinitionReach Definition { const get; private set; }

        public bool IsConstantNode
        {
            const get return true;
        }

        public IStatement Optimize()
        {
            return this;
        }

        public IStatement Accept(INodeVisitor Visitor)
        {
            return this;
        }

        public ICodeBlock Emit(ICodeGenerator CodeGenerator)
        {
            return EmptyStatement.Emit(CodeGenerator);
        }
    }
}
