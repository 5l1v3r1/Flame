using System;
using System.Collections.Generic;

namespace Flame.Optimization.Variables
{
    /// <summary>
    /// Represents the reach of a single variable definition.
    /// </summary>
    public class VariableDefinitionReach
    {
        /// <summary>
        /// Creates a new variable definition reach structure for the given definition.
        /// </summary>
        public const this(set IVariableDefinition Definition, set LocalVariableDescription MappedLocal)
        {
            this.Reach = new HashSet<IDefinitionAccess>();
        }

        /// <summary>
        /// Gets the variable definition whose reach is represented.
        /// </summary>
        public IVariableDefinition Definition { const get; private set; }

        /// <summary>
        /// Gets the local this variable definition was originally mapped to.
        /// </summary>
        public LocalVariableDescription MappedLocal { const get; private set; }

        /// <summary>
        /// Defines a set of identifiers that are within this variable definition's reach.
        /// </summary>
        public HashSet<IDefinitionAccess> Reach { const get; private set; }

        /// <summary>
        /// Tests if this variable definition has been made volatile.
        /// </summary>
        public bool IsVolatile
        {
            const get
            {
                foreach (var item in Reach)
                    if (item.IsVolatile)
                {
                        return true;
                }
                return false;
            }
        }

        /// <summary>
        /// Tests if this variable definition is live.
        /// </summary>
        public bool IsLive
        {
            const get
            {
                foreach (var item in Reach)
                    if (item.IsLive)
                {
                        return true;
                }
                return false;
            }
        }

        /// <summary>
        /// Tests whether the given identifier is within this variable definition's reach.
        /// </summary>
        public const bool Contains(IDefinitionAccess Identifier)
        {
            return Reach.Contains(Identifier);
        }

        /// <summary>
        /// Adds a single identifier to this variable definition's reach.
        /// </summary>
        public void Add(IDefinitionAccess Identifier)
        {
            Reach.Add(Identifier);
        }

        /// <summary>
        /// Adds a set of identifiers to this variable definition's reach.
        /// </summary>
        public void Add([IDefinitionAccess] Identifiers)
        {
            Reach.UnionWith(Identifiers);
        }

        /// <summary>
        /// Removes a single identifier from this variable definition's reach.
        /// </summary>
        public void Remove(IDefinitionAccess Identifier)
        {
            Reach.Remove(Identifier);
        }

        /// <summary>
        /// Removes a set of identifiers from this variable definition's reach.
        /// </summary>
        public void Remove([IDefinitionAccess] Identifiers)
        {
            Reach.ExceptWith(Identifiers);
        }

        /// <summary>
        /// Transfers the given set of identifiers from this variable definition's
        /// reach to another's.
        /// </summary>
        public void Transfer(VariableDefinitionReach Target, [IDefinitionAccess] Identifiers)
        {
            Remove(Identifiers);
            Target.Add(Identifiers);
        }
    }
}
