using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame.Optimization.Variables
{
    /// <summary>
    /// A unique identifier that represents a single variable access.
    /// </summary>
    public interface IDefinitionAccess
    {
        /// <summary>
        /// Determines this definition access' liveliness, based on a set of
        /// variable definitions whose liveliness depend on the outcome of this method.
        /// Said set can is to deal with cyclic variable definition dependencies.
        /// </summary>
        const bool GetLiveliness(HashSet<VariableDefinitionReach> Dependencies);

        /// <summary>
        /// Tells if this definition access is volatile.
        /// </summary>
        bool IsVolatile { const get; }
    }

    /// <summary>
    /// Represents unconditional variable access.
    /// </summary>
    public class UnconditionalAccess : IDefinitionAccess
    {
        /// <summary>
        /// Creates a new unique access identifier.
        /// </summary>
        public const this();

        public const bool GetLiveliness(HashSet<VariableDefinitionReach> Dependencies)
        {
            return true;
        }

        public bool IsVolatile { const get return false; }
    }

    /// <summary>
    /// Represents unconditional volatile variable access.
    /// </summary>
    public class VolatileAccess : IDefinitionAccess
    {
        /// <summary>
        /// Creates a new unique access identifier.
        /// </summary>
        public const this();

        public const bool GetLiveliness(HashSet<VariableDefinitionReach> Dependencies)
        {
            return true;
        }

        public bool IsVolatile { const get return true; }
    }

    /// <summary>
    /// Defines variable access that is live only if an associated variable
    /// definition is, too.
    /// </summary>
    public class ReachDependentAccess : IDefinitionAccess
    {
        /// <summary>
        /// Creates a variable access identifier based on the given reach.
        /// </summary>
        public const this(set VariableDefinitionReach Reach);

        /// <summary>
        /// Gets the variable definition reach whose liveliness this definition
        /// access depends on.
        /// </summary>
        public VariableDefinitionReach Reach { const get; private set; }

        public bool IsLive { const get return Reach.IsLive; }

        public bool IsVolatile { const get return false; }

        public const bool GetLiveliness(HashSet<VariableDefinitionReach> Dependencies)
        {
            if (Dependencies.Contains(Reach))
                return false;
            else
                return Reach.GetLiveliness(Dependencies);
        }
    }
}
