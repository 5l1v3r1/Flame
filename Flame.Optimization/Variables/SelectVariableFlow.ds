using System;
using Flame.Compiler;
using Flame.Compiler.Variables;

namespace Flame.Optimization.Variables
{
    public class SelectVariableFlow : IVariableFlow
    {
        public const this(set InsertStatement PreInsert, set IVariableFlow First,
                          set InsertStatement FirstPostInsert, set IVariableFlow Second,
                          set InsertStatement SecondPostInsert);

        public InsertStatement PreInsert { const get; private set; }
        public IVariableFlow First { const get; private set; }
        public InsertStatement FirstPostInsert { const get; private set; }
        public IVariableFlow Second { const get; private set; }
        public InsertStatement SecondPostInsert { const get; private set; }

        public VariableDefinitionReach UpdateReach(VariableDefinitionReach Reach, VariableDefinitionChain Chain)
        {
            var newReach1 = First.UpdateReach(Reach, Chain);
            var newReach2 = Second.UpdateReach(Reach, Chain);

            if (newReach1 == newReach2) // Unmodified.
            {
                return newReach1;
            }
            else
            {
                VariableDefinitionReach result;
                if (newReach1 == Reach) // First path does not modify, second path does.
                {
                    result = VariableFlowHelpers.Phi(Reach, PreInsert, newReach2, SecondPostInsert);
                }
                else if (newReach2 == Reach)  // First path does not modify, second path does.
                {
                    result = VariableFlowHelpers.Phi(newReach1, FirstPostInsert, Reach, PreInsert);
                }
                else // Symmetric reach.
                {
                    result = VariableFlowHelpers.Phi(newReach1, FirstPostInsert, newReach2, SecondPostInsert);
                }
                Chain.AddDefinition(result);
                return result;
            }
        }
    }
}
