using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Variables;

namespace Flame.Optimization.Variables
{
    public class SelectVariableFlow : IVariableFlow
    {
        public const this(set InsertStatement PreInsert, set IVariableFlow First,
                          set InsertStatement FirstPostInsert, set IVariableFlow Second,
                          set InsertStatement SecondPostInsert);

        public InsertStatement PreInsert { const get; private set; }
        public IVariableFlow First { const get; private set; }
        public InsertStatement FirstPostInsert { const get; private set; }
        public IVariableFlow Second { const get; private set; }
        public InsertStatement SecondPostInsert { const get; private set; }

        public const [BlockTerminationPoint] GetTerminationPoints(VariableDefinitionChain Chain, BlockTag Tag)
        {
            return Enumerable.Concat<BlockTerminationPoint>(
                First.GetTerminationPoints(Chain, Tag),
                Second.GetTerminationPoints(Chain, Tag));
        }

        public VariableDefinitionReach UpdateReach(VariableDefinitionReach Reach, VariableDefinitionChain Chain)
        {
            var newReach1 = First.UpdateReach(Reach, Chain);
            var newReach2 = Second.UpdateReach(Reach, Chain);

            if (newReach1 == newReach2) // Unmodified.
            {
                return newReach1;
            }
            else if (newReach1 == Reach) // First path does not modify, second path does.
            {
                return VariableFlowHelpers.Phi(Chain, Reach, PreInsert, newReach2, SecondPostInsert);
            }
            else if (newReach2 == Reach)  // First path does not modify, second path does.
            {
                return VariableFlowHelpers.Phi(Chain, newReach1, FirstPostInsert, Reach, PreInsert);
            }
            else // Symmetric reach.
            {
                return VariableFlowHelpers.Phi(Chain, newReach1, FirstPostInsert, newReach2, SecondPostInsert);
            }
        }
    }
}
