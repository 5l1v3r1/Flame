using Flame.Compiler;
using Flame.Compiler.Variables;

namespace Flame.Optimization.Variables
{
    /// <summary>
    /// Defines common functionality for variable definitions.
    /// </summary>
    public interface IVariableDefinition
    {
        /// <summary>
        /// Gets this variable definition's underlying variable, if any.
        /// Otherwise, null.
        /// </summary>
        IUnmanagedVariable Variable { const get; }

        /// <summary>
        /// Creates a get-expression for this variable definition.
        /// </summary>
        IExpression CreateGetExpression();

        /// <summary>
        /// Has this variable definition make use of definition access metrics.
        /// </summary>
        VariableDefinitionReach UseMetrics(VariableDefinitionReach ReactingReach,
                                           AccessMetrics Bounds);

        /// <summary>
        /// Has this variable definition "react" to a change in another definition's chain:
        /// it gets an opportunity to use the other variable's previous value.
        /// Either this variable definition reach or a newly created one is then returned.
        /// </summary>
        VariableDefinitionReach ReactTo(VariableDefinitionReach ReactingReach,
                                        VariableDefinitionReach ActingDefinition,
                                        InsertStatement PreInsert);
    }

    /// <summary>
    /// Defines common functionality for statements that define a variable.
    /// </summary>
    public interface IVariableDefinitionStatement : IStatement
    {
        /// <summary>
        /// Gets the definition reach associated with this node.
        /// </summary>
        VariableDefinitionReach Definition { const get; }
    }
}
