using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// A visitor that matches control flow statements, such as `break` and `continue`
    /// at the end of an enclosing control flow statement such as a tagged block, a
    /// `while` loop, a `do...while` loop or a `for` loop.
    /// Said enclosing statement is then transformed.
    /// </summary>
    public class FinalFlowVisitor : StatementVisitorBase
    {
        /// <summary>
        /// Creates a final flow visitor from the given delegates.
        /// </summary>
        public const this(set bool(IStatement) MatchesEnclosingFlow,
                          set IStatement(IStatement) GetEnclosingFlowBody,
                          set bool(IStatement, IStatement) MatchesFinalFlow,
                          set IStatement(IStatement, IStatement) TransformEnclosingFlow);

        /// <summary>
        /// Matches a given enclosing final flow statement.
        /// </summary>
        public bool(IStatement) MatchesEnclosingFlow { const get; private set; }

        /// <summary>
        /// Gets the enclosing flow statement's body.
        /// </summary>
        public IStatement(IStatement) GetEnclosingFlowBody { const get; private set; }

        /// <summary>
        /// Matches the final flow statement.
        /// This delegate's first argument represents the enclosing statement,
        /// whereas the second argument represents the potential final flow statement.
        /// </summary>
        public bool(IStatement, IStatement) MatchesFinalFlow { const get; private set; }

        /// <summary>
        /// Transforms the enclosing flow statement.
        /// The first argument represents the original enclosing flow statement,
        /// and second represents the enclosing flow statement's body
        /// minus the final flow statement.
        /// </summary>
        public IStatement(IStatement, IStatement) TransformEnclosingFlow { const get; private set; }

        public const bool Matches(IStatement Value)
        {
            return MatchesEnclosingFlow(Value);
        }

        protected IStatement Transform(IStatement Value)
        {
            var remover = new FinalFlowRemover(Value, MatchesFinalFlow);

            var transBody = remover.Visit(GetEnclosingFlowBody(Value));
            if (!remover.CurrentFlow.RemoveFinalStatements())
            {
                // No final statement were removed. Do nothing.
                return Value;
            }

            // We got rid of the final statements. Now do something interesting with
            // the enclosing statement.
            return TransformEnclosingFlow(Value, transBody);
        }
    }
}
