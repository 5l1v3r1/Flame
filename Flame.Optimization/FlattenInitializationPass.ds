using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Visitors;
using Pixie;

namespace Flame.Optimization
{
    /// <summary>
    /// A node visitor that attempts to flatten initialization expressions, by
    /// moving them higher up the node tree.
    /// </summary>
    /// <remarks>
    /// This can benefit node trees such as:
    ///
    ///     #invoke({ init; expr }, args...)
    ///
    /// which will be transformed into the semantically equivalent:
    ///
    ///     { init; #invoke(expr, args) }
    ///
    /// In many ways, this visitor is a less demanding version of
    /// -fimperative-code's visitor.
    /// </remarks>
    public class FlattenInitializationVisitor : LocationVisitorBase
    {
        public const this()
        {
            this.transLocs = new List<SourceLocation>();
            this.initStatement = null;
            this.finalStatement = null;
            this.finalizeStatements = new List<IStatement>();
        }

        private List<SourceLocation> transLocs;

        // Represents an outer initialization site.
        private InsertStatement initStatement;

        // Represents an inner finalization site.
        private InsertStatement finalStatement;

        // Stores a list of finalization actions that have yet to be scheduled.
        private List<IStatement> finalizeStatements;

        // Tells expressions whether they *must* spill finalization logic from
        // previous expressions. This flag makes sure that flow control
        // nodes are not tampered with.
        private bool mustSpillFinalization;

        /// <summary>
        /// Spills finalization statements.
        /// </summary>
        private void SpillFinalization()
        {
            foreach (var item in finalizeStatements)
            {
                finalStatement.Insert(item);
            }
            finalizeStatements = new List<IStatement>();
            finalStatement = null;
        }

        /// <summary>
        /// Gets the source locations belonging to initialization expressions
        /// that have been moved around in the expression tree.
        /// </summary>
        public [SourceLocation] TransformedLocations
        {
            const get { return transLocs; }
        }

        protected override const bool MatchesCore(IExpression Expression)
        {
            return true;
        }
        protected override const bool MatchesCore(IStatement Statement)
        {
            return true;
        }

        private IExpression transformImpl(IExpression Expression, bool HasOuterSite)
        {
            if (Expression is InitializedExpression)
            {
                // There will *always* be some outer initialization site
                // by the time we get here.
                var expr = (InitializedExpression)Expression;

                // Move the initialization logic up the tree.
                initStatement.Insert(expr.Initialization);

                if (HasOuterSite && CurrentLocation != null)
                {
                    // If we have actually moved a statement, then we'll log
                    // a celebratory source location.
                    transLocs.Add(CurrentLocation);
                }

                // Visit the initialization expression's value.
                var visitedValue = Visit(expr.Value);

                if (NodeExtensions.CanDelay(expr.Finalization))
                {
                    // We can delay this finalization statement.
                    // Append the initialization expression's finalization
                    // logic to the finalization list.
                    finalizeStatements.Add(expr.Finalization);

                    // Return the visited value.
                    return visitedValue;
                }
                else
                {
                    // Create a new expression that contains the initialization
                    // expression's value and finalization logic.
                    return new InitializedExpression(
                        EmptyStatement,
                        visitedValue,
                        expr.Finalization).Simplify();
                }
            }
            else if (Expression is IFlowExpression)
            {
                // I ain't touchin' that with a stick.

                initStatement = null;
                mustSpillFinalization = true;
                var result = Expression.Accept(this);
                SpillFinalization();
                return result;
            }
            else
            {
                return Expression.Accept(this);
            }
        }

        protected override IExpression TransformCore(IExpression Expression)
        {
            bool oldSpillFlag = mustSpillFinalization;
            if (oldSpillFlag)
            {
                // Spill finalization logic first.
                SpillFinalization();
                mustSpillFinalization = false;
            }

            IExpression result;
            if (initStatement != null)
            {
                // Outstanding!
                // It seems like we have already created an initialization
                // site outside this scope.

                result = transformImpl(Expression, true);
            }
            else
            {
                // Too bad. We don't have a pre-existing initialization site
                // outside of this expression. Time to rectify the situation.

                var initStmt = new InsertStatement();
                initStatement = initStmt;
                var contents = transformImpl(Expression, false);
                result = new InitializedExpression(
                    initStmt.Unwrap(),
                    contents).Simplify();
            }

            // Reset the spilling flag.
            mustSpillFinalization = oldSpillFlag;

            // Mark the initialization expression as null, so we don't mess up
            // the program's semantics by re-ordering operations in a bad way.
            initStatement = null;

            // Create a new finalization site.
            finalStatement = new InsertStatement();

            // Return the result, finalization statement and all.
            return new InitializedExpression(
                EmptyStatement,
                result,
                finalStatement);
        }

        private IStatement transformImpl(IStatement Statement)
        {
            if (Statement is IFlowStatement && !(Statement is ReturnStatement))
            {
                // I ain't touchin' that with a stick.
                // Whitelist return statements, though.

                initStatement = null;
                mustSpillFinalization = true;
                var result = Statement.Accept(this);
                SpillFinalization();
                return result;
            }
            else
            {
                return Statement.Accept(this);
            }
        }

        protected override IStatement TransformCore(IStatement Statement)
        {
            IStatement result;
            if (initStatement != null)
            {
                // Outstanding!
                // It seems like we have already created an initialization
                // site outside this scope.

                result = transformImpl(Statement);
            }
            else
            {
                // Too bad. We don't have a pre-existing initialization site
                // outside of this statement. Time to rectify the situation.

                var initStmt = new InsertStatement();
                initStatement = initStmt;

                var contents = transformImpl(Statement);
                result = new BlockStatement(new IStatement[]
                {
                    initStmt.Unwrap(),
                    contents
                }).Simplify();
            }

            // Mark the initialization expression as null, so we don't mess up
            // the program's semantics by re-ordering operations in a bad way.
            initStatement = null;

            var finalStmt = new InsertStatement();
            finalStatement = finalStmt;
            SpillFinalization();

            // Return the result and proceed.
            // Be sure to spill finalization first, though.
            return new BlockStatement(new IStatement[]
            {
                result,
                finalStmt.Unwrap()
            }).Simplify();
        }
    }

    /// <summary>
    /// A pass that attempts to flatten initialization expressions, by
    /// moving them higher up the node tree.
    /// </summary>
    public static class FlattenInitializationPass : IPass<BodyPassArgument, IStatement>
    {
        /// <summary>
        /// This pass' name string.
        /// </summary>
        public const string FlattenInitializationPassName = "flatten-init";

        public IStatement Apply(BodyPassArgument Args)
        {
            var rewriter = new FlattenInitializationVisitor();
            var result = rewriter.Visit(Args.Body);

            // Maybe we can even emit a remark of some kind.
            var log = Args.PassEnvironment.Log;
            if (log.Options.ShouldRemark(FlattenInitializationPassName, false))
            {
                foreach (var item in rewriter.TransformedLocations)
                {
                    log.LogMessage(new LogEntry(
                        "Pass remark",
                        new MarkupNode[]
                        {
                            new MarkupNode(NodeConstants.TextNodeType,
                                "Moved this initialization logic up the tree. "),
                            Flags.CreateCauseNode(Flags.GetRemarkOptionName(FlattenInitializationPassName))
                        },
                        item));
                }
            }

            return result;
        }
    }
}
