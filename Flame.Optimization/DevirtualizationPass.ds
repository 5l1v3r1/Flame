using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;
using Pixie;

namespace Flame.Optimization
{
    /// <summary>
    /// A simple visitor that replaces virtual (indirect) delegates by direct delegates.
    /// </summary>
    public class DevirtualizingVisitor : LocationVisitorBase
    {
        alias DevirtualizationRecord = Tuple<SourceLocation, IMethod, IMethod>;

        public const this(BodyPassArgument Arg, IType ThisType)
        {
            this.Arg = Arg;
            this.ThisType = ThisType;
            this.devirtRecords = new List<DevirtualizationRecord>();
        }

        private List<DevirtualizationRecord> devirtRecords;

        /// <summary>
        /// A read-only list of records that describe individual devirtualizations.
        /// </summary>
        public IReadOnlyList<DevirtualizationRecord> Records { get { return devirtRecords; } }

        /// <summary>
        /// Gets the body pass argument for this visitor.
        /// </summary>
        public BodyPassArgument Arg { get; private set; }

        /// <summary>
        /// Gets the 'this' type of the method body that is being devirtualized.
        /// </summary>
        /// <returns></returns>
        public IType ThisType { get; private set; }

        protected override bool MatchesCore(IExpression Value)
        {
            return Value is GetMethodExpression;
        }

        protected override bool MatchesCore(IStatement Value)
        {
            return false;
        }

        protected override IExpression TransformCore(IExpression Value)
        {
            assert(Value is GetMethodExpression);
            var expr = (GetMethodExpression)Value;

            if (expr.Op == Operator.GetVirtualDelegate)
            {
                assert(expr.Caller != null);

                var targetDeclTy = expr.Target.DeclaringType;
                if (targetDeclTy.IsValueType)
                    return expr;

                var caller = SpecializedCall.UnwrapCast(expr.Caller);
                var callerTy = caller.Type;
                bool ptrCaller = callerTy.IsPointer;
                if (ptrCaller)
                    // Unwrap at most one level of pointer indirection.
                    callerTy = callerTy.AsPointerType().ElementType;

                if (callerTy.Equals(targetDeclTy))
                    // We can't possibly hope to find a better implementation.
                    return expr;

                var impl = expr.Target.GetImplementation(callerTy);
                if (impl == null)
                    return expr;

                if (!AccessChecker.CanAccess(ThisType, impl, Arg))
                    return expr;

                // Victory! We can (partially) devirtualize this thing!
                // Log a record before returning.
                devirtRecords.Add(new DevirtualizationRecord(
                    CurrentLocation, expr.Target, impl));

                var implDeclTy = impl.DeclaringType;
                if (!ptrCaller && !callerTy.Equals(implDeclTy))
                    // Insert a reinterpret cast if necessary
                    caller = new ReinterpretCastExpression(caller, implDeclTy);

                if (impl.IsVirtual)
                {
                    return new GetMethodExpression(
                        impl, caller, Operator.GetVirtualDelegate);
                }
                else
                {
                    return new GetMethodExpression(
                        impl, caller, Operator.GetDelegate);
                }
            }

            return expr;
        }

        protected override IStatement TransformCore(IStatement Value)
        {
            return Value;
        }
    }

    /// <summary>
    /// A simple pass that replaces virtual (indirect) delegates by direct delegates.
    /// </summary>
    public static class DevirtualizationPass : IPass<BodyPassArgument, IStatement>
    {
        alias DevirtualizationRecord = Tuple<SourceLocation, IMethod, IMethod>;

        /// <summary>
        /// This pass' name.
        /// </summary>
        public const string DevirtualizationPassName = "devirtualize";

        public const string DevirtualizationRemarksName = DevirtualizationPassName;

        private string GetShortMethodName(IMethod Method)
        {
            string methodName = Method.Name.ToString();
            if (Method.DeclaringType == null)
                return methodName;
            else
                return MemberExtensions.CombineNames(
                    Method.DeclaringType.Name.ToString(), methodName);
        }

        private void LogDevirtualizationRecord(
            DevirtualizationRecord Record, ICompilerLog Log)
        {
            // Don't log anything if we don't have a source location.
            if (Record.Item1 == null)
                return;

            var srcLoc = Record.Item1;
            var virtualMethod = Record.Item2;
            var directMethod = Record.Item3;

            bool stillVirt = directMethod.IsVirtual ||
                directMethod.DeclaringType.IsInterface;

            var nodes = new List<MarkupNode>();
            if (stillVirt)
                nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "refined "));
            else
                nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "devirtualized "));
            nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "virtual call to '"));
            nodes.Add(new MarkupNode(NodeConstants.BrightNodeType, GetShortMethodName(virtualMethod)));
            nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "' by replacing it by a "));
            if (stillVirt)
                nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "virtual "));

            nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "call to '"));
            nodes.Add(new MarkupNode(NodeConstants.BrightNodeType, GetShortMethodName(directMethod)));
            nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "'. "));
            nodes.Add(new MarkupNode(NodeConstants.CauseNodeType, Flags.GetRemarkOptionName(DevirtualizationRemarksName)));

            Log.LogMessage(new LogEntry(
                "pass remark", new MarkupNode("entry", nodes), srcLoc));
        }

        public IStatement Apply(BodyPassArgument Arg)
            in { !InvalidCallFindingVisitor.ContainsInvalidCalls(Arg.Body) }
            out (result) { !InvalidCallFindingVisitor.ContainsInvalidCalls(result) }
        {
            var thisType = Arg.DeclaringType;
            if (thisType != null)
                thisType = thisType.MakeRecursiveGenericType(thisType.GetRecursiveGenericParameters());

            var visitor = new DevirtualizingVisitor(Arg, thisType);
            var result = visitor.Visit(Arg.Body);
            var log = Arg.PassEnvironment.Log;
            if (log.Options.ShouldRemark(DevirtualizationRemarksName))
            {
                foreach (var record in visitor.Records)
                {
                    LogDevirtualizationRecord(record, log);
                }
            }
            return result;
        }
    }
}
