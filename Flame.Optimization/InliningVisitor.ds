using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;
using Pixie;

namespace Flame.Optimization
{
    /// <summary>
    /// A method call that has been decomposed into a callee, a 'this' object,
    /// and a sequence of arguments.
    /// </summary>
    public class DissectedCall
    {
        /// <summary>
        /// Creates a new dissected call from the given 'this' value,
        /// callee, and sequence of arguments.
        /// </summary>
        public const this(
            set IExpression ThisValue, set IMethod Method,
            set [IExpression] Arguments);

        /// <summary>
        /// Gets the expression that produces the 'this' object for
        /// this call.
        /// </summary>
        public IExpression ThisValue { const get; private set; }

        /// <summary>
        /// Gets the callee of this call.
        /// </summary>
        public IMethod Method { const get; private set; }

        /// <summary>
        /// Gets the sequence of arguments that are passed to the
        /// callee.
        /// </summary>
        public [IExpression] Arguments { const get; private set; }
    }

    /// <summary>
    /// A pass that performs a number of iterations, which consist of
    /// inlining followed by whole-body optimization.
    /// </summary>
    public abstract class InliningPassBase : LoopPassBase
    {
        /// <summary>
        /// Gets the default inlining pass name.
        /// </summary>
        public const string InliningPassName = "inline";

        /// <summary>
        /// The remarks option for inlining: applying this pass to
        /// a function will emit a message if this is option set to true.
        /// </summary>
        public string InliningRemarksOption
        {
            get { return Flags.GetRemarkOptionName(InliningPassName); }
        }

        /// <summary>
        /// Creates a delegate that determines whether the given dissected
        /// direct call should be inlined.
        /// </summary>
        public abstract bool(DissectedCall) GetInliningCriteria(BodyPassArgument Argument);

        /// <summary>
        /// Names the given method, for logging purposes.
        /// This includes any quotation marks, or other
        /// delimiters.
        /// </summary>
        protected virtual string NameMethod(IMethod Method)
        {
            string name = Method.Name.ToString();
            if (string.IsNullOrWhiteSpace(name))
                return "anonymous method";
            else
                return "'" + name + "'";
        }

        /// <summary>
        /// Logs a message that proclaims that an inlining operation
        /// has occurred.
        /// </summary>
        protected virtual void LogInlinedCall(
            BodyPassArgument Argument, SourceLocation CallLocation,
            DissectedCall InlinedCall, int RecursionDepth)
        {
            var nodes = new List<MarkupNode>();
            if (RecursionDepth == 0)
            {
                // Add a description
                nodes.Add(new MarkupNode(NodeConstants.TextNodeType,
                    "inlined direct call to " + NameMethod(InlinedCall.Method) + ". "));
            }
            else
            {
                // Add a description
                nodes.Add(new MarkupNode(NodeConstants.TextNodeType,
                    "recursively inlined direct call to " +
                    NameMethod(InlinedCall.Method) + ". (recursion depth: " +
                    RecursionDepth + ") "));
            }
            // Add a cause node ('[-Rinline]')
            nodes.Add(Flags.CreateCauseNode(InliningRemarksOption));
            // Add diagnostics for the inlined call
            nodes.Add(CallLocation.CreateDiagnosticsNode());

            var log = Argument.PassEnvironment.Log;
            log.LogMessage(new LogEntry("pass remark", nodes));
        }

        public LoopPassResult Apply(BodyPassArgument Argument, int Iteration)
            in { VerifyCFGPass.Apply(Argument.Body) }
            in
            {
                VerifySSAPass.Apply(
                    Argument.Body, Argument.PassEnvironment.Log, Argument.DeclaringMethod,
                    InliningPassName + " (input)")
            }
            out (result) { VerifyCFGPass.Apply(result.Body) }
            out (result)
            {
                VerifySSAPass.Apply(
                    result.Body, Argument.PassEnvironment.Log,
                    Argument.DeclaringMethod,
                    InliningPassName + " (output)")
            }
        {
            var shouldInline = GetInliningCriteria(Argument);
            var log = Argument.PassEnvironment.Log;
            bool shouldRemark = log.Options.ShouldRemark(InliningPassName);

            var visitor = new InliningVisitor(Argument, shouldInline);
            var result = visitor.Visit(Argument.Body);

            if (visitor.HasInlined && shouldRemark)
            {
                // Let's print some diagnostics, because we're so proud of
                // our work.
                foreach (var item in visitor.InlinedCallLocations)
                {
                    LogInlinedCall(Argument, item.Value, item.Key, Iteration);
                }
            }
            return new LoopPassResult(result, visitor.HasInlined);
        }
    }

    /// <summary>
    /// A base class for inlining visitors. This can be subclassed to create
    /// an inlining visitor, but can also be subclassed to create a function
    /// specializing visitor.
    /// </summary>
    public abstract class InliningVisitorBase : LocationVisitorBase
    {
        public const this(
            set BodyPassArgument PassArgument,
            set bool(DissectedCall) ShouldInline)
        {
            this.inlineCount = new Dictionary<IMethod, int>();
            this.inlinedCallLocs = new List<KeyValuePair<DissectedCall, SourceLocation>>();
        }

        /// <summary>
        /// Gets this visitor's body pass argument.
        /// </summary>
        public BodyPassArgument PassArgument { const get; private set; }

        /// <summary>
        /// Gets the current method, whose body is being processed.
        /// </summary>
        public IMethod CurrentMethod { get { return PassArgument.DeclaringMethod; } }

        /// <summary>
        /// Determines whether the given dissected direct call should be inlined.
        /// </summary>
        public bool(DissectedCall) ShouldInline { const get; private set; }

        /// <summary>
        /// Checks if this inlining visitor has inlined anything yet.
        /// </summary>
        public bool HasInlined { get { return inlineCount.Count != 0; } }

        /// <summary>
        /// Gets a read-only dictionary that maps methods to the number
        /// of times they have been inlined by this visitor.
        /// </summary>
        public IReadOnlyDictionary<IMethod, int> InlinedCount { const get return inlineCount; }

        /// <summary>
        /// Gets all call locations that have been inlined.
        /// </summary>
        public [KeyValuePair<DissectedCall, SourceLocation>] InlinedCallLocations
        {
            get { return inlinedCallLocs; }
        }

        private Dictionary<IMethod, int> inlineCount;
        private List<KeyValuePair<DissectedCall, SourceLocation>> inlinedCallLocs;

        /// <summary>
        /// Performs inlining. Null is returned if the inlining operation
        /// could not be performed.
        /// </summary>
        public abstract IExpression Inline(DissectedCall Call);

        protected override const bool MatchesCore(IStatement Statement)
        {
            return false;
        }

        private DissectedCall DissectCall(IExpression Expression)
        {
            if (Expression is InvocationExpression)
            {
                var invExpr = (InvocationExpression)Expression;
                var invTrgt = invExpr.Target.GetEssentialExpression();
                if (invTrgt is GetMethodExpression)
                {
                    var target = (GetMethodExpression)invTrgt;
                    return new DissectedCall(target.Caller, target.Target, invExpr.Arguments);
                }
            }
            return null;
        }

        protected override const bool MatchesCore(IExpression Expression)
        {
            return Expression is InvocationExpression;
        }

        protected override IExpression TransformCore(IExpression Expression)
        {
            // We know we *should* inline this because it survived the "match"
            // step.
            var dissected = DissectCall((InvocationExpression)Expression);

            // Only inline functions if we can and should inline them.
            if (dissected == null
                || !InliningExtensions.CanInline(dissected.Method, dissected.ThisValue)
                || !this.ShouldInline(dissected))
                return Expression.Accept(this);

            // Perform the actual inlining operation.
            var result = Inline(dissected);

            if (result == null)
                return Expression.Accept(this);

            if (CurrentLocation != null)
            {
                // Log the inlining operation.
                inlinedCallLocs.Add(new KeyValuePair<DissectedCall, SourceLocation>(dissected, CurrentLocation));
            }

            // Increment the inlining counter.
            int preCount = 0;
            if (inlineCount.ContainsKey(dissected.Method))
            {
                preCount = inlineCount[dissected.Method];
            }
            inlineCount[dissected.Method] = preCount + 1;

            return result;
        }

        protected override IStatement TransformCore(IStatement Statement)
        {
            return Statement;
        }
    }

    /// <summary>
    /// A visitor that inlines direct calls, if they meet certain criteria.
    /// </summary>
    public class InliningVisitor : InliningVisitorBase
    {
        public const this(
            BodyPassArgument PassArgument,
            bool(DissectedCall) ShouldInline)
            : base(PassArgument, ShouldInline);

        /// <summary>
        /// Inlines the given method call. A pass argument is also given.
        /// </summary>
        public static IExpression Inline(DissectedCall Call, BodyPassArgument PassArgument)
        {
            // Create a variable for the return value.
            var lbVariable = new LocalVariable(Call.Method.ReturnType);

            // Perform the actual inlining.
            var visitedBody = InlineBody(Call, lbVariable, PassArgument);

            if (visitedBody == null)
                return null;

            return CreateLetExpression(visitedBody, lbVariable);
        }

        /// <summary>
        /// Creates an expression that first executes the given statement,
        /// and then loads the given variable. The variable is then released.
        /// </summary>
        public static IExpression CreateLetExpression(
            IStatement InlinedBody, IVariable ReturnVariable)
        {
            if (ReturnVariable.Type.Equals(PrimitiveTypes.Void))
            {
                return new InitializedExpression(
                    InlinedBody, VoidExpression).Simplify();
            }
            else
            {
                return new InitializedExpression(
                    InlinedBody, ReturnVariable.CreateGetExpression(),
                    ReturnVariable.CreateReleaseStatement()).Simplify();
            }
        }

        /// <summary>
        /// Inlines the given method call. A pass argument is also given.
        /// </summary>
        public static IStatement InlineBody(
            DissectedCall Call, IVariable ReturnVariable, BodyPassArgument PassArgument)
        {
            // Acquire the method body.
            var oldMethodBody = PassArgument.PassEnvironment.GetMethodBody(Call.Method);
            if (oldMethodBody == null)
                return null;

            // Copy the method body.
            var body = CloningVisitor.Visit(oldMethodBody);

            // Transform the copied body to match use local variables.
            return InliningReturnVisitor.InlineReturns(
                InliningVariableVisitor.InlineVariables(body,
                    Call.ThisValue,
                    Enumerable.ToArray<IExpression>(Call.Arguments)),
                ReturnVariable);
        }

        /// <summary>
        /// Inlines the given dissected call: its arguments and return value
        /// are replaced by local variables, and control will resume when the
        /// inlined callee is done. Null is returned if the inlining operation
        /// could not be performed.
        /// </summary>
        public override IExpression Inline(DissectedCall Call)
        {
            return Inline(Call, PassArgument);
        }
    }

    public class InliningVariableVisitor : VariableSubstitutingVisitorBase
    {
        public const this(set IVariable ThisArgument, set IVariable[] Arguments)
        {
            this.locals = new Dictionary<UniqueTag, LocalVariable>();
            this.ssaLocals = new Dictionary<UniqueTag, SSAVariable>();
        }

        public IVariable ThisArgument { const get; private set; }
        public IVariable[] Arguments { const get; private set; }

        private Dictionary<UniqueTag, LocalVariable> locals;
        private Dictionary<UniqueTag, SSAVariable> ssaLocals;

        private LocalVariable inlineLocal(LocalVariableBase localVar)
        {
            if (!locals.ContainsKey(localVar.Tag))
            {
                locals[localVar.Tag] = new LocalVariable(localVar.Member);
            }
            return locals[localVar.Tag];
        }

        private SSAVariable inlineSSALocal(SSAVariable localVar)
        {
            if (!ssaLocals.ContainsKey(localVar.Tag))
            {
                ssaLocals[localVar.Tag] = new SSAVariable(localVar.Member);
            }
            return ssaLocals[localVar.Tag];
        }

        private static IVariable CreateInlinedThis(
            IExpression ThisArgument, List<IStatement> Statements,
            List<IStatement> Cleanup)
        {
            if (ThisArgument == null)
            {
                return null;
            }
            else
            {
                var essentialThisArg = ThisArgument.GetEssentialExpression();
                if (essentialThisArg is IVariableNode)
                {
                    // Direct stores to 'this' are prohibited, so we can
                    // safely replace the 'this' variable by a local variable.
                    // However, we must take said local variable's address if
                    // we are targeting a value type, because
                    // 'this' should be a pointer.
                    var varNode = (IVariableNode)essentialThisArg;
                    var thisArgVar = varNode.GetVariable();
                    if (thisArgVar is LocalVariableBase
                        || thisArgVar is ArgumentVariable
                        || thisArgVar is ThisVariable)
                    {
                        if (thisArgVar.Type.IsValueType)
                        {
                            if (thisArgVar is IUnmanagedVariable)
                            {
                                return new ExpressionVariable(((IUnmanagedVariable)thisArgVar).CreateAddressOfExpression());
                            }
                            // Non-unmanaged variables will just have to be copied.
                        }
                        else
                        {
                            return thisArgVar;
                        }
                    }
                }

                var thisVar = new LocalVariable(ThisArgument.Type);
                Statements.Add(thisVar.CreateSetStatement(ThisArgument));
                Cleanup.Add(thisVar.CreateReleaseStatement());
                return thisVar;
            }
        }

        public static IStatement InlineVariables(IStatement Target, IExpression ThisArgument, IExpression[] Arguments)
        {
            var results = new List<IStatement>();
            var cleanup = new List<IStatement>();

            var thisVar = CreateInlinedThis(ThisArgument, results, cleanup);

            var argVars = new IVariable[Arguments.Length];
            foreach (var input in Arguments, var output in argVars)
            {
                output = new LocalVariable(input.Type);
                results.Add(output.CreateSetStatement(input));
                cleanup.Add(output.CreateReleaseStatement());
            }

            var visitor = new InliningVariableVisitor(thisVar, argVars);

            results.Add(visitor.Visit(Target));

            results.AddRange(cleanup);

            return new BlockStatement(results);
        }

        protected override bool CanSubstituteVariable(IVariable Variable)
        {
            return Variable is ArgumentVariable || Variable is ThisVariable ||
                   Variable is LocalVariableBase;
        }
        protected override IVariable SubstituteVariable(IVariable Variable)
        {
            if (Variable is ThisVariable)
            {
                return ThisArgument;
            }
            else if (Variable is ArgumentVariable)
            {
                var argVar = (ArgumentVariable)Variable;
                return Arguments[argVar.Index];
            }
            else if (Variable is SSAVariable)
            {
                var localVar = (SSAVariable)Variable;
                return inlineSSALocal(localVar);
            }
            else
            {
                assert(Variable is LocalVariableBase);
                var localVar = (LocalVariableBase)Variable;
                return inlineLocal(localVar);
            }
        }
    }

    public class InliningReturnVisitor : NodeVisitorBase
    {
        public const this(set IVariable ReturnVariable, set UniqueTag ReturnTag);

        public IVariable ReturnVariable { const get; private set; }
        public UniqueTag ReturnTag { const get; private set; }

        public static IStatement InlineReturns(IStatement Statement, IVariable ReturnVariable)
        {
            var label = new UniqueTag();
            var visitor = new InliningReturnVisitor(ReturnVariable, label);
            var body = visitor.Visit(Statement);
            return new TaggedStatement(label, body);
        }

        public override const bool Matches(IExpression Value)
        {
            return false;
        }
        public override const bool Matches(IStatement Value)
        {
            return Value is ReturnStatement;
        }
        protected const override IExpression Transform(IExpression Expression)
        {
            return Expression;
        }
        protected const override IStatement Transform(IStatement Statement)
        {
            var retStmt = (ReturnStatement)Statement;
            if (retStmt.Value == null || ReturnVariable.Type == null)
            {
                return new BreakStatement(ReturnTag);
            }
            else
            {
                return new BlockStatement(new IStatement[]
                {
                    ReturnVariable.CreateSetStatement(retStmt.Value),
                    new BreakStatement(ReturnTag)
                });
            }
        }
    }
}
