using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// Contains all SSA local variable liveness data for a single block.
    /// </summary>
    public class SSALivenessData
    {
        public const this()
        {
            this.nodeIndex = 1;
            this.livePos = new Dictionary<SSAVariable, int>();
            this.deadPos = new Dictionary<SSAVariable, int>();
        }

        private int nodeIndex;
        private Dictionary<SSAVariable, int> livePos;
        private Dictionary<SSAVariable, int> deadPos;

        private const int ImportPoint = -1;
        private const int ParameterPoint = 0;
        private const int ExportPoint = int.MaxValue;

        /// <summary>
        /// Gets a dictionary that maps SSA variables to their
        /// definition index for this basic block.
        /// </summary>
        public IReadOnlyDictionary<SSAVariable, int> DefinitionIndices
        {
            get { return livePos; }
        }

        /// <summary>
        /// Gets a dictionary that maps SSA variables to their
        /// load index for this basic block.
        /// </summary>
        public IReadOnlyDictionary<SSAVariable, int> LoadIndices
        {
            get { return deadPos; }
        }

        /// <summary>
        /// Gets the set of all variables whose values are loaded by this block.
        /// </summary>
        public [SSAVariable] UsedVariables
        {
            const get
            {
                return deadPos.Keys;
            }
        }

        /// <summary>
        /// Registers a definition action for the given variable.
        /// </summary>
        public void RegisterDefinition(SSAVariable Variable)
        {
            nodeIndex++;
            livePos[Variable] = nodeIndex;
        }

        /// <summary>
        /// Registers a get-value action for the given variable.
        /// </summary>
        public void RegisterAccess(SSAVariable Variable)
        {
            nodeIndex++;
            deadPos[Variable] = nodeIndex;
        }

        /// <summary>
        /// Marks the given variable as "imported", which means that
        /// it is defined elsewhere.
        /// </summary>
        public void MarkImport(SSAVariable Variable)
        {
            livePos[Variable] = ImportPoint;
        }

        /// <summary>
        /// Marks the given variable as a (potential) argument to this block.
        /// </summary>
        public void MarkArgument(SSAVariable Variable)
        {
            deadPos[Variable] = ImportPoint;
        }

        /// <summary>
        /// Marks the given variable as a parameter: a locally defined
        /// variable that is assigned in parallel with the other parameters.
        /// </summary>
        public void MarkParameter(SSAVariable Variable)
        {
            livePos[Variable] = ParameterPoint;
        }

        /// <summary>
        /// "Exports" the given variable: its final access it set to the
        /// maximal value, which basically makes it immortal within the
        /// context of this block.
        /// </summary>
        public void MarkExport(SSAVariable Variable)
        {
            deadPos[Variable] = ExportPoint;
        }

        /// <summary>
        /// Checks if this block defines the given variable locally, i.e.
        /// it is defined within the block's body, or it is one of the block's
        /// parameters.
        /// </summary>
        public bool Defines(SSAVariable Variable)
        {
            return livePos.TryGetValue(Variable, &int livePoint)
                && livePoint >= ParameterPoint;
        }

        /// <summary>
        /// Checks if this block defines or imports the given variable.
        /// </summary>
        public bool DefinesOrImports(SSAVariable Variable)
        {
            return livePos.ContainsKey(Variable);
        }

        /// <summary>
        /// Gets an index that describes the point at which the given variable
        /// is defined.
        /// </summary>
        public int GetDefinitionIndex(SSAVariable Variable)
        {
            if (livePos.TryGetValue(Variable, &int livePoint))
                return livePoint;
            else
                return int.MaxValue;
        }

        /// <summary>
        /// Gets an index that describes the point at which the given variable
        /// is accessed for the last time.
        /// </summary>
        public int GetLastAccessIndex(SSAVariable Variable)
        {
            if (deadPos.TryGetValue(Variable, &int deadPoint))
                return deadPoint;
            else
                return int.MinValue;
        }

        /// <summary>
        /// Checks if the given variable is live at the given point in execution,
        /// which is encoded as an integer.
        /// </summary>
        public bool IsLive(SSAVariable Variable, int Index)
        {
            return Index >= GetDefinitionIndex(Variable)
                && Index <= GetLastAccessIndex(Variable);
        }
    }

    /// <summary>
    /// A node visitor that discovers live ranges.
    /// </summary>
    public class SSALiveRangeVisitor : NodeVisitorBase
    {
        public const this(
            set SSALivenessData Data,
            set Dictionary<SSAVariable, HashSet<SSALivenessData>> DefinitionBlocks,
            set Graph<SSAVariable> Related);

        public SSALivenessData Data { const get; private set; }
        public Dictionary<SSAVariable, HashSet<SSALivenessData>> DefinitionBlocks { const get; private set; }
        public Graph<SSAVariable> Related { const get; private set; }

        public void MarkRelated(SSAVariable Left, SSAVariable Right)
        {
            Related.AddUndirectedEdge(Left, Right);
        }

        public override const bool Matches(IExpression Value)
        {
            return Value is SSAGetExpression;
        }
        public override const bool Matches(IStatement Value)
        {
            return Value is SSADefineStatement;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            var expr = (SSAGetExpression)Expression;
            Data.RegisterAccess(expr.Variable);
            return expr;
        }

        private void TryMarkRelated(SSAVariable LVar, IExpression RVal)
        {
            if (RVal is IMetadataNode<IExpression>)
            {
                var metaNode = (IMetadataNode<IExpression>)RVal;
                TryMarkRelated(LVar, metaNode.Value);
            }
            else if (RVal is SSAGetExpression)
            {
                var rightVar = ((SSAGetExpression)RVal).Variable;
                MarkRelated(LVar, rightVar);
            }
            else if (RVal is InitializedExpression)
            {
                var initExpr = (InitializedExpression)RVal;
                TryMarkRelated(LVar, initExpr.Value);
            }
        }

        protected override IStatement Transform(IStatement Statement)
        {
            var stmt = (SSADefineStatement)Statement;
            var leftVar = stmt.Variable;
            var val = Visit(stmt.Value);

            TryMarkRelated(leftVar, val);
            Data.RegisterDefinition(leftVar);

            assert(!DefinitionBlocks.ContainsKey(leftVar));
            var defsSet = new HashSet<SSALivenessData>();
            defsSet.Add(Data);
            DefinitionBlocks[leftVar] = defsSet;

            return stmt;
        }
    }

    /// <summary>
    /// A data structure that contains live ranges for a control-flow graph,
    /// as well as a related variable map.
    /// </summary>
    public class SSAGraphLiveness
    {
        public const this(
            set Dictionary<UniqueTag, SSALivenessData> LiveRanges,
            set Dictionary<SSAVariable, HashSet<SSALivenessData>> DefinitionBlocks,
            set Graph<SSAVariable> Related);

        /// <summary>
        /// Gets the graph's block tag - live ranges map.
        /// </summary>
        public Dictionary<UniqueTag, SSALivenessData> LiveRanges { const get; private set; }

        /// <summary>
        /// Gets a dictionary that maps SSA variables to their set of definition
        /// points, which are either assignments, or arguments.
        /// </summary>
        public Dictionary<SSAVariable, HashSet<SSALivenessData>> DefinitionBlocks { const get; private set; }

        /// <summary>
        /// Gets the graph's related variable set map.
        /// Coalescing these variables should result in less variable copying.
        /// </summary>
        public Graph<SSAVariable> Related { const get; private set; }
    }

    /// <summary>
    /// A node visitor that deconstructs SSA form.
    /// </summary>
    public class DeconstructSSAVisitor : FlowGraphVisitorBase
    {
        alias PredecessorPair = Tuple<UniqueTag, IReadOnlyList<SSAVariable>>;
        alias PredecessorDict = IReadOnlyDictionary<UniqueTag, [PredecessorPair]>;

        public const this(set IGraphColorer<SSAVariable, IVariable> GraphColorer);

        /// <summary>
        /// Gets this SSA deconstruction visitor's graph colorer.
        /// </summary>
        public IGraphColorer<SSAVariable, IVariable> GraphColorer { const get; private set; }

        /// <summary>
        /// Checks if the live range for the block with the given tag defines
        /// or imports the given SSA variable. If not, then that variable is
        /// imported, and this method is applied recursively to its
        /// predecessor blocks.
        /// </summary>
        private void PropagateImport(
            UniqueTag Tag, SSAVariable Imported,
            PredecessorDict Predecessors,
            Dictionary<UniqueTag, SSALivenessData> LiveRanges)
        {
            var range = LiveRanges[Tag];
            if (!range.DefinesOrImports(Imported))
            {
                range.MarkImport(Imported);
                if (Predecessors.ContainsKey(Tag))
                {
                    foreach (var pred in Predecessors[Tag])
                    {
                        PropagateImport(
                            pred.Item1, Imported, Predecessors, LiveRanges);
                        LiveRanges[pred.Item1].MarkExport(Imported);
                    }
                }
            }
        }

        /// <summary>
        /// Computes live ranges, as well as related variables, for the given
        /// flow graph.
        /// </summary>
        public SSAGraphLiveness ComputeLiveness(FlowGraph Graph)
        {
            var results = new Dictionary<UniqueTag, SSALivenessData>();
            var defBlocks = new Dictionary<SSAVariable, HashSet<SSALivenessData>>();
            var related = new Graph<SSAVariable>();
            foreach (var tag in Graph.BlockTags)
            {
                results[tag] = new SSALivenessData();
            }
            foreach (var block in Graph.Blocks)
            {
                var data = results[block.Tag];
                var visitor = new SSALiveRangeVisitor(data, defBlocks, related);
                // Visit the block's body and flow to discover live ranges.
                block.Accept(visitor);

                // Mark all parameters as such
                foreach (var parameter in block.Parameters)
                    data.MarkParameter(parameter);

                // Mark all arguments as such, and make then related to
                // the corresponding parameter variables.
                foreach (var branch in block.Flow.Branches)
                {
                    var tgtTag = branch.TargetTag;
                    var tgtData = results[tgtTag];
                    foreach (var arg in branch.Arguments,
                             var parameter in Graph.GetBlock(tgtTag).Parameters)
                    {
                        data.MarkExport(arg);
                        visitor.MarkRelated(arg, parameter);

                        HashSet<SSALivenessData> defSet;
                        if (!defBlocks.TryGetValue(parameter, &defSet))
                        {
                            defSet = new HashSet<SSALivenessData>();
                            defBlocks[parameter] = defSet;
                        }
                        defSet.Add(data);
                    }
                }
            }

            var preds = Graph.GetPredecessors();
            foreach (var item in results)
            {
                // Create a local copy of the block's used variables, as
                // import propagation may export variables, which could result
                // in changes to the variable-use dictionary.
                // Enumerators aren't all that fond of changes like that, and
                // a read-only copy avoids the issue entirely.
                var usedVars = Enumerable.ToArray<SSAVariable>(item.Value.UsedVariables);
                foreach (var usedVar in usedVars)
                {
                    // Mark all imported variables as live.
                    PropagateImport(item.Key, usedVar, preds, results);
                }
            }

            return new SSAGraphLiveness(results, defBlocks, related);
        }

        /// <summary>
        /// Groups the given sequence of SSA variables by their types.
        /// </summary>
        private Dictionary<IType, HashSet<SSAVariable>> GroupByType(
            [SSAVariable] Variables)
        {
            var results = new Dictionary<IType, HashSet<SSAVariable>>();
            foreach (var item in Variables)
            {
                var ty = item.Type;
                HashSet<SSAVariable> vars;
                if (!results.TryGetValue(ty, &vars))
                {
                    vars = new HashSet<SSAVariable>();
                    results[ty] = vars;
                }
                vars.Add(item);
            }
            return results;
        }

        /// <summary>
        /// Creates an interference graph for the given sequence of vertices
        /// and liveness information.
        /// </summary>
        private Graph<SSAVariable> CreateInterferenceGraph(
            [SSAVariable] Vertices, SSAGraphLiveness Liveness)
        {
            var verts = new HashSet<SSAVariable>(Vertices);
            var result = new Graph<SSAVariable>();

            var liveRanges = Liveness.LiveRanges.Values;
            // var liveRanges = new HashSet<SSALivenessData>();
            // foreach (var block in Liveness.LiveRanges)
            //     liveRanges.Add(block.Value);

            foreach (var v in verts)
            {
                // Add all vertices to the graph. Adding an edge to the graph
                // will also add its origin and destination vertices to the graph,
                // so this is redundant for most vertices. It is not redundant,
                // however, for variables that do not interfere with any other
                // variables.
                result.AddVertex(v);

                // Next, we'll insert edges. The approach is based on the
                // following assumption:
                //
                //      A variable interferes with another variable if the
                //      former is live at the latter's point of definition,
                //      or vice-versa.
                //
                // Instead of looping over all pairs of variables and then trying
                // to determine whether they interfere, we'll loop over all
                // live ranges. If the current variable is live at some other
                // variable's point of definition,
                // then we'll insert an undirected edge. The vice-versa
                // thing is satisfied by simply looping over all variables.
                foreach (var block in liveRanges)
                {
                    foreach (var pair in block.DefinitionIndices)
                    {
                        if (verts.Contains(pair.Key) &&
                            block.IsLive(v, pair.Value))
                        {
                            result.AddUndirectedEdge(v, pair.Key);
                        }
                    }
                }
            }

            // Get rid of cyclic edges. They're not helpful.
            foreach (var v in verts)
                result.RemoveEdge(v, v);

            return result;
        }

        /// <summary>
        /// Performs register allocation on the given flow graph.
        /// </summary>
        public IReadOnlyDictionary<SSAVariable, IVariable> AllocateRegisters(
            FlowGraph Graph)
        {
            // Perform register allocation on the SSA variables.
            // We use a greedy graph colorer for this purpose.

            var liveness = ComputeLiveness(Graph);
            var groupedVars = GroupByType(liveness.DefinitionBlocks.Keys);
            var regAlloc = new Dictionary<SSAVariable, IVariable>();
            // Creates a new color.
            var createColor = IVariable(SSAVariable v) => new RegisterVariable(v.Member);

            foreach (var pair in groupedVars)
            {
                // Construct an interference graph.
                var interGraph = CreateInterferenceGraph(pair.Value, liveness);
                // Color the graph.
                var coloring = GraphColorer.Color(interGraph, liveness.Related, createColor);
                foreach (var item in coloring)
                {
                    // Add the coloring to the results.
                    regAlloc.Add(item.Key, item.Value);
                }
            }

            return regAlloc;
        }

        private IStatement CreatePhiAssignStatement(
            IReadOnlyList<SSAVariable> Arguments,
            IReadOnlyList<SSAVariable> Parameters,
            IReadOnlyDictionary<SSAVariable, IVariable> Registers,
            Dictionary<IType, IVariable> Temporaries)
        {
            assert(Arguments.Count == Parameters.Count);

            var assignVars = new Dictionary<IVariable, IVariable>();

            foreach (var arg in Arguments, var param in Parameters)
            {
                assert(Registers.ContainsKey(arg));
                assert(Registers.ContainsKey(param));

                var srcReg = Registers[arg];
                var tgtReg = Registers[param];

                assert(!assignVars.ContainsKey(tgtReg)
                    || assignVars[tgtReg].Equals(srcReg));

                if (!srcReg.Equals(tgtReg))
                    assignVars[tgtReg] = srcReg;
            }

            return VariableHelpers.CreateParallelSetStatement(assignVars, Temporaries);
        }

        /// <summary>
        /// Rewrites the given conditional branch so that it doesn't
        /// take any arguments. A new basic block is
        /// created if this is deemed necessary.
        /// </summary>
        private BlockBranch RewriteConditionalBranch(
            BlockBranch Branch, FlowGraph Graph,
            IReadOnlyDictionary<SSAVariable, IVariable> Registers,
            BlockBuilder Blocks, Dictionary<IType, IVariable> Temporaries)

            in { Branch.Arguments.Count == Graph.GetBlock(Branch.TargetTag).Parameters.Count }
            out (result) { result.Arguments.Count == 0 }
        {
            if (Branch.Arguments.Count == 0)
            {
                // Argumentless branches do not need an extra basic block.
                return Branch;
            }
            else
            {
                var targetTag = Branch.TargetTag;

                var body = CreatePhiAssignStatement(
                    Branch.Arguments, Graph.GetBlock(targetTag).Parameters,
                    Registers, Temporaries);

                // We don't have to create another basic block if we don't
                // have any work to do when this branch is taken.
                if (body.IsEmpty)
                    return new BlockBranch(targetTag);

                // Create a basic block that performs the assignment, and
                // then jump to the original target block.
                var extraBlockTag = Blocks.CreateBlock(
                    "assign.phi", body,
                    new JumpFlow(new BlockBranch(targetTag)));

                return new BlockBranch(extraBlockTag);
            }
        }

        /// <summary>
        /// Rewrites the given basic block flow instruction for the
        /// given flow graph, replacing arguments and parameters with the
        /// registers they have been allocated to. The original block contents
        /// are also given.
        /// A new (flow instruction, block contents) pair is returned.
        /// </summary>
        private Tuple<BlockFlow, IStatement> RewriteFlow(
            BlockFlow Flow, IStatement Contents, FlowGraph Graph,
            IReadOnlyDictionary<SSAVariable, IVariable> Registers,
            INodeVisitor RegisterSubstitutingVisitor,
            BlockBuilder Blocks, Dictionary<IType, IVariable> Temporaries)
        {
            if (Flow is JumpFlowBase)
            {
                var jmpFlow = (JumpFlowBase)Flow;
                var br = jmpFlow.Branch;
                return new Tuple<BlockFlow, IStatement>(
                    jmpFlow.Create(new BlockBranch(br.TargetTag)),
                    new BlockStatement(new IStatement[]
                    {
                        Contents,
                        CreatePhiAssignStatement(
                            br.Arguments, Graph.GetBlock(br.TargetTag).Parameters,
                            Registers, Temporaries)
                    }).Simplify());
            }
            else if (Flow is ExceptionFlow)
            {
                // Exception flow instructions should first perform
                // phi assignments for variables that are used by the EH, and
                // then emit the block's body. Finally, phi assignments are
                // performed for the success (fallthrough) block.

                var ehFlow = (ExceptionFlow)Flow;
                var successBr = ehFlow.SuccessBranch;
                var finallyBr = ehFlow.FinallyBranch;

                var ehBranches = new List<ExceptionBranch>(ehFlow.ExceptionBranches.Count);
                var bodyStmts = new List<IStatement>(ehBranches.Count + 3);

                foreach (var br in ehFlow.ExceptionBranches)
                {
                    var tag = br.Branch.TargetTag;
                    bodyStmts.Add(CreatePhiAssignStatement(
                        br.Branch.Arguments,
                        Graph.GetBlock(tag).Parameters,
                        Registers, Temporaries));
                    ehBranches.Add(new ExceptionBranch(
                        br.ExceptionType, new BlockBranch(tag)));
                }

                bodyStmts.Add(CreatePhiAssignStatement(
                    finallyBr.Arguments,
                    Graph.GetBlock(finallyBr.TargetTag).Parameters,
                    Registers, Temporaries));
                bodyStmts.Add(Contents);
                bodyStmts.Add(CreatePhiAssignStatement(
                    successBr.Arguments,
                    Graph.GetBlock(successBr.TargetTag).Parameters,
                    Registers, Temporaries));

                return new Tuple<BlockFlow, IStatement>(
                    new ExceptionFlow(
                        new BlockBranch(successBr.TargetTag),
                        new BlockBranch(finallyBr.TargetTag),
                        ehBranches),
                    new BlockStatement(bodyStmts).Simplify());
            }
            else if (Flow is SelectFlow)
            {
                var selFlow = (SelectFlow)Flow;
                return new Tuple<BlockFlow, IStatement>(
                    new SelectFlow(
                        RegisterSubstitutingVisitor.Visit(selFlow.Condition),
                        RewriteConditionalBranch(
                            selFlow.ThenBranch, Graph, Registers,
                            Blocks, Temporaries),
                        RewriteConditionalBranch(
                            selFlow.ElseBranch, Graph, Registers,
                            Blocks, Temporaries)),
                    Contents);
            }
            else if (Flow is TerminatedFlowBase)
            {
                return new Tuple<BlockFlow, IStatement>(Flow, Contents);
            }
            else
            {
                throw new InvalidOperationException(
                    "Unknown flow instruction type: " + Flow.ToString());
            }
        }

        /// <summary>
        /// Turns the given block into a parameterless block that performs
        /// argumentless branches.
        /// </summary>
        private void RewriteBlock(
            BasicBlock Block, FlowGraph Graph,
            IReadOnlyDictionary<SSAVariable, IVariable> Registers,
            INodeVisitor RegisterSubstitutingVisitor,
            BlockBuilder Results, Dictionary<IType, IVariable> Temporaries)
        {
            // Rewrite this block's flow.
            var flowAndFinalization = RewriteFlow(
                Block.Flow, RegisterSubstitutingVisitor.Visit(Block.Contents),
                Graph, Registers, RegisterSubstitutingVisitor,
                Results, Temporaries);

            // The new block's body is the original block's body, followed by a
            // finalization statement.
            var body = flowAndFinalization.Item2;

            // Create a new block that has the old block's tag.
            Results.CreateBlock(Block.Tag, body, flowAndFinalization.Item1);
        }

        protected override FlowGraph Visit(FlowGraph Graph)
        {
            // Allocate registers for the given graph's SSA variables.
            var regAlloc = AllocateRegisters(Graph);

            // Create an IVariable -> IVariable mapping that maps SSA variables
            // to the newly allocated registers.
            var regMap = new Dictionary<IVariable, IVariable>();
            foreach (var item in regAlloc)
            {
                regMap.Add(item.Key, item.Value);
            }
            var visitor = new VariableSubstitutingVisitor(regMap);

            var temps = new Dictionary<IType, IVariable>();

            // Rewrite all blocks. All basic blocks are made parameterless.
            var newBlocks = new BlockBuilder(new UniqueTag());
            foreach (var block in Graph.Blocks)
            {
                RewriteBlock(
                    block, Graph, regAlloc,
                    visitor, newBlocks, temps);
            }

            return newBlocks.ToFlowGraph(Graph.EntryPointTag);
        }
    }

    /// <summary>
    /// Defines a pass that deconstructs SSA form.
    /// </summary>
    public static class DeconstructSSAPass : IPass<IStatement, IStatement>, IPass<BodyPassArgument, IStatement>
    {
        public const string DeconstructSSAPassName = "deconstruct-ssa";

        /// <summary>
        /// The option for the graph colorer.
        /// </summary>
        public const string GraphColorerOption = "graph-colorer";

        /// <summary>
        /// Figures out which graph colorer should be used, based on the given
        /// compiler options.
        /// </summary>
        public IGraphColorer<TVertex, TColor> GetGraphColorer<TVertex, TColor>(
            ICompilerOptions Options)
        {
            string name = Options.GetOption<string>(GraphColorerOption, "greedy-related").ToLower();
            if (name == "greedy")
                return new GreedyGraphColorer<TVertex, TColor>();
            else if (name == "none")
                return new TrivialGraphColorer<TVertex, TColor>();
            else
                return new GreedyRelatedGraphColorer<TVertex, TColor>();
        }

        public IStatement Apply(IStatement Value)
            in { VerifyCFGPass.Apply(Value) }
            in { VerifySSAPass.Apply(Value) }
            out (result) { VerifyCFGPass.Apply(result) }
            out (result) { VerifySSAPass.Apply(result) }
        {
            var colorer = new GreedyRelatedGraphColorer<SSAVariable, IVariable>();
            var visitor = new DeconstructSSAVisitor(colorer);
            return visitor.Visit(Value);
        }

        public IStatement Apply(BodyPassArgument Arg)
            in { VerifyCFGPass.Apply(Arg.Body) }
            in
            {
                VerifySSAPass.Apply(
                    Arg.Body, Arg.PassEnvironment.Log, Arg.DeclaringMethod,
                    DeconstructSSAPassName + " (input)")
            }
            out (result) { VerifyCFGPass.Apply(result) }
            out (result)
            {
                VerifySSAPass.Apply(
                    result, Arg.PassEnvironment.Log, Arg.DeclaringMethod,
                    DeconstructSSAPassName + " (output)")
            }
        {
            var colorer = GetGraphColorer<SSAVariable, IVariable>(Arg.PassEnvironment.Log.Options);
            var visitor = new DeconstructSSAVisitor(colorer);
            return visitor.Visit(Arg.Body);
        }
    }
}
