using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Visitors;
using Pixie;

namespace Flame.Optimization
{
    /// <summary>
    /// A node visitor that attempts that attempts to optimize lambda expressions
    /// by removing unused expressions from their capture lists.
    /// Source locations beloning to lambdas that have been optimized are remembered
    /// by this visitor.
    /// </summary>
    public class SlimLambdaVisitor : LocationVisitorBase
    {
        alias TransformedLocation = Tuple<SourceLocation, LambdaHeader, LambdaHeader>;

        public const this()
        {
            this.transLocs = new List<TransformedLocation>();
        }

        private List<TransformedLocation> transLocs;

        /// <summary>
        /// Gets the source locations belonging to lambda expressions
        /// that have been optimized by this visitor, followed by their
        /// old capture list size, and the new capture list size.
        /// </summary>
        public [TransformedLocation] TransformedLocations
        {
            const get { return transLocs; }
        }

        protected override const bool MatchesCore(IExpression Expression)
        {
            return Expression is LambdaExpression;
        }
        protected override const bool MatchesCore(IStatement Statement)
        {
            return false;
        }

        private IExpression rewriteLambda(LambdaExpression Lambda)
        {
            var header = Lambda.Header;
            // Make sure to apply this visitor to the lambda's body as well.
            var body = Visit(Lambda.Body);

            if (header.CaptureList.Count == 0)
                return Lambda;

            var visitor = new LambdaCapturedValueVisitor();
            visitor.Visit(body);

            var indexMapping = new Dictionary<int, int>();
            var initialize = new InsertStatement();
            var newCaptures = new List<IExpression>();
            var unspilledExprs = new List<SpillableExpression>();
            for (int i = 0; i < header.CaptureList.Count; i++)
            {
                if (visitor.UsedCapturedValues.Contains(i))
                {
                    indexMapping[i] = newCaptures.Count;
                    var expr = new SpillableExpression(header.CaptureList[i]);
                    newCaptures.Add(expr);
                    unspilledExprs.Add(expr);
                }
                else
                {
                    var stmt = new ExpressionStatement(header.CaptureList[i]);

                    if (!stmt.IsEmpty)
                    {
                        foreach (var item in unspilledExprs)
                        {
                            item.Spill(initialize);
                        }
                        unspilledExprs = new List<SpillableExpression>();
                        initialize.Insert(stmt);
                    }
                }
            }

            if (newCaptures.Count == header.CaptureList.Count)
                return Lambda;

            var optHeader = new LambdaHeader(header.Signature, newCaptures);
            var newHeaderBlock = new LambdaBoundHeaderBlock();
            var rewriter = new LambdaCapturedValueRewriter(
                optHeader, newHeaderBlock, indexMapping);

            var optBody = rewriter.Visit(body);

            if (CurrentLocation != null)
                transLocs.Add(new TransformedLocation(
                    CurrentLocation, header, optHeader));

            var resultLambda = new LambdaExpression(optHeader, optBody, newHeaderBlock);
            return new InitializedExpression(initialize, resultLambda);
        }

        protected override IExpression TransformCore(IExpression Expression)
        {
            return rewriteLambda((LambdaExpression)Expression);
        }
        protected override IStatement TransformCore(IStatement Statement)
        {
            return Statement;
        }
    }

    /// <summary>
    /// A pass that attempts that attempts to optimize lambda expressions
    /// by removing unused expressions from their capture lists.
    /// </summary>
    public static class SlimLambdaPass : IPass<BodyPassArgument, IStatement>
    {
        /// <summary>
        /// This pass' name string.
        /// </summary>
        public const string SlimLambdaPassName = "slim-lambda";

        /// <summary>
        /// The remark name that turns on type remarks.
        /// </summary>
        public const string SlimLambdaTypesRemarkName = "slim-lambda-types";

        private string NameCaptureTypes(LambdaHeader Header)
        {
            var result = new StringBuilder();
            foreach (var item in Header.CaptureList)
            {
                if (result.Length > 0)
                    result.Append(", ");

                result.Append("'");
                result.Append(item.Type.ToString());
                result.Append("'");
            }
            return result.ToString();
        }

        public IStatement Apply(BodyPassArgument Args)
        {
            var rewriter = new SlimLambdaVisitor();
            var result = rewriter.Visit(Args.Body);

            // Maybe we can even emit a remark of some kind.
            var log = Args.PassEnvironment.Log;
            if (log.Options.ShouldRemark(SlimLambdaPassName, false))
            {
                bool shouldRemarkTypes = log.Options.ShouldRemark(SlimLambdaTypesRemarkName, false);
                foreach (var item in rewriter.TransformedLocations)
                {
                    var nodes = new List<MarkupNode>();
                    nodes.Add(new MarkupNode(NodeConstants.TextNodeType,
                        "Eliminated " +
                        (item.Item2.CaptureList.Count - item.Item3.CaptureList.Count) +
                        " out of " + item.Item2.CaptureList.Count +
                        " values from this lambda capture list. "));
                    if (shouldRemarkTypes)
                    {
                        nodes.Add(new MarkupNode(NodeConstants.TextNodeType,
                            "Old capture list types: " + NameCaptureTypes(item.Item2) + ". "));
                        nodes.Add(new MarkupNode(NodeConstants.TextNodeType,
                            "New capture list types: " + NameCaptureTypes(item.Item3) + ". "));
                        nodes.Add(Flags.CreateCauseNode(
                            Flags.GetRemarkOptionName(SlimLambdaPassName) + ", " +
                            Flags.GetRemarkOptionName(SlimLambdaTypesRemarkName)));
                    }
                    else
                    {
                        nodes.Add(Flags.CreateCauseNode(
                            Flags.GetRemarkOptionName(SlimLambdaPassName)));
                    }

                    log.LogMessage(new LogEntry(
                        "pass remark",
                        nodes,
                        item.Item1));
                }
            }

            return result;
        }
    }
}
