using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;
using System;
using System.Collections.Generic;

namespace Flame.Optimization
{
    /// <summary>
    /// A node visitor that tracks down non-empty statements
    /// that occur in top-level expressions trees. Top-level statements
    /// trees are ignored.
    /// </summary>
    /// <remarks>
    /// This can be used to track down functional flow constructs that require
    /// special treatment to be lowered to imperative code.
    /// </remarks>
    public class TopLevelFunctionalCodeFinder : INodeVisitor
    {
        public this()
        {
            FoundFunctionalCode = false;
            inExpression = false;
        }

        /// <summary>
        /// Gets a boolean value that tells whether at least one non-empty
        /// statement has been found in an expression.
        /// </summary>
        public bool FoundFunctionalCode { get; private set; }

        private bool inExpression;

        public IExpression Visit(IExpression Value)
        {
            if (FoundFunctionalCode)
                // Early-out here.
                return Value;

            // Store the old state.
            bool oldInExpression = inExpression;
            // Update the state.
            inExpression = true;
            IExpression result;
            // Visit the expression's children and look for statements.
            if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                result = Value;
            }
            else
            {
                result = Value.Accept(this);
            }
            // Restore the old state.
            inExpression = oldInExpression;
            return result;
        }

        public IStatement Visit(IStatement Value)
        {
            if (FoundFunctionalCode || !inExpression)
                // Early-out here.
                return Value;

            if (!Value.IsConstantNode)
            {
                // We found a non-empty statement in a
                // top-level expression tree.
                FoundFunctionalCode = true;
                return Value;
            }

            if (Value is IPredicateNode)
            {
                ((IPredicateNode)Value).AcceptPredicate(this);
                return Value;
            }
            else
            {
                return Value.Accept(this);
            }
        }
    }

    /// <summary>
    /// A node visitor that rewrites nodes such that they are legal
    /// for traditional imperative programming languages:
    /// statements do not appear inside of expressions,
    /// but expressions may appear inside of statements.
    /// </summary>
    public class ImperativeCodeRewriter : NodeVisitorBase
    {
        /// <summary>
        /// Creates a new imperative code rewriter.
        /// </summary>
        public const this()
        {
            this.initStatement = new InsertStatement();
            this.finalStatement = new InsertStatement();
            this.unspilledExpressions = new HashSet<SpillableExpression>();
        }

        /// <summary>
        /// Gets this imperative code rewriter's initialization statement.
        /// From an external perspective, this is only useful when rewriting
        /// top-level expressions.
        /// </summary>
        public IStatement Initialization { const get { return initStatement; } }

        /// <summary>
        /// Gets this imperative code rewriter's finalization statement.
        /// From an external perspective, this is only useful when rewriting
        /// top-level expressions.
        /// </summary>
        public IStatement Finalization { const get { return finalStatement; } }

        // Stores the current node's initialization statement.
        private InsertStatement initStatement;
        // Stores the current node's finalization statement.
        private InsertStatement finalStatement;

        // Stores the enclosing statement's set of unspilled expressions.
        private HashSet<SpillableExpression> unspilledExpressions;

        // Tells if we're in an expression right now.
        private bool inExpression;

        // Merges all unspilled expressions except for the given excluded set.
        // They are replaced by a spillable expression, which is added to
        // the unspilled expressions set.
        private SpillableExpression MergeExpressions(
            IExpression MergedExpr, HashSet<SpillableExpression> Excluded)
        {
            unspilledExpressions.IntersectWith(Excluded);
            var result = new SpillableExpression(MergedExpr);
            unspilledExpressions.Add(result);
            return result;
        }

        // Spills all unspilled expressions that belong to the enclosing
        // statement.
        private void Spill()
        {
            foreach (var item in unspilledExpressions)
                item.Spill(initStatement);

            unspilledExpressions = new HashSet<SpillableExpression>();
        }

        public override bool Matches(IExpression Value)
        {
            return true;
        }

        public override bool Matches(IStatement Value)
        {
            return true;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            if (Expression is SelectExpression)
            {
                // TODO: handle flow-expressions in general. But how?
                // Handle select-expressions as a special case here.
                // Consider the following statement:
                //
                //    int x = c ? ++i : i;
                //
                // Spilling would result in:
                //
                //    int tmp = ++i;
                //    int x = c ? tmp : i;
                //
                // But clearly that's not what we want here.
                // If a select-expression contains a statement,
                // then we will re-write it as:
                //
                //    {
                //        T result;
                //        if (c) result = x else result = y;
                //        result,
                //        release(result)
                //    }
                //
                var finder = new TopLevelFunctionalCodeFinder();
                var resultExpr = finder.Visit(Expression);
                if (finder.FoundFunctionalCode)
                {
                    assert(resultExpr is SelectExpression);
                    var selExpr = (SelectExpression)resultExpr;
                    var tmp = new RegisterVariable("select-result", selExpr.Type);
                    return Visit(new InitializedExpression(
                        new IfElseStatement(
                            selExpr.Condition,
                            tmp.CreateSetStatement(selExpr.TrueValue),
                            tmp.CreateSetStatement(selExpr.FalseValue)),
                        tmp.CreateGetExpression(),
                        tmp.CreateReleaseStatement()));
                }
            }

            bool oldInExpr = inExpression;

            inExpression = true;
            var preds = new HashSet<SpillableExpression>(unspilledExpressions);
            var result = Expression.Accept(this);

            inExpression = oldInExpr;

            if (result is InitializedExpression)
            {
                // Be sure to simplify initialized expressions.
                // This step may not be _absolutely essential_, but it does
                // remove a ton of generated empty statements by having
                // the initialized expression realize what's going on and
                // gracefully simplify itself to its value expression.
                result = ((InitializedExpression)result).Simplify();
            }

            return MergeExpressions(result, preds);
        }

        protected override IStatement Transform(IStatement Statement)
        {
            if (Statement.IsEmpty)
            {
                // Empty statements are harmless, because
                // they are equivalent to void expressions.

                return Statement;
            }
            else if (this.inExpression)
            {
                if (NodeExtensions.CanDelay(Statement))
                {
                    // If a statement can be delayed, then by all means do so.
                    // Spilling expressions to locals to preserve the execution
                    // order of a statement that can be delayed will typically
                    // result in a pessimization.

                    finalStatement.Insert(Statement);

                    return EmptyStatement;
                }
                else
                {
                    // This is exactly the kind of construct we want this pass to
                    // get rid of. To perserve the order of side-effects, we'll
                    // spill all unspilled non-constant expressions.
                    // Note that there are no statement predecessors that could
                    // introduce side-effects and must be spilled: if the enclosing
                    // expression contained any, we would have visited them already.

                    // First, we'll spill all effectful predecessor expressions.
                    Spill();

                    // Now, we want to visit this statement recursively, and
                    // append the result to the initialization statement list.
                    // Since the statement will be inserted into the enclosing statement's
                    // initialization list, it is in effect no longer inside of an
                    // expression. Adjusting the is-in-expression flag will do the trick.
                    this.inExpression = false;

                    initStatement.Insert(Visit(Statement));

                    this.inExpression = true;

                    return EmptyStatement;
                }
            }
            else if (Statement is IFlowStatement && Statement is ComplexStatement)
            {
                // Rewriting complex flow statements is tricky,
                // because we can't use the usual spilling technique.
                // Consider the loop below:
                //
                //     int i = 0;
                //     while (i++ < count);
                //
                // Blindly spilling results in:
                //
                //     int i = 0;
                //     int tmp = i;
                //     i++;
                //     while (tmp < count);
                //
                // Which is an infinite loop.
                //
                // We will instead lower these statements to more primitive
                // constructs, and then spill -- but only if we have to.
                assert(!(Statement is TaggedStatement));

                // Look for functional code in the top-level expressions
                // of the flow statement.
                var finder = new TopLevelFunctionalCodeFinder();
                var stmt = Statement.Accept(finder);

                if (finder.FoundFunctionalCode && stmt is ComplexStatement)
                {
                    // It seems that we really have to lower this statement.
                    // We'll deal with the lowered results by recursively
                    // visiting it.
                    return Visit(((ComplexStatement)stmt).LoweredStatement);
                }
            }

            // This is an imperative-style statement. There's nothing wrong
            // with this node at the top-level, but that doesn't guarantee
            // that its children behave equally well.
            // Sets up an environment that facilitates spilling expressions.

            var oldInit = initStatement;
            var oldFinal = finalStatement;
            var oldExprs = unspilledExpressions;

            initStatement = new InsertStatement();
            finalStatement = new InsertStatement();
            unspilledExpressions = new HashSet<SpillableExpression>();

            var innerResult = Statement.Accept(this);

            var result = new BlockStatement(new IStatement[]
            {
                initStatement.Unwrap(),
                innerResult,
                finalStatement.Unwrap()
            }).Simplify();

            initStatement = oldInit;
            finalStatement = oldFinal;
            unspilledExpressions = oldExprs;

            return result;
        }
    }

    /// <summary>
    /// A pass that rewrites statements such that they are legal
    /// for traditional imperative programming languages:
    /// statements do not appear inside of expressions,
    /// but expressions may appear inside of statements.
    /// </summary>
    public static class ImperativeCodePass : IPass<IStatement, IStatement>
    {
        /// <summary>
        /// The imperative code pass' name.
        /// </summary>
        public const string ImperativeCodePassName = "imperative-code";

        public IStatement Apply(IStatement Statement)
        {
            var visitor = new ImperativeCodeRewriter();
            return visitor.Visit(Statement);
        }
    }
}
