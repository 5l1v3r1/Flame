using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// Defines an insert statement: a statement that can later be populated
    /// with other statements.
    /// </summary>
    public class InsertStatement : IStatement
    {
        /// <summary>
        /// Creates a new insert statement.
        /// </summary>
        public const this()
        {
            this.stmts = new List<IStatement>();
        }

        private List<IStatement> stmts;

        /// <summary>
        /// Gets all inserted statements.
        /// </summary>
        public [IStatement] Statements { const get return stmts; }

        /// <summary>
        /// Inserts the given statement.
        /// </summary>
        public void Insert(IStatement Statement)
        {
            stmts.Add(Statement);
        }

        public bool IsEmpty
        {
            const get return Unwrap().IsEmpty;
        }

        public IStatement Unwrap()
        {
            return new BlockStatement(Statements);
        }

        public IStatement Optimize()
        {
            return Unwrap().Optimize();
        }

        public IStatement Accept(INodeVisitor Visitor)
        {
            return Visitor.Visit(Unwrap());
        }

        public ICodeBlock Emit(ICodeGenerator CodeGenerator)
        {
            return Unwrap().Emit(CodeGenerator);
        }
    }
}
