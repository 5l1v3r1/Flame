using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame.Optimization
{
    /// <summary>
    /// A directed graph data structure.
    /// </summary>
    public class Graph<T>
    {
        /// <summary>
        /// Creates a graph from the given edges dictionary.
        /// </summary>
        private const this(set Dictionary<T, HashSet<T>> edges);

        /// <summary>
        /// Creates an empty graph.
        /// </summary>
        public const this()
        {
            this.edges = new Dictionary<T, HashSet<T>>();
        }

        /// <summary>
        /// Creates a copy of the given graph.
        /// </summary>
        public const this(Graph<T> Other)
        {
            this.edges = new Dictionary<T, HashSet<T>>();
            foreach (var item in Other.edges)
            {
                this.edges[item.Key] = new HashSet<T>(item.Value);
            }
        }

        private Dictionary<T, HashSet<T>> edges;

        /// <summary>
        /// Gets the set of all vertices in the graph.
        /// </summary>
        public [T] Vertices
        {
            get { return edges.Keys; }
        }

        /// <summary>
        /// Gets the set of all end-points of directed edges that have the
        /// given vertex as their origin.
        /// </summary>
        public [T] this[T From]
        {
            get
            {
                if (!ContainsVertex(From))
                    return Enumerable.Empty<T>();

                var results = new HashSet<T>(edges[From]);
                results.IntersectWith(Vertices);
                return results;
            }
        }

        private void AddReachableVertices(T Vertex, HashSet<T> Results)
        {
            if (ContainsVertex(Vertex) && Results.Add(Vertex))
            {
                foreach (var v in edges[Vertex])
                    AddReachableVertices(v, Results);
            }
        }

        /// <summary>
        /// Gets the set of all vertices that are reachable from the given vertex.
        /// </summary>
        public [T] GetReachableVertices(T Vertex)
        {
            var results = new HashSet<T>();
            AddReachableVertices(Vertex, results);
            return results;
        }

        /// <summary>
        /// Adds a vertex to the graph. A boolean is returned that tells if
        /// the vertex has actually been added to the graph.
        /// </summary>
        public bool AddVertex(T Vertex)
        {
            if (edges.ContainsKey(Vertex))
            {
                return false;
            }
            else
            {
                edges.Add(Vertex, new HashSet<T>());
                return true;
            }
        }

        /// <summary>
        /// Embeds the given graph in this graph.
        /// </summary>
        public void UnionWith(Graph<T> Other)
        {
            foreach (var kvPair in Other.edges)
            {
                HashSet<T> edgeSet;
                var key = kvPair.Key;
                if (!edges.TryGetValue(key, &edgeSet))
                {
                    edgeSet = new HashSet<T>();
                    edges[key] = edgeSet;
                }
                edgeSet.UnionWith(kvPair.Value);
            }
        }

        /// <summary>
        /// Checks if this graph contains the given vertex.
        /// </summary>
        public bool ContainsVertex(T Vertex)
        {
            return edges.ContainsKey(Vertex);
        }

        /// <summary>
        /// Removes a vertex from the graph. A boolean is returned that explains
        /// whether the operation was successful or not.
        /// </summary>
        public bool RemoveVertex(T Vertex)
        {
            return edges.Remove(Vertex);
        }

        /// <summary>
        /// Adds a directed edge to this graph. A boolean is returned that tells if
        /// the edge has actually been added to the graph.
        /// </summary>
        public bool AddEdge(T From, T To)
        {
            bool result = false;
            if (AddVertex(From))
                result = true;

            if (AddVertex(To))
                result = true;

            if (edges[From].Add(To))
                result = true;

            return result;
        }

        /// <summary>
        /// Adds an undirected edge to this graph, which is really
        /// a pair of directed edges. A boolean is returned that tells if
        /// at least one edge has actually been added to the graph.
        /// </summary>
        public bool AddUndirectedEdge(T From, T To)
        {
            bool firstSuccess = AddEdge(From, To);
            bool secondSuccess = AddEdge(To, From);
            return firstSuccess || secondSuccess;
        }

        /// <summary>
        /// Checks if this graph contains an edge that connects the given
        /// source vertex to the given destination.
        /// </summary>
        public bool ContainsEdge(T From, T To)
        {
            return ContainsVertex(From)
                && ContainsVertex(To)
                && edges[From].Contains(To);
        }

        /// <summary>
        /// Removes a directed edge from the graph.
        /// A boolean is returned that explains
        /// whether the operation was successful or not.
        /// </summary>
        public bool RemoveEdge(T From, T To)
        {
            if (ContainsVertex(From) && ContainsVertex(To))
                return edges[From].Remove(To);
            else
                return false;
        }

        /// <summary>
        /// Applies the given mapping to this graph. Every vertex is
        /// transformed exactly once.
        /// </summary>
        public Graph<V> Select<V>(IReadOnlyDictionary<T, V> Mapping)
        {
            // Use the vertex-to-vertex mapping to convert the edges.
            var newEdges = new Dictionary<V, HashSet<V>>();
            foreach (var kvPair in edges)
            {
                var newSet = new HashSet<V>();
                foreach (var e in kvPair.Value)
                {
                    if (ContainsVertex(e))
                        newSet.Add(Mapping[e]);
                }
                newEdges[Mapping[kvPair.Key]] = newSet;
            }

            return new Graph<V>(newEdges);
        }

        /// <summary>
        /// Applies the given mapping function to this graph. Every vertex is
        /// transformed exactly once.
        /// </summary>
        public Graph<V> Select<V>(V(T) Mapping)
        {
            // First, apply the mapping to every vertex.
            var dict = new Dictionary<T, V>();
            foreach (var v in Vertices)
                dict[v] = Mapping(v);

            // Then use the vertex-to-vertex dictionary to convert the edges.
            return Select<V>(dict);
        }
    }
}
