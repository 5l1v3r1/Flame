using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization.AliasAnalysis
{
    /// <summary>
    /// An analysis that looks for expressions that alias at least one element
    /// in a set of expressions and might not be derived from an element in
    /// an other set of expressions.
    /// </summary>
    public class NonDerivedAliasFinder : NodeVisitorBase
    {
        public this(
            set IAliasAnalysisResult AliasAnalysis,
            set IBodyPassEnvironment PassEnvironment,
            IEnumerable<IExpression> AliasExpressions,
            IEnumerable<IExpression> RootExpressions)
        {
            this.FoundAnyAliases = false;
            this.aliasExprs = Enumerable.ToArray<IExpression>(AliasExpressions);
            this.rootExprs = Enumerable.ToArray<IExpression>(RootExpressions);
        }

        public this(
            set IAliasAnalysisResult AliasAnalysis,
            set IBodyPassEnvironment PassEnvironment,
            IEnumerable<IExpression> RootExpressions)
        {
            this.FoundAnyAliases = false;
            this.aliasExprs = Enumerable.ToArray<IExpression>(AliasExpressions);
            this.rootExprs = this.aliasExprs;
        }

        private IExpression[] aliasExprs;
        private IExpression[] rootExprs;

        /// <summary>
        /// Gets the set of expressions for which we want to find aliases.
        /// </summary>
        public IEnumerable<IExpression> AliasExpressions
        {
            get { return aliasExprs; }
        }

        /// <summary>
        /// Gets the set of expressions from which aliases can be safely
        /// derived.
        /// </summary>
        public IEnumerable<IExpression> RootExpressions
        {
            get { return rootExprs; }
        }

        /// <summary>
        /// Gets the alias analysis this external alias finder uses.
        /// </summary>
        public IAliasAnalysisResult AliasAnalysis { get; private set; }

        /// <summary>
        /// A body pass environment that is used to retrieve method bodies
        /// for further analysis.
        /// </summary>
        public IBodyPassEnvironment PassEnvironment { get; private set; }

        /// <summary>
        /// Checks if any aliases were found.
        /// </summary>
        public bool FoundAnyAliases { get; private set; }

        /// <summary>
        /// Gets the location of the first non-derived alias that was found,
        /// if any.
        /// </summary>
        public SourceLocation AliasLocation { get; private set; }

        // The current location.
        private SourceLocation currentLoc;

        private void FoundAlias(SourceLocation Location)
        {
            FoundAnyAliases = true;
            if (Location != null)
                AliasLocation = Location;
            else
                AliasLocation = currentLoc;
        }

        private void FoundAlias()
        {
            FoundAlias(currentLoc);
        }

        public override bool Matches(IExpression Value)
        {
            return true;
        }

        public override bool Matches(IStatement Value)
        {
            return true;
        }

        /// <summary>
        /// Gets the 'root' expression from which this expression was derived.
        /// </summary>
        private IExpression GetExpressionRoot(IExpression Derived)
        {
            if (Derived is FieldGetPointerExpression)
            {
                var fieldPtrExpr = (FieldGetPointerExpression)Derived;
                return GetExpressionRoot(fieldPtrExpr.Target);
            }
            else if (Derived is ReinterpretCastExpression)
            {
                var castExpr = (ReinterpretCastExpression)Derived;
                return GetExpressionRoot(castExpr.Value);
            }
            else if (Derived is IMetadataNode<IExpression>)
            {
                var metaExpr = (IMetadataNode<IExpression>)Derived;
                return GetExpressionRoot(metaExpr.Value);
            }
            else
            {
                // TODO: does it make sense to handle other cases as well?
                return Derived;
            }
        }

        /// <summary>
        /// Checks if the given expression is derived from the given other
        /// expression. This method errs on the safe side.
        /// </summary>
        private bool DerivesFrom(IExpression Derived, IExpression Original)
        {
            return Original.Equals(GetExpressionRoot(Derived));
        }

        /// <summary>
        /// Tests if the given expression is derived from a root expression.
        /// </summary>
        private bool DerivesFromRelevantExpr(IExpression Expression)
        {
            foreach (var expr in rootExprs)
            {
                if (DerivesFrom(Expression, expr))
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Tests if the given expression may alias any relevant expression,
        /// i.e., any expression for which we're trying to find (potential)
        /// aliases.
        /// </summary>
        private bool MayAliasRelevantExpression(IExpression Expression)
        {
            foreach (var expr in aliasExprs)
            {
                if (AliasAnalysis.MayAlias(expr, Expression))
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Appends the given mapped expression to the list of mapped root
        /// expressions and remove it from the list of unmapped alias
        /// expressions, if it derives from a root.
        /// Otherwise, if it may alias a relevant expression, then set the
        /// `FoundAnyAliases` flag to true.
        /// </summary>
        private void MaybeMapRootExpression(
            IExpression OriginalExpression,
            IExpression MappedExpression,
            List<IExpression> MappedRootExpressions,
            HashSet<IExpression> UnmappedAliasExprs)
        {
            if (DerivesFromRelevantExpr(OriginalExpression))
            {
                UnmappedAliasExprs.Remove(OriginalExpression);
                MappedRootExpressions.Add(MappedExpression);
            }
            else if (MayAliasRelevantExpression(OriginalExpression))
            {
                FoundAlias();
            }
        }


        /// <summary>
        /// Creates a sequence of mapped aliases by merging all mapped root
        /// expressions with unknown-expressions for the types of unmapped
        /// alias-expressions.
        /// </summary>
        private IEnumerable<IExpression> CreateMappedAliasList(
            IEnumerable<IExpression> MappedRootExpressions,
            IEnumerable<IExpression> UnmappedAliasExprs)
        {
            var result = new List<IExpression>(MappedRootExpressions);
            foreach (var expr in UnmappedAliasExprs)
            {
                result.Add(new UnknownExpression(expr.Type));
            }
            return result;
        }

        /// <summary>
        /// Tries to map argument root expressions to parameter root
        /// expressions.
        /// </summary>
        private void MaybeMapArgumentRootExpressions(
            IEnumerable<IExpression> Arguments,
            IEnumerable<IParameter> Parameters,
            List<IExpression> MappedRootExpressions,
            HashSet<IExpression> UnmappedAliasExprs)
        {
            int i = 0;
            foreach (var arg in Arguments, var param in Parameters)
            {
                if (FoundAnyAliases)
                    // It really doesn't matter what we do at this point.
                    // Our search is over.
                    return;

                MaybeMapRootExpression(
                    arg,
                    new ArgumentGetExpression(new ArgumentVariable(param, i)),
                    MappedRootExpressions,
                    UnmappedAliasExprs);

                i++;
            }
        }

        /// <summary>
        /// Analyzes the given method for non-derived aliases.
        /// If a method body can be found, a visitor that has analyzed the
        /// method body is returned. Otherwise, an analyzer that hasn't analyzed
        /// anything is returned, which claims to have found aliases.
        /// </summary>
        public static NonDerivedAliasFinder AnalyzeMethod(
            IMethod Method, IAliasAnalysis Analysis,
            IBodyPassEnvironment Environment,
            IEnumerable<IExpression> AliasExprs,
            IEnumerable<IExpression> RootExprs)
        {
            var body = Environment.GetMethodBody(Method);
            if (body == null)
            {

                var emptyVisitor = new NonDerivedAliasFinder(
                    Analysis.Analyze(EmptyStatement), Environment,
                    AliasExprs, RootExprs);
                emptyVisitor.FoundAlias();
                return emptyVisitor;
            }
            else
            {

                var visitor = new NonDerivedAliasFinder(
                    Analysis.Analyze(body), Environment, AliasExprs, RootExprs);
                visitor.Visit(body);
                return visitor;
            }
        }

        /// <summary>
        /// Analyzes the given method for non-derived aliases.
        /// If a method body can be found, a visitor that has analyzed the
        /// method body is returned. Otherwise, null is returned.
        /// </summary>
        public static NonDerivedAliasFinder AnalyzeMethod(
            IMethod Method, IAliasAnalysis Analysis,
            IBodyPassEnvironment Environment,
            IEnumerable<IExpression> AliasExprs)
        {
            return AnalyzeMethod(
                Method, Analysis, Environment, AliasExprs, AliasExprs);
        }

        /// <summary>
        /// Analyzes the given method for non-derived aliases.
        /// If a method body can be found, a visitor that has analyzed the
        /// method body is returned. Otherwise, null is returned.
        /// </summary>
        public static NonDerivedAliasFinder AnalyzeMethod(
            IMethod Method, IAliasAnalysis Analysis,
            IBodyPassEnvironment Environment,
            IExpression AliasExpr)
        {
            return AnalyzeMethod(
                Method, Analysis, Environment, new IExpression[] { AliasExpr });
        }

        private void AnalyzeMethod(
            IMethod Method,
            IEnumerable<IExpression> NewAliasExpressions,
            IEnumerable<IExpression> NewRootExpressions)
        {
            if (FoundAnyAliases)
                // Nothing we could do here can make `FoundAnyAliases` `false`
                // again.
                return;

            var visitor = AnalyzeMethod(
                Method, AliasAnalysis.Analysis, PassEnvironment,
                NewAliasExpressions, NewRootExpressions);

            if (visitor.FoundAnyAliases)
            {
                FoundAlias(visitor.AliasLocation);
            }
        }

        private IExpression TransformInvocation(InvocationExpression Expression)
        {
            var disCall = DissectedCallHelpers.DissectCall(Expression);

            var mappedRootExprs = new List<IExpression>();
            var unmappedAliasExprs = new HashSet<IExpression>(AliasExpressions);

            // Map the 'this' value.
            if (disCall.ThisValue != null)
            {
                MaybeMapRootExpression(
                    disCall.ThisValue,
                    new ThisVariable(disCall.Method.DeclaringType)
                        .CreateGetExpression(),
                    mappedRootExprs,
                    unmappedAliasExprs);
            }

            // Map the argument expressions.
            MaybeMapArgumentRootExpressions(
                disCall.Arguments,
                disCall.Method.Parameters,
                mappedRootExprs,
                unmappedAliasExprs);

            var mappedAliasExprs = CreateMappedAliasList(
                mappedRootExprs, unmappedAliasExprs);

            AnalyzeMethod(
                disCall.Method, mappedAliasExprs, mappedRootExprs);

            return Expression;
        }

        private IExpression TransformNewObject(NewObjectExpression Expression)
        {
            var mappedRootExprs = new List<IExpression>();
            var unmappedAliasExprs = new HashSet<IExpression>(AliasExpressions);

            // Map the argument expressions.
            MaybeMapArgumentRootExpressions(
                Expression.Arguments,
                Expression.Constructor.Parameters,
                mappedRootExprs,
                unmappedAliasExprs);

            var mappedAliasExprs = CreateMappedAliasList(
                mappedRootExprs, unmappedAliasExprs);

            AnalyzeMethod(
                Expression.Constructor, mappedAliasExprs, mappedRootExprs);

            return Expression;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            if (FoundAnyAliases)
            {
                // We have already found at least one alias.
                // Don't waste time looking for more.
                return Expression;
            }
            else if (Expression is SourceExpression)
            {
                var srcExpr = (SourceExpression)Expression;
                var oldLoc = currentLoc;
                currentLoc = srcExpr.Location;
                var result = srcExpr.Accept(this);
                currentLoc = oldLoc;
                return result;
            }
            else if (Expression is IMetadataNode<IExpression>)
            {
                // Don't waste time analyzing the metadata nodes themselves.
                // Just skip right ahead to the children.
                return Expression.Accept(this);
            }
            else if (Expression is InvocationExpression)
            {
                // A invocation's body might alias one of the relevant
                // expressions, if it is passed as an argument.
                return TransformInvocation((InvocationExpression)Expression);
            }
            else if (Expression is NewObjectExpression)
            {
                // A new-object expression acts a lot like a call.
                return TransformNewObject((NewObjectExpression)Expression);
            }
            else if (!DerivesFromRelevantExpr(Expression)
                && MayAliasRelevantExpression(Expression))
            {
                FoundAlias();
                return Expression;
            }
            else
            {
                // Look for aliases in the expression's children.
                return Expression.Accept(this);
            }
        }

        protected override IStatement Transform(IStatement Statement)
        {
            if (FoundAnyAliases)
            {
                // We have already found at least one alias.
                // Don't waste time looking for more.
                return Statement;
            }
            else if (Statement is SourceStatement)
            {
                var srcStmt = (SourceStatement)Statement;
                var oldLoc = currentLoc;
                currentLoc = srcStmt.Location;
                var result = srcStmt.Accept(this);
                currentLoc = oldLoc;
                return result;
            }
            else if (Statement is ISetVariableNode)
            {
                // Assignments are special, as they might refer to a value
                // with their right-hand side, despite the rhs not being stored
                // as an expression.
                var varNode = (ISetVariableNode)Statement;
                assert(varNode.Action == VariableNodeAction.Set);
                var variable = varNode.GetVariable();
                if (variable is IUnmanagedVariable)
                {
                    // Create an address-of expression for the rhs, and
                    // visit that.
                    Visit(
                        ((IUnmanagedVariable)variable)
                        .CreateAddressOfExpression());
                }
                // Don't forget to visit the assignment's value.
                Visit(varNode.Value);
                return Statement;
            }
            else
            {
                // Look for aliases in the statement's children.
                return Statement.Accept(this);
            }
        }
    }
}
