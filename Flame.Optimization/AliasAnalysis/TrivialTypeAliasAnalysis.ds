using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization.AliasAnalysis
{
    /// <summary>
    /// A trivial type-based alias analysis.
    /// </summary>
    public static class TrivialTypeAliasAnalysis : IAliasAnalysis, IAliasAnalysisResult
    {
        /// <inheritdoc/>
        public IAliasAnalysis Analysis { get { return this; } }

        /// <inheritdoc/>
        public IAliasAnalysisResult Analyze(IStatement Body)
        {
            return this;
        }

        /// <inheritdoc/>
        public Aliasing GetAliasing(IExpression First, IExpression Second)
        {
            if (AliasAnalysisHelpers.IsAddressOfLocalOrThisExpression(First)
                && AliasAnalysisHelpers.IsAddressOfLocalOrThisExpression(Second))
            {
                // The addresses of two different storage region never
                // alias.
                if (First.Equals(Second))
                    return Aliasing.Alias;
                else
                    return Aliasing.NoAlias;
            }

            var firstTy = First.Type;
            if (firstTy.IsValueType)
                // Value types don't point to anything at all.
                return Aliasing.NoAlias;

            var secondTy = Second.Type;
            if (secondTy.IsValueType)
                // Value types don't point to anything at all.
                return Aliasing.NoAlias;

            return Aliasing.MayAlias;
        }
    }
}
