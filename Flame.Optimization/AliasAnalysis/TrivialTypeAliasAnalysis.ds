using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization.AliasAnalysis
{
    /// <summary>
    /// A trivial type-based alias analysis.
    /// </summary>
    public static class TrivialTypeAliasAnalysis : IAliasAnalysis, IAliasAnalysisResult
    {
        /// <inheritdoc/>
        public IAliasAnalysis Analysis { get { return this; } }

        /// <inheritdoc/>
        public IAliasAnalysisResult Analyze(IStatement Body)
        {
            return this;
        }

        /// <summary>
        /// Gets a boolean value that tells if the given expression evaluates
        /// to the address of well-known region of storage, which can be
        /// compared to addresses of other regions of storage via equality.
        /// </summary>
        private bool IsAddressOfStorageExpression(IExpression Expression)
        {
            return Expression is LocalAddressOfExpression
                || Expression is ArgumentAddressOfExpression
                || Expression is ThisGetExpression;
        }

        /// <inheritdoc/>
        public Aliasing GetAliasing(IExpression First, IExpression Second)
        {
            if (IsAddressOfStorageExpression(First)
                && IsAddressOfStorageExpression(Second))
            {
                // The addresses of two different storage region never
                // alias.
                if (First.Equals(Second))
                    return Aliasing.Alias;
                else
                    return Aliasing.NoAlias;
            }

            var firstTy = First.Type;
            if (firstTy.IsValueType || firstTy.IsInteger
                || firstTy.IsBit || firstTy.IsFloatingPoint)
                // Value types don't point to anything at all.
                return Aliasing.NoAlias;

            var secondTy = Second.Type;
            if (secondTy.IsValueType || secondTy.IsInteger
                || secondTy.IsBit || secondTy.IsFloatingPoint)
                // Value types don't point to anything at all.
                return Aliasing.NoAlias;

            if (firstTy.Is(secondTy) || secondTy.Is(firstTy))
                return Aliasing.MayAlias;
            else
                return Aliasing.NoAlias;
        }
    }
}
