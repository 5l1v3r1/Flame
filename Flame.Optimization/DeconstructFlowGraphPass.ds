using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// Describes a proto-switch: a switch statement this is in the process of being synthesized
    /// from a control-flow graph.
    /// </summary>
    public class ProtoSwitch
    {
        public this(
            IVariable SwitchVariable,
            UniqueTag DefaultBodyTag,
            IReadOnlyDictionary<UniqueTag, IReadOnlyList<IBoundObject>> Cases)
        {
            this.SwitchVariable = SwitchVariable;
            this.DefaultBodyTag = DefaultBodyTag;
            this.Cases = Cases;
            this.allValues = new HashSet<object>();
            foreach (var item in Cases)
            {
                this.allValues.UnionWith(item.Value);
            }
        }
        private this(
            IVariable SwitchVariable,
            UniqueTag DefaultBodyTag,
            IReadOnlyDictionary<UniqueTag, IReadOnlyList<IBoundObject>> Cases,
            HashSet<object> allValues)
        {
            this.SwitchVariable = SwitchVariable;
            this.DefaultBodyTag = DefaultBodyTag;
            this.Cases = Cases;
            this.allValues = allValues;
        }

        /// <summary>
        /// Gets the variable that is being switched on.
        /// </summary>
        /// <returns>The variable that is being switched on.</returns>
        public IVariable SwitchVariable { get; private set; }

        /// <summary>
        /// Gets the default unique tag of the basic block that contains the default body for
        /// this proto-switch.
        /// </summary>
        /// <returns>The unique tag of this proto-switch's default body basic block.</returns>
        public UniqueTag DefaultBodyTag { get; private set; }

        /// <summary>
        /// Gets a dictionary that maps basic block tags to the values that have them as cases.
        /// </summary>
        /// <returns>A dictionary that maps basic block tags to the values that have them as cases.</returns>
        public IReadOnlyDictionary<UniqueTag, IReadOnlyList<IBoundObject>> Cases { get; private set; }
        private HashSet<object> allValues;

        /// <summary>
        /// Checks if the given proto-switch can be merged with this proto-switch.
        /// </summary>
        /// <param name="Other">The proto-switch to test for compatibility.</param>
        /// <returns>true if the proto-switch is compatible; otherwise, false.</returns>
        public bool IsCompatible(ProtoSwitch Other)
        {
            return ProtoSwitchHelpers.AreEquivalentSwitchVariables(
                SwitchVariable, Other.SwitchVariable);
        }

        /// <summary>
        /// Merges the given proto-switch into this proto-switch as a child.
        /// </summary>
        /// <param name="Child">The proto-switch to merge as a child.</param>
        /// <returns>
        /// The proto-switch that is the result of merging this proto-switch with the child proto-switch.
        /// </returns>
        public ProtoSwitch MergeChild(ProtoSwitch Child)
        {
            assert(IsCompatible(Child));
            var newValues = new HashSet<object>(allValues);
            var newCases = new Dictionary<UniqueTag, IReadOnlyList<IBoundObject>>();
            foreach (var item in Cases)
            {
                newCases[item.Key] = item.Value;
            }

            foreach (var item in Child.Cases)
            {
                var valueList = new List<IBoundObject>();
                if (newCases.ContainsKey(item.Key))
                    valueList.AddRange(newCases[item.Key]);

                foreach (var val in item.Value)
                {
                    if (newValues.Add(val.GetObjectValue()))
                    {
                        valueList.Add(val);
                    }
                }

                newCases[item.Key] = valueList;
            }

            return new ProtoSwitch(SwitchVariable, Child.DefaultBodyTag, newCases, newValues);
        }
    }

    /// <summary>
    /// A collection of helper functions that aid in proto-switch lowering.
    /// </summary>
    public module ProtoSwitchHelpers
    {
        /// <summary>
        /// Gets an equivalent but preferred type for the given case value type.
        /// </summary>
        /// <param name="Type">The original case value type.</param>
        /// <returns>An equivalent but preferred type.</returns>
        public IType GetPreferredCaseType(IType Type)
        {
            if (PrimitiveTypes.Char.Equals(Type))
                return PrimitiveTypes.GetIntType(Type.GetPrimitiveBitSize());
            else if (Type.IsBit)
                return PrimitiveTypes.GetUIntType(Type.GetPrimitiveBitSize());
            else if (Type.IsEnum)
                return GetPreferredCaseType(Type.GetParent());
            else
                return Type;
        }

        /// <summary>
        /// Evaluates the given expression as a case value.
        /// </summary>
        /// <param name="Expression">The expression to evaluate.</param>
        /// <returns>The evaluated expression. Null if that doesn't work out.</returns>
        public IBoundObject EvaluateAsCaseValue(IExpression Expression)
        {
            var exprType = Expression.Type;
            var prefCaseType = GetPreferredCaseType(exprType);
            if (prefCaseType.Equals(exprType))
                return Expression.Evaluate();
            else
                return new StaticCastExpression(Expression, prefCaseType).Simplify().Evaluate();
        }

        private IVariable GetSwitchVariable(IExpression Expression, bool IsNested)
        {
            if (Expression is IVariableNode)
            {
                var varNode = (IVariableNode)Expression;
                if (varNode.Action == VariableNodeAction.Get
                    || (IsNested && varNode.Action == VariableNodeAction.AddressOf))
                {
                    var variable = varNode.GetVariable();
                    if (variable is LocalVariableBase
                        || variable is ArgumentVariable
                        || variable is ThisVariable)
                    {
                        return variable;
                    }
                    else if (variable is FieldVariable)
                    {
                        var fieldVar = (FieldVariable)variable;
                        if (fieldVar.Target == null)
                            return fieldVar;

                        var innerVar = GetSwitchVariable(fieldVar.Target.GetEssentialExpression(), true);
                        if (innerVar != null)
                            return fieldVar;
                    }
                    else if (variable is AtAddressVariable)
                    {
                        var atAddressVar = (AtAddressVariable)variable;
                        var innerVar = GetSwitchVariable(atAddressVar.Pointer.GetEssentialExpression(), true);
                        if (innerVar != null)
                            return atAddressVar;
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Returns a variable that evaluates to the given expression if it can
        /// appear in a switch statement.
        /// </summary>
        /// <param name="Expression">An expression.</param>
        /// <returns>
        /// A variable that evaluates to the given expression if it can
        /// appear in a switch statement; otherwise, null.
        /// </returns>
        public IVariable GetSwitchVariable(IExpression Expression)
        {
            return GetSwitchVariable(Expression.GetEssentialExpression(), false);
        }

        /// <summary>
        /// Tests if the given switch variables are equivalent.
        /// </summary>
        /// <param name="Left">The left switch variable.</param>
        /// <param name="Right">The right switch variable.</param>
        /// <returns>A Boolean value that tells if the given switch variables are equivalent.</returns>
        public bool AreEquivalentSwitchVariables(IVariable Left, IVariable Right)
        {
            if (Left == null)
            {
                return Right == null;
            }
            else if (Right == null)
            {
                return false;
            }

            assert(GetSwitchVariable(Left.CreateGetExpression()) != null);
            assert(GetSwitchVariable(Right.CreateGetExpression()) != null);
            if (Left.Equals(Right))
            {
                return true;
            }
            else if (Left is FieldVariable && Right is FieldVariable)
            {
                var leftFieldVar = (FieldVariable)Left;
                var rightFieldVar = (FieldVariable)Right;
                return leftFieldVar.Field.Equals(rightFieldVar.Field)
                    && AreEquivalentSwitchVariables(
                        GetSwitchVariable(leftFieldVar.Target),
                        GetSwitchVariable(rightFieldVar.Target));
            }
            else if (Left is AtAddressVariable && Right is AtAddressVariable)
            {
                var leftAtAddressVar = (AtAddressVariable)Left;
                var rightAtAddressVar = (AtAddressVariable)Right;
                return AreEquivalentSwitchVariables(
                    GetSwitchVariable(leftAtAddressVar.Pointer),
                    GetSwitchVariable(rightAtAddressVar.Pointer));
            }
            else
            {
                return false;
            }
        }
    }

    /// <summary>
    /// A node visitor that finds basic blocks which perform control flow that can best
    /// be lowered as a switch statement.
    /// </summary>
    public class ProtoSwitchMatchingVisitor : FlowGraphVisitorBase
    {
        public this()
        {
            this.protoSwitchMap = new Dictionary<UniqueTag, ProtoSwitch>();
        }

        private Dictionary<UniqueTag, ProtoSwitch> protoSwitchMap;

        /// <summary>
        /// Gets a dictionary that maps basic blocks to the proto-switches they represent.
        /// </summary>
        /// <returns></returns>
        public IReadOnlyDictionary<UniqueTag, ProtoSwitch> ProtoSwitches
        { 
            get { return protoSwitchMap; }
        }

        private ProtoSwitch CreateSelectProtoSwitch(
            IVariable SwitchVariable, IBoundObject Value,
            UniqueTag TrueTag, UniqueTag FalseTag)
        {
            var caseValList = new List<IBoundObject>();
            caseValList.Add(Value);
            var caseDict = new Dictionary<UniqueTag, IReadOnlyList<IBoundObject>>();
            caseDict[TrueTag] = caseValList;
            return new ProtoSwitch(SwitchVariable, FalseTag, caseDict);
        }

        private ProtoSwitch CheckAndBranchesToProtoSwitch(
            BinaryExpression Expression, BlockBranch TrueBranch, BlockBranch FalseBranch)
        {
            if (TrueBranch.Arguments.Count > 0 || FalseBranch.Arguments.Count > 0)
                return null;

            var lhs = Expression.LeftOperand.GetEssentialExpression();
            var rhs = Expression.RightOperand.GetEssentialExpression();

            var lhsVar = ProtoSwitchHelpers.GetSwitchVariable(lhs);
            if (lhsVar == null)
            {
                var rhsVar = ProtoSwitchHelpers.GetSwitchVariable(rhs);
                if (rhsVar == null)
                    return null;

                var lhsVal = ProtoSwitchHelpers.EvaluateAsCaseValue(lhs);
                if (lhsVal == null)
                    return null;

                return CreateSelectProtoSwitch(
                    rhsVar, lhsVal, TrueBranch.TargetTag, FalseBranch.TargetTag);
            }
            
            var rhsVal = ProtoSwitchHelpers.EvaluateAsCaseValue(rhs);
            if (rhsVal == null)
                return null;

            return CreateSelectProtoSwitch(
                lhsVar, rhsVal, TrueBranch.TargetTag, FalseBranch.TargetTag);
        }

        private ProtoSwitch BlockToProtoSwitch(BasicBlock Block)
        {
            if (Block.Flow is SelectFlow)
            {
                var selFlow = (SelectFlow)Block.Flow;
                var condExpr = selFlow.Condition.GetEssentialExpression();
                if (condExpr is EqualityExpression)
                {
                    return CheckAndBranchesToProtoSwitch(
                        (EqualityExpression)condExpr, selFlow.ThenBranch, selFlow.ElseBranch);
                }
                else if (condExpr is InequalityExpression)
                {
                    return CheckAndBranchesToProtoSwitch(
                        (InequalityExpression)condExpr, selFlow.ElseBranch, selFlow.ThenBranch);
                }
            }
            return null;
        }

        private bool AggregateProtoSwitch(
            UniqueTag Tag,
            FlowGraph Graph,
            Dictionary<UniqueTag, ProtoSwitch> ProtoProtoSwitchMap,
            Dictionary<UniqueTag, ProtoSwitch> ProtoSwitchResultMap,
            HashSet<UniqueTag> IneligibleProtoSwitches)
        {
            if (ProtoSwitchResultMap.ContainsKey(Tag))
                return true;
            else if (IneligibleProtoSwitches.Contains(Tag))
                return false;

            var protoSwitch = ProtoProtoSwitchMap[Tag];
            var childTag = protoSwitch.DefaultBodyTag;
            if (ProtoProtoSwitchMap.ContainsKey(childTag)
                && childTag != Tag)
            {
                var block = Graph.GetBlock(childTag);
                if (block.Parameters.Count == 0 && block.Contents.IsEmpty)
                {
                    ProtoSwitch childSwitch;
                    if (AggregateProtoSwitch(
                        childTag, Graph, ProtoProtoSwitchMap,
                        ProtoSwitchResultMap, IneligibleProtoSwitches))
                    {
                        childSwitch = ProtoSwitchResultMap[childTag];
                    }
                    else
                    {
                        childSwitch = ProtoProtoSwitchMap[childTag];
                    }

                    if (protoSwitch.IsCompatible(childSwitch))
                    {
                        ProtoSwitchResultMap[Tag] = protoSwitch.MergeChild(childSwitch);
                        return true;
                    }
                }
            }

            IneligibleProtoSwitches.Add(Tag);
            return false;
        }

        /// <summary>
        /// Visits the given flow graph.
        /// </summary>
        protected override FlowGraph Visit(FlowGraph Graph)
        {
            VisitFlowGraph(Graph);
            return Graph;
        }

        /// <summary>
        /// Visits the given flow graph.
        /// </summary>
        public void VisitFlowGraph(FlowGraph Graph)
        {
            var protoProtoSwitchMap = new Dictionary<UniqueTag, ProtoSwitch>();
            foreach (var block in Graph.Blocks)
            {
                var protoSwitch = BlockToProtoSwitch(block);
                if (protoSwitch != null)
                    protoProtoSwitchMap[block.Tag] = protoSwitch;
            }

            var ineligibleSwitches = new HashSet<UniqueTag>();
            foreach (var item in protoProtoSwitchMap)
            {
                AggregateProtoSwitch(item.Key, Graph, protoProtoSwitchMap, protoSwitchMap, ineligibleSwitches);
            }
        }
    }

    /// <summary>
    /// A class that constructs a fairly linear tree of instructions
    /// that use branches to model basic block flow. This is used in
    /// conjunction with DeconstructFlowGraphPass.
    /// </summary>
    public class LinearLabelFlowBuilder
    {
        public const this()
        {
            this.results = new List<IStatement>();
            this.placedBlocks = new HashSet<UniqueTag>();
            this.exitLabel = new UniqueTag();
            this.pendingExit = false;
        }

        private List<IStatement> results;
        private HashSet<UniqueTag> placedBlocks;
        private UniqueTag exitLabel;
        private bool pendingExit;

        /// <summary>
        /// Gets the generated statement tree.
        /// </summary>
        public IStatement Result
        {
            get { return new BlockStatement(results).Simplify(); }
        }

        /// <summary>
        /// Swaps the contents of this linear flow builder's list of result statements
        /// with the given list's contents.
        /// </summary>
        /// <param name="Statements">
        /// The list of statements whose contents are swapped for this linear flow builder's
        /// list of statements.
        /// </param>
        /// <returns>The contents of the linear flow builder's previous list of results.</returns>
        public IReadOnlyList<IStatement> SwapResults(IReadOnlyList<IStatement> Statements)
        {
            var returnValue = results;
            results = new List<IStatement>(Statements);
            return returnValue;
        }

        /// <summary>
        /// Gets a boolean value that tells whether the basic block with
        /// the given tag has been placed yet or not.
        /// </summary>
        public bool HasPlaced(UniqueTag Tag)
        {
            return placedBlocks.Contains(Tag);
        }

        private void EmitRawStatement(IStatement Statement)
        {
            results.Add(Statement);
        }

        private void FlushPendingExit()
        {
            if (pendingExit)
            {
                EmitRawStatement(new GotoLabelStatement(exitLabel));
                pendingExit = false;
            }
        }

        /// <summary>
        /// Adds the given statement to the statement tree.
        /// </summary>
        public void EmitStatement(IStatement Statement)
        {
            FlushPendingExit();
            EmitRawStatement(DeconstructFlowGraphPass.Visit(Statement));
        }

        /// <summary>
        /// Adds a conditional branch to the given block to the statement tree.
        /// </summary>
        public void EmitBranch(UniqueTag Target, IExpression Condition)
        {
            EmitStatement(new GotoLabelStatement(Target, Condition));
        }

        /// <summary>
        /// Adds an unconditional branch to the given block to the statement tree.
        /// </summary>
        public void EmitBranch(UniqueTag Target)
        {
            EmitBranch(Target, new BooleanExpression(true));
        }

        /// <summary>
        /// Emits an unconditional branch to the 'exit' block, i.e. the very
        /// end of this code sequence.
        /// </summary>
        public void EmitExit()
        {
            pendingExit = true;
        }

        /// <summary>
        /// Places the given block's contents in the statement tree.
        /// Its location is marked with a label, which allows branches to use it
        /// as a target.
        /// </summary>
        public void PlaceBlock(BasicBlock Block)
            in { !HasPlaced(Block.Tag) }
        {
            EmitStatement(new MarkLabelStatement(Block.Tag));
            EmitStatement(Block.Contents);
            placedBlocks.Add(Block.Tag);
        }

        /// <summary>
        /// Marks this linear flow builder's exit block.
        /// </summary>
        public void MarkExit()
        {
            EmitRawStatement(new MarkLabelStatement(exitLabel));
        }
    }

    /// <summary>
    /// A pass that deconstructs control-flow graphs into a tree
    /// of instructions that include labels and branches.
    /// This is suitable for back-ends that support branch instructions.
    /// </summary>
    /// <remarks>
    /// The SSA deconstruction pass is run on the flow graph before it
    /// is lowered to an instruction tree.
    /// </remarks>
    public static class DeconstructFlowGraphPass : StatementVisitorBase, IPass<IStatement, IStatement>
    {
        public const string DeconstructFlowGraphPassName = "deconstruct-cfg";

        public override const bool Matches(IStatement Value)
        {
            return Value is FlowGraphStatement;
        }

        protected override IStatement Transform(IStatement Statement)
        {
            assert(Statement is FlowGraphStatement);
            var flowGraphStmt = (FlowGraphStatement)Statement;
            return VisitFlowGraph(flowGraphStmt.Graph);
        }

        /// <summary>
        /// Emits a "jump" to the given block. This method will try to
        /// simulate jumps with fallthrough whenever possible.
        /// </summary>
        private void EmitJumpToBlock(
            UniqueTag TargetTag, FlowGraph Graph,
            LinearLabelFlowBuilder FlowBuilder,
            IReadOnlyDictionary<UniqueTag, ProtoSwitch> ProtoSwitches)
        {
            if (!FlowBuilder.HasPlaced(TargetTag))
            {
                // Just fall through.
                EmitBlock(TargetTag, Graph, FlowBuilder, ProtoSwitches);
            }
            else
            {
                // Create a branch, then.
                FlowBuilder.EmitBranch(TargetTag);
            }
        }

        /// <summary>
        /// Emits a "jump" to the given block. This method will try to
        /// simulate jumps with fallthrough whenever possible.
        /// This method does not place the jump/block in the flow builder's
        /// list of statements, but returns it instead.
        /// </summary>
        private IStatement EmitJumpToBlockAsStatement(
            UniqueTag TargetTag, FlowGraph Graph,
            LinearLabelFlowBuilder FlowBuilder,
            IReadOnlyDictionary<UniqueTag, ProtoSwitch> ProtoSwitches)
        {
            var allResults = FlowBuilder.SwapResults(new List<IStatement>());
            EmitJumpToBlock(TargetTag, Graph, FlowBuilder, ProtoSwitches);
            var body = FlowBuilder.SwapResults(allResults);
            return new BlockStatement(body).Simplify();
        }

        private void EmitBlock(
            UniqueTag BlockTag, FlowGraph Graph,
            LinearLabelFlowBuilder FlowBuilder,
            IReadOnlyDictionary<UniqueTag, ProtoSwitch> ProtoSwitches)
        {
            if (FlowBuilder.HasPlaced(BlockTag))
            {
                return;
            }

            var block = Graph.GetBlock(BlockTag);
            FlowBuilder.PlaceBlock(block);

            var flow = block.Flow;
            if (flow is JumpFlow)
            {
                var targetTag = ((JumpFlow)flow).Branch.TargetTag;
                EmitJumpToBlock(targetTag, Graph, FlowBuilder, ProtoSwitches);
            }
            else if (flow is SelectFlow)
            {
                ProtoSwitch protoSwitch;
                if (ProtoSwitches.TryGetValue(BlockTag, &protoSwitch)
                    && protoSwitch.SwitchVariable.Type.IsIntegral)
                {
                    EmitSwitchFlow(protoSwitch, Graph, FlowBuilder, ProtoSwitches);
                    return;
                }

                var selFlow = (SelectFlow)flow;
                var thenTag = selFlow.ThenBranch.TargetTag;
                var elseTag = selFlow.ElseBranch.TargetTag;
                if (FlowBuilder.HasPlaced(elseTag) &&
                    !FlowBuilder.HasPlaced(thenTag))
                {
                    FlowBuilder.EmitBranch(elseTag, new NotExpression(selFlow.Condition).Simplify());
                    EmitJumpToBlock(thenTag, Graph, FlowBuilder, ProtoSwitches);
                    EmitBlock(elseTag, Graph, FlowBuilder, ProtoSwitches);
                }
                else
                {
                    FlowBuilder.EmitBranch(thenTag, selFlow.Condition);
                    EmitJumpToBlock(elseTag, Graph, FlowBuilder, ProtoSwitches);
                    EmitBlock(thenTag, Graph, FlowBuilder, ProtoSwitches);
                }
            }
            else if (flow is ExitFlow)
            {
                FlowBuilder.EmitExit();
            }
            else if (!(flow is TerminatedFlowBase))
            {
                throw new InvalidOperationException(
                    "Flow instruction type '" + flow.ToString() +
                    "' is not supported by the flow graph deconstruction pass.");
            }
            // Unreachable flow means no branches out.
        }

        private void EmitSwitchFlow(
            ProtoSwitch Flow, FlowGraph Graph,
            LinearLabelFlowBuilder FlowBuilder,
            IReadOnlyDictionary<UniqueTag, ProtoSwitch> ProtoSwitches)
        {
            var conditionalCases = new List<SwitchCase>();
            foreach (var item in Flow.Cases)
            {
                conditionalCases.Add(
                    new SwitchCase(
                        item.Value,
                        EmitJumpToBlockAsStatement(
                            item.Key, Graph, FlowBuilder, ProtoSwitches)));
            }
            var defaultCase = EmitJumpToBlockAsStatement(
                Flow.DefaultBodyTag, Graph, FlowBuilder, ProtoSwitches);

            var switchVarType = Flow.SwitchVariable.Type;
            var prefType = ProtoSwitchHelpers.GetPreferredCaseType(switchVarType);
            var switchExpr = Flow.SwitchVariable.CreateGetExpression();
            if (!prefType.Equals(switchVarType))
            {
                switchExpr = new StaticCastExpression(switchExpr, prefType);
            }

            FlowBuilder.EmitStatement(
                new UnsafeSwitchStatement(
                    switchExpr, defaultCase, conditionalCases).Simplify());
        }

        private IStatement VisitFlowGraph(FlowGraph Graph)
        {
            var switchMatchingVisitor = new ProtoSwitchMatchingVisitor();
            switchMatchingVisitor.VisitFlowGraph(Graph);
            var flowBuilder = new LinearLabelFlowBuilder();
            EmitBlock(Graph.EntryPointTag, Graph, flowBuilder, switchMatchingVisitor.ProtoSwitches);
            flowBuilder.MarkExit();
            return flowBuilder.Result;
        }

        public IStatement Apply(IStatement Statement)
            in { VerifyCFGPass.Apply(Statement) }
        {
            return this.Visit(DeconstructSSAPass.Apply(Statement));
        }
    }
}
