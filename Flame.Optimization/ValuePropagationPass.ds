using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// A data structure that manages block-local def-once, use-once variables
    /// as they are propagated. This "queue" will automatically revert to
    /// conservative behavior if the FIFO discipline is not respected.
    /// </summary>
    public class ValuePropagationQueue
    {
        // A tuple that contains a def-once, use-once variable,
        // its value, its definition statement
        // (which is speculatively empty), and its (single) use, which is either
        // null or speculatively its value definition.
        alias VariableData = Tuple<
            SSAVariable, IExpression,
            SpeculativeStatement, SpeculativeExpression>;

        public const this()
        {
            Reset();
        }

        // A list that represents the "queue" of variables, whose definitions
        // can be moved, but not reordered (as they may have side-effects).
        private List<VariableData> variableQueue;

        // A lazy dictionary that maps SSA variables to their index in the variable
        // queue.
        private Lazy<Dictionary<SSAVariable, int>> lazyVariableIndices;

        // Gets the number of variables that are currently being propagated
        // speculatively.
        private int speculativePropagationCount;

        // A read-only dictionary that maps SSA variables to their index in
        // the variable queue.
        private IReadOnlyDictionary<SSAVariable, int> variableIndices
        {
            get { return lazyVariableIndices.Value; }
        }

        private void Reset()
        {
            this.variableQueue = new List<VariableData>();
            this.speculativePropagationCount = 0;
            RegenerateIndices();
        }

        private Dictionary<SSAVariable, int> ComputeIndices()
        {
            var results = new Dictionary<SSAVariable, int>();
            for (int i = 0; i < variableQueue.Count; i++)
            {
                results[variableQueue[i].Item1] = i;
            }
            return results;
        }

        /// <summary>
        /// Recomputes the variable index dictionary.
        /// </summary>
        private void RegenerateIndices()
        {
            lazyVariableIndices = new Lazy<Dictionary<SSAVariable, int>>(ComputeIndices);
        }

        /// <summary>
        /// "Spills" the given number of variables in this variable queue,
        /// reverting them to conservative behavior.
        /// </summary>
        private void Spill(int Count)
            in { Count <= variableQueue.Count }
        {
            for (int i = 0; i < Count; i++)
            {
                var item = variableQueue[i];

                // Revert to conservative behavior for the definition.
                item.Item3.IsAlive = false;

                // Revert to conservative behavior for the use.
                if (item.Item4 != null)
                {
                    speculativePropagationCount--;
                    item.Item4.IsAlive = false;
                }
            }
            variableQueue.RemoveRange(0, Count);

            // Regenerate the variable index dictionary.
            RegenerateIndices();
        }

        /// <summary>
        /// "Spills" all variables in this variable queue, reverting them
        /// to conservative behavior.
        /// </summary>
        public void Spill()
        {
            Spill(variableQueue.Count);
        }

        /// <summary>
        /// Creates a load expression to the given SSA variable, which may
        /// or may not be a speculative definition propagation.
        /// </summary>
        public IExpression Load(SSAVariable Variable)
        {
            var getExpr = Variable.CreateGetExpression();

            int index;
            if (variableIndices.TryGetValue(Variable, &index))
            {
                if (speculativePropagationCount != index)
                {
                    // Spill all previous variables in the queue if this
                    // request does not obey the FIFO discipline.
                    Spill(index);
                    // Nothing should be propagated now.
                    assert(speculativePropagationCount == 0);
                    // Spilling all previous variables will move this
                    // SSA variable to the front of the queue.
                    index = 0;

                    assert(variableIndices[Variable] == index);
                }

                var oldEntry = variableQueue[index];

                var specExpr = new SpeculativeExpression(
                    oldEntry.Item2, getExpr);

                // Update the queue entry to reflect the variable load.
                variableQueue[index] = new VariableData(
                    Variable, oldEntry.Item2,
                    oldEntry.Item3, specExpr);

                // Increment the speculative propagation counter.
                speculativePropagationCount++;
                if (speculativePropagationCount == variableQueue.Count)
                {
                    // The entire variable queue has been propagated, in order.
                    // This means that the transformations that we have performed
                    // are correct. We can simply forget about the speculative
                    // statements and expressions, which should make sure that
                    // they won't accidentally be marked as dead later on.
                    Reset();
                }

                return specExpr;
            }
            else
            {
                return getExpr;
            }
        }

        /// <summary>
        /// Creates a statement that defined the given def-once,
        /// use-once variable. It is then inserted to the back of the
        /// queue.
        /// </summary>
        public IStatement Define(SSAVariable Variable, IExpression Value)
        {
            var result = new SpeculativeStatement(
                EmptyStatement, Variable.CreateSetStatement(Value));
            variableQueue.Add(new VariableData(Variable, Value, result, null));
            RegenerateIndices();
            return result;
        }
    }

    public class ValuePropagatingVisitor : NodeVisitorBase
    {
        public const this(
            set IReadOnlyDictionary<SSAVariable, int> UseCounts)
        {
            this.variableDefs = new Dictionary<SSAVariable, IExpression>();
            this.propQueue = new ValuePropagationQueue();
        }

        /// <summary>
        /// Gets the use counts associated with block-local variables by
        /// this value propagating visitor.
        /// </summary>
        private IReadOnlyDictionary<SSAVariable, int> UseCounts { const get; private set; }

        // A dictionary that maps propagate-always SSA variables
        // to their definitions.
        private Dictionary<SSAVariable, IExpression> variableDefs;

        // The propagation queue, which manages block-local def-once, use-once
        // variables.
        private ValuePropagationQueue propQueue;

        public override bool Matches(IExpression Value)
        {
            return true;
        }
        public override bool Matches(IStatement Value)
        {
            return true;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            if (Expression is SSAGetExpression)
            {
                var getExpr = (SSAGetExpression)Expression;
                var ssaVar = getExpr.Variable;

                if (variableDefs.TryGetValue(ssaVar, &IExpression defValue))
                {
                    return Visit(defValue);
                }
                else
                {
                    return propQueue.Load(ssaVar);
                }
            }
            else if (ValuePropagationPass.CanDelayTopLevelExpression(Expression))
            {
                // These expressions don't actually *do* anything themselves,
                // so we needn't flush the last definition.
                return Expression.Accept(this);
            }
            else
            {
                // Visit, then flush the propagation queue.
                var result = Expression.Accept(this);
                propQueue.Spill();
                return result;
            }
        }

        protected override IStatement Transform(IStatement Statement)
        {
            if (Statement is SSADefineStatement)
            {
                var defStatement = (SSADefineStatement)Statement;
                var val = Visit(defStatement.Value);
                var ssaVar = defStatement.Variable;

                if (UseCounts.TryGetValue(ssaVar, &int useCount))
                {
                    if (useCount == 0)
                    {
                        // Perform some trivial dead store elimination.
                        return new ExpressionStatement(val).Simplify();
                    }

                    var propAlways = ValuePropagationPass.MakePropagateAlwaysExpression(val);
                    if (propAlways != null)
                    {
                        // Mark this variable as a propagate-always
                        // variable and emit some initialization
                        // code instead of a definition.
                        variableDefs[ssaVar] = propAlways.Item1;
                        return propAlways.Item2;
                    }
                    else if (useCount == 1)
                    {
                        var propOnce = ValuePropagationPass.MakePropagateOnceExpression(val);
                        if (propOnce != null)
                        {
                            // Mark this variable as a propagate-always
                            // variable and don't emit its definition.
                            // This is safe, because its definition is
                            // propagate-once, and it is used only once.
                            // We may have to emit some initialization
                            // code, though.
                            variableDefs[ssaVar] = propOnce.Item1;
                            return propOnce.Item2;
                        }
                        else
                        {
                            // Add the variable to the propagation queue.
                            return propQueue.Define(ssaVar, val);
                        }
                    }
                }
                return new SSADefineStatement(ssaVar, val);
            }
            else if (ValuePropagationPass.CanDelayTopLevelStatement(Statement))
            {
                return Statement.Accept(this);
            }
            else
            {
                // Visit, then flush the propagation queue.
                var result = Statement.Accept(this);
                propQueue.Spill();
                return result;
            }
        }
    }

    /// <summary>
    /// A pass that propagates block-local SSA variable definitions.
    /// </summary>
    public static class ValuePropagationPass : FlowGraphVisitorBase, IPass<IStatement, IStatement>
    {
        /// <summary>
        /// Gets this pass' name.
        /// </summary>
        public const string ValuePropagationPassName = "valueprop";

        /// <summary>
        /// Tests if the given top-level expression can be delayed.
        /// </summary>
        public bool CanDelayTopLevelExpression(IExpression Expression)
        {
            if (Expression is InvocationExpression)
            {
                // Constant invocation expressions don't matter.
                var method = ((InvocationExpression)Expression).Method;
                return method != null && method.IsConstant;
            }
            else if (Expression is NewObjectExpression)
            {
                var expr = (NewObjectExpression)Expression;
                return expr.IsConstantNode;
            }
            else if (Expression is IVariableNode)
            {
                // Variable load/address-of nodes don't change any state,
                // either.
                var action = ((IVariableNode)Expression).Action;
                return action == VariableNodeAction.Get
                    || action == VariableNodeAction.AddressOf;
            }

            return Expression is IMetadataNode<IExpression>
                || Expression is InitializedExpression
                || Expression is VoidExpression
                || Expression is GetMethodExpression
                || Expression is ConversionExpressionBase
                || Expression is LambdaExpression
                || Expression is BinaryExpression;
        }

        /// <summary>
        /// Tests if the given top-level expression can be delayed.
        /// </summary>
        public bool CanDelayTopLevelStatement(IStatement Statement)
        {
            return Statement.IsEmpty
                || Statement is BlockStatement
                || Statement is IMetadataNode<IStatement>;
        }

        /// <summary>
        /// Spills the given expression's variable to a temporary.
        /// </summary>
        public Tuple<IExpression, IStatement> Spill(IExpression Expression)
        {
            var temp = new SSAVariable(Expression.Type);
            return new Tuple<IExpression, IStatement>(
                temp.CreateGetExpression(),
                temp.CreateSetStatement(Expression));
        }

        /// <summary>
        /// Tries to convert the given expression to a propagate-always expression.
        /// The expression's value is spilled to a temporary if that can't be done.
        /// </summary>
        public Tuple<IExpression, IStatement> MakePropagateAlwaysExpressionOrSpill(IExpression Expression)
        {
            var result = MakePropagateAlwaysExpression(Expression);
            if (result == null)
                return Spill(Expression);
            else
                return result;
        }

        /// <summary>
        /// Tries to convert the given expression to a propagate-always expression.
        /// Null is returned if that can't be done.
        /// </summary>
        public Tuple<IExpression, IStatement> MakePropagateAlwaysExpression(IExpression Expression)
        {
            if (Expression is IMetadataNode<IExpression>)
            {
                // TODO: maybe preserve the metadata?
                return MakePropagateAlwaysExpression(((IMetadataNode<IExpression>)Expression).Value);
            }
            else if (Expression is LocalAddressOfExpression ||
                     Expression is ArgumentAddressOfExpression ||
                     Expression is ThisGetExpression ||
                     Expression is SSAGetExpression)
            {
                // Always propagate address-of-local expressions, this-expressions,
                // and ssa-get expressions.
                return new Tuple<IExpression, IStatement>(Expression, EmptyStatement);
            }
            else if (Expression is GetMethodExpression)
            {
                // Always propagate get-method expressions. Spill their target
                // if that's not propagate-always.

                var getMethodExpr = (GetMethodExpression)Expression;
                if (getMethodExpr.Caller == null)
                {
                    return new Tuple<IExpression, IStatement>(getMethodExpr, EmptyStatement);
                }
                else
                {
                    var callerExpr = MakePropagateAlwaysExpressionOrSpill(getMethodExpr.Caller);
                    return new Tuple<IExpression, IStatement>(
                        new GetMethodExpression(
                            getMethodExpr.Target, callerExpr.Item1,
                            getMethodExpr.Op),
                        callerExpr.Item2);
                }
            }
            else if (Expression is ReinterpretCastExpression)
            {
                // Propagate reinterpret_casts of propagate-always expressions,
                // because these casts are assumed to be zero-cost.
                var castExpr = (ReinterpretCastExpression)Expression;
                var inner = MakePropagateAlwaysExpression(castExpr.Value);
                if (inner == null)
                    return null;
                else
                    return new Tuple<IExpression, IStatement>(
                        new ReinterpretCastExpression(inner.Item1, castExpr.Type),
                        inner.Item2);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Tries to convert the given expression to a propagate-once expression:
        /// an expression that should always be propagated, provided
        /// its use count is one.
        /// The expression's value is spilled to a temporary if that can't be done.
        /// </summary>
        public Tuple<IExpression, IStatement> MakePropagateOnceExpressionOrSpill(IExpression Expression)
        {
            var result = MakePropagateAlwaysExpression(Expression);
            if (result == null)
                return Spill(Expression);
            else
                return result;
        }

        /// <summary>
        /// Tries to convert the given expression to a propagate-once expression:
        /// an expression that should always be propagated, provided
        /// its use count is one.
        /// The expression's value is spilled to a temporary if that can't be done.
        /// </summary>
        public Tuple<IExpression, IStatement> MakePropagateOnceExpression(IExpression Expression)
        {
            if (Expression is IMetadataNode<IExpression>)
            {
                // TODO: maybe preserve the metadata?
                return MakePropagateOnceExpression(((IMetadataNode<IExpression>)Expression).Value);
            }
            else if (Expression is LambdaExpression)
            {
                // Propagate lambdas once, provided their capture list items
                // are either propagate-once or propagate-always.
                var lambdaExpr = (LambdaExpression)Expression;

                var initList = new List<IStatement>();
                var captList = new List<IExpression>();
                foreach (var item in lambdaExpr.Header.CaptureList)
                {
                    var initCapt = MakePropagateOnceExpressionOrSpill(item);
                    captList.Add(initCapt.Item1);
                    initList.Add(initCapt.Item2);
                }

                var newHeader = new LambdaHeader(
                    lambdaExpr.Header.Signature, captList);

                return new Tuple<IExpression, IStatement>(
                    new LambdaExpression(
                        newHeader, lambdaExpr.Body, lambdaExpr.BoundHeaderBlock),
                    new BlockStatement(initList).Simplify());
            }
            else
            {
                return MakePropagateAlwaysExpression(Expression);
            }
        }

        protected override FlowGraph Visit(FlowGraph Graph)
        {
            // Step one: find all variable definitions, as well as all
            // variable uses.
            var blockLocals = StackIntrinsicsPass.ComputeBlockLocalVariables(Graph);

            // Step two: replace variables that are only used in the block
            // that defines them.

            var results = new Dictionary<UniqueTag, BasicBlock>();
            foreach (var block in Graph.Blocks)
            {
                // (Try to) replace block-local variables.
                var placingVisitor = new ValuePropagatingVisitor(blockLocals.Item1);
                results[block.Tag] = block.Accept(placingVisitor);
            }
            return new FlowGraph(Graph.EntryPointTag, results);
        }

        public IStatement Apply(IStatement Statement)
            in { VerifyCFGPass.Apply(Statement) }
            in { VerifySSAPass.Apply(Statement) }
            out (result) { VerifyCFGPass.Apply(result) }
            out (result) { VerifySSAPass.Apply(result) }
        {
            return Visit(Statement);
        }
    }
}
