using System;
using Flame.Compiler;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// Defines access checking techniques.
    /// </summary>
    public class AccessChecker
    {
        private this(set IType currentType, set IBodyPassEnvironment passEnvironment);

        /// <summary>
        /// The current type, which is used to access other types, fields and methods.
        /// </summary>
        private IType currentType;

        /// <summary>
        /// Tells if invalid access has been detected.
        /// </summary>
        private bool invalidAccess;

        /// <summary>
        /// The pass environment. If non-null, then any extensible member is assumed to be
        /// accessible.
        /// </summary>
        private IBodyPassEnvironment passEnvironment;

        private IType CheckTypeAccess(IType Target)
        {
            if (invalidAccess)
                return Target;

            if (passEnvironment != null
                && passEnvironment.CanExtend(Target.GetRecursiveGenericDeclaration()))
                return Target;

            if (!currentType.CanAccess(Target))
                invalidAccess = true;

            return Target;
        }

        private T CheckMemberAccess<T>(T Target)
            where T : ITypeMember
        {
            if (invalidAccess)
                return Target;

            if (passEnvironment != null && Target.DeclaringType != null
                && passEnvironment.CanExtend(Target.DeclaringType.GetRecursiveGenericDeclaration()))
                return Target;

            if (!currentType.CanAccess(Target))
                invalidAccess = true;

            return Target;
        }

        private PredicateMemberNodeVisitor CreateCheckingVisitor()
        {
            var memberConv = new MemberConverter(
                new DelegateConverter<IType, IType>(CheckTypeAccess),
                new DelegateConverter<IMethod, IMethod>(CheckMemberAccess<IMethod>),
                new DelegateConverter<IField, IField>(CheckMemberAccess<IField>));

            return new PredicateMemberNodeVisitor(memberConv);
        }

        /// <summary>
        /// Determines whether the given type can access all types and members
        /// that are referenced by the given statement.
        /// </summary>
        public static bool CanAccess(IType CurrentType, IStatement Statement, BodyPassArgument Arg)
        {
            IBodyPassEnvironment passEnv;
            if (AccessRelaxingPass.IsEnabled(Arg.Metadata.GlobalMetadata))
                passEnv = Arg.PassEnvironment;
            else
                passEnv = null;

            var checker = new AccessChecker(CurrentType, passEnv);
            var visitor = checker.CreateCheckingVisitor();

            visitor.Visit(Statement);

            return !checker.invalidAccess;
        }

        /// <summary>
        /// Determines whether the given type can access all types and members
        /// that are referenced by the given expression.
        /// </summary>
        public static bool CanAccess(IType CurrentType, IExpression Expression, BodyPassArgument Arg)
        {
            IBodyPassEnvironment passEnv;
            if (AccessRelaxingPass.IsEnabled(Arg.Metadata.GlobalMetadata))
                passEnv = Arg.PassEnvironment;
            else
                passEnv = null;

            var checker = new AccessChecker(CurrentType, passEnv);
            var visitor = checker.CreateCheckingVisitor();

            visitor.Visit(Expression);

            return !checker.invalidAccess;
        }

        /// <summary>
        /// Determines whether the given type can access the given type.
        /// </summary>
        public static bool CanAccess(IType CurrentType, IType AccessedType, BodyPassArgument Arg)
        {
            if (AccessRelaxingPass.IsEnabled(Arg.Metadata.GlobalMetadata)
                && Arg.PassEnvironment.CanExtend(AccessedType.GetRecursiveGenericDeclaration()))
            {
                return true;
            }
            else
            {
                return CurrentType.CanAccess(AccessedType);
            }
        }

        /// <summary>
        /// Determines whether the given type can access the given type member.
        /// </summary>
        public static bool CanAccess(IType CurrentType, ITypeMember AccessedMember, BodyPassArgument Arg)
        {
            var declType = AccessedMember.DeclaringType;
            if (declType != null
                && AccessRelaxingPass.IsEnabled(Arg.Metadata.GlobalMetadata)
                && Arg.PassEnvironment.CanExtend(declType.GetRecursiveGenericDeclaration()))
            {
                return true;
            }
            else
            {
                return CurrentType.CanAccess(AccessedMember);
            }
        }
    }
}
