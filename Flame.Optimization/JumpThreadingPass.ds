using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Flow;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    /// <summary>
    /// A visitor that finds SSA variable definitions and stores them in a list,
    /// in the order they are found.
    /// </summary>
    public class LinearSSAVariableDefFinder : NodeVisitorBase
    {
        public this()
        {
            this.defs = new List<SSADefineStatement>();
        }

        private List<SSADefineStatement> defs;

        /// <summary>
        /// Gets a list of SSA definition statements, in this order they were found.
        /// </summary>
        public IReadOnlyList<SSADefineStatement> Definitions { get { return defs; } }

        public override const bool Matches(IExpression Value)
        {
            return false;
        }
        public override const bool Matches(IStatement Value)
        {
            return Value is SSADefineStatement;
        }

        protected override IExpression Transform(IExpression Expression)
        {
            return Expression;
        }

        protected override IStatement Transform(IStatement Statement)
        {
            assert(Statement is SSADefineStatement);
            var defStatement = (SSADefineStatement)Statement;
            defs.Add(defStatement);
            return defStatement;
        }
    }

    /// <summary>
    /// Describes a single basic block in a jump thread.
    /// </summary>
    public struct JumpThreadNode
    {
        public this(
            BasicBlock Block,
            IReadOnlyList<SSAVariable> Arguments,
            BlockFlow Flow,
            int TotalScore)
        {
            this.Block = Block;
            this.Arguments = Arguments;
            this.Flow = Flow;
            this.TotalScore = TotalScore;
        }

        /// <summary>
        /// Gets the basic block for this jump thread node.
        /// </summary>
        /// <returns>The basic block.</returns>
        public BasicBlock Block { get; private set; }

        /// <summary>
        /// Gets the basic block's list of arguments.
        /// </summary>
        /// <returns>The basic block's list of arguments.</returns>
        public IReadOnlyList<SSAVariable> Arguments { get; private set; }

        /// <summary>
        /// Gets the jump thread's final flow if it is cut off at this
        /// node.
        /// </summary>
        /// <returns>The final flow for this node.</returns>
        public BlockFlow Flow { get; private set; }

        /// <summary>
        /// Gets the jump thread's total score at this block.
        /// A positive value means that the jump thread can be
        /// converted to a linear list of statements.
        /// </summary>
        /// <returns>The jump thread's score at this point.</returns>
        public int TotalScore { get; private set; }

        /// <summary>
        /// Creates a statement that assigns values to the parameters of this
        /// jump thread node's block and then runs a copy of said block's body.
        /// </summary>
        /// <returns>A statement for this jump thread node.</returns>
        public IStatement ToStatement()
        {
            if (Block == null)
            {
                return EmptyStatement;
            }

            var paramAssignments = new Dictionary<IVariable, IVariable>();
            foreach (var param in Block.Parameters, var arg in Arguments)
            {
                paramAssignments[param] = arg;
            }

            // Replace parameter substitution with a parallel assignment statement and clone
            // the method body.
            return new BlockStatement(new IStatement[]
            {
                VariableHelpers.CreateParallelSetStatement(
                    paramAssignments,
                    new Dictionary<IType, IVariable>()),
                CloningVisitor.Visit(Block.Contents)
            }).Simplify();
        }
    }

    /// <summary>
    /// Represents a thread of jumps: a collection of blocks to which control is transferred
    /// once a single initial block is reached.
    /// </summary>
    public class JumpThread
    {
        /// <summary>
        /// Creates a jump thread from the given block and branch.
        /// </summary>
        public this(BasicBlock Block, BlockBranch Branch)
        {
            this.varValues = new Dictionary<SSAVariable, IExpression>();
            this.threadBlocks = new HashSet<UniqueTag>();
            this.threadBlocks.Add(Block.Tag);
            AnalyzeBlockBody(Block.Contents);
            this.threadNodes = new List<JumpThreadNode>();
            this.threadNodes.Add(new JumpThreadNode(null, null, new JumpFlow(Branch), 0));
        }

        /// <summary>
        /// A dictionary that maps variables to the values they have been
        /// defined as.
        /// </summary>
        private Dictionary<SSAVariable, IExpression> varValues;

        /// <summary>
        /// The set of all blocks in this thread.
        /// </summary>
        private HashSet<UniqueTag> threadBlocks;

        /// <summary>
        /// Gets the list of nodes in this thread.
        /// </summary>
        private List<JumpThreadNode> threadNodes;

        /// <summary>
        /// Gets the last node in this jump thread.
        /// </summary>
        /// <returns>The last node in this jump thread.</returns>
        private JumpThreadNode LastNode { get { return threadNodes[threadNodes.Count - 1]; } }

        /// <summary>
        /// Gets the final flow instruction in this jump thread.
        /// </summary>
        /// <returns>The final flow instruction in this jump thread.</returns>
        public BlockFlow FinalFlow { get { return LastNode.Flow; } }

        /// <summary>
        /// Gets the length of this jump thread: the number of blocks it is comprised of.
        /// </summary>
        /// <returns>The length of this jump thread.</returns>
        public int Length { get { return threadBlocks.Count - 1; } }

        /// <summary>
        /// Tries to simplify the given expression.
        /// </summary>
        /// <param name="Expression">The expression to simplify.</param>
        /// <returns>Either the original expression or the simplified expression.</returns>
        private IExpression Simplify(IExpression Expression)
        {
            var visitor = new GlobalValuePropagationUseVisitor(varValues, false);
            return visitor.Visit(Expression);
        }

        /// <summary>
        /// Tries to evaluate the given expression within the context of this jump thread.
        /// </summary>
        /// <param name="Expression">The expression to evaluate.</param>
        /// <returns>A value if the expression could be evaluated; otherwise, <c>null</c>.</returns>
        public IBoundObject EvaluateOrNull(IExpression Expression)
        {
            return Simplify(Expression).EvaluateConstant();
        }

        /// <summary>
        /// Tries to add the given block to this jump thread.
        /// </summary>
        /// <param name="Block">The block to add to this jump thread.</param>
        /// <param name="Arguments">The list of arguments for the block's parameters.</param>
        /// <param name="BlockScore">
        /// The block's score. Positive scores encourage linearization, negative scores discourage it.
        /// </param>
        /// <returns><c>true</c> if the given block was appended to this thread; otherwise, <c>false</c>.</returns>
        public bool TryAddBlock(BasicBlock Block, IReadOnlyList<SSAVariable> Arguments, int BlockScore)
        {
            // A jump thread cannot include a cycle. If we allowed this, then
            // we could slip into an infinite loop.
            if (!threadBlocks.Add(Block.Tag))
            {
                return false;
            }

            // If the new score is lower than or equal to -40, then we probably
            // don't want to duplicate this block.
            if (LastNode.TotalScore + BlockScore <= -40)
            {
                return false;
            }

            // Try to find definitions for argument variables.
            var paramValues = new Dictionary<SSAVariable, IExpression>();
            foreach (var param in Block.Parameters, var arg in Arguments)
            {
                IExpression argVal;
                if (varValues.TryGetValue(arg, &argVal))
                {
                    paramValues[param] = argVal;
                }
            }

            // Add them all to the defined values.
            foreach (var varDef in paramValues)
            {
                varValues[varDef.Key] = varDef.Value;
            }

            // Analyze the block's contents.
            AnalyzeBlockBody(Block.Contents);

            BlockFlow finalFlow;
            if (Block.Flow is SelectFlow)
            {
                // The selection flow instruction's condition might evaluate to a constant
                // value within the context of this jump thread. If so, then we can pick
                // a branch and jump to that.
                var selection = (SelectFlow)Block.Flow;
                var condVal = EvaluateOrNull(selection.Condition);
                if (condVal == null)
                {
                    finalFlow = selection;
                }
                else if (condVal.GetValue<bool>())
                {
                    finalFlow = new JumpFlow(selection.ThenBranch);
                }
                else
                {
                    finalFlow = new JumpFlow(selection.ElseBranch);
                }
            }
            else
            {
                // Set the final flow instruction.
                finalFlow = Block.Flow;
            }

            threadNodes.Add(new JumpThreadNode(Block, Arguments, finalFlow, LastNode.TotalScore + BlockScore));

            return true;
        }

        /// <summary>
        /// Mines the given basic block body statement for variable definitions,
        /// which are then included in the thread.
        /// </summary>
        /// <param name="Body">The statement to mine for variable definitions.</param>
        private void AnalyzeBlockBody(IStatement Body)
        {
            // Mine it for definitions.
            var defFinder = new LinearSSAVariableDefFinder();
            defFinder.Visit(Body);

            // Simplify the definitions and update the variable value dictionary.
            foreach (var varDef in defFinder.Definitions)
            {
                varValues[varDef.Variable] = Simplify(varDef.Value);
            }
        }

        /// <summary>
        /// Linearizes this jump thread by concatenating the bodies of and branches
        /// to all basic blocks up to and including the last block with a nonnegative
        /// score.
        /// </summary>
        /// <returns>A linearized jump thread.</returns>
        public LinearizedJumpThread Linearize()
        {
            // Loop over the nodes in this thread backwards, and pick the first
            // (last?) node with a nonnegative total score.
            int i = threadNodes.Count - 1;
            while (i >= 0)
            {
                if (threadNodes[i].TotalScore >= 0)
                {
                    break;
                }
                i--;
            }

            var blocks = new List<BasicBlock>();
            if (i <= 0)
            {
                return new LinearizedJumpThread(EmptyStatement, threadNodes[0].Flow, blocks);
            }

            // Create the linearized jump thread's body.
            var bodyStatements = new List<IStatement>();
            for (int j = 0; j <= i; j++)
            {
                bodyStatements.Add(threadNodes[j].ToStatement());
                if (threadNodes[j].Block != null)
                {
                    blocks.Add(threadNodes[j].Block);
                }
            }

            // Create the linearized jump thread. Note that i is also the length of the
            // linearized jump thread, because the first node in threadNodes is a dummy
            // node.
            return new LinearizedJumpThread(
                new BlockStatement(bodyStatements).Simplify(),
                threadNodes[i].Flow,
                blocks);
        }
    }

    /// <summary>
    /// Represents a jump thread that has been reduced to a linear-flow statement
    /// followed by a final flow instruction.
    /// </summary>
    public struct LinearizedJumpThread
    {
        public this(
            IStatement Body, BlockFlow FinalFlow,
            IReadOnlyList<BasicBlock> LinearizedBlocks)
        {
            this.Body = Body;
            this.FinalFlow = FinalFlow;
            this.LinearizedBlocks = LinearizedBlocks;
        }

        /// <summary>
        /// Gets this linearized jump thread's body.
        /// </summary>
        /// <returns>The linearized jump thread's body.</returns>
        public IStatement Body { get; private set; }

        /// <summary>
        /// Gets this linearized jump thread's final flow instruction.
        /// </summary>
        /// <returns>The final flow instruction.</returns>
        public BlockFlow FinalFlow { get; private set; }

        /// <summary>
        /// Gets the list of all blocks that have been linearized by this
        /// jump thread.
        /// </summary>
        /// <returns>The list of all linearized blocks in this jump thread.</returns>
        public IReadOnlyList<BasicBlock> LinearizedBlocks { get; private set; }

        /// <summary>
        /// Gets the number of blocks that were used to construct this
        /// linearized jump thread.
        /// </summary>
        /// <returns>The number of blocks in this linearized jump thread.</returns>
        public int Length { get { return LinearizedBlocks.Count; } }
    }

    /// <summary>
    /// A branch visitor that tries to replace threads of branches by direct branches.
    /// This visitor works within the context for a control-flow graph.
    /// </summary>
    public class JumpThreadingVisitor : BranchVisitorBase
    {
        /// <summary>
        /// Creates a jump-threading visitor from a control-flow graph and a function
        /// that rates basic blocks. Positive ratings encourage jump thread
        /// linearization, negative scores discourage it.
        /// </summary>
        public this(FlowGraph Graph, Func<BasicBlock, int> RateBlock)
        {
            this.Graph = Graph;
            this.ratingFunction = RateBlock;
            this.ratingCache = new Dictionary<BasicBlock, int>();
            this.newBlocks = new Dictionary<UniqueTag, BasicBlock>();
            this.currentBlock = null;

            // Compute ref-counts for the control-flow graph.
            this.refCounts = new Dictionary<UniqueTag, int>();
            foreach (var tag in Graph.BlockTags)
            {
                this.refCounts[tag] = 0;
            }
            foreach (var block in Graph.Blocks)
            {
                foreach (var successorTag in block.Flow.SuccessorTags)
                {
                    this.refCounts[successorTag] += 1;
                }
            }
        }

        private Dictionary<UniqueTag, BasicBlock> newBlocks;
        private BasicBlock currentBlock;

        /// <summary>
        /// A function that rates a basic block: positive scores encourage jump thread
        /// linearization, negative scores discourage it.
        /// </summary>
        private Func<BasicBlock, int> ratingFunction;

        /// <summary>
        /// A cache that remembers which blocks are worth duplicating and which are not.
        /// </summary>
        private Dictionary<BasicBlock, int> ratingCache;

        /// <summary>
        /// A dictionary that remembers the in-degree of basic blocks.
        /// </summary>
        private Dictionary<UniqueTag, int> refCounts;

        /// <summary>
        /// Gets the control-flow graph that this jump-threading visitor operates on.
        /// </summary>
        /// <returns>The control-flow graph for this visitor.</returns>
        public FlowGraph Graph { get; private set; }

        /// <summary>
        /// Gets a dictionary that maps visited basic block tags to basic blocks in
        /// the transformed graph.
        /// </summary>
        /// <returns>A dictionary that maps basic block tags to basic blocks.</returns>
        public IReadOnlyDictionary<UniqueTag, BasicBlock> Blocks { get { return newBlocks; } }

        /// <summary>
        /// Gets the block with the given tag. An attempt is made to return the block with
        /// the given tag from the new block dictionary. If that fails, then the block with
        /// the specified tag is retrieved from the graph.
        /// </summary>
        /// <param name="Tag">The tag to find a block for.</param>
        /// <returns>A basic block.</returns>
        private BasicBlock GetBlock(UniqueTag Tag)
        {
            BasicBlock block;
            if (newBlocks.TryGetValue(Tag, &block))
            {
                if (block == null)
                {
                    block = Graph.GetBlock(Tag);
                }
            }
            else
            {
                block = Visit(Graph.GetBlock(Tag));
            }
            return block;
        }

        private void IncrementRefCount(UniqueTag Tag)
        {
            refCounts[Tag] += 1;
        }

        private void IncrementRefCount(BlockFlow Flow)
        {
            foreach (var tag in Flow.SuccessorTags)
            {
                IncrementRefCount(tag);
            }
        }

        private void DecrementRefCount(UniqueTag Tag)
        {
            int rc = refCounts[Tag];
            rc--;
            refCounts[Tag] = rc;
            if (rc == 0)
            {
                foreach (var successorTag in GetBlock(Tag).Flow.SuccessorTags)
                {
                    DecrementRefCount(successorTag);
                }
            }
        }

        private BlockBranch UpdateRefCount(BlockBranch OriginalBranch, BlockBranch NewBranch)
        {
            DecrementRefCount(OriginalBranch.TargetTag);
            IncrementRefCount(NewBranch.TargetTag);
            return NewBranch;
        }

        private BlockFlow UpdateRefCount(BlockBranch OriginalBranch, BlockFlow NewFlow)
        {
            DecrementRefCount(OriginalBranch.TargetTag);
            IncrementRefCount(NewFlow);
            return NewFlow;
        }

        /// <summary>
        /// Rates the given basic block. Positive scores encourage jump thread
        /// linearization, negative scores discourage it.
        /// </summary>
        /// <param name="Block">A basic block which is to be rated.</param>
        /// <returns>A positive score if jump thread linearization should be encouraged, non-positive scores otherwise.</returns>
        public int RateBlock(BasicBlock Block)
        {
            int result;
            if (!ratingCache.TryGetValue(Block, &result))
            {
                result = ratingFunction(Block);
                ratingCache[Block] = result;
            }
            return result;
        }

        /// <summary>
        /// Tries to discover a jump thread for the given branch in the given graph.
        /// </summary>
        /// <param name="Block">The block that defines the branch.</param>
        /// <param name="Branch">The first branch in the thread.</param>
        /// <returns>A jump thread for the given branch.</returns>
        private JumpThread DiscoverJumpThread(BasicBlock Block, BlockBranch Branch)
        {
            bool isConcatenating = true;
            var thread = new JumpThread(Block, Branch);
            while (true)
            {
                // Append the branch to the thread if we think that it might be
                // worth it.
                var nextBlock = GetBlock(Branch.TargetTag);
                int rating = RateBlock(nextBlock);
                isConcatenating = isConcatenating && refCounts[Branch.TargetTag] == 1;
                if (isConcatenating)
                {
                    // This is just block concatentation (as opposed to block duplication)
                    // and we really want to encourage that. We can coax the jump threader to
                    // include this block by adding the block's size to the block's rating.
                    var sizeVisitor = new SizeVisitor(true);
                    nextBlock.Accept(sizeVisitor);
                    rating += sizeVisitor.Size + 10;
                }
                if (!thread.TryAddBlock(nextBlock, Branch.Arguments, rating))
                {
                    break;
                }

                if (thread.FinalFlow is JumpFlow)
                {
                    // Make this jump's branch the next branch in the thread.
                    var jump = (JumpFlow)thread.FinalFlow;
                    Branch = jump.Branch;
                }
                else
                {
                    break;
                }
            }
            return thread;
        }

        public override BlockBranch Visit(BlockBranch Branch)
        {
            var thread = DiscoverJumpThread(currentBlock, Branch).Linearize();
            if (thread.Length == 0)
            {
                return Branch;
            }

            // If the initialization statement does nothing, then we can simply
            // return the rewritten branch.
            var init = thread.Body;
            var newFlow = thread.FinalFlow;
            if (init.IsEmpty)
            {
                if (newFlow is JumpFlow)
                {
                    return UpdateRefCount(Branch, ((JumpFlow)newFlow).Branch);
                }
                else
                {
                    return Branch;
                }
            }

            // If the initialization statement actually does something, then we need to
            // create a temporary ('thunk') block and have that perform both the initialization
            // and the branch.
            var thunkBlock = new BasicBlock(
                new UniqueTag("thunk_block"), new List<SSAVariable>(),
                init, newFlow);
            newBlocks[thunkBlock.Tag] = thunkBlock;
            refCounts[thunkBlock.Tag] = 0;
            IncrementRefCount(newFlow);

            // Return a branch to the thunk.
            return UpdateRefCount(Branch, new BlockBranch(thunkBlock.Tag));
        }

        private BasicBlock VisitImpl(BasicBlock Block)
        {
            if (Block.Flow is JumpFlow)
            {
                var jump = (JumpFlow)Block.Flow;
                var thread = DiscoverJumpThread(Block, jump.Branch).Linearize();
                if (thread.Length == 0)
                {
                    return Block;
                }

                return new BasicBlock(
                    Block.Tag, Block.Parameters,
                    new BlockStatement(new IStatement[]
                    {
                        Block.Contents,
                        thread.Body
                    }).Simplify(),
                    UpdateRefCount(jump.Branch, thread.FinalFlow));
            }
            else if (Block.Flow is SelectFlow)
            {
                var oldBlock = currentBlock;
                currentBlock = Block;
                var result = new BasicBlock(
                    Block.Tag, Block.Parameters, Block.Contents,
                    Block.Flow.Accept(this));
                currentBlock = oldBlock;
                return result;
            }
            else
            {
                return Block;
            }
        }

        /// <summary>
        /// Visits the given basic block.
        /// </summary>
        /// <param name="Block">The basic block to visit.</param>
        /// <returns>The transformed basic block.</returns>
        public BasicBlock Visit(BasicBlock Block)
        {
            BasicBlock result;
            if (newBlocks.TryGetValue(Block.Tag, &result))
            {
                return result;
            }

            newBlocks[Block.Tag] = null;
            result = VisitImpl(Block);
            newBlocks[Block.Tag] = result;
            return result;
        }
    }

    /// <summary>
    /// A jump threading visitor that applies jump threading to entire function bodies.
    /// </summary>
    public class GlobalJumpThreadingVisitor : FlowGraphVisitorBase
    {
        public this(Func<BasicBlock, int> RateBlock)
        {
            this.RateBlock = RateBlock;
        }

        /// <summary>
        /// Gets a function that rates basic blocks.
        /// </summary>
        public Func<BasicBlock, int> RateBlock { get; private set; }

        protected override FlowGraph Visit(FlowGraph Graph)
        {
            // Perform jump threading by rewriting blocks one at a time.
            var visitor = new JumpThreadingVisitor(Graph, RateBlock);
            foreach (var block in Graph.Blocks)
            {
                visitor.Visit(block);
            }

            // We may have created dead blocks and we should really clean them up.
            // Dead block elimination is a relatively cheap operation that eases the
            // burden of the SSA construction algorithm.
            return new FlowGraph(Graph.EntryPointTag, visitor.Blocks).EliminateUnreachable();
        }
    }

    /// <summary>
    /// A heuristic that rates blocks based on their size.
    /// </summary>
    public class SizeBasedBlockRater
    {
        public this(int Tolerance, int ParameterWeight)
        {
            this.Tolerance = Tolerance;
            this.ParameterWeight = ParameterWeight;
        }

        /// <summary>
        /// Gets the 'tolerance' value, which is used as a constant factor
        /// when determining a block's rating.
        /// </summary>
        public int Tolerance { get; private set; }

        /// <summary>
        /// Gets the 'parameter weight' value, which describes the 'cost' of
        /// having a parameter in terms of IR node sizes.
        /// </summary>
        public int ParameterWeight { get; private set; }

        /// <summary>
        /// Computes the given block's rating.
        /// </summary>
        public int RateBlock(BasicBlock Block)
        {
            // Replacing parameters by locals will typically allow us to optimize more
            // aggressively, and it also reduces the size of live ranges for variables.
            int pro = Tolerance + Block.Parameters.Count * ParameterWeight;

            // Don't duplicate large blocks. That'd just increase code
            // size, which is probably a bad idea for cache and JIT reasons.
            var sizeVisitor = new SizeVisitor(true);
            Block.Accept(sizeVisitor);

            return pro - sizeVisitor.Size;
        }
    }

    /// <summary>
    /// A pass that applies simple jump threading to flow graphs.
    /// </summary>
    public static class JumpThreadingPass : IPass<BodyPassArgument, IStatement>
    {
        /// <summary>
        /// This pass' name.
        /// </summary>
        public const string JumpThreadingPassName = "jump-threading";

        /// <summary>
        /// The option that specifies the block duplication 'tolerance' value.
        /// </summary>
        public const string ToleranceOption = "duplicate-block-tolerance";

        /// <summary>
        /// The option that specifies the block duplication 'parameter weight'
        /// value.
        /// </summary>
        public const string ParameterWeightOption = "duplicate-block-param-weight";

        public IStatement Apply(BodyPassArgument Arg)
            in { VerifyCFGPass.Apply(Arg.Body) }
            in
            {
                VerifySSAPass.Apply(
                    Arg.Body, Arg.PassEnvironment.Log, Arg.DeclaringMethod,
                    JumpThreadingPassName + " (input)")
            }
            out (result) { VerifyCFGPass.Apply(result) }
            out (result)
            {
                VerifySSAPass.Apply(
                    result, Arg.PassEnvironment.Log, Arg.DeclaringMethod,
                    JumpThreadingPassName + " (output)")
            }
        {
            var log = Arg.PassEnvironment.Log;
            int tolerance = log.Options.GetOption<int>(ToleranceOption, 4);
            int paramWeight = log.Options.GetOption<int>(ParameterWeightOption, 2);
            var heuristic = new SizeBasedBlockRater(tolerance, paramWeight);
            var visitor = new GlobalJumpThreadingVisitor(heuristic.RateBlock);
            // Apply the visitor.
            var visitedBody = visitor.Visit(Arg.Body);

            // Fix broken SSA form in the visited body.
            return FixBrokenSSAPass.Apply(visitedBody);
        }
    }
}
