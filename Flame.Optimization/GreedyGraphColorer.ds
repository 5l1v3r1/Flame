using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame.Optimization
{
    /// <summary>
    /// A common interface for graph coloring techniques that can use an
    /// unbounded number of colors. This can be used to solve the problem of
    /// register allocation, given an interference graph and an unbounded
    /// number of (virtual) registers.
    /// </summary>
    public interface IGraphColorer<TVertex, TColor>
    {
        /// <summary>
        /// Colors the given (undirected) interference graph. A 'related' graph
        /// expresses preferences: an edge connecting two vertices in this graph
        /// means that these vertices should preferably be allocated the same
        /// color. A dictionary maps pre-colored vertices to the colors they
        /// have been given, and a delegate is responsible for generating
        /// new colors.
        /// </summary>
        IReadOnlyDictionary<TVertex, TColor> Color(
            Graph<TVertex> InterferenceGraph,
            Graph<TVertex> RelatedGraph,
            IReadOnlyDictionary<TVertex, TColor> PreColored,
            TColor(TVertex) CreateColor);
    }

    /// <summary>
    /// A base class for greedy graph colorers.
    /// </summary>
    public abstract class GreedyGraphColorerBase<TVertex, TColor> : IGraphColorer<TVertex, TColor>
    {
        /// <summary>
        /// Colors a single vertex in the interference graph.
        /// </summary>
        protected TColor ColorVertex(
            Graph<TVertex> InterferenceGraph,
            Graph<TVertex> RelatedGraph,
            TColor(TVertex) CreateColor,
            TVertex Vertex,
            Dictionary<TVertex, TColor> Results,
            HashSet<TColor> Colors)
        {
            // Figure out which colors we can use for this vertex by first
            // assuming that all colors can be used...
            var availColors = new HashSet<TColor>(Colors);
            foreach (var neighbor in InterferenceGraph[Vertex])
            {
                // ... and then removing colors from the set of available
                // colors.
                if (Results.TryGetValue(neighbor, &TColor neighborColor))
                    availColors.Remove(neighborColor);
            }

            if (availColors.Count > 0)
            {
                // We don't need any extra colors.
                foreach (var related in RelatedGraph[Vertex])
                {
                    if (Results.TryGetValue(related, &TColor relatedColor) &&
                        availColors.Contains(relatedColor))
                    {
                        // Look for a color that has already been used to
                        // color a related vertex, and can also be used
                        // to color this vertex.
                        return relatedColor;
                    }
                }

                // Pick the first available color, then.
                return Enumerable.First<TColor>(availColors);
            }
            else
            {
                // Create a new color, and use it to color this vertex.
                var newColor = CreateColor(Vertex);
                Colors.Add(newColor);
                return newColor;
            }
        }

        /// <summary>
        /// Checks that the given coloring is valid.
        /// </summary>
        protected bool CheckValidColoring(
            Graph<TVertex> InterferenceGraph,
            IReadOnlyDictionary<TVertex, TColor> Coloring)
        {
            var eqComp = EqualityComparer<TColor>.Default;
            foreach (var pair in Coloring)
            {
                foreach (var neighbor in InterferenceGraph[pair.Key])
                {
                    if (eqComp.Equals(Coloring[neighbor], pair.Value))
                        return false;
                }
            }
            return true;
        }

        /// <summary>
        /// Copies all pre-colored vertices to the 'Results' dictionary, and
        /// adds their colors to the 'Colors' set.
        /// </summary>
        protected void PreColor(
            IReadOnlyDictionary<TVertex, TColor> PreColored,
            Dictionary<TVertex, TColor> Results,
            HashSet<TColor> Colors)
        {
            foreach (var pair in PreColored)
            {
                Results[pair.Key] = pair.Value;
                Colors.Add(pair.Value);
            }
        }

        /// <summary>
        /// Greedily colors the given (undirected) interference graph.
        /// </summary>
        public abstract override IReadOnlyDictionary<TVertex, TColor> Color(
            Graph<TVertex> InterferenceGraph,
            Graph<TVertex> RelatedGraph,
            IReadOnlyDictionary<TVertex, TColor> PreColored,
            TColor(TVertex) CreateColor);
    }

    /// <summary>
    /// A greedy graph colorer implementation.
    /// </summary>
    public class GreedyGraphColorer<TVertex, TColor> : GreedyGraphColorerBase<TVertex, TColor>
    {
        /// <summary>
        /// Greedily colors the given (undirected) interference graph.
        /// </summary>
        public override IReadOnlyDictionary<TVertex, TColor> Color(
            Graph<TVertex> InterferenceGraph,
            Graph<TVertex> RelatedGraph,
            IReadOnlyDictionary<TVertex, TColor> PreColored,
            TColor(TVertex) CreateColor)
        {
            var results = new Dictionary<TVertex, TColor>();
            var colors = new HashSet<TColor>();
            // Pre-color the graph.
            assert(CheckValidColoring(InterferenceGraph, PreColored));
            PreColor(PreColored, results, colors);

            foreach (var vertex in InterferenceGraph.Vertices)
            {
                results[vertex] = ColorVertex(
                    InterferenceGraph, RelatedGraph, CreateColor,
                    vertex, results, colors);
            }

            assert(CheckValidColoring(InterferenceGraph, results));
            return results;
        }
    }

    /// <summary>
    /// A greedy graph colorer implementation that spends extra time trying
    /// to coalesce related variables.
    /// </summary>
    public class GreedyRelatedGraphColorer<TVertex, TColor> : GreedyGraphColorerBase<TVertex, TColor>
    {
        /// <summary>
        /// Moves the vertices in the given set of vertices to the front
        /// of the worklist.
        /// </summary>
        private void MakePriority(
            [TVertex] PriorityVertices, LinkedList<TVertex> Worklist)
        {
            var verts = new HashSet<TVertex>(PriorityVertices);
            var node = Worklist.First;
            while (node != null)
            {
                var nextNode = node.Next;
                if (verts.Contains(node.Value))
                {
                    Worklist.Remove(node);
                    Worklist.AddFirst(node.Value);
                }
                node = nextNode;
            }
        }

        /// <summary>
        /// Greedily colors the given (undirected) interference graph.
        /// </summary>
        public override IReadOnlyDictionary<TVertex, TColor> Color(
            Graph<TVertex> InterferenceGraph,
            Graph<TVertex> RelatedGraph,
            IReadOnlyDictionary<TVertex, TColor> PreColored,
            TColor(TVertex) CreateColor)
        {
            var results = new Dictionary<TVertex, TColor>();
            var colors = new HashSet<TColor>();
            // Pre-color the graph.
            assert(CheckValidColoring(InterferenceGraph, PreColored));
            PreColor(PreColored, results, colors);

            var worklist = new LinkedList<TVertex>(InterferenceGraph.Vertices);

            while (worklist.First != null)
            {
                // Pop a vertex from the worklist.
                var v = worklist.First.Value;
                worklist.RemoveFirst();

                // Color it.
                results[v] = ColorVertex(
                    InterferenceGraph, RelatedGraph, CreateColor,
                    v, results, colors);

                // Move its related vertices to the front of the worklist.
                MakePriority(RelatedGraph[v], worklist);
            }

            assert(CheckValidColoring(InterferenceGraph, results));
            return results;
        }
    }

    /// <summary>
    /// A graph colorer implementation that trivially colors a graph, by
    /// assigning every vertex a unique color.
    /// </summary>
    public class TrivialGraphColorer<TVertex, TColor> : IGraphColorer<TVertex, TColor>
    {
        /// <summary>
        /// Trivially colors the given (undirected) interference graph.
        /// </summary>
        public IReadOnlyDictionary<TVertex, TColor> Color(
            Graph<TVertex> InterferenceGraph,
            Graph<TVertex> RelatedGraph,
            IReadOnlyDictionary<TVertex, TColor> PreColored,
            TColor(TVertex) CreateColor)
        {
            var results = new Dictionary<TVertex, TColor>();

            foreach (var v in InterferenceGraph.Vertices)
            {
                TColor c;
                if (!PreColored.TryGetValue(v, &c))
                    c = CreateColor(v);

                results[v] = c;
            }

            return results;
        }
    }
}
