using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Visitors;

namespace Flame.Optimization
{
    public class PredicateMemberNodeVisitor : NodeVisitorBase
    {
        public const this(set MemberConverter Converter)
        {
            this.localVisitor = new LocalTypeSubstitutingVisitor(Converter.TypeConverter);
        }

        public MemberConverter Converter { const get; private set; }
        private LocalTypeSubstitutingVisitor localVisitor;

        public override const bool Matches(IExpression Value)
        {
            return Value is IMemberNode
                || Value is IPredicateNode
                || localVisitor.Matches(Value);
        }
        public override const bool Matches(IStatement Value)
        {
            return Value is IMemberNode
                || Value is IPredicateNode
                || localVisitor.Matches(Value);
        }

        private void AcceptPred(IPredicateNode Node)
        {
            Node.AcceptPredicate(this);
        }

        private void AcceptExpr(IExpression Expression)
        {
            if (Expression is IPredicateNode)
                AcceptPred((IPredicateNode)Expression);
            else
                Expression.Accept(this);
        }

        private void AcceptStmt(IStatement Statement)
        {
            if (Statement is IPredicateNode)
                AcceptPred((IPredicateNode)Statement);
            else
                Statement.Accept(this);
        }

        protected override IExpression Transform(IExpression Expression)
        {
            if (Expression is IMemberNode)
            {
                var memberNode = (IMemberNode)Expression;
                var memberExpr = (IExpression)memberNode.ConvertMembers(Converter);
                AcceptExpr(memberExpr);
            }
            else if (localVisitor.Matches(Expression))
            {
                AcceptExpr(localVisitor.Visit(Expression));
            }
            else // Must be a predicate node. Just accept it and be done with it.
            {
                assert(Expression is IPredicateNode);
                AcceptPred((IPredicateNode)Expression);
            }
            return Expression;
        }
        protected override IStatement Transform(IStatement Statement)
        {
            if (Statement is IMemberNode)
            {
                var memberNode = (IMemberNode)Statement;
                var memberStmt = (IStatement)memberNode.ConvertMembers(Converter);
                AcceptStmt(memberStmt);
            }
            else if (localVisitor.Matches(Statement))
            {
                AcceptStmt(localVisitor.Visit(Statement));
            }
            else // Must be a predicate node. Just accept it and be done with it.
            {
                assert(Statement is IPredicateNode);
                AcceptPred((IPredicateNode)Statement);
            }
            return Statement;
        }
    }
}
