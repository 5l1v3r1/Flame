using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame
{
	public static class PropertyExtensions
	{
        #region Accessors

        /// <summary>
        /// Gets the property's accessor of the provided accessor type.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetAccessor(this IProperty Property, AccessorType Type)
        {
        	foreach (var item in Property.GetAccessors())
        	{
        		if (item.AccessorType.Equals(Type))
        		{
        			return item;
        		}
        	}
        	return null;
        }
        /// <summary>
        /// Gets the property's get accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetGetAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.GetAccessor);
        }
        /// <summary>
        /// Gets the property's set accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetSetAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.SetAccessor);
        }
        /// <summary>
        /// Gets the property's add accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetAddAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.AddAccessor);
        }
        /// <summary>
        /// Gets the property's remove accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetRemoveAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.RemoveAccessor);
        }
        
        public static const bool IsGetAccessor[this IAccessor Accessor]
        {
        	const get return Accessor.AccessorType == AccessorType.GetAccessor;
        }
        public static const bool IsSetAccessor[this IAccessor Accessor]
        {
        	const get return Accessor.AccessorType == AccessorType.SetAccessor;
        }

        #endregion
        
        #region GetIndexerParameterTypes
        
        public const static IType[] GetIndexerParameterTypes(this IProperty Property)
        {
        	var indexerParameters = Property.GetIndexerParameters();
        	IType[] types = new IType[indexerParameters.Length];
        	for (int i = 0; i < types.Length; ++i)
        	{
        		types[i] = indexerParameters[i].ParameterType;
        	}
        	return types;
        }
        
        #endregion
        
        #region Indexers
        
        public static bool IsIndexer[this IProperty Property]
        {
        	const get
        	{
        		return Property.HasAttribute(PrimitiveAttributes.IndexerAttribute.AttributeType);	
        	}
        }
        
        public static IEnumerable<IProperty> GetIndexers(this IType Type)
        {
        	List<IProperty> indexers = new List<IProperty>();
        	foreach (var item in Type.GetProperties())
        	{
        		if (item.IsIndexer)
        		{
        			indexers.Add(item);
        		}
        	}
        	return indexers;
        }
        
        public static IEnumerable<IProperty> GetAllIndexers(this IType Type)
        {
        	List<IProperty> indexers = new List<IProperty>();
        	foreach (var item in Type.GetAllProperties())
        	{
        		if (item.IsIndexer)
        		{
        			indexers.Add(item);
        		}
        	}
        	return indexers;
        }
        
        public static IEnumerable<IProperty> GetIndexers(this IType Type, bool IsStatic, IEnumerable<IType> IndexerArguments)
        {
        	return MemberSelection.FilterByStatic<IProperty>(Type.GetIndexers(), IsStatic).FilterByIndexerParameters(IndexerArguments);
        }
        public static IProperty GetIndexer(this IType Type, bool IsStatic, IEnumerable<IType> IndexerArguments)
        {
        	return Enumerable.SingleOrDefault<IProperty>(Type.GetIndexers(IsStatic, IndexerArguments));
        }
        
        public static IEnumerable<IProperty> GetBestIndexers(this IType Type, bool IsStatic, IEnumerable<IType> IndexerArguments)
        {
        	IType callerType;
        	if (IsStatic)
        	{
        		callerType = null;
        	}
        	else
        	{
        		callerType = Type;
        	}
        	return Type.GetIndexers().GetBestProperties(callerType, IndexerArguments);
        }
        public static IProperty GetBestIndexer(this IType Type, bool IsStatic, IEnumerable<IType> IndexerArguments)
        {
        	return Enumerable.SingleOrDefault<IProperty>(Type.GetBestIndexers(IsStatic, IndexerArguments));
        }
        
        #endregion
        
        #region Filtering
        
        public static IEnumerable<IProperty> FilterByIndexerParameters(this IEnumerable<IProperty> Candidates, IEnumerable<IType> IndexerArguments)
        {
        	var indexArgs = Enumerable.ToArray<IType>(IndexerArguments);
        	List<IProperty> props = new List<IProperty>();
        	foreach (var item in Candidates)
        	{
        		var indexParams = item.GetIndexerParameters().GetTypes();
        		if (indexParams.AreEqual(indexArgs))
        		{
        			props.Add(item);
        		}
        	}
        	return props;
        }
        
        #endregion
        
        public static IProperty GetProperty(this IEnumerable<IProperty> Candidates, string Name, bool IsStatic)
        {
        	foreach (var method in Candidates)
			{
				if (method.Name.Equals(Name))
				if (method.IsStatic == IsStatic)
					return method;
			}
			return null;
        }
        public static IProperty GetProperty(this IEnumerable<IProperty> Candidates, bool IsStatic, IType PropertyType, IType[] IndexerParameters)
        {
        	foreach (var method in Candidates)
			{
				if (method.IsStatic == IsStatic)
				if (method.PropertyType.Equals(PropertyType))
				if (method.GetIndexerParameters().GetTypes().AreEqual(IndexerParameters))
					return method;
			}
			return null;
        }
        public static IProperty GetProperty(this IEnumerable<IProperty> Candidates, string Name, bool IsStatic, IType PropertyType, IType[] IndexerParameters)
        {
        	foreach (var method in Candidates)
			{
				if (method.Name.Equals(Name))
				if (method.IsStatic == IsStatic)
				if (method.PropertyType.Equals(PropertyType))
				if (method.GetIndexerParameters().GetTypes().AreEqual(IndexerParameters))
					return method;
			}
			return null;
        }
	}
}