using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;

namespace Flame
{
	public static class PropertyExtensions
	{
		/// <summary>
		/// Tells if the first property "shadows" the second, i.e. it has the
		/// same name, staticness and indexer parameter list, but its declaring type
		/// is more derived than the second method's derived type.
		/// </summary>
		public static const bool Shadows(this IProperty Top, IProperty Bottom)
		{
			bool isIndexer = Top.IsIndexer;
			return isIndexer == Bottom.IsIndexer &&
				   (isIndexer || Top.Name == Bottom.Name) &&
				   Top.IsStatic == Bottom.IsStatic &&
			       !Top.Equals(Bottom) &&
				   Top.DeclaringType.Is(Bottom.DeclaringType) &&
				   new ScopedTypeEqualityComparer().CompareAll(
				       Top.IndexerParameters.GetTypes(),
				       Bottom.IndexerParameters.GetTypes());
		}

		/// <summary>
		/// Tests if the given properties have the same signature.
		/// </summary>
		public static const bool HasSameSignature(this IProperty Left, IProperty Right)
		{
			var comparer = new ScopedTypeEqualityComparer();

			return Left.IsStatic == Right.IsStatic && Left.Name == Right.Name &&
				   comparer.Compare(Left.PropertyType, Right.PropertyType) &&
				   comparer.CompareAll(Left.IndexerParameters.GetTypes(),
				   					   Right.IndexerParameters.GetTypes());
		}

        #region Accessors

        /// <summary>
        /// Gets the property's accessor of the provided accessor type.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetAccessor(this IProperty Property, AccessorType Type)
        {
        	foreach (var item in Property.Accessors)
        	{
        		if (item.AccessorType.Equals(Type))
        		{
        			return item;
        		}
        	}
        	return null;
        }
        /// <summary>
        /// Gets the property's get accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetGetAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.GetAccessor);
        }
        /// <summary>
        /// Gets the property's set accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetSetAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.SetAccessor);
        }
        /// <summary>
        /// Gets the property's add accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetAddAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.AddAccessor);
        }
        /// <summary>
        /// Gets the property's remove accessor.
        /// </summary>
        /// <param name="Property"></param>
        /// <returns></returns>
        public static IAccessor GetRemoveAccessor(this IProperty Property)
        {
            return Property.GetAccessor(AccessorType.RemoveAccessor);
        }

        public static const bool IsGetAccessor[this IAccessor Accessor]
        {
        	const get return Accessor.AccessorType == AccessorType.GetAccessor;
        }
        public static const bool IsSetAccessor[this IAccessor Accessor]
        {
        	const get return Accessor.AccessorType == AccessorType.SetAccessor;
        }

        #endregion

        #region Indexers

		private static bool isIndexerImpl(IProperty Property)
		{
			return Property.HasAttribute(PrimitiveAttributes.IndexerAttribute.AttributeType);
		}

        public static bool IsIndexer[this IProperty Property]
        {
        	const get return isIndexerImpl(Property);
        }

        public static [IProperty] GetIndexers(this IType Type)
        {
			return Enumerable.Where<IProperty>(Type.Properties, isIndexerImpl);
        }

        public static [IProperty] GetAllIndexers(this IType Type)
        {
			return Enumerable.Where<IProperty>(Type.GetAllProperties(), isIndexerImpl);
        }

        public static [IProperty] GetIndexers(this IType Type, bool IsStatic, [IType] IndexerArguments)
        {
        	return MemberSelection.FilterByStatic<IProperty>(Type.GetIndexers(), IsStatic).FilterByIndexerParameters(IndexerArguments);
        }
        public static IProperty GetIndexer(this IType Type, bool IsStatic, [IType] IndexerArguments)
        {
        	return Enumerable.SingleOrDefault<IProperty>(Type.GetIndexers(IsStatic, IndexerArguments));
        }

        public static [IProperty] GetBestIndexers(this IType Type, bool IsStatic, [IType] IndexerArguments)
        {
        	IType callerType;
        	if (IsStatic)
        	{
        		callerType = null;
        	}
        	else
        	{
        		callerType = Type;
        	}
        	return Type.GetIndexers().GetBestProperties(callerType, IndexerArguments);
        }
        public static IProperty GetBestIndexer(this IType Type, bool IsStatic, [IType] IndexerArguments)
        {
        	return Enumerable.SingleOrDefault<IProperty>(Type.GetBestIndexers(IsStatic, IndexerArguments));
        }

        #endregion

        #region Filtering

        public static [IProperty] FilterByIndexerParameters(this [IProperty] Candidates, [IType] IndexerArguments)
        {
        	var indexArgs = Enumerable.ToArray<IType>(IndexerArguments);
        	var props = new List<IProperty>();
        	foreach (var item in Candidates)
        	{
        		var indexParams = item.IndexerParameters.GetTypes();
        		if (indexParams.AreEqual(indexArgs))
        		{
        			props.Add(item);
        		}
        	}
        	return props;
        }

        #endregion

        public static IProperty GetProperty(this [IProperty] Candidates, string Name, bool IsStatic)
        {
        	foreach (var method in Candidates)
			{
				if (method.Name.Equals(Name))
				if (method.IsStatic == IsStatic)
					return method;
			}
			return null;
        }
        public static IProperty GetProperty(this [IProperty] Candidates, bool IsStatic, IType PropertyType, IType[] IndexerParameters)
        {
        	foreach (var method in Candidates)
			{
				if (method.IsStatic == IsStatic)
				if (method.PropertyType.Equals(PropertyType))
				if (method.IndexerParameters.GetTypes().AreEqual(IndexerParameters))
					return method;
			}
			return null;
        }
        public static IProperty GetProperty(this [IProperty] Candidates, string Name, bool IsStatic, IType PropertyType, IType[] IndexerParameters)
        {
        	foreach (var method in Candidates)
			{
				if (method.Name.Equals(Name))
				if (method.IsStatic == IsStatic)
				if (method.PropertyType.Equals(PropertyType))
				if (method.IndexerParameters.GetTypes().AreEqual(IndexerParameters))
					return method;
			}
			return null;
        }

		/// <summary>
		/// Gets a read-only array containing the given property's indexer parameter list.
		/// </summary>
		public static IParameter[] GetIndexerParameters(this IProperty Property)
		{
			return Enumerable.ToArray<IParameter>(Property.IndexerParameters);
		}
	}
}
