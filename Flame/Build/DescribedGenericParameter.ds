using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Attributes;

namespace Flame.Build
{
    public class DescribedGenericParameter : DescribedMember, IGenericParameterBuilder
    {
        public const this(string Name, set IGenericMember DeclaringMember)
            : base(Name)
        {
            this.constraints = new List<IGenericConstraint>();
            ClearCache();
        }
        public const this(string Name, set IGenericMember DeclaringMember, [IGenericConstraint] Constraints)
            : base(Name)
        {
        	this.constraints = new List<IGenericConstraint>(Constraints);
            ClearCache();
        }

        public IGenericMember DeclaringMember { const get; set; }

		private List<IGenericConstraint> constraints;

		private Lazy<IType[]> cachedTypeConstraints;
		private Lazy<[IMethod]> cachedMethods;
		private Lazy<[IField]> cachedFields;
		private Lazy<[IProperty]> cachedProperties;

		private void ClearCache()
		{
            this.cachedTypeConstraints = new Lazy<IType[]>(createTypeConstraints);
			this.cachedMethods = new Lazy<[IMethod]>(createMethods);
			this.cachedFields = new Lazy<[IField]>(createFields);
			this.cachedProperties = new Lazy<[IProperty]>(createProperties);
		}

        public IGenericConstraint Constraint
        {
	        const get { return new AndConstraint(constraints); }
		}

		public void AddConstraint(IGenericConstraint Constraint)
		{
			ClearCache();
			if (Constraint.HasConstraint<ValueTypeConstraint>())
			{
				if (!this.IsValueType)
				{
					AddAttributeCore(PrimitiveAttributes.ValueTypeAttribute);
				}
			}
			else if (Constraint.HasConstraint<ReferenceTypeConstraint>())
			{
				if (!this.IsReferenceType)
				{
					AddAttributeCore(PrimitiveAttributes.ReferenceTypeAttribute);
				}
			}
			else if (Constraint.HasConstraint<EnumConstraint>())
			{
				if (!this.IsEnum)
				{
					AddAttributeCore(PrimitiveAttributes.EnumAttribute);
				}
			}
			constraints.Add(Constraint);
		}

        private void AddAttributeCore(IAttribute Attribute)
		{
			this.attributeList.Add(Attribute);
		}

        public override void AddAttribute(IAttribute Attribute)
        {
        	if (Attribute.AttributeType.Equals(PrimitiveAttributes.ValueTypeAttribute.AttributeType))
        	{
        		AddConstraint(new ValueTypeConstraint());
        	}
        	else if (Attribute.AttributeType.Equals(PrimitiveAttributes.ReferenceTypeAttribute.AttributeType))
        	{
        		AddConstraint(new ReferenceTypeConstraint());
        	}
        	else if (Attribute.AttributeType.Equals(PrimitiveAttributes.EnumAttribute.AttributeType))
        	{
        		AddConstraint(new EnumConstraint());
        	}
        	else
        	{
        		AddAttributeCore(Attribute);
        	}
        }

        public override string FullName
        {
        	const get
        	{
        		return MemberExtensions.CombineNames(DeclaringMember.FullName, Name);
        	}
        }

        public [IType] TypeConstraints
        {
        	const get { return cachedTypeConstraints.Value; }
        }

        public INamespace DeclaringNamespace
        {
            const get { return null; }
        }

        public [IMethod] Methods
        {
            get { return cachedMethods.Value; }
        }

        public [IProperty] Properties
        {
            get { return cachedProperties.Value; }
        }

        public [IField] Fields
        {
            get { return cachedFields.Value; }
        }

        public [IType] BaseTypes
        {
            get { return TypeConstraints; }
        }

        public [IGenericParameter] GenericParameters
        {
            const get { return new IGenericParameter[0]; }
        }

        public IAncestryRules AncestryRules
        {
            const get { return DefinitionAncestryRules; }
        }

        private [IMethod] createMethods()
        {
            var results = new HashSet<IMethod>();
            foreach (var item in TypeConstraints)
            {
                results.UnionWith(item.Methods);
            }
            return results;
        }

        private [IProperty] createProperties()
        {
            var results = new HashSet<IProperty>();
            foreach (var item in TypeConstraints)
            {
                results.UnionWith(item.Properties);
            }
            return results;
        }

        private [IField] createFields()
        {
            var results = new HashSet<IField>();
            foreach (var item in TypeConstraints)
            {
                results.UnionWith(item.Fields);
            }
            return results;
        }

        private IType[] createTypeConstraints()
        {
            return Enumerable.ToArray<IType>(constraints.ExtractBaseTypes());
        }

        public const IBoundObject GetDefaultValue()
        {
        	return null;
        }

        public override const string ToString()
        {
        	return FullName;
        }
    }
}
