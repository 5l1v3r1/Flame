using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Build
{
    public class VectorType : ContainerTypeBase, IVectorType
    {
        public const this(IType ElementType, set IReadOnlyList<int> Dimensions)
            : base(ElementType);

        public IReadOnlyList<int> Dimensions { const get; private set; }

        protected override const string GetName(string ElementName)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(ElementName);
            sb.Append('[');
            for (int i = 0; i < dims.Length; i++)
            {
                if (i > 0)
                {
                    sb.Append(", ");
                }
                sb.Append(dims[i].ToString());
            }
            sb.Append(']');
            return sb.ToString();
        }

        public override ContainerTypeKind ContainerKind
        {
            const get { return ContainerTypeKind.Vector; }
        }

        public virtual IType[] GetBaseTypes()
        {
            return new IType[] { PrimitiveTypes.IHashable };
        }

        public override bool Equals(object obj)
        {
            if (obj is IVectorType)
            {
                var vectType = (IVectorType)obj;
                return ElementType == vectType.ElementType &&
                       Enumerable.SequenceEqual<int>(Dimensions, vectType.Dimensions);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
        	int result = ElementType.GetHashCode();
        	foreach (var item in Dimensions)
        	{
        		result += item.GetHashCode();
        	}
            return result;
        }
    }
}
