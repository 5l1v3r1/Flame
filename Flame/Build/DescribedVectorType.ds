using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Build
{
    public class DescribedVectorType : DescribedContainerType, IVectorType
    {
        public this(set IType ElementType, int[] Dimensions)
        {
            this.dims = Dimensions;
        }

        protected override const string GetName(string ElementName)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(ElementName);
            sb.Append('[');
            for (int i = 0; i < dims.Length; i++)
            {
                if (i > 0)
                {
                    sb.Append(", ");
                }
                sb.Append(dims[i].ToString());
            }
            sb.Append(']');
            return sb.ToString();  
        }

        public override ContainerTypeKind ContainerKind
        {
            const get { return ContainerTypeKind.Vector; }
        }
        
        public virtual IType[] GetBaseTypes()
        {
            return new IType[] { PrimitiveTypes.IHashable };
        }

        private int[] dims;

        public const int[] GetDimensions()
        {
            return dims;
        }
        
        public override bool Equals(object obj)
        {
            if (obj is IVectorType)
            {
                var arrType = (IVectorType)obj;
                if (arrType.IsVector)
                {
                	var elemType = arrType.GetElementType();
                    if (!ElementType.Equals(elemType))
                    	return false;
                    int[] dimensions = arrType.GetDimensions();
                    if (dims.Length != dimensions.Length)
                    	return false;
                    for (int i = 0; i < dimensions.Length; ++i)
                    {
                    	if (dimensions[i] != dims[i])
                    		return false;
                    }
                    return true;
                }
            }
            return false;
        }

        public override int GetHashCode()
        {
        	int result = ElementType.GetHashCode();
        	foreach (var item in dims)
        	{
        		result += item.GetHashCode();
        	}
            return result;
        }
    }
}