using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Build
{
	/// <summary>
	/// A type converter that maps specific types to specific other types.
	/// </summary>
	public class TypeMappingConverter : GenericTypeTransformerBase
	{
		public const this(set IReadOnlyDictionary<IType, IType> Mapping);

		public IReadOnlyDictionary<IType, IType> Mapping { const get; private set; }

		protected override IType ConvertTypeDefault(IType Type)
		{
			if (Mapping.ContainsKey(Type))
			{
				return Mapping[Type];
			}
			else
			{
				return Type;
			}
		}
	}

	/// <summary>
	/// A type converter that replaces type parameters by a generic member's
	/// (recursive) type parameters.
	/// </summary>
	public class TypeParameterConverter : GenericTypeTransformerBase
	{
		public this(set IGenericMember DeclaringMember)
		{
			genericParamMap = new Dictionary<UnqualifiedName, IGenericParameter>();
			PopulateDictionary(DeclaringMember);
		}

		public IGenericMember DeclaringMember { const get; private set; }

		private Dictionary<UnqualifiedName, IGenericParameter> genericParamMap;

		private void PopulateDictionary(IGenericMember Member)
		{
			if (Member == null)
				return;

			if (Member is IType)
			{
				var ty = (IType)Member;
				var ns = ty.DeclaringNamespace;
				if (ns is IType)
					PopulateDictionary((IType)ns);
			}
			else if (Member is IMethod)
			{
				var method = (IMethod)Member;
				PopulateDictionary(method.DeclaringType);
			}
			PopulateDictionary(Member.GenericParameters);
		}

		private void PopulateDictionary([IGenericParameter] TypeParameters)
		{
			foreach (var ty in TypeParameters)
				genericParamMap[ty.Name] = ty;
		}

		protected override IType ConvertGenericParameter(IGenericParameter Type)
		{
			if (genericParamMap.TryGetValue(Type.Name, &IGenericParameter result))
				return result;
			else
				return Type;
		}
	}
}
