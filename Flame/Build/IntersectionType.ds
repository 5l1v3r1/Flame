using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;

namespace Flame
{
    public class IntersectionType : IType
    {
        public const this(set IType First, set IType Second);

        public IType First { const get; private set; }
        public IType Second { const get; private set; }

        private static void AddIntersectionToSet(IType Type, ISet<IType> Results)
        {
            if (Type is IntersectionType)
        	{
                var interType = (IntersectionType)Type;
                AddIntersectionToSet(interType.First, Results);
                AddIntersectionToSet(interType.Second, Results);
        	}
        	else
        	{
        		Results.Add(Type);
        	}
        }

        public static const HashSet<IType> GetIntersectedTypeSet(IType Type, IEqualityComparer<IType> Comparer)
        {
            var results = new HashSet<IType>(Comparer);
            AddIntersectionToSet(Type, results);
            return results;
        }

        public static const HashSet<IType> GetIntersectedTypeSet(IType Type)
        {
            var results = new HashSet<IType>();
            AddIntersectionToSet(Type, results);
            return results;
        }

        public static const [IType] GetIntersectedTypes(IType Type)
        {
        	if (Type is IntersectionType)
        	{
                return GetIntersectedTypeSet(Type);
        	}
        	else
        	{
        		return new IType[] { Type };
        	}
        }

        public QualifiedName FullName
        {
            get
            {
                return new QualifiedName(
                    new IntersectionName(First.FullName, Second.FullName));
            }
        }

        public AttributeMap Attributes
        {
            const get { return AttributeMap.Empty; }
        }

        public UnqualifiedName Name
        {
            get
            {
                return new IntersectionName(
                    new QualifiedName(First.Name), 
                    new QualifiedName(Second.Name));
            }
        }

        public [IGenericParameter] GenericParameters
        {
            get { return Enumerable.Empty<IGenericParameter>(); }
        }

        #region IType Implementation

        public INamespace DeclaringNamespace
        {
            const get { return null; }
        }

        public [IType] BaseTypes
        {
            const get { return new IType[0]; }
        }

        public IBoundObject GetDefaultValue()
        {
            return null;
        }

        public [IField] Fields
        {
            const get { return new IField[0]; }
        }

        public [IMethod] Methods
        {
            const get { return new IMethod[0]; }
        }

        public [IProperty] Properties
        {
            const get { return new IProperty[0]; }
        }

        public IAncestryRules AncestryRules
        {
            const get { return IntersectionAncestryRules; }
         }

        #endregion

        public override const bool Equals(object obj)
        {
            if (obj is IntersectionType)
            {
                var firstInter = GetIntersectedTypeSet(this);
                var otherInter = GetIntersectedTypeSet((IType)obj);

                return firstInter.SetEquals(otherInter);
            }
            else
            {
                return false;
            }
        }
        public override const int GetHashCode()
        {
            return First.GetHashCode() ^ Second.GetHashCode();
        }
        public override const string ToString()
        {
            return First.ToString() + "&" + Second.ToString();
        }
    }

    /// <summary>
    /// Defines ancestry rules for intersection types.
    /// </summary>
    public static class IntersectionAncestryRules : IAncestryRules
    {
        public int GetAncestryDegree(IType First, IType Second)
        {
            var leftInter = IntersectionType.GetIntersectedTypes(First);
            var rightInter = IntersectionType.GetIntersectedTypes(Second);

            int result = 0;
            // First, iterate over all items in the right-hand set, and find out
            // if they can all be matched to a (sub)type in the left-hand set.
            // This ensures that `int&double` is `double`, but
            //                   `int&double` is not `string`.
            foreach (var item in rightInter)
            {
                int bestAncestry = leftInter.GetLowestAncestryDegree(item);
                if (bestAncestry < 0)
                    return -1;
                result += bestAncestry;
            }
            // Now, iterate over all items in the left-hand set. All types
            // in this set that do not have a subtype in the right-hand set
            // make the subtype hierarchy between the intersection types longer
            // by one item.
            // This ensures that  `int&double` is not equivalent to `int`,
            // and therefore that `int` is not equivalent to `int&double`.
            foreach (var item in leftInter)
            {
                if (rightInter.GetLowestAncestryDegree(item) < 0)
                    result++;
            }
            return result;
        }
    }
}
