using System;

namespace Flame.Build
{
    /// <summary>
    /// Ancestry rules for type definitions.
    /// </summary>
    public static class DefinitionAncestryRules : IAncestryRules
    {
        public int GetAncestryDegree(IType First, IType Second)
        {
            if (First == Second || (First.IsEquivalent(PrimitiveTypes.Null) && Second.IsReferenceType))
            {
                return 0; // They are equivalent. Return zero to signal this.
            }
            else
            {
                // Try to find the shortest ancestry path from the left-hand operand
                // to the right-hand operand.
                int lowest = First.BaseTypes.GetLowestAncestryDegree(Second);
                if (lowest >= 0)
                {
                    return lowest + 1;
                }
                else if (Second.IsRootType)
                {
                    // All types that do not have a root type in their
                    // inheritance hierarchy are implicitly direct subtypes of
                    // said root type.
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
        }
    }
}
