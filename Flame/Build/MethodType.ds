using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;

namespace Flame
{
    /// <summary>
    /// A type for delegate values obtained from methods.
    /// </summary>
    public class MethodType : IType
    {
        protected this(set IMethod Method);

        /// <summary>
        /// Gets the method this method type is based on.
        /// </summary>
        public IMethod Method { const get; private set; }

        /// <summary>
        /// Creates a delegate type from the given method.
        /// </summary>
        public static IType Create(IMethod Method)
        {
            if (Method is IType)
            {
                return (IType)Method;
            }
            else
            {
                return new MethodType(Method);
            }
        }

        /// <summary>
        /// Gets the given (delegate) type's method signature. If the type
        /// is not a delegate type, then null is returned.
        /// </summary>
        public static IMethod GetMethod(IType Type)
        {
            if (Type is MethodType)
            {
                return ((MethodType)Type).Method;
            }
            else if (Type is IMethod)
            {
                return (IMethod)Type;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a sequence of methods defined by the given type or intersection
        /// of types.
        /// </summary>
        public static IReadOnlyList<IMethod> GetIntersectedMethods(IType Type)
        {
            var results = new List<IMethod>();
            foreach (var item in IntersectionType.GetIntersectedTypes(Type))
            {
                var method = GetMethod(item);
                if (method != null)
                    results.Add(method);
            }
            return results;
        }

        public QualifiedName FullName
        {
            get { return Method.FullName; }
        }

        public AttributeMap Attributes
        {
            get { return Method.Attributes; }
        }

        public UnqualifiedName Name
        {
            get { return Method.Name; }
        }

        /// <summary>
        /// Gets a string that describes this method type's signature.
        /// </summary>
        public string SignatureName
        {
            get
            {
                var namer = new TypeNamerBase();
                return namer.Convert(this);
            }
        }

        public [IGenericParameter] GenericParameters
        {
            get { return Method.GenericParameters; }
        }

        public IType DeclaringType
        {
            const get { return Method.DeclaringType; }
        }

        public INamespace DeclaringNamespace
        {
            const get
            {
                if (DeclaringType == null)
                    return null;
                else if (DeclaringType is INamespace)
                    return (INamespace)DeclaringType;
                else
                    return DeclaringType.DeclaringNamespace;
            }
        }

        public [IType] BaseTypes
        {
            get { return new IType[0]; }
        }

        public IBoundObject GetDefaultValue()
        {
            return null;
        }

        public [IField] Fields
        {
            get { return new IField[0]; }
        }

        public [IMethod] Methods
        {
            get { return new IMethod[0]; }
        }

        public [IProperty] Properties
        {
            get { return new IProperty[0]; }
        }

        public IAncestryRules AncestryRules
        {
            const get { return MethodTypeAncestryRules; }
        }

        #endregion

        public override const bool Equals(object obj)
        {
            if (obj is MethodType)
            {
                return Method == ((MethodType)obj).Method;
            }
            else
            {
                return false;
            }
        }
        public override const int GetHashCode()
        {
            return Method.GetHashCode();
        }
        public override const string ToString()
        {
            if (Method.IsAnonymous)
                return this.SignatureName;
            else
                return Method.FullName.ToString();
        }
    }

    /// <summary>
    /// Ancestry rules for delegates.
    /// </summary>
    public static class MethodTypeAncestryRules : IAncestryRules
    {
        public int GetAncestryDegree(IMethod firstMethod, IMethod secondMethod)
        {
            if (firstMethod == null || secondMethod == null)
            {
                return -1;
            }

            int totalAncestry = firstMethod.ReturnType.GetAncestryDegree(secondMethod.ReturnType);
            if (totalAncestry < 0)
                return -1;

            var firstParams = firstMethod.GetParameters();
            var secondParams = secondMethod.GetParameters();

            if (firstParams.Length != secondParams.Length)
                return -1;

            foreach (var first in firstParams, var second in secondParams)
            {
                int argAncestry = second.ParameterType.GetAncestryDegree(first.ParameterType);

                if (argAncestry < 0)
                    return -1;
                else
                    totalAncestry += argAncestry;
            }

            return totalAncestry;
        }

        public int GetAncestryDegree(IType First, IType Second)
        {
            return GetAncestryDegree(MethodType.GetMethod(First), MethodType.GetMethod(Second));
        }
    }
}
