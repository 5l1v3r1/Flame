using System;

namespace Flame.Build
{
    /// <summary>
    /// A base class for classes that recursively transform types: they can
    /// target and rewrite specific types, even when they occur as parts of
    /// other types. This type of transformer does not distinguish types based
    /// on attributes: it cannot tell interfaces, classes, structs and enums
    /// apart.
    /// </summary>
    /// <remarks>
    /// GenericTypeTransformer explicitly promises not to access type
    /// attributes on user-defined types. This makes it a safe choice for
    /// scenarios where touching attributes is not allowed, e.g., during type
    /// construction in the back-end.
    /// </remarks>
    public virtual class GenericTypeTransformerBase : TypeTransformerBase
    {
        protected virtual override IType ConvertUserType(IType Type)
        {
            if (Type.IsGenericParameter)
            {
                return ConvertGenericParameter((IGenericParameter)Type);
            }
            // NOTE: we're not checking if `Type` is a `struct`, an `enum`,
            // or an `interface`, because that'd touch its attribute map,
            // which we absolutely cannot touch here.
            else
            {
                return ConvertTypeDefault(Type);
            }
        }
    }
}
