using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Flame.Build
{
	public virtual class TypeEqualityComparer : TypeComparerBase<bool>, IEqualityComparer<IType>
	{
		public const this();

		protected virtual override const bool CompareDefault(IType First, IType Second)
		{
			return First.IsEquivalent(Second);
		}

		protected const bool All([bool] Values)
		{
			foreach (var item in Values)
				if (!item)
			{
				return false;
			}
			return true;
		}

		protected virtual override const bool MakeDelegateComparison(bool ReturnTypeComparison, [bool] ParameterTypesComparison)
		{
			return ReturnTypeComparison && All(ParameterTypesComparison);
		}

		protected virtual override const bool CompareIncompatible(IType First, IType Second)
		{
			return false; // Return false so we don't have to compare every single pair of types
		}

		protected virtual override const bool MakeGenericInstanceComparison(bool DeclarationComparison, [bool] TypeArgumentComparisons)
		{
			return DeclarationComparison && All(TypeArgumentComparisons);
		}

		protected virtual override const bool MakePointerComparison(bool ElementComparison, PointerKind FirstKind, PointerKind SecondKind)
		{
			return ElementComparison && FirstKind == SecondKind;
		}

		protected virtual override const bool MakeArrayComparison(bool ElementComparison, int FirstRank, int SecondRank)
		{
			return ElementComparison && FirstRank == SecondRank;
		}

		protected virtual override const bool MakeVectorComparison(bool ElementComparison, IReadOnlyList<int> FirstDimensions, IReadOnlyList<int> SecondDimensions)
		{
			return ElementComparison &&
				   Enumerable.SequenceEqual<int>(FirstDimensions, SecondDimensions);
		}

		protected bool IsSubset([IType] Left, [IType] Right)
		{
			// Try to find an equivalent item in the right-hand set for every item
			// in the left-hand set.
			foreach (var src in Left)
			{
				bool found = false;
				foreach (var tgt in Right)
				{
					if (Compare(src, tgt))
					{
						found = true;
						break;
					}
				}
				if (!found)
					return false;
			}
			return true;
		}

		protected virtual override const bool CompareIntersectionTypes(IntersectionType First, IntersectionType Second)
		{
            var firstInter = IntersectionType.GetIntersectedTypeSet(First, this);
            var otherInter = IntersectionType.GetIntersectedTypeSet(Second, this);

			// Make sure these sets are equal.
			return IsSubset(firstInter, otherInter) && IsSubset(otherInter, firstInter);
		}

		public const bool CompareAll(IType[] First, IType[] Second)
		{
			if (First.Length != Second.Length)
				return false;

			foreach (var left in First, var right in Second)
				if (!Compare(left, right))
			{
				return false;
			}
			return true;
		}

		public const bool CompareAll([IType] First, [IType] Second)
		{
			return CompareAll(Enumerable.ToArray<IType>(First),
							  Enumerable.ToArray<IType>(Second));
		}

		public const bool Equals(IType First, IType Second)
		{
			return Compare(First, Second);
		}

		public const int GetHashCode(IType Value)
		{
			return Value.GetHashCode();
		}
	}

	/// <summary>
	/// A type equality comparer that assumes that type parameters with equal names are equal.
	/// </summary>
	public static class ScopedTypeEqualityComparer : TypeEqualityComparer
	{
		protected virtual override const bool CompareGenericParameters(IGenericParameter Left, IGenericParameter Right)
		{
			return Left.Name.Equals(Right.Name);
		}
	}
}
