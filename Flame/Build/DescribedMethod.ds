using System;
using System.Collections.Generic;

namespace Flame.Build
{
	public virtual class DescribedMethod : DescribedTypeMember, IMethod
	{
		public const this(UnqualifiedName Name, IType DeclaringType)
			: base(Name, DeclaringType)
		{
			this.parameters = new List<IParameter>();
			this.baseMethods = new List<IMethod>();
			this.genericParams = new List<IGenericParameter>();
		}
		public const this(string Name, IType DeclaringType)
			: base(new SimpleName(Name), DeclaringType)
		{
			this.parameters = new List<IParameter>();
			this.baseMethods = new List<IMethod>();
			this.genericParams = new List<IGenericParameter>();
		}
		public const this(UnqualifiedName Name, IType DeclaringType, set IType ReturnType, set bool IsStatic)
			: base(Name, DeclaringType)
		{
			this.parameters = new List<IParameter>();
			this.baseMethods = new List<IMethod>();
			this.genericParams = new List<IGenericParameter>();
		}
		public const this(string Name, IType DeclaringType, set IType ReturnType, set bool IsStatic)
			: base(new SimpleName(Name), DeclaringType)
		{
			this.parameters = new List<IParameter>();
			this.baseMethods = new List<IMethod>();
			this.genericParams = new List<IGenericParameter>();
		}

		public IType ReturnType { const get; set; }
		public bool IsConstructor { const get; set; }

		private List<IParameter> parameters;
		public virtual void AddParameter(IParameter Parameter)
		{
			parameters.Add(Parameter);
		}
		public [IParameter] Parameters
		{
			const get { return parameters; }
		}

		private List<IMethod> baseMethods;
		public virtual void AddBaseMethod(IMethod Method)
		{
			baseMethods.Add(Method);
		}
		public [IMethod] BaseMethods
		{
			const get { return baseMethods.ToArray(); }
		}

		private List<IGenericParameter> genericParams;
		public virtual void AddGenericParameter(IGenericParameter Parameter)
		{
			genericParams.Add(Parameter);
		}

		/// <summary>
        /// Gets this method's generic parameters.
        /// </summary>
        /// <returns></returns>
        public [IGenericParameter] GenericParameters
        {
        	get { return genericParams; }
        }
	}
}
