using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Build
{
	public class DescribedType : DescribedMember, IType
	{
		public const this(string Name, set INamespace DeclaringNamespace)
			: base(Name)
		{
			this.baseTypes = new List<IType>();
			this.methods = new List<IMethod>();
			this.fields = new List<IField>();
			this.properties = new List<IProperty>();
			this.typeParams = new List<IGenericParameter>();
		}

		public INamespace DeclaringNamespace { const get; private set; }

		private List<IType> baseTypes;
		private List<IMethod> methods;
		private List<IField> fields;
		private List<IProperty> properties;
		private List<IGenericParameter> typeParams;

		public const IType[] GetBaseTypes()
        {
            return baseTypes.ToArray();
        }

        public void AddBaseType(IType BaseType)
        {
        	this.baseTypes.Add(BaseType);
        }

		public void AddGenericParameter(IGenericParameter Value)
		{
			this.typeParams.Add(Value);
		}

        public [IMethod] Methods
        {
            const get { return methods; }
        }

        public void AddMethod(IMethod Method)
        {
    		this.methods.Add(Method);
        }

        public [IProperty] Properties
        {
            const get { return properties; }
        }

        public void AddProperty(IProperty Property)
        {
        	this.properties.Add(Property);
        }

        public [IField] Fields
        {
            const get { return fields; }
        }

        public void AddField(IField Field)
        {
        	this.fields.Add(Field);
        }

		public IAncestryRules AncestryRules
		{
			const get { return DefinitionAncestryRules; }
		}

        public string FullName
        {
            get
            {
                return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name);
            }
        }

        public IBoundObject GetDefaultValue()
        {
            return null;
        }

        public [IGenericParameter] GenericParameters
        {
            const get { return typeParams; }
        }

        public override string ToString()
        {
            return FullName;
        }
	}
}
