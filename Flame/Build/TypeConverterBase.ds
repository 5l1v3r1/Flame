using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Build
{
	public abstract class TypeConverterBase<TTarget> : IConverter<IType, TTarget>
	{
		public const this();
		
		protected abstract const TTarget MakePointerType(TTarget ElementType, PointerKind Kind);
		protected abstract const TTarget MakeArrayType(TTarget ElementType, int ArrayRank);
		protected abstract const TTarget MakeVectorType(TTarget ElementType, int[] Dimensions);
		protected abstract const TTarget MakeGenericType(TTarget GenericDeclaration, [TTarget] TypeArguments);
		protected abstract const TTarget ConvertTypeDefault(IType Type);
		
		protected virtual const TTarget ConvertPointerType(IPointerType Type)
		{
			return MakePointerType(Convert(Type.GetElementType()), Type.PointerKind);
		}
		
		protected virtual const TTarget ConvertArrayType(IArrayType Type)
		{
			return MakeArrayType(Convert(Type.GetElementType()), Type.ArrayRank);
		}
		
		protected virtual const TTarget ConvertVectorType(IVectorType Type)
		{
			return MakeVectorType(Convert(Type.GetElementType()), Type.GetDimensions());
		}
		
		protected virtual const TTarget ConvertGenericParameter(IGenericParameter Type)
		{
			return ConvertTypeDefault(Type);
		}
		
		protected virtual const TTarget ConvertGenericInstance(IType Type)
		{
			return MakeGenericType(Convert(Type.GetGenericDeclaration()), Convert(Type.GetGenericArguments()));
		}
		
		protected virtual const TTarget ConvertTypeDeclaration(IType Type)
		{
			if (Type.IsPrimitive)
			{
				return ConvertPrimitiveType(Type);
			}
			else if (Type.IsGenericParameter)
			{
				return ConvertGenericParameter((IGenericParameter)Type);
			}
			else if (Type.DeclaringNamespace is IType)
			{
				return ConvertNestedType(Type, (IType)Type.DeclaringNamespace);
			}
			else
			{
				return ConvertUserType(Type);
			}
		}
		
		protected virtual const TTarget ConvertNestedType(IType Type, IType DeclaringType)
		{
			return ConvertUserType(Type);
		}
		
		private const TTarget ConvertUserType(IType Type)
		{
			if (Type.IsGenericParameter)
			{
				return ConvertGenericParameter((IGenericParameter)Type);
			}
			else if (Type.IsEnum)
			{
				return ConvertEnumType(Type);
			}
			else if (Type.IsInterface)
			{
				return ConvertInterfaceType(Type);
			}
			else if (Type.IsValueType)
			{
				return ConvertValueType(Type);
			}
			else
			{
				return ConvertReferenceType(Type);
			}
		}
		
		protected virtual const TTarget ConvertReferenceType(IType Type)
		{
			return ConvertTypeDefault(Type);
		}
		
		protected virtual const TTarget ConvertValueType(IType Type)
		{
			return ConvertTypeDefault(Type);
		}
		
		protected virtual const TTarget ConvertEnumType(IType Type)
		{
			return ConvertValueType(Type);
		}
		
		protected virtual const TTarget ConvertInterfaceType(IType Type)
		{
			return ConvertReferenceType(Type);
		}
		
		protected virtual const TTarget ConvertPrimitiveType(IType Type)
		{
			if (Type.IsValueType)
			{
				return ConvertValueType(Type);	
			}
			else
			{
				return ConvertReferenceType(Type);
			}
		}
		
		public const virtual [TTarget] Convert([IType] Values)
		{
			List<TTarget> types = new List<TTarget>();
			foreach (var item in Values)
			{
				types.Add(Convert(item));
			}
			return types;
		}
		
		public const virtual TTarget Convert(IType Value)
		{
			if (Value.IsPointer)
			{
				return ConvertPointerType((IPointerType)Value);
			}
			else if (Value.IsArray)
			{
				return ConvertArrayType((IArrayType)Value);
			}
			else if (Value.IsVector)
			{
				return ConvertVectorType((IVectorType)Value);
			}
			else if (Value.IsGenericInstance)
			{
				return ConvertGenericInstance(Value);
			}
			else
			{
				return ConvertTypeDeclaration(Value);
			}
		}
	}
}