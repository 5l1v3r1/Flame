using System;
using System.Collections.Generic;
using System.Text;
using Flame.Binding;

namespace Flame.Build
{
    /// <summary>
    /// A type of assembly that is created piecewise, by adding types and
    /// namespaces to the assembly in an imperative fashion.
    /// </summary>
    public class DescribedAssembly : DescribedMember, IAssembly, INamespaceBranch
    {
        public this(UnqualifiedName Name)
            : base(Name)
        {
            this.types = new List<IType>();
            this.nsBranches = new List<INamespaceBranch>();
            this.Environment = EmptyEnvironment;
        }
        public this(UnqualifiedName Name, set IEnvironment Environment)
            : base(Name)
        {
            this.types = new List<IType>();
            this.nsBranches = new List<INamespaceBranch>();
        }
        public this(
            UnqualifiedName Name, set Version AssemblyVersion,
            set IEnvironment Environment)
            : base(Name)
        {
            this.types = new List<IType>();
            this.nsBranches = new List<INamespaceBranch>();
        }

        public override QualifiedName FullName
        {
            get { return new QualifiedName(Name); }
        }

        /// <summary>
        /// Gets or sets this assembly's version number.
        /// </summary>
        public Version AssemblyVersion { get; set; }

        /// <summary>
        /// Gets this assembly's environment.
        /// </summary>
        public IEnvironment Environment { get; private set; }

        /// <summary>
        /// Gets or sets this assembly's entry point method.
        /// </summary>
        public IMethod EntryPoint { get; set; }

        private List<IType> types;
        private List<INamespaceBranch> nsBranches;

        public void AddType(IType Type)
        {
            types.Add(Type);
        }

        public void AddNamespace(INamespaceBranch Namespace)
        {
            nsBranches.Add(Namespace);
        }

        public [IType] Types
        {
            get { return types; }
        }

        public [INamespaceBranch] Namespaces
        {
            get { return nsBranches; }
        }

        public IBinder CreateBinder()
        {
            return new NamespaceTreeBinder(Environment, this);
        }

        public IMethod GetEntryPoint()
        {
            return EntryPoint;
        }

        public IAssembly DeclaringAssembly
        {
            get { return this; }
        }
    }
}
