using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Flame.Build
{
	public virtual class TypeTransformerBase : TypeConverterBase<IType>
	{
		public const this();

		protected override virtual const IType MakePointerType(IType ElementType, PointerKind Kind)
		{
			return ElementType.MakePointerType(Kind);
		}

		protected override virtual const IType MakeArrayType(IType ElementType, int ArrayRank)
		{
			return ElementType.MakeArrayType(ArrayRank);
		}

		protected override virtual const IType MakeVectorType(IType ElementType, int[] Dimensions)
		{
			return ElementType.MakeVectorType(Dimensions);
		}

		protected override virtual const IType MakeGenericType(IType GenericDeclaration, [IType] TypeArguments)
		{
			return GenericDeclaration.MakeGenericType(TypeArguments);
		}

		protected override virtual const IType ConvertDelegateType(IType Type)
		{
			var method = MethodType.GetMethod(Type);
			var retType = Convert(method.ReturnType);

			var parameters = method.GetParameters();
			var paramTypes = parameters.GetTypes();
			var convTypes = Convert(paramTypes);
			
			var descMethod = new DescribedMethod(method.Name, method.DeclaringType, retType, method.IsStatic);

			foreach (var type in convTypes, var item in parameters)
			{
				descMethod.AddParameter(new DescribedRetypedParameter(item, type));
			}
			foreach (var attr in method.GetAttributes())
			{
				descMethod.AddAttribute(attr);
			}

			return MethodType.Create(descMethod);
		}

		protected override virtual const IType ConvertIntersectionType(IntersectionType Type)
		{
			return new IntersectionType(Convert(Type.First), Convert(Type.Second));
		}

		protected override virtual const IType ConvertTypeDefault(IType Type)
		{
			return Type;
		}
	}
}
