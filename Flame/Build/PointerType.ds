using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;

namespace Flame
{
    /// <summary>
    /// Represents a pointer type: a value that points to an in-memory object.
    /// </summary>
    public class PointerType : ContainerTypeBase
    {
        public const this(
            IType ElementType, set PointerKind PointerKind)
            : base(ElementType)
        {
            this.ancRules = PointerKind.AncestryRules;
        }

        /// <summary>
        /// Gets this pointer's kind.
        /// </summary>
        public PointerKind PointerKind { const get; private set; }

        private IPointerAncestryRules ancRules;

        protected override UnqualifiedName GetName(QualifiedName ElementName)
        {
            return new PointerName(ElementName, PointerKind);
        }

        public override AttributeMap Attributes
        {
            get { return ancRules.GetPointerAttributes(ElementType); }
        }

        public override IAncestryRules AncestryRules
        {
            get { return ancRules; }
        }

        public override bool Equals(object obj)
        {
            if (obj is PointerType)
            {
                var ptrType = (PointerType)obj;
                if (ptrType.IsPointer && ptrType.PointerKind == PointerKind)
                {
                    return ElementType == ptrType.ElementType;
                }
            }
            return false;
        }

        public override int GetHashCode()
        {
            return ElementType.GetHashCode() + PointerKind.GetHashCode();
        }
    }

    /// <summary>
    /// A common interface for pointer ancestry rules.
    /// </summary>
    public interface IPointerAncestryRules : IAncestryRules
    {
        /// <summary>
        /// Gets the attributes that belong to a pointer with the given element
        /// type, that adheres to these ancestry rules.
        /// </summary>
        AttributeMap GetPointerAttributes(IType ElementType);
    }

    /// <summary>
    /// Represents the following set of ancestry rules for pointers:
    ///  * Two pointer types of the same pointer kind have the same ancestry degree
    ///    as their elements.
    /// </summary>
    public static class PointerAncestryRules : IPointerAncestryRules
    {
        /// <summary>
        /// Gets the attributes that belong to a pointer with the given element
        /// type, that adheres to these ancestry rules.
        /// </summary>
        public AttributeMap GetPointerAttributes(IType ElementType)
        {
            return AttributeMap.Empty;
        }

        public int GetAncestryDegree(IType First, IType Second)
        {
            if (First.IsPointer && Second.IsPointer)
            {
                var firstPtrTy = First.AsPointerType();
                var secondPtrTy = Second.AsPointerType();
                if (!firstPtrTy.PointerKind.Equals(secondPtrTy.PointerKind))
                    return -1;
                return firstPtrTy.ElementType.GetAncestryDegree(secondPtrTy.ElementType);
            }
            else
            {
                return -1;
            }
        }
    }

    /// <summary>
    /// Represents the following set of ancestry rules for boxed values:
    ///  * Two box types of have the same ancestry degree as their elements.
    ///  * A box type and a reference type have the same ancestry degree
    ///    as the element type and said reference type.
    /// </summary>
    public static class BoxAncestryRules : IPointerAncestryRules
    {
        static this()
        {
            var attrBuilder = new AttributeMapBuilder();
            attrBuilder.Add(PrimitiveAttributes.ReferenceTypeAttribute);
            attrs = new AttributeMap(attrBuilder);
        }

        private AttributeMap attrs;

        /// <summary>
        /// Gets the attributes that belong to a pointer with the given element
        /// type, that adheres to these ancestry rules.
        /// </summary>
        public AttributeMap GetPointerAttributes(IType ElementType)
        {
            return attrs;
        }

        public int GetAncestryDegree(IType First, IType Second)
        {
            if (First.IsPointer)
            {
                var lPtrTy = First.AsPointerType();
                var lElemType = lPtrTy.ElementType;
                if (lPtrTy.PointerKind.Equals(PointerKind.BoxPointer))
                {
                    if (Second.IsPointer)
                    {
                        var rPtrTy = Second.AsPointerType();
                        if (rPtrTy.PointerKind.Equals(PointerKind.BoxPointer))
                        {
                            // Two box types.
                            return lElemType.GetAncestryDegree(rPtrTy.ElementType);
                        }
                    }
                    else if (Second.IsReferenceType)
                    {
                        // Left type is a box, right type is a reference type.
                        return lElemType.GetAncestryDegree(Second);
                    }
                }
            }
            return -1;
        }
    }
}
