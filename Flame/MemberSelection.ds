using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame
{
	public static class MemberSelection
	{
		public static const T[] Concat<T>(T Value, T[] Array)
		{
			T[] arr = new T[Array.Length + 1];
			arr[0] = Value;
			for (int32 i = 0; i < Array.Length; i++)
			{
				arr[i + 1] = Array[i];
			}
			return arr;
		}
		public static const T[] Append<T>(T[] Array, T Value)
		{
			T[] arr = new T[Array.Length + 1];
			for (int32 i = 0; i < Array.Length; i++)
			{
				arr[i] = Array[i];
			}
			arr[Array.Length] = Value;
			return arr;
		}

		#region GetBestProperties

		/// <summary>
        /// Gets the properties that match the specified parameter types best.
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="Name"></param>
        /// <param name="IsStatic"></param>
        /// <param name="ParameterTypes"></param>
        /// <returns></returns>
        public const static IProperty[] GetBestProperties(this IEnumerable<IProperty> Candidates, IType CallerType, IEnumerable<IType> ParameterTypes)
        {
            var paramTypes = Enumerable.ToArray<IType>(Enumerable.Concat<IType>((IEnumerable<IType>)new IType[] { CallerType }, ParameterTypes));
            var dict = new Dictionary<IProperty, IType[]>();
            foreach (var elem in Candidates)
            {
            	var parameterTypes = elem.GetIndexerParameters().GetTypes();
                if (elem.IsExtension && CallerType != null)
                {
                    dict[elem] = parameterTypes;
                }
                else if (elem.IsStatic)
                {
					dict[elem] = MemberSelection.Concat<IType>(null, parameterTypes);
                }
                else
                {
					dict[elem] = MemberSelection.Concat<IType>(elem.DeclaringType, parameterTypes);
                }
            }
            return SortByParameterMatch<IProperty>(paramTypes, dict).ToArray();
        }

        #endregion

        #region GetBestMethods

		/// <summary>
        /// Gets the methods that match the specified parameter types best.
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="Name"></param>
        /// <param name="IsStatic"></param>
        /// <param name="ParameterTypes"></param>
        /// <returns></returns>
        public const static IMethod[] GetBestMethods(this [IMethod] Candidates, IType CallerType, IType[] ParameterTypes)
        {
            var paramTypes = MemberSelection.Concat<IType>(CallerType, ParameterTypes);
            var dict = new Dictionary<IMethod, IType[]>();
            foreach (var elem in Candidates)
            {
            	var parameterTypes = elem.GetParameters().GetTypes();
                if (elem.IsExtension && CallerType != null)
                {
					dict[elem] = parameterTypes;
                }
                else if (elem.IsStatic)
                {
					dict[elem] = MemberSelection.Concat<IType>(null, parameterTypes);
                }
                else
                {
					dict[elem] = MemberSelection.Concat<IType>(elem.DeclaringType, parameterTypes);
                }
            }
            List<IMethod> sortedMethodList = SortByParameterMatch<IMethod>(paramTypes, dict);
            return sortedMethodList.ToArray().FilterBaseMethods();
        }

        /// <summary>
        /// Gets the methods that match the specified parameter types best.
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="Name"></param>
        /// <param name="IsStatic"></param>
        /// <param name="ParameterTypes"></param>
        /// <returns></returns>
        public const static IMethod[] GetBestMethods(this [IMethod] Candidates, IType[] ParameterTypes)
        {
            var dict = new Dictionary<IMethod, IType[]>();
            foreach (var elem in Candidates)
            {
            	var parameterTypes = elem.GetParameters().GetTypes();
                if (elem.IsExtension)
                {
					dict[elem] = Enumerable.ToArray<IType>(Enumerable.Skip<IType>(parameterTypes, 1));
                }
				else
				{
					dict[elem] = parameterTypes;
				}
            }
            var sortedMethodList = SortByParameterMatch<IMethod>(ParameterTypes, dict);
            return sortedMethodList.ToArray().FilterBaseMethods();
        }

        #endregion

        #region Inheritance chain filter

        /// <summary>
        /// Filters out all method in the given array of method that have an override or implementation which is also present in the given array.
        /// </summary>
        public static const IMethod[] FilterBaseMethods(this IMethod[] Methods)
        {
        	List<IMethod> results = new List<IMethod>();
        	foreach (var item in Methods)
        	{
        		bool inserted = false;

        		for (int i = 0; i < results.Count; i++)
        		{
        			if (item.IsImplementationOf(results[i]))
	    			{
	    				results[i] = item;
	    				inserted = true;
	    				break;
	    			}
	    			else if (results[i].IsImplementationOf(item))
	    			{
	    				inserted = true;
	    				break;
	    			}
    			}

        		if (!inserted)
        		{
        			results.Add(item);
        		}
        	}
        	return results.ToArray();
        }

        #endregion

		public static const [T] FilterByName<T>(this [T] Candidates, string Name)
			where T : ITypeMember
		{
			var results = new List<T>();
        	foreach (var item in Candidates)
        	{
        		if (item.Name == Name)
        		{
        			results.Add(item);
        		}
        	}
        	return results;
		}

        public static const [T] FilterByStatic<T>(this [T] Candidates, bool IsStatic) where T : ITypeMember
        {
        	var props = new List<T>();
        	foreach (var item in Candidates)
        	{
        		if (item.IsStatic == IsStatic)
        		{
        			props.Add(item);
        		}
        	}
        	return props;
        }

		public static const [T] FilterVisible<T>(this [T] Members)
			where T : IMember
		{
			var results = new List<T>();
			foreach (var item in Members)
				if (!item.IsHidden)
			{
				results.Add(item);
			}
			return results;
		}

        #region Rating and sorting

        private const int DisqualificationScore = 65536;

        public static List<T> SortByParameterMatch<T>(IType[] ParameterTypes, Dictionary<T, IType[]> PossibleMembers)
        {
            int parameterTypesLength = ParameterTypes.Length;
            var filteredPossibleMembers = new Dictionary<T, IType[]>();
            foreach (var member in PossibleMembers)
            {
            	if (member.Value.Length == parameterTypesLength)
            		filteredPossibleMembers.Add(member.Key, member.Value);
            }
            //var filteredPossibleMembers = PossibleMembers.Where((member) => !member.Key.IsHidden && member.Value.Length == parameterTypesLength);
            var possibleParameterTypes = Enumerable.ToArray<IType[]>(filteredPossibleMembers.Values);
            var ratedMembers = new Dictionary<int, List<T>>();
            foreach (var item in filteredPossibleMembers)
            {
                int score = RateMatch(ParameterTypes, item.Value, possibleParameterTypes);
                if (score < DisqualificationScore)
                {
                    if (!ratedMembers.ContainsKey(score))
                    {
                        ratedMembers[score] = new List<T>();
                    }
                    ratedMembers[score].Add(item.Key);
                }
            }
            int lowestScore = DisqualificationScore;
            foreach (var elem in ratedMembers)
            {
                if (elem.Key < lowestScore)
                {
                    lowestScore = elem.Key;
                }
            }
            if (ratedMembers.ContainsKey(lowestScore))
            {
                return ratedMembers[lowestScore];
            }
            else
            {
                return new List<T>();
            }
        }

        private static int GetMaxAncestryDegree(IEnumerable<IType[]> Types, int Index, IType BaseType)
        {
        	int maxDegree = -1;
        	foreach (var item in Types)
        	{
        		int degree = item[Index].GetAncestryDegree(BaseType);
        		if (degree > maxDegree)
        			maxDegree = degree;
        	}
        	return maxDegree;
        }

        public static const bool UseImplicitCast(IType SourceType, IType TargetType)
        {
        	if (SourceType.IsVector && TargetType.IsArray)
        	{
        		return SourceType.AsContainerType().ElementType.Is(TargetType.AsContainerType().ElementType) && SourceType.AsContainerType().AsVectorType().Dimensions.Count == TargetType.AsContainerType().AsArrayType().ArrayRank;
        	}
        	if (SourceType.IsPrimitive && TargetType.IsPrimitive)
        	{
        		if (SourceType.GetPrimitiveMagnitude() <= TargetType.GetPrimitiveMagnitude())
        		{
        			if (SourceType.IsSignedInteger)
        			{
					 	return TargetType.IsSignedInteger || TargetType.IsFloatingPoint;
					}
        			else if (SourceType.IsUnsignedInteger)
					{
						if (TargetType.IsUnsignedInteger || TargetType.IsFloatingPoint)
        					return true;
        				else if (TargetType.IsSignedInteger)
        					return SourceType.GetPrimitiveMagnitude() < TargetType.GetPrimitiveMagnitude();
        				else
        					return false;
        			}
        			else if (SourceType.IsBit && TargetType.IsBit)
        			{
        				return true;
        			}
        			else if (SourceType.IsFloatingPoint && TargetType.IsFloatingPoint)
        			{
        				return true;
        			}
        			else
        			{
        				return false;
        			}
        		}
        	}
        	else if ((SourceType.IsArray || SourceType.IsVector) && TargetType.IsEnumerableType)
        	{
        		return SourceType.AsContainerType().ElementType.Is(TargetType.GetEnumerableElementType());
        	}
        	return false;
        }

        private static IType GetRootType(IType Value)
        {
        	if (Value == null)
        		return null;
        	var ns = Value.DeclaringNamespace;
        	if (ns == null)
        		return null;
        	var asm = ns.DeclaringAssembly;
        	if (asm == null)
        		return null;
        	return asm.CreateBinder().RootType;
        }

        private static int RateMatch(IType[] DesiredParameterTypes, IType[] ActualParameterTypes, IEnumerable<IType[]> AllParameterTypes)
        {
            // Keep a score for each method.  Add one point if a type conversion is required, or
            // a lot of points if a type conversion cannot be performed.
            if (DesiredParameterTypes.Length != ActualParameterTypes.Length)
            {
                return DisqualificationScore;
            }
            int score = 0;
            for (int i = 0; i < DesiredParameterTypes.Length; i++)
            {
            	if (DesiredParameterTypes[i] == null)
            	{
            		if (ActualParameterTypes[i] != null)
            		{
            			return DisqualificationScore;
            		}
            	}
            	else if (ActualParameterTypes[i] == null)
            	{
            		if (DesiredParameterTypes[i] != null)
            		{
            			return DisqualificationScore;
            		}
            	}
            	else if (!object.ReferenceEquals(DesiredParameterTypes[i], ActualParameterTypes[i]))
            	if (!DesiredParameterTypes[i].Equals(ActualParameterTypes[i]))
                {
                    if (DesiredParameterTypes[i].Equals(PrimitiveTypes.Null))
                    {
                        var rootType = GetRootType(ActualParameterTypes[i]);
                        if (rootType != null)
                        {
	                        int highestRootDegree = GetMaxAncestryDegree(AllParameterTypes, i, rootType);
	                        score += highestRootDegree - ActualParameterTypes[i].GetAncestryDegree(rootType);
                        }
                        else
                        {
                        	score += 1;
                        }
                    }
					else if (ActualParameterTypes[i].IsRootType)
					{
						int highestAncestryDegree = GetMaxAncestryDegree(AllParameterTypes, i, ActualParameterTypes[i]);
						score += highestAncestryDegree + 1;
					}
                    else
                    {
                        int ancestryDegree = DesiredParameterTypes[i].GetAncestryDegree(ActualParameterTypes[i]);
                        if (ancestryDegree > -1)
                        {
                            score += ancestryDegree;
                        }
                        else if (MemberSelection.UseImplicitCast(DesiredParameterTypes[i], ActualParameterTypes[i])) // Try implicit cast
                        {
                            score++;
                        }
                        else
                        {
                            return DisqualificationScore;
                        }
                    }
                }
            }
            return score;
        }

        #endregion
	}
}
