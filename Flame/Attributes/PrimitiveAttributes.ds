using System;
using System.Collections.Generic;

namespace Flame
{
    public static class PrimitiveAttributes
    {
        #region Static

        static this()
        {
            PrimitiveAttributes.InterfaceAttribute = new FlagAttribute("InterfaceAttribute");
            PrimitiveAttributes.ValueTypeAttribute = new FlagAttribute("ValueTypeAttribute");
            PrimitiveAttributes.ReferenceTypeAttribute = new FlagAttribute("ReferenceTypeAttribute");
            PrimitiveAttributes.EnumAttribute = new FlagAttribute("EnumAttribute");
            PrimitiveAttributes.ExtensionAttribute = new FlagAttribute("ExtensionAttribute");
            PrimitiveAttributes.ConstantAttribute = new FlagAttribute("ConstantAttribute");
            PrimitiveAttributes.AbstractAttribute = new FlagAttribute("AbstractAttribute");
            PrimitiveAttributes.VirtualAttribute = new FlagAttribute("VirtualAttribute");
            PrimitiveAttributes.RootTypeAttribute = new FlagAttribute("RootTypeAttribute");
            PrimitiveAttributes.HiddenAttribute = new FlagAttribute("HiddenAttribute");
            PrimitiveAttributes.RecompileAttribute = new FlagAttribute("RecompileAttribute");
            PrimitiveAttributes.IndexerAttribute = new FlagAttribute("IndexerAttribute");
            PrimitiveAttributes.InlineAttribute = new FlagAttribute("InlineAttribute");
            PrimitiveAttributes.OutAttribute = new FlagAttribute("OutAttribute");
            PrimitiveAttributes.InAttribute = new FlagAttribute("InAttribute");
            PrimitiveAttributes.StaticTypeAttribute = new FlagAttribute("StaticTypeAttribute");
            PrimitiveAttributes.CastAttribute = new FlagAttribute("CastAttribute");
            PrimitiveAttributes.ImportAttribute = new FlagAttribute("ImportAttribute");
            PrimitiveAttributes.InitOnlyAttribute = new FlagAttribute("InitOnlyAttribute");
            PrimitiveAttributes.TotalInitializationAttribute = new FlagAttribute("TotalInitializationAttribute");
            PrimitiveAttributes.VarArgsAttribute = new FlagAttribute("VarArgsAttribute");
        }

        public static IAttribute InterfaceAttribute { get; private set; }
        public static IAttribute ValueTypeAttribute { get; private set; }
        public static IAttribute ReferenceTypeAttribute { get; private set; }
        public static IAttribute EnumAttribute { get; private set; }
        public static IAttribute ExtensionAttribute { get; private set; }
        public static IAttribute ConstantAttribute { get; private set; }
        public static IAttribute AbstractAttribute { get; private set; }
        public static IAttribute VirtualAttribute { get; private set; }
        public static IAttribute RootTypeAttribute { get; private set; }
        public static IAttribute HiddenAttribute { get; private set; }
        public static IAttribute RecompileAttribute { get; private set; }
        public static IAttribute IndexerAttribute { get; private set; }
        public static IAttribute InlineAttribute { get; private set; }
        public static IAttribute OutAttribute { get; private set; }
        public static IAttribute InAttribute { get; private set; }
        public static IAttribute StaticTypeAttribute { get; private set; }
        public static IAttribute CastAttribute { get; private set; }
        public static IAttribute ImportAttribute { get; private set; }

        /// <summary>
        /// Specifies that some field can only be initialized by an
        /// appropriate constructor, after which it cannot be assigned
        /// a new value. A constructor is deemed appropriate if it has the
        /// same staticness as the field, and the same enclosing type.
        /// </summary>
        public static IAttribute InitOnlyAttribute { get; private set; }

        /// <summary>
        /// Hints that a constructor performs total initialization, i.e.
        /// there is no need to initialize memory contents before the
        /// constructor is run.
        /// </summary>
        public static IAttribute TotalInitializationAttribute { get; private set; }

        /// <summary>
        /// Informs callers that the parameter that this attribute is applied to
        /// can be constructed from zero or more arguments.
        /// </summary>
        public static IAttribute VarArgsAttribute { get; private set; }

        #endregion
    }
}
