using Flame.Primitives;

namespace Flame
{
    /// <summary>
    /// An attribute type that identifies a type as the runtime equivalent
    /// of a built-in type.
    /// </summary>
    public class RuntimeEquivalentAttribute : IAttribute
    {
        static this()
        {
            attrType = new PrimitiveType<IAttribute>("RuntimeEquivalentAttribute", 0, null);
        }
        private static IType attrType;

        /// <summary>
        /// Gets the attribute type for <c>RuntimeEquivalentAttribute</c> values.
        /// </summary>
        /// <returns>The attribute type.</returns>
        public static IType RuntimeEquivalentAttributeType { get { return attrType; } }

        /// <summary>
        /// Creates a runtime equivalent attribute from the given built-in type.
        /// </summary>
        /// <param name="BuiltinType">
        /// The built-in type that is equivalent to the runtime equivalent
        /// type which will be decorated by the attribute created.
        /// </param>
        public this(IType BuiltinType)
        {
            this.BuiltinType = BuiltinType;
        }

        /// <summary>
        /// Gets the built-in type that is equivalent to the runtime equivalent
        /// type that is decorated with this attribute.
        /// </summary>
        /// <returns>The built-in type.</returns>
        public IType BuiltinType { get; private set; }

        /// <summary>
        /// Gets this attribute's type.
        /// </summary>
        /// <returns>The attribute type.</returns>
        public IType AttributeType { get { return attrType; } }

        public IBoundObject Value
        {
            get
            {
                return new BoundPrimitive<IAttribute>(AttributeType, this);
            }
        }
    }
}