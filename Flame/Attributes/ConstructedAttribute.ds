using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Attributes
{
	public class ConstructedAttribute : IConstructedAttribute
	{
		public const this(set IMethod Constructor, set [IBoundObject] ConstructorArguments);

		public IMethod Constructor { const get; private set; }
		public [IBoundObject] ConstructorArguments { const get; private set; }

		/// <summary>
		/// Gets the arguments that were passed to the attribute constructor.
		/// </summary>
		/// <returns></returns>
		public const [IBoundObject] GetArguments()
		{
			return ConstructorArguments;
		}

		/// <summary>
        /// Gets the attribute's type.
        /// </summary>
        public IType AttributeType
        {
        	const get
        	{
        		return Constructor.DeclaringType;
        	}
        }
        /// <summary>
        /// Gets the attribute's value.
        /// </summary>
        public IBoundObject Value
        {
        	const get
        	{
				if (Constructor is IInvocableMethod)
					return ((IInvocableMethod)Constructor).Invoke(null, ConstructorArguments);
				else
					return null;
        	}
        }
	}
}
