using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;

namespace Flame
{
	public static class MemberExtensions
	{
		#region Member Manipulation

		public static const string CombineNames(string First, string Second)
		{
			if (string.IsNullOrEmpty(First))
			{
				return Second;
			}
			else if (string.IsNullOrEmpty(Second))
			{
				return First;
			}
			else
			{
				StringBuilder sb = new StringBuilder();
				sb.Append(First);
				sb.Append(".");
				sb.Append(Second);
				return sb.ToString();
			}
		}

		public static [string] Names[this [IMember] Members]
		{
			const get
			{
				var results = new List<string>();
				foreach (var item in Members)
				{
					results.Add(item.Name);
				}
				return results;
			}
		}
		public static [string] Names[this [IType] Types]
		{
			const get
			{
				var results = new List<string>();
				foreach (var item in Types)
				{
					results.Add(item.Name);
				}
				return results;
			}
		}

		public static [string] FullNames[this [IMember] Members]
		{
			const get
			{
				var results = new List<string>();
				foreach (var item in Members)
				{
					results.Add(item.FullName);
				}
				return results;
			}
		}
		public static [string] FullNames[this [IType] Types]
		{
			const get
			{
				var results = new List<string>();
				foreach (var item in Types)
				{
					results.Add(item.FullName);
				}
				return results;
			}
		}

		#endregion

		public const static T GetPrimitiveValue<T>(this IBoundObject Value)
		{
			var primObj = (IBoundPrimitive<T>)Value;
			return primObj.Value;
		}

		#region Attributes

		public static [IAttribute] GetAttributes(this IMember Member, IType Type)
        {
        	return Member.Attributes.GetAll(Type);
        }

        public static IAttribute GetAttribute(this IMember Member, IType Type)
        {
        	return Member.Attributes.Get(Type);
        }

        public static bool HasAttribute(this IMember Member, IType AttributeType)
        {
			return Member.Attributes.Contains(AttributeType);
        }

        public static AccessAttribute GetAccessAttribute(this IMember Member)
        {
        	return new AccessAttribute(Member.Access);
        }

        public static AccessModifier Access[this IMember Member]
        {
        	const get
        	{
	        	var accessAttr = (AccessAttribute)Member.GetAttribute(AccessAttribute.AccessAttributeType);
	        	if (accessAttr == null)
	        	{
	        		return AccessModifier.Public;
	        	}
	        	else
	        	{
	        		return accessAttr.Access;
	        	}
        	}
        }

        #region GetAncestryGraph

        public static AncestryGraph GetAncestryGraph(this IMember Member)
        {
        	var attr = Member.GetAttribute(AncestryGraphAttribute.AncestryGraphAttributeType);
        	if (attr == null)
        	{
        		return new AncestryGraph();
        	}
        	else
        	{
        		return ((AncestryGraphAttribute)attr).Graph;
        	}
        }

        public static AncestryGraph GetAncestryGraph(IMember First, IMember Second)
        {
        	var attr = First.GetAttribute(AncestryGraphAttribute.AncestryGraphAttributeType);
        	if (attr == null)
        	{
        		return Second.GetAncestryGraph();
        	}
        	else
        	{
        		return ((AncestryGraphAttribute)attr).Graph;
        	}
        }

		public static AncestryGraph GetAncestryGraph([IMember] Members)
		{
			foreach (var item in Members)
			{
				var attr = item.GetAttribute(AncestryGraphAttribute.AncestryGraphAttributeType);
				if (attr != null)
					return ((AncestryGraphAttribute)attr).Graph;
			}
			return new AncestryGraph();
		}

        #endregion

        #region IsCovariant

        public static bool IsCovariant[this IGenericParameter Type]
        {
            const get
        	{
        		return Type.HasAttribute(PrimitiveAttributes.OutAttribute.AttributeType);
        	}
        }

        #endregion

        #region IsContravariant

        public static bool IsContravariant[this IGenericParameter Type]
        {
            const get
        	{
        		return Type.HasAttribute(PrimitiveAttributes.InAttribute.AttributeType);
        	}
        }

        #endregion

        #region IsInterface

        public static bool IsInterface[this IType Type]
        {
            const get
        	{
        		return Type.HasAttribute(PrimitiveAttributes.InterfaceAttribute.AttributeType);
        	}
        }

		private static bool IsPureInterfaceCore(IType Type)
		{
			return Type.IsInterface && Enumerable.All<IType>(Type.BaseTypes, IsPureInterfaceCore);
		}

		/// <summary>
		/// Determines if this type is a "pure interface", i.e. an interface whose
		/// base types are all pure interfaces.
		/// </summary>
		public static bool IsPureInterface[this IType Type]
		{
			const get return IsPureInterfaceCore(Type);
		}

        #endregion

        #region IsValueType

        public static bool IsValueType[this IType Type]
        {
        	const get
        	{
        		return Type.HasAttribute(PrimitiveAttributes.ValueTypeAttribute.AttributeType);
        	}
        }

        #endregion

        #region IsEnum

        public static bool IsEnum[this IType Type]
        {
        	const get
        	{
        		return Type.HasAttribute(PrimitiveAttributes.EnumAttribute.AttributeType);
        	}
        }

        #endregion

        #region IsReferenceType

        public static bool IsReferenceType[this IType Type]
        {
        	const get
        	{
        		if (Type.HasAttribute(PrimitiveAttributes.ReferenceTypeAttribute.AttributeType))
        		{
        			return true;
        		}
        		return !Type.IsValueType && !Type.IsGenericParameter;
        	}
        }

        #endregion

        #region IsRootType

        public static bool IsRootType[this IType Type]
        {
        	const get
        	{
        		return Type.HasAttribute(PrimitiveAttributes.RootTypeAttribute.AttributeType);
        	}
        }

        #endregion

		#region IsStaticType

		/// <summary>
		/// Determines if the given type has a 'static type' attribute.
		/// </summary>
		public static bool IsStaticType[this IType Type]
		{
			get
			{
				return Type.HasAttribute(PrimitiveAttributes.StaticTypeAttribute.AttributeType);
			}
		}

		#endregion

		#region IsDelegate

		public static bool IsDelegate[this IType Type]
		{
			const get
			{
				return MethodType.GetMethod(Type) != null;
			}
		}

		#endregion

		#region IsIntersectionType

		public static bool IsIntersectionType[this IType Type]
		{
			const get
			{
				return Type is IntersectionType;
			}
		}

		#endregion

        #region IsEnumerable

        public static bool IsEnumerableType[this IType Type]
        {
        	const get
        	{
        		return Type.HasAttribute(EnumerableAttribute.EnumerableAttributeType);
        	}
        }

        #endregion

        #region GetEnumerableElementType

        public static IType GetEnumerableElementType(this IType Type)
        {
        	if (Type.IsContainerType)
        	{
        		return Type.AsContainerType().ElementType;
        	}
        	else
        	{
        		var attr = (EnumerableAttribute)Type.GetAttribute(EnumerableAttribute.EnumerableAttributeType);
        		if (attr == null)
        		{
        			IType result = null;
        			foreach (var bType in Type.BaseTypes)
        			{
        				var elemType = bType.GetEnumerableElementType();
        				if (elemType != null)
        				{
        					if (result == null)
        						result = elemType;
        					else if (elemType.Is(result)) // Pick the more derived type
        						result = elemType;
        					else if (!result.Is(elemType)) // If one type does not inherit from the other, no definite result can be selected
        						return null;
        				}
        			}
        			return result;
        		}
				else if (Type.IsRecursiveGenericInstance)
				{
					return ((GenericTypeBase)Type).Resolver.ResolveType(attr.ElementType);
				}
        		else
        		{
        			return attr.ElementType;
        		}
        	}
        }

        #endregion

		#region IsAnonymous

		public static bool IsAnonymous[this ITypeMember Member]
		{
			const get return string.IsNullOrEmpty(Member.Name) && Member.DeclaringType == null;
		}

		#endregion

        #region IsHidden

        public static bool IsHidden[this IMember Member]
        {
        	const get
        	{
        		return Member.HasAttribute(PrimitiveAttributes.HiddenAttribute.AttributeType);
        	}
        }

        #endregion

        #region IsOperator/GetOperator

        public static bool IsOperator[this IMethod Method]
        {
        	const get
        	{
        		if (Method.HasAttribute(OperatorAttribute.OperatorAttributeType))
        		{
        			return true;
        		}
        		foreach (var item in Method.BaseMethods)
        		{
        			if (item.IsOperator) return true;
        		}
        		return false;
        	}
        }

        public static const Operator GetOperator(this IMethod Method)
        {
            if (Method.HasAttribute(OperatorAttribute.OperatorAttributeType))
    		{
    			return ((OperatorAttribute)Method.GetAttribute(OperatorAttribute.OperatorAttributeType)).Operator;
    		}
    		foreach (var item in Method.BaseMethods)
    		{
    			var result = item.GetOperator();
    			if (result.IsDefined)
					return result;
    		}
        	return Operator.Undefined;
        }

        /*public static Operator Operator[this IMethod Method]
        {
        	const get
        	{
        		return Method.GetOperator();
        	}
        }*/

        public static bool IsCast[this IMethod Method]
        {
        	const get
        	{
        		return Method.HasAttribute(PrimitiveAttributes.CastAttribute.AttributeType);
        	}
        }

        #endregion

        #region SetsMember

        public static bool SetsMember[this IParameter Parameter]
        {
        	const get
        	{
        		return Parameter.HasAttribute(SetsMemberAttribute.SetsMemberAttributeType);
        	}
        }

        #endregion

        #region IsExtension

        private static bool AreExtensionParameters([IParameter] Parameters)
        {
			var first = Enumerable.FirstOrDefault<IParameter>(Parameters);
        	if (first != null)
        	{
        		return first.IsExtension;
        	}
        	else
        	{
        		return false;
        	}
        }

        public static bool IsExtension[this IMember Member]
        {
        	const get
        	{
        		var attr = MemberExtensions.GetAttribute(Member, PrimitiveAttributes.ExtensionAttribute.AttributeType);
        		if (attr != null)
        		{
        			return true;
        		}
        		else if (Member is IMethod)
        		{
        			return AreExtensionParameters(((IMethod)Member).GetParameters());
        		}
        		else if (Member is IProperty)
        		{
        			return AreExtensionParameters(((IProperty)Member).IndexerParameters);
        		}
        		return false;
        	}
        }

        #endregion

        #region IsValueType

        public static bool IsConstant[this IMember Member]
        {
        	const get
        	{
        		return Member.HasAttribute(PrimitiveAttributes.ConstantAttribute.AttributeType);
        	}
        }

        #endregion

		#endregion

		#region IsContainerType

		public static bool IsContainerType[this IType Type]
		{
			const get return Type is IContainerType;
		}

		#endregion

		#region AsContainerType

		private static const T AsTypeInstance<T>(IType Value)
		{
			if (Value is T)
				return (T)Value;
			else
				return default(T);
		}

		public static const IContainerType AsContainerType(this IType Type)
		{
			return AsTypeInstance<IContainerType>(Type);
		}

		public static const IArrayType AsArrayType(this IType Type)
		{
			return AsTypeInstance<IArrayType>(Type);
		}

		public static const IPointerType AsPointerType(this IType Type)
		{
			return AsTypeInstance<IPointerType>(Type);
		}

		public static const IVectorType AsVectorType(this IType Type)
		{
			return AsTypeInstance<IVectorType>(Type);
		}

		#endregion

		#region IsPointer

        public static bool IsPointer[this IType Type]
        {
        	const get return Type is IPointerType;
        }

        #endregion

        #region IsArray

        public static bool IsArray[this IType Type]
        {
        	const get return Type is IArrayType;
        }

        #endregion

        #region IsArray

        public static bool IsVector[this IType Type]
        {
        	const get return Type is IVectorType;
        }

        #endregion

        #region IsVirtual

        public static bool IsVirtual[this IMember Member]
		{
			const get
			{
				if (Member is ITypeMember)
				if (((ITypeMember)Member).DeclaringType.IsInterface)
				{
					return true;
				}
				if (Member.IsAbstract)
				{
					return true;
				}
				return Member.HasAttribute(PrimitiveAttributes.VirtualAttribute.AttributeType);
			}
		}

		#endregion

        #region IsAbstract

        public static bool IsAbstract[this IMember Member]
		{
			const get
			{
				return Member.HasAttribute(PrimitiveAttributes.AbstractAttribute.AttributeType);
			}
		}

		#endregion

        #region GetAncestryDegree

        public static const int GetAncestryDegree(this IType Type, IType Other)
        {
            var graph = GetAncestryGraph(Type, Other);
            return graph.GetAncestryDegree(Type, Other);
        }

		/// <summary>
		/// Gets the lowest non-zero ancestry degree between the given set
		/// of type and right-hand type operand.
		/// </summary>
		public static const int GetLowestAncestryDegree(this [IType] Types, IType Other)
		{
			int bestAncestry = -1;
			foreach (var item in Types)
			{
				int degree = item.GetAncestryDegree(Other);
				if (degree > -1 && (degree <= bestAncestry || bestAncestry == -1))
				{
					if (degree == 0) // Early-out for zero ancestry degrees.
					{
						return 0;
					}
					bestAncestry = degree;
				}
			}
			return bestAncestry;
		}

        #endregion

        #region Is

        /// <summary>
        /// Gets a boolean value that indicates if this type can be stored in a variable of the provided type.
        /// </summary>
        /// <param name="Other"></param>
        /// <returns></returns>
        public const static bool Is(this IType Type, IType Other)
        {
            var graph = GetAncestryGraph(Type, Other);
            return graph.Is(Type, Other);
        }

		/// <summary>
		/// Tests if the given type is equivalent with the given other type, i.e.
		/// it has ancestry degree zero. This method also has an equality fast-path,
		/// as equality implies equivalence.
		/// </summary>
		public const static bool IsEquivalent(this IType Type, IType Other)
		{
			return Type.Equals(Other) || Type.GetAncestryDegree(Other) == 0;
		}

        #endregion

        #region GetParent/GetInterfaces

        /// <summary>
        /// Gets the type's parent type, which is the first non-interface type
		/// in the type's base type list. Null is returned if no such type
		/// exists.
        /// </summary>
        /// <param name="Other"></param>
        /// <returns></returns>
        public const static IType GetParent(this IType Type)
        {
        	foreach (var item in Type.BaseTypes)
        		if (!item.IsInterface)
			{
				return item;
			}
        	return null;
        }

		/// <summary>
		/// Gets all interfaces implemented by the given type.
		/// </summary>
        public const static [IType] GetInterfaces(this IType Type)
        {
        	var interfs = new List<IType>();
        	foreach (var item in Type.BaseTypes)
        		if (item.IsInterface)
			{
				interfs.Add(item);
			}
        	return interfs;
        }

        #endregion

        #region GetAllBaseTypes

		/// <summary>
		/// Recursively finds all direct and indirect base types for this type.
		/// </summary>
        public const static [IType] GetAllBaseTypes(this IType Type)
        {
        	var allTypes = new HashSet<IType>(Type.BaseTypes);
        	foreach (var item in Type.BaseTypes)
        	{
				allTypes.UnionWith(item.GetAllBaseTypes());
        	}
            return allTypes;
        }

        #endregion

		#region Make*Type

		/// <summary>
		/// Creates an array type based on the given element type and
		/// array rank.
		/// </summary>
		public const static IArrayType MakeArrayType(this IType ElementType, int ArrayRank)
		{
			return new ArrayType(ElementType, ArrayRank);
		}

		/// <summary>
		/// Creates a pointer type that points to an object of the given type
		/// and is of the given pointer kind.
		/// </summary>
		public const static IPointerType MakePointerType(this IType ElementType, PointerKind Kind)
		{
			return new PointerType(ElementType, Kind);
		}

		/// <summary>
		/// Creates a vector type that contains objects of the given type
		/// and has the given dimensions.
		/// </summary>
		public const static IVectorType MakeVectorType(this IType ElementType, IReadOnlyList<int> Dimensions)
		{
			return new VectorType(ElementType, Dimensions);
		}

		/// <summary>
		/// Creates a vector type that contains objects of the given type
		/// and has the given dimensions.
		/// </summary>
		public const static IVectorType MakeVectorType(this IType ElementType, int[] Dimensions)
		{
			return ElementType.MakeVectorType((IReadOnlyList<int>)Dimensions);
		}

		#endregion
	}
}
