using System;
using System.Collections.Generic;

namespace Flame
{
    public struct PointerKind
    {
        private const this(set int32 typeIndex);
        public const this(PointerKind Other)
        {
            this.typeIndex = Other.typeIndex;
        }

        private int32 typeIndex;

        public string Extension { const get { return typeNames[typeIndex]; } }

        #region Equality

        public override const int32 GetHashCode()
        {
            return typeIndex.GetHashCode();
        }

        public override const bool Equals(object obj)
        {
            if (obj is PointerKind)
            {
                return ((PointerKind)obj).typeIndex == typeIndex;
            }
            else
            {
                return false;
            }
        }

        /*public static bool operator ==(PointerKind A, PointerKind B)
        {
            return A.typeIndex == B.typeIndex;
        }
        public static bool operator !=(PointerKind A, PointerKind B)
        {
            return A.typeIndex != B.typeIndex;
        }*/

        #endregion

        #region ToString

        public override string ToString()
        {
            return typeNames[typeIndex];
        }

        #endregion

        #region Static

        #region Management

        static this()
        {
            typeNames = new List<string>();
            predefinedKinds = new PointerKind[2];
            predefinedKinds[0] = Register("*");
            predefinedKinds[1] = Register("^");
        }

        private static List<string> typeNames;
        private static PointerKind[] predefinedKinds;

        public static PointerKind Register(string Extension)
        {
        	PointerKind result;
        	if (!TryGetPointerKind(Extension, &result))
        	{
        		typeNames.Add(Extension);
        		result = new PointerKind(typeNames.Count - 1);
        	}
            return result;
        }

        public static bool IsPointerExtension(string Extension)
        {
            return typeNames.Contains(Extension);
        }
        public static bool TryGetPointerKind(string TypeName, out PointerKind^ Result)
        {
            for (int i = 0; i < typeNames.Count; ++i)
            {
                if (TypeName.EndsWith(typeNames[i]))
                {
                	*Result = new PointerKind(i);
                    return true;
                }
            }
            *Result = new PointerKind(-1);
            return false;
        }
        public static PointerKind GetPointerKind(string TypeName)
        {
        	PointerKind result;
        	TryGetPointerKind(TypeName, &result);
            return result;
        }

        #endregion

        #region Common Accessors

        public static PointerKind TransientPointer
        {
            /*const*/ get // Marked not constant to avoid CTFE, which is not always supported
            {
                return predefinedKinds[0];
            }
        }

        public static PointerKind ReferencePointer
        {
            /*const*/ get
            {
                return predefinedKinds[1];
            }
        }

        #endregion

        #endregion
    }
}