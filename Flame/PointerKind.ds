using System;
using System.Collections.Generic;
using System.Threading;

namespace Flame
{
    /// <summary>
    /// A data structure that describes categories of pointers.
    /// </summary>
    public struct PointerKind
    {
        private this(set int typeIndex);

        /// <summary>
        /// Creates a pointer kind that is a copy of the given pointer kind.
        /// </summary>
        public this(PointerKind Other)
        {
            this.typeIndex = Other.typeIndex;
        }

        // The one-based index in the type names and ancestry rules lists.
        private int typeIndex;

        /// <summary>
        /// Tests if this pointer kind is defined.
        /// </summary>
        public bool IsDefined
        {
            get { return typeIndex > 0; }
        }

        /// <summary>
        /// Gets this pointer kind's extension.
        /// </summary>
        public string Extension
        {
            get
            {
                string result;
                rwLock.EnterReadLock();
                try
                {
                    if (typeIndex > 0)
                    {
                        // Decrement typeIndex before indexing, because
                        // typeIndex is one-based.
                        result = typeNames[typeIndex - 1];
                    }
                    else
                    {
                        result = null;
                    }
                }
                finally
                {
                    rwLock.ExitReadLock();
                }
                return result;
            }
        }

        /// <summary>
        /// Gets the ancestry rules for this pointer kind.
        /// </summary>
        public IPointerAncestryRules AncestryRules
        {
            get
            {
                IPointerAncestryRules result;
                rwLock.EnterReadLock();
                try
                {
                    if (typeIndex > 0)
                    {
                        // Decrement typeIndex before indexing, because
                        // typeIndex is one-based.
                        result = ancRules[typeIndex - 1];
                    }
                    else
                    {
                        result = null;
                    }
                }
                finally
                {
                    rwLock.ExitReadLock();
                }
                return result;
            }
        }

        #region Equality

        public override int GetHashCode()
        {
            return typeIndex.GetHashCode();
        }

        public bool Equals(PointerKind Other)
        {
            return typeIndex == Other.typeIndex;
        }

        public override bool Equals(object obj)
        {
            if (obj is PointerKind)
            {
                return Equals((PointerKind)obj);
            }
            else
            {
                return false;
            }
        }

        #endregion

        #region ToString

        public override string ToString()
        {
            return Extension;
        }

        #endregion

        #region Static

        #region Management

        static this()
        {
            typeNames = new List<string>();
            ancRules = new List<IPointerAncestryRules>();
            kindDict = new Dictionary<string, PointerKind>();
            rwLock = new ReaderWriterLockSlim();
            Register("*");
            Register("^");
            Register("'box");
        }

        private static List<string> typeNames;
        private static List<IPointerAncestryRules> ancRules;
        private static Dictionary<string, PointerKind> kindDict;
        private static ReaderWriterLockSlim rwLock;

        private static PointerKind RegisterNew(
            string Extension, IPointerAncestryRules Rules)
        {
            typeNames.Add(Extension);
            ancRules.Add(Rules);
            var result = new PointerKind(typeNames.Count);
            kindDict[Extension] = result;
            return result;
        }

        /// <summary>
        /// Registers a pointer kind with the given extension and set of pointer
        /// ancestry rules.
        /// </summary>
        public static PointerKind Register(
            string Extension, IPointerAncestryRules Rules)
        {
            PointerKind result;
            rwLock.EnterUpgradeableReadLock();
            try
            {
                if (kindDict.TryGetValue(Extension, &result))
                {
                    assert(result.AncestryRules.Equals(Rules));
                }
                else
                {
                    rwLock.EnterWriteLock();
                    try
                    {
                        result = RegisterNew(Extension, Rules);
                    }
                    finally
                    {
                        rwLock.ExitWriteLock();
                    }
                }
            }
            finally
            {
                rwLock.ExitUpgradeableReadLock();
            }
            return result;
        }

        /// <summary>
        /// Registers a pointer kind with the given extension. The default
        /// set of ancestry rules is implied.
        /// </summary>
        public static PointerKind Register(string Extension)
        {
            return Register(Extension, PointerAncestryRules);
        }

        /// <summary>
        /// Checks if the given string is a pointer extension.
        /// </summary>
        public static bool IsPointerExtension(string Extension)
        {
            bool result;
            rwLock.EnterReadLock();
            try
            {
                result = kindDict.ContainsKey(Extension);
            }
            finally
            {
                rwLock.ExitReadLock();
            }
            return result;
        }

        /// <summary>
        /// Tries to get the pointer kind that is suffixed to the given type
        /// name, if any. This method is not thread-safe.
        /// </summary>
        private static bool TryGetPointerKindVolatile(
            string TypeName, out PointerKind^ Result)
        {
            if (kindDict.TryGetValue(TypeName, Result))
            {
                return true;
            }

            for (int i = 0; i < typeNames.Count; ++i)
            {
                if (TypeName.EndsWith(typeNames[i]))
                {
                    *Result = new PointerKind(i + 1);
                    return true;
                }
            }
            *Result = Undefined;
            return false;
        }

        /// <summary>
        /// Tries to get the pointer kind that is suffixed to the given type
        /// name, if any.
        /// </summary>
        public static bool TryGetPointerKind(
            string TypeName, out PointerKind^ Result)
        {
            bool success;
            rwLock.EnterReadLock();
            try
            {
                success = TryGetPointerKindVolatile(TypeName, Result);
            }
            finally
            {
                rwLock.ExitReadLock();
            }
            return success;
        }

        /// <summary>
        /// Gets the pointer kind that is suffixed to the given type name. If
        /// no pointer kind is suffixed to the type name, then the undefined
        /// pointer kind is returned.
        /// </summary>
        public static PointerKind GetPointerKind(string TypeName)
        {
            if (TryGetPointerKind(TypeName, &PointerKind result))
            {
                return result;
            }
            else
            {
                return Undefined;
            }
        }

        #endregion

        #region Common Accessors

        /// <summary>
        /// Gets the undefined pointer kind.
        /// </summary>
        public static PointerKind Undefined
        {
            get
            {
                return default(PointerKind);
            }
        }

        /// <summary>
        /// Gets the pointer kind for transient pointers.
        /// </summary>
        public static PointerKind TransientPointer
        {
            get
            {
                return Register("*");
            }
        }

        /// <summary>
        /// Gets the pointer kind for reference pointers.
        /// </summary>
        public static PointerKind ReferencePointer
        {
            get
            {
                return Register("^");
            }
        }

        /// <summary>
        /// A reference to a boxed value.
        /// </summary>
        public static PointerKind BoxPointer
        {
            get
            {
                return Register("'box");
            }
        }

        #endregion

        #endregion
    }
}
