using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame
{
	public static class MemberLookup
	{
		#region GetAllFields

        public const static [IField] GetAllFields(this IType Type, string Name)
        {
            return MemberSelection.FilterByName<IField>(Type.GetAllFields(), Name);
        }

        /// <summary>
        /// Gets all fields - locally declared and inherited - of the provided type.
        /// </summary>
        /// <remarks>
        /// This implementation tries to accurately represent that fields' layout.
        /// </remarks>
        public static const [IField] GetAllFields(this IType Type)
        {
        	var results = new HashSet<IField>(Type.Fields);
        	foreach (var item in Type.BaseTypes)
        	{
				results.UnionWith(item.GetAllFields());
        	}
        	return results;
        }

        #endregion

        #region GetField

        public const static IField GetField(this IType Type, string Name)
        {
        	return Type.GetAllFields().GetField(Name);
        }

        public const static IField GetField(this [IField] Fields, string Name)
        {
			return Enumerable.FirstOrDefault<IField>(MemberSelection.FilterByName<IField>(Fields, Name));
        }

        #endregion

        #region GetAllProperties

        public const static [IProperty] GetAllProperties(this IType Type)
        {
            var props = new HashSet<IProperty>(Type.Properties);
            foreach (var baseType in Type.BaseTypes)
            {
            	foreach (var property in baseType.GetAllProperties())
            	{
					props.Add(property);
            	}
            }
            return props;
        }

        public const static [IProperty] GetAllProperties(this IType Type, string Name)
        {
            return MemberSelection.FilterByName<IProperty>(Type.GetAllProperties(), Name);
        }

        #endregion

        #region GetAllMethods

        public const static [IMethod] GetAllMethods(this IType Type)
        {
            var methods = new HashSet<IMethod>(Type.Methods);
            foreach (var baseType in Type.BaseTypes)
            {
            	foreach (var method in baseType.GetAllMethods())
            	{
					if (!method.IsConstructor)
        				methods.Add(method);
            	}
            }
            return methods;
        }

        public const static [IMethod] GetAllMethods(this IType Type, string Name)
        {
            return MemberSelection.FilterByName<IMethod>(Type.GetAllMethods(), Name);
        }

        #endregion

        #region GetAllMembers

        public const static [ITypeMember] GetAllMembers(this IType Type)
        {
			return Enumerable.Concat<ITypeMember>(Type.GetAllFields(),
				   Enumerable.Concat<ITypeMember>(Type.GetAllMethods(),
							   					  Type.GetAllProperties()));
        }

        #endregion

        #region GetAllMembers

        public const static [ITypeMember] GetAllMembers(this IType Type, string Name)
        {
			return Enumerable.Concat<ITypeMember>(Type.GetAllFields(Name),
				   Enumerable.Concat<ITypeMember>(Type.GetAllMethods(Name),
				                                  Type.GetAllProperties(Name)));
        }

        #endregion
	}
}
