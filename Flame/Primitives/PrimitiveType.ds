using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;

namespace Flame.Primitives
{
	#region PrimitiveType

	public virtual class PrimitiveType<T> : IType
	{
		protected const this();
        public const this(set string Name, set int32 Magnitude, set T DefaultValue);

        public int32 Magnitude { const get; protected set; }
        public T DefaultValue { const get; protected set; }
        public string Name { const get; protected set; }

        public INamespace DeclaringNamespace
        {
            const get
            {
                return new PrimitivesNamespace();
            }
        }

        public virtual ITypeMember[] GetMembers()
        {
            List<ITypeMember> members = new List<ITypeMember>();
            members.AddRange((IEnumerable<ITypeMember>)GetMethods());
            members.AddRange((IEnumerable<ITypeMember>)GetProperties());
            members.AddRange((IEnumerable<ITypeMember>)GetFields());
            members.AddRange((IEnumerable<ITypeMember>)GetConstructors());
            return members.ToArray();
        }
        
        protected IMethod[] GetCommonPrimitiveMethods()
        {
        	var parseMethod = new DescribedMethod("Parse", this, this, true); // static const T Parse(string Value); where T is the current type
        	parseMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
        	parseMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
        	
            return new IMethod[]
            {
                new PrimitiveMethod(this, "ToString", false, PrimitiveTypes.String, new IParameter[0]),
                new GetHashCodeImplementation<T>(this),
                new EqualsImplementation<T>(this),
                parseMethod
            };
        }

        public virtual IMethod[] GetMethods()
        {
			return GetCommonPrimitiveMethods();
        }

        public virtual IProperty[] GetProperties()
        {
            return new IProperty[0];
        }

        public virtual IField[] GetFields()
        {
            return new IField[0];
        }

        public virtual IMethod[] GetConstructors()
        {
            return new IMethod[0];
        }

        public IBoundObject GetDefaultValue()
        {
            return new BoundPrimitive<T>(this, DefaultValue);
        }

        public bool IsContainerType
        {
            get { return false; }
        }

        public IContainerType AsContainerType()
        {
            return null;
        }

        public IArrayType MakeArrayType(int Rank)
        {
        	return new DescribedArrayType(this, Rank);
        }

        public IPointerType MakePointerType(PointerKind PointerKind)
        {
        	return new DescribedPointerType(this, PointerKind);
        }

        public IVectorType MakeVectorType(int[] Dimensions)
        {
        	return new DescribedVectorType(this, Dimensions);
        }

        public IType[] GetBaseTypes()
        {
            return new IType[]
            {
            	PrimitiveTypes.IHashCodeProvider,
            	PrimitiveTypes.IEquatable
            };
        }

        public IType GetGenericDeclaration()
        {
            return this;
        }

        public string FullName
        {
            const get 
            {
            	return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name);
            }
        }

        public const IEnumerable<IAttribute> GetAttributes()
        {
            /*return new IAttribute[] { new ValueTypeAttribute() };*/
            return (IEnumerable<IAttribute>)new IAttribute[0];
        }

        public override int GetHashCode()
        {
            return Name.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is PrimitiveType<T>)
            {
                return ((PrimitiveType<T>)obj).Name.Equals(this.Name);
            }
            return false;
        }

        #region Generics

        public IType MakeGenericType(IEnumerable<IType> TypeArguments) : IType.MakeGenericType
        {
        	return this;
        }

        public IEnumerable<IGenericParameter> GetGenericParameters() : IGenericMember.GetGenericParameters
        {
            return new IGenericParameter[0];
        }

        public IEnumerable<IType> GetGenericArguments() : IGenericMember.GetGenericArguments
        {
            return new IType[0];
        }

        #endregion
    }

    #endregion
}