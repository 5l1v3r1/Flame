using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;

namespace Flame.Primitives
{
	#region PrimitiveType

	/// <summary>
	/// Defines an interface for types that have a constant bit-size.
	/// </summary>
	public interface IBitSizedType : IType
	{
		/// <summary>
		/// Gets this type's size, in bits.
		/// </summary>
		int BitSize { get; }
	}

	/// <summary>
	/// A base class for primitive types: types whose every detail is known
	/// to the compiler, including their size in bits.
	/// </summary>
	public virtual class PrimitiveType<T> : IBitSizedType
		where T : object
	{
        public const this(string Name, set int BitSize, set T DefaultValue)
		{
			this.Name = new SimpleName(Name);
			this.cachedMethods = new Lazy<IMethod[]>(CreateMethods);
			this.cachedProperties = new Lazy<IProperty[]>(CreateProperties);
			this.cachedFields = new Lazy<IField[]>(CreateFields);
			this.attrMap = AttributeMap.Empty;
		}
		public const this(
			string Name, set int BitSize, set T DefaultValue,
			bool IsValueType)
		{
			this.Name = new SimpleName(Name);
			this.cachedMethods = new Lazy<IMethod[]>(CreateMethods);
			this.cachedProperties = new Lazy<IProperty[]>(CreateProperties);
			this.cachedFields = new Lazy<IField[]>(CreateFields);
			if (IsValueType)
			{
				this.attrMap = new AttributeMap(new IAttribute[]
				{
					PrimitiveAttributes.ValueTypeAttribute
				});
			}
			else
			{
				this.attrMap = AttributeMap.Empty;
			}
		}

		/// <summary>
		/// Gets this primitive type's size, in bits.
		/// </summary>
        public int BitSize { const get; private set; }

        public T DefaultValue { const get; private set; }
        public UnqualifiedName Name { const get; private set; }

        public INamespace DeclaringNamespace
        {
            const get return PrimitivesNamespace;
        }

		private Lazy<IMethod[]> cachedMethods;
		private Lazy<IProperty[]> cachedProperties;
		private Lazy<IField[]> cachedFields;
		private AttributeMap attrMap;

        protected IMethod[] GetCommonPrimitiveMethods()
        {
			// static const T Parse(string Value); where T is the current type
        	var parseMethod = new DescribedMethod("Parse", this, this, true);
        	parseMethod.AddParameter(
				new DescribedParameter("Value", PrimitiveTypes.String));
        	parseMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);

			// static bool TryParse(string Value, out T^ Result); where T is the current type
			var tryParseMethod = new DescribedMethod(
				"TryParse", this, PrimitiveTypes.Boolean, true);
			tryParseMethod.AddParameter(
				new DescribedParameter("Value", PrimitiveTypes.String));
			var tryParseOutParam = new DescribedParameter(
				"Result", this.MakePointerType(PointerKind.ReferencePointer));
			tryParseOutParam.AddAttribute(PrimitiveAttributes.OutAttribute);
			tryParseMethod.AddParameter(tryParseOutParam);

            return new IMethod[]
            {
                new PrimitiveMethod(
					this, "ToString", false,
					PrimitiveTypes.String, new IParameter[0]),
                new GetHashCodeImplementation<T>(this),
                new EqualsImplementation<T>(this),
                parseMethod,
				tryParseMethod
            };
        }

		public [IMethod] Methods
		{
			const get return cachedMethods.Value;
		}
		public [IField] Fields
		{
			const get return cachedFields.Value;
		}
		public [IProperty] Properties
		{
			const get return cachedProperties.Value;
		}

        protected virtual IMethod[] CreateMethods()
        {
			return GetCommonPrimitiveMethods();
        }

        protected virtual IProperty[] CreateProperties()
        {
            return new IProperty[0];
        }

        protected virtual IField[] CreateFields()
        {
            return new IField[0];
        }

        public IBoundObject GetDefaultValue()
        {
            return new BoundPrimitive<T>(this, DefaultValue);
        }

        public [IType] BaseTypes
        {
            const get return new IType[]
            {
            	PrimitiveTypes.IHashable,
            	PrimitiveTypes.IEquatable
            };
        }

        public QualifiedName FullName
        {
            const get
			{
				return Name.Qualify(DeclaringNamespace.FullName);
			}
        }

        public AttributeMap Attributes
        {
            const get { return attrMap; }
        }

        public [IGenericParameter] GenericParameters
        {
            const get return new IGenericParameter[0];
        }

		public IAncestryRules AncestryRules
		{
			const get { return DefinitionAncestryRules; }
		}

		public override string ToString()
		{
			return FullName.ToString();
		}
    }

    #endregion
}
