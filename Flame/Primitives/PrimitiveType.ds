using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;

namespace Flame.Primitives
{
	#region PrimitiveType

	public virtual class PrimitiveType<T> : IType
	{
        public const this(set string Name, set int32 Magnitude, set T DefaultValue)
		{
			this.cachedMethods    = new Lazy<IMethod[]>(CreateMethods);
			this.cachedProperties = new Lazy<IProperty[]>(CreateProperties);
			this.cachedFields     = new Lazy<IField[]>(CreateFields);
		}

        public int32 Magnitude { const get; private set; }
        public T DefaultValue { const get; private set; }
        public string Name { const get; private set; }

        public INamespace DeclaringNamespace
        {
            const get return PrimitivesNamespace;
        }

		private Lazy<IMethod[]> cachedMethods;
		private Lazy<IProperty[]> cachedProperties;
		private Lazy<IField[]> cachedFields;

        protected IMethod[] GetCommonPrimitiveMethods()
        {
        	var parseMethod = new DescribedMethod("Parse", this, this, true); // static const T Parse(string Value); where T is the current type
        	parseMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
        	parseMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);

            return new IMethod[]
            {
                new PrimitiveMethod(this, "ToString", false, PrimitiveTypes.String, new IParameter[0]),
                new GetHashCodeImplementation<T>(this),
                new EqualsImplementation<T>(this),
                parseMethod
            };
        }

		public [IMethod] Methods
		{
			const get return cachedMethods.Value;
		}
		public [IField] Fields
		{
			const get return cachedFields.Value;
		}
		public [IProperty] Properties
		{
			const get return cachedProperties.Value;
		}

        protected virtual IMethod[] CreateMethods()
        {
			return GetCommonPrimitiveMethods();
        }

        protected virtual IProperty[] CreateProperties()
        {
            return new IProperty[0];
        }

        protected virtual IField[] CreateFields()
        {
            return new IField[0];
        }

        public IBoundObject GetDefaultValue()
        {
            return new BoundPrimitive<T>(this, DefaultValue);
        }

        public [IType] BaseTypes
        {
            const get return new IType[]
            {
            	PrimitiveTypes.IHashable,
            	PrimitiveTypes.IEquatable
            };
        }

        public string FullName
        {
            const get return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name);
        }

        public [IAttribute] Attributes
        {
            const get return new IAttribute[0];
        }

        public [IGenericParameter] GenericParameters
        {
            const get return new IGenericParameter[0];
        }

		public IAncestryRules AncestryRules
		{
			const get { return DefinitionAncestryRules; }
		}
    }

    #endregion
}
