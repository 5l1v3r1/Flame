using System;
using System.Collections.Generic;
using Flame.Build;

namespace Flame.Primitives
{
	/// <summary>
	/// A base type for primitive interfaces that are root types, and define nothing but methods.
	/// </summary>
	public abstract class MethodRootPrimitiveType : IType
	{
		public const this()
		{
			this.cachedMethods = new Lazy<IMethod[]>(CreateMethods);
		}

		public abstract string Name : IType.Name { const get; }
		protected abstract IMethod[] CreateMethods();

		public string FullName : IType.FullName { const get return "System." + Name; }

		public INamespace DeclaringNamespace
		{
			const get return PrimitivesNamespace;
		}

		public [IAttribute] Attributes
		{
			const get return new IAttribute[]
			{
				PrimitiveAttributes.InterfaceAttribute,
				PrimitiveAttributes.RootTypeAttribute
			};
		}

		private Lazy<IMethod[]> cachedMethods;
		public [IMethod] Methods
		{
			const get return cachedMethods.Value;
		}

		public [IProperty] Properties
		{
			const get return new IProperty[0];
		}
		public [IField] Fields
		{
			const get return new IField[0];
		}

		public const [IType] BaseTypes
		{
			const get return new IType[0];
		}

		public [IGenericParameter] GenericParameters
		{
			const get return new IGenericParameter[0];
		}
		
		public IAncestryRules AncestryRules
		{
			const get { return DefinitionAncestryRules; }
		}

		public const IBoundObject GetDefaultValue() : IType.GetDefaultValue
		{
			return null;
		}
	}
}
