using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;

namespace Flame.Primitives
{
	public class CharPrimitiveType : PrimitiveType<char>
	{
		public const this(string Name, int BitSize)
			: base(Name, BitSize, default(char));

		private IMethod[] createExtraCharMethods()
		{
			var isDigitMethod = new DescribedMethod("IsDigit", this, PrimitiveTypes.Boolean, true); // static const bool IsDigit(char Value);
        	isDigitMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
        	isDigitMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
        	var isLetterMethod = new DescribedMethod("IsLetter", this, PrimitiveTypes.Boolean, true); // static const bool IsLetter(char Value);
        	isLetterMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
        	isLetterMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
        	var isLetterOrDigitMethod = new DescribedMethod("IsLetterOrDigit", this, PrimitiveTypes.Boolean, true); // static const bool IsLetterOrDigit(char Value);
        	isLetterOrDigitMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
        	isLetterOrDigitMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
        	var isLowerMethod = new DescribedMethod("IsLower", this, PrimitiveTypes.Boolean, true); // static const bool IsLower(char Value);
        	isLowerMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
        	isLowerMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
        	var isUpperMethod = new DescribedMethod("IsUpper", this, PrimitiveTypes.Boolean, true); // static const bool IsUpper(char Value);
        	isUpperMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
        	isUpperMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
			var isWhitespaceMethod = new DescribedMethod("IsWhiteSpace", this, PrimitiveTypes.Boolean, true); // static const bool IsWhiteSpace(char Value);
			isWhitespaceMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
			isWhitespaceMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
			var toUpperMethod = new DescribedMethod("ToUpper", this, PrimitiveTypes.Char, true); // static const char ToUpper(char Value);
			toUpperMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
			toUpperMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
			var toLowerMethod = new DescribedMethod("ToLower", this, PrimitiveTypes.Char, true); // static const char ToLower(char Value);
			toLowerMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
			toLowerMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);

			return new IMethod[]
			{
				isDigitMethod,
				isLetterMethod,
				isLetterOrDigitMethod,
				isLowerMethod,
				isUpperMethod,
				isWhitespaceMethod,
				toUpperMethod,
				toLowerMethod
			};
		}

		protected override IMethod[] CreateMethods()
		{
			var commonMethods = this.GetCommonPrimitiveMethods();
			var extraMethods = this.createExtraCharMethods();
			return Enumerable.ToArray<IMethod>(Enumerable.Concat<IMethod>(commonMethods, extraMethods));
		}
	}
}
