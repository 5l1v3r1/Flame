using System;
using System.Collections.Generic;

namespace Flame
{
        #region PrimitiveMethod

        public virtual class PrimitiveMethod : IInvocableMethod
        {
        	protected const this()
        	{
        	    this.Attributes = new IAttribute[0];
        	}
            public const this(set IType DeclaringType, set string Name, set bool IsConstructor, set IType ReturnType, set [IParameter] Parameters)
            {
            	this.BaseMethods = new IMethod[0];
            	this.Attributes = new IAttribute[0];
            }
            public const this(set IType DeclaringType, set string Name, set bool IsConstructor, set IType ReturnType, set [IParameter] Parameters, set [IMethod] BaseMethods)
            {
            	this.Attributes = new IAttribute[0];
            }

            public string Name { const get; protected set; }
            public [IAttribute] Attributes { get; protected set; }
            public bool IsConstructor { const get; protected set; }

            public IType DeclaringType { const get; protected set; }

            public IType ReturnType { const get; protected set; }
            public [IParameter] Parameters { const get; protected set; }
            public [IMethod] BaseMethods { const get; protected set; }

            public virtual IBoundObject Invoke(IBoundObject Caller, [IBoundObject] Arguments)
                : IInvocableMethod.Invoke
            {
            	return null;
            }

            public bool IsStatic
            {
                const get { return false; }
            }

            public string FullName
            {
                get { return MemberExtensions.CombineNames(DeclaringType.FullName, Name); }
            }

            #region Generics

            public [IGenericParameter] GenericParameters
            {
                get { return new IGenericParameter[0]; }
            }

            #endregion
        }

        #endregion
}
