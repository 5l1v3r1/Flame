using System;
using System.Collections.Generic;

namespace Flame
{
        #region PrimitiveMethod

        public virtual class PrimitiveMethod : IMethod
        {
        	protected const this()
        	{
        	    this.Attributes = new IAttribute[0];
        	}
            public const this(set IType DeclaringType, set string Name, set bool IsConstructor, set IType ReturnType, set IParameter[] Parameters)
            {
            	this.BaseMethods = new IMethod[0];
            	this.Attributes = new IAttribute[0];
            }
            public const this(set IType DeclaringType, set string Name, set bool IsConstructor, set IType ReturnType, set IParameter[] Parameters, set IMethod[] BaseMethods)
            {
            	this.Attributes = new IAttribute[0];
            }

            public string Name { const get; protected set; }
            public IParameter[] Parameters { const get; protected set; }
            public IType ReturnType { const get; protected set; }
            public IType DeclaringType { const get; protected set; }
            public bool IsConstructor { const get; protected set; }
            public IMethod[] BaseMethods { const get; protected set; }

            public IParameter[] GetParameters()
            {
                return Parameters;
            }

            public virtual IBoundObject Invoke(IBoundObject Caller, IEnumerable<IBoundObject> Arguments) : IMethod.Invoke
            {
            	return null;
                //throw new NotImplementedException();
            }
            
            public const IMethod[] GetBaseMethods() : IMethod.GetBaseMethods
            {
            	return BaseMethods;
            }

            public bool IsStatic
            {
                const get { return false; }
            }

            public string FullName
            {
                get { return MemberExtensions.CombineNames(DeclaringType.FullName, Name); }
            }

			protected IAttribute[] Attributes;

            public IEnumerable<IAttribute> GetAttributes()
            {
            	return (IEnumerable<IAttribute>)Attributes;
            }

            #region Generics

            public IMethod MakeGenericMethod(IEnumerable<IType> TypeArguments)
            {
                /*if (TypeArguments.Count() == 0)
                {*/
                    return this;
                /*}
                else
                {
                	return null;
                    //throw new InvalidOperationException();
                }*/
            }

            public IMethod GetGenericDeclaration()
            {
                return this;
            }

            public IEnumerable<IGenericParameter> GetGenericParameters()
            {
                return new IGenericParameter[0];
            }

            public IEnumerable<IType> GetGenericArguments()
            {
                return new IType[0];
            }

            #endregion
        }

        #endregion
}