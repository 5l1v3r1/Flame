using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Flame
{
	public class GenericInstanceField : IField, IEquatable<IField>
	{
		public const this(set IField Field, set IGenericResolverType Parent)
		{
			this.DeclaringType = Parent;
		}
		public const this(set IField Field, set IGenericResolver Parent, set IType DeclaringType);

        /// <summary>
        /// Gets the generic instance field's original definition.
        /// </summary>
        public IField Field { const get; private set; }

        /// <summary>
        /// Gets the generic instance field's generic resolver.
        /// </summary>
        public IGenericResolver Parent { const get; private set; }

        /// <summary>
        /// Gets the generic instance field's declaring type.
        /// </summary>
        public IType DeclaringType { const get; private set; }

        public IType FieldType
        {
            const get { return Parent.ResolveType(Field.FieldType); }
        }
        public bool IsStatic
        {
            const get { return Field.IsStatic; }
        }

        public string FullName
        {
            const get { return MemberExtensions.CombineNames(DeclaringType.FullName, Field.Name); }
        }

        public [IAttribute] Attributes
        {
            const get { return Field.Attributes; }
        }

        public string Name
        {
            const get { return Field.Name; }
        }

        public override string ToString()
        {
            return FullName;
        }

        #region Equality

        public override const bool Equals(object Other)
        {
        	if (Other is IField)
        		return Equals((IField)Other);
        	else
				return false;
        }

        public const bool Equals(IField Other)
        {
        	if (Other is DescribedGenericFieldInstance)
        		return Equals((DescribedGenericFieldInstance)Other);
        	else
				return false;
        }

        public const bool Equals(DescribedGenericFieldInstance Other)
        {
        	return this.DeclaringType == Other.DeclaringType && this.Field == Other.Field;
        }

        public override const int GetHashCode()
        {
        	return this.DeclaringType.GetHashCode() ^ Field.GetHashCode();
        }

        #endregion
	}
}
