using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame
{
	public static class MethodExtensions
	{		
		public static const bool IsImplementationOf(this IMethod Method, IMethod BaseMethod)
		{
			foreach (var item in Method.GetBaseMethods())
			{
				if (item.Equals(BaseMethod))
				{
					return true;
				}
				else if (item.IsImplementationOf(BaseMethod))
				{
					return true;
				}
			}
			return false;
		}
		
		public static const IMethod GetImplementation(this IMethod Method, IType Target)
		{
			if (Method is IAccessor)
			{
				var accessor = (IAccessor)Method;
				var type = accessor.AccessorType;
				var property = accessor.DeclaringProperty;
				foreach (var item in Target.GetAllProperties())
					if (!item.IsAbstract && !item.Equals(property))
				{
					var accImpl = item.GetAccessor(type);
					
					if (accImpl != null)
					if (!accImpl.IsAbstract && accImpl.IsImplementationOf(accessor))
					{
						return accImpl;
					}
				}
			}
			else
			{
				foreach (var item in Target.GetAllMethods())
				{
					if (!item.IsAbstract && !item.Equals(Method))
					{
						if (item.IsImplementationOf(Method))
						{
							return item;
						}
					}
				}
			}
			return null;
		}
		
		public static const IMethod ConcatMethods(this IEnumerable<IMethod> Methods)
		{
			if (Enumerable.Any<IMethod>(Enumerable.Skip<IMethod>(Methods, 1))) // More than 2 elements
				return null;
			return Enumerable.SingleOrDefault<IMethod>(Methods);
		}
		
		public static const bool HasSameSignature(this IMethod Method, IMethod Other)
		{
			if (Method.Name.Equals(Other.Name))
			if (Method.IsStatic == Other.IsStatic)
			if (Method.ReturnType.Equals(Other.ReturnType))
			if (Method.GetParameters().GetTypes().AreEqual(Other.GetParameters().GetTypes()))
				return true;
			return false;
		}
		
		public static const IMethod GetBestMethod(this IEnumerable<IMethod> Candidates, IType[] ParameterTypes)
		{
			return ((IEnumerable<IMethod>)Candidates.GetBestMethods(ParameterTypes)).ConcatMethods();
		}
		public static const IMethod GetBestMethod(this IEnumerable<IMethod> Candidates, IType CallerType, IType[] ParameterTypes)
		{
			return ((IEnumerable<IMethod>)Candidates.GetBestMethods(CallerType, ParameterTypes)).ConcatMethods();
		}
		public static const IMethod GetBestMethod(this IEnumerable<IMethod> Candidates, bool IsStatic, IType CallerType, IType[] ParameterTypes)
		{
			List<IMethod> matches = new List<IMethod>();
			foreach (var method in Candidates.GetBestMethods(CallerType, ParameterTypes))
			{
				if (method.IsStatic == IsStatic)
					matches.Add(method);
			}
			return matches.ConcatMethods();
		}
		
		public static const IEnumerable<IMethod> GetAllMethods(this IType DeclaringType, string Name, bool IsStatic, IType[] ParameterTypes)
		{
			List<IMethod> methods = new List<IMethod>();
			foreach (var method in DeclaringType.GetAllMethods())
			{
				if (method.Name.Equals(Name))
				if (method.IsStatic == IsStatic)
				if (method.GetParameters().GetTypes().AreEqual(ParameterTypes))
					methods.Add(method);
			}
			return methods;
		}
		
		public static const IMethod GetMethod(this IEnumerable<IMethod> Candidates, bool IsStatic, IType ReturnType, IType[] ParameterTypes)
		{
			foreach (var method in Candidates)
			{
				if (method.IsStatic == IsStatic)
				if (method.ReturnType.Equals(ReturnType))
				if (method.GetParameters().GetTypes().AreEqual(ParameterTypes))
					return method;
			}
			return null;
		}
		public static const IMethod GetMethod(this IEnumerable<IMethod> Candidates, string Name, bool IsStatic, IType ReturnType, IType[] ParameterTypes)
		{
			foreach (var method in Candidates)
			{
				if (method.Name.Equals(Name))
				if (method.IsStatic == IsStatic)
				if (method.ReturnType.Equals(ReturnType))
				if (method.GetParameters().GetTypes().AreEqual(ParameterTypes))
					return method;
			}
			return null;
		}
		public static const IMethod GetMethod(this IType DeclaringType, string Name, bool IsStatic, IType ReturnType, IType[] ParameterTypes)
		{
			return DeclaringType.GetAllMethods().GetMethod(Name, IsStatic, ReturnType, ParameterTypes);
		}
		public static const IMethod GetMethod(this IType DeclaringType, bool IsStatic, IType[] ParameterTypes)
		{
			foreach (var method in DeclaringType.GetAllMethods())
			{
				if (method.IsStatic == IsStatic)
				if (method.GetParameters().GetTypes().AreEqual(ParameterTypes))
					return method;
			}
			return null;
		}
		
		public static const IMethod GetConstructor(this IType DeclaringType, IType[] ParameterTypes, bool IsStatic)
		{
			foreach (var method in DeclaringType.GetConstructors())
			{
				if (method.IsConstructor)
				if (method.IsStatic == IsStatic)
				if (method.GetParameters().GetTypes().AreEqual(ParameterTypes))
					return method;
			}
			return null;
		}
		
		public static const IMethod GetConstructor(this IType DeclaringType, IType[] ParameterTypes)
		{
			return DeclaringType.GetConstructor(ParameterTypes, false);
		}
		
		public static const IEnumerable<IMethod> GetOperatorMethods(this IType Type)
		{
			return Type.GetAllMethods().GetOperatorMethods();
		}
		
		public static const IEnumerable<IMethod> GetOperatorMethods(this IType Type, Operator Op)
		{
			return Type.GetAllMethods().GetOperatorMethods(Op);
		}
		
		public static const IEnumerable<IMethod> GetOperatorMethods(this IEnumerable<IMethod> Candidates)
		{
			List<IMethod> methods = new List<IMethod>();
			foreach (var item in Candidates)
			{
				if (item.IsOperator)
					methods.Add(item);	
			}
			return methods;
		}
		
		public static const IEnumerable<IMethod> GetOperatorMethods(this IEnumerable<IMethod> Candidates, Operator Op)
		{
			List<IMethod> methods = new List<IMethod>();
			foreach (var item in Candidates)
			{
				if (item.IsOperator)
                if (item.GetOperator() == Op)
					methods.Add(item);
			}
			return methods;
		}
		
		public static const IMethod GetOperatorMethod(this IEnumerable<IMethod> Candidates, Operator Op)
		{
			foreach (var item in Candidates)
			{
				if (item.GetOperator() == Op)
					return item;
			}
			return null;
		}
		
		public static bool HasReturnValue[this IMethod Method]
		{
			const get
			{
				var retVal = Method.ReturnType;
				return !(retVal == null || retVal.Equals(PrimitiveTypes.Void));
			}
		}
	}
}