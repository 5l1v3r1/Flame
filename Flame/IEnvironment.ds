using System;
using System.Collections.Generic;

namespace Flame
{
    /// <summary>
    /// Defines the environment for which a program is compiled. Such an environment consists
    /// mostly of the type system.
    /// </summary>
    public interface IEnvironment
    {
        /// <summary>
        /// Gets the environment's name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Gets the root type for this environment, if any.
        /// </summary>
        IType RootType { get; }

        /// <summary>
        /// Gets the generic enumerable type declaration for this environment, if any.
        /// </summary>
        IType EnumerableType { get; }

        /// <summary>
        /// Gets the generic enumerator type declaration for this environment, if any.
        /// </summary>
        IType EnumeratorType { get; }

        /// <summary>
        /// Gets a sequence of additional default base types for the given
        /// type. A sequence of already-picked base types is also given, which
        /// the environment will use instead of 'Type.BaseTypes'.
        /// </summary>
        IEnumerable<IType> GetDefaultBaseTypes(
            IType Type, IEnumerable<IType> CurrentBaseTypes);

        /// <summary>
        /// Gets the environment's equivalent of the given built-in type.
        /// </summary>
        /// <param name="Type">The built-in type for which the environment's equivalent is requested.</param>
        /// <returns>The environment's equivalent of the given type.
        /// <c>Type</c> is returned if the environment's equivalent is the same as the given type.</returns>
        /// <remarks>This allows a front-end to use environment-defined methods for primitive and
        /// collection types.</remarks>
        IType GetEquivalentType(IType Type);

        /// <summary>
        /// Gets the built-in type to which the given type is the environment's equivalent.
        /// </summary>
        /// <param name="Type">The environment type for which a builtin type is requested.</param>
        /// <returns>The built-in type for which the given type is the environment's equivalent.
        /// <c>Type</c> is returned if <c>Type<c/> is not an environment equivalent for a built-in type.</returns>
        /// <remarks>This allows a front-end to map environment-specific types to the built-in types they
        /// represent.</returns>
        IType GetBuiltinType(IType Type);
    }
}
