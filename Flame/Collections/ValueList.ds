using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame.Collections
{
    /// <summary>
    /// A growable list that is implemented as a value type.
    /// This type is mainly intended for use by other collection types,
    /// and is not a drop-in replacement for System.Collections.Generic.List.
    /// </summary>
    public struct ValueList<T>
    {
        public const this(int Capacity)
        {
            this.Items = new T[Capacity];
            this.Count = 0;
        }
        public const this(ValueList<T> Other)
        {
            this.Items = new T[Other.Count];
            this.Count = Other.Count;
            Array.Copy((Array)Other.Items, (Array)Items, Count);
        }
        public const this([T] Values)
        {
            this.Items = Enumerable.ToArray<T>(Values);
            this.Count = this.Items.Length;
        }

        /// <summary>
        /// Gets the backing array for this list.
        /// </summary>
        public T[] Items { get; private set; }

        /// <summary>
        /// Gets the number of items in this list.
        /// </summary>
        public int Count { get; private set; }

        /// <summary>
        /// Gets the size of this list's backing array.
        /// </summary>
        public int Capacity { get { return Items.Length; } }

        /// <summary>
        /// Gets the element at the given index in this list.
        /// </summary>
        public T this[int Index]
        {
            get
            {
                var itemArr = Items;
                return itemArr[Index];
            }
            set
            {
                var itemArr = Items;
                itemArr[Index] = value;
            }
        }

        /// <summary>
        /// Appends the given value to this list.
        /// </summary>
        public void Add(T Value)
        {
            int newCount = Count + 1;
            Reserve(newCount);
            var itemArr = Items;
            itemArr[newCount - 1] = Value;
            Count = newCount;
        }

        /// <summary>
        /// Removes the element at the given index. All values to the right
        /// of the given index are shifted one position to the left.
        /// </summary>
        public void RemoveAt(int Index)
        {
            for (int i = Index + 1; i < Count; i++)
            {
                this[i - 1] = this[i];
            }
            this.Count--;
        }

        /// <summary>
        /// Appends the given value list to this list.
        /// </summary>
        public void AddRange(ValueList<T> Values)
        {
            int oldCount = Count;
            int newCount = oldCount + Values.Count;
            Reserve(newCount);
            var itemArr = Items;
            for (int i = 0; i < Values.Count; i++)
            {
                itemArr[oldCount + i] = Values[i];
            }
            Count = newCount;
        }

        /// <summary>
        /// Minimizes at least the given capacity in this list.
        /// </summary>
        public void Reserve(int MinimalCapacity)
        {
            int cap = Capacity;
            if (MinimalCapacity <= cap)
                return;

            int newCapacity = cap;

            // Always resize to at least four items.
            if (newCapacity <= 4)
                newCapacity = 4;

            // Grow the new capacity exponentially.
            while (newCapacity < MinimalCapacity)
                newCapacity += newCapacity;

            var newArray = new T[newCapacity];
            Array.Copy((Array)Items, (Array)newArray, Count);
            Items = newArray;
        }
    }
}
