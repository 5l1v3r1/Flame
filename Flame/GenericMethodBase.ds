using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;

namespace Flame
{
    /// <summary>
    /// Defines a base class for generic method instances.
    /// </summary>
    public abstract class GenericMethodBase : IMethod
    {
        public const this(set IMethod Declaration)
        {
            this.cachedRetType = new Lazy<IType>(createReturnType);
            this.cachedParameters = new Lazy<IParameter[]>(createParameters);
            this.cachedBaseTypes = new Lazy<IMethod[]>(createBaseMethods);
        }

        /// <summary>
        /// Gets the method definition this generic instance is based on.
        /// </summary>
        public IMethod Declaration { const get; private set; }

        /// <summary>
        /// Gets the generic resolver that belongs to this generic method.
        /// </summary>
        public abstract IGenericResolver Resolver { get; }

        /// <summary>
        /// Gets name of this generic method.
        /// </summary>
        public abstract string Name { get; }

        /// <summary>
        /// Gets this generic method's declaring type.
        /// </summary>
        public abstract IType DeclaringType { get; }

        public bool IsStatic { get return Declaration.IsStatic; }
        public bool IsConstructor { get return Declaration.IsConstructor; }

        public string FullName
        {
            get { return MemberExtensions.CombineNames(DeclaringType.FullName, Name); }
        }

        public [IAttribute] Attributes
        {
            get { return Declaration.Attributes; }
        }

        public [IGenericParameter] GenericParameters
        {
            const get { return Declaration.GenericParameters; }
        }

        private Lazy<IType> cachedRetType;
        public IType ReturnType
        {
            get { return cachedRetType.Value; }
        }
        private IType createReturnType()
        {
            return Resolver.ResolveType(Declaration.ReturnType);
        }

        private Lazy<IParameter[]> cachedParameters;
        public [IParameter] Parameters
        {
            get { return cachedParameters.Value; }
        }
        private IParameter[] createParameters()
        {
            return Enumerable.ToArray<IParameter>(Resolver.ResolveParameters(Declaration.Parameters));
        }

        private Lazy<IMethod[]> cachedBaseTypes;
        public [IMethod] BaseMethods
        {
            const get { return cachedBaseTypes.Value; }
        }
        private IMethod[] createBaseMethods()
        {
            return Enumerable.ToArray<IMethod>(Resolver.ResolveMethods(Declaration.BaseMethods));
        }

        public IBoundObject Invoke(IBoundObject Caller, [IBoundObject] Arguments)
        {
            return null;
        }

        public override string ToString()
        {
            return FullName;
        }
    }
}
