using System;
using System.Collections.Generic;
using System.Text;

namespace Flame
{
	public static class NamespaceTreeExtensions
	{
		public static bool IsEmptyString(string Value)
		{
			if (Value == null)
				return true;
			else
				return Value.Length <= 0;
		}

		public static const IReadOnlyList<IType> GetAllTypes(this INamespaceTree Tree)
		{
			var types = new List<IType>();
			if (Tree is INamespace)
			{
				types.AddRange(((INamespace)Tree).Types);
			}
			foreach (var item in Tree.Namespaces)
				types.AddRange(item.GetAllTypes());
			return types;
		}

		#region General Search

        public static IType FindType(this INamespaceTree Tree, string Name)
        {
            string[] splitName = Name.Split(new char[] { '.' });
            return Tree.FindType(splitName, 0);
        }

        private static IType FindType(this INamespaceTree Tree, string[] NameElements, int Index)
        {
            if (Tree is INamespaceBranch)
            {
                return ((INamespaceBranch)Tree).FindTypeInBranch(NameElements, Index);
            }
            else
            {
                return Tree.FindTypeInChildren(NameElements, Index);
            }
        }

        #endregion

        #region Children

        private static IType FindTypeInChildren(this INamespaceTree Tree, string[] NameElements, int Index)
        {
            foreach (var item in Tree.Namespaces)
            {
                string[] itemName = item.FullName.Split(new char[] { '.' });

                if (Index < itemName.Length)
                {
                    IType type = null;
                    if (NameElements[Index].Equals(itemName[Index]))
                    {
                        type = item.FindTypeInBranch(NameElements, Index + 1);
                    }
                    else if (NamespaceTreeExtensions.IsEmptyString(itemName[Index]))
                    {
                        type = item.FindTypeInBranch(NameElements, Index);
                    }
                    if (type != null)
                    {
                        return type;
                    }
                }
            }
            return null;
        }

        #endregion

        #region Branch Search

        private static IType FindTypeInBranch(this INamespaceBranch Namespace, string[] NameElements, int Index)
        {
            foreach (var item in Namespace.Types)
            {
                if (NameElements[Index].Equals(item.Name))
                {
                    if (Index == NameElements.Length - 1)
                    {
                        return item;
                    }
                    else if (item is INamespaceTree)
                    {
                        return ((INamespaceTree)item).FindType(NameElements, Index);
                    }
                }
            }
            return Namespace.FindTypeInChildren(NameElements, Index);
        }

        #endregion
	}
}
