using System;
using System.Numerics;

namespace Flame
{
    /// <summary>
    /// Describes the size and signedness of an integer. Signed integers are
    /// assumed to use a two's complement scheme.
    /// </summary>
    public class IntegerSpec : IEquatable<IntegerSpec>
    {
        /// <summary>
        /// Creates an integer size from the given number of bits,
        /// and signedness.
        /// </summary>
        public this(set int Size, set bool IsSigned)
            in { Size > 0 }
        {
            this.UnsignedModulus = BigInteger.Pow(new BigInteger((int)2), Size);
            this.Modulus = BigInteger.Pow(new BigInteger((int)2), DataSize);
            this.MaxValue = BigInteger.Subtract(Modulus, BigInteger.One);
            this.AllOnes = BigInteger.Subtract(this.UnsignedModulus, BigInteger.One);

            if (IsSigned)
            {
                this.MinValue = BigInteger.Negate(Modulus);
            }
            else
            {
                this.MinValue = BigInteger.Zero;
            }
        }

        /// <summary>
        /// Gets the number of bits this integer represents, minus the sign
        /// bit, if there is a sign bit.
        /// </summary>
        public int DataSize
        {
            get
            {
                if (IsSigned)
                    return Size - 1;
                else
                    return Size;
            }
        }

        /// <summary>
        /// Gets the integer size, in bits.
        /// </summary>
        public int Size { get; private set; }

        /// <summary>
        /// Gets a boolean value that tells
        /// </summary>
        public bool IsSigned { get; private set; }

        /// <summary>
        /// Gets the biggest integer for this spec.
        /// </summary>
        public BigInteger MaxValue { get; private set; }

        /// <summary>
        /// Gets the smallest integer for this spec.
        /// </summary>
        public BigInteger MinValue { get; private set; }

        /// <summary>
        /// Gets the modulus for this integer spec: two to the power
        /// of the number of data bits.
        /// </summary>
        public BigInteger Modulus { get; private set; }

        /// <summary>
        /// Gets the modulus for this integer spec: two to the power
        /// of the number of total bits.
        /// </summary>
        public BigInteger UnsignedModulus { get; private set; }

        /// <summary>
        /// Gets the unsigned all-ones bitwise integer pattern for this
        /// integer spec. This corresponds to the unsigned modulus minus one.
        /// </summary>
        public BigInteger AllOnes { get; private set; }

        /// <summary>
        /// Checks if the given integer is representible by an integer
        /// value that adheres to this spec.
        /// </summary>
        public bool IsRepresentible(BigInteger Value)
        {
            return Value.CompareTo(MinValue) >= 0 && Value.CompareTo(MaxValue) <= 0;
        }

        /// <summary>
        /// Casts the given unsigned integer to match this spec.
        /// </summary>
        private BigInteger CastUnsigned(BigInteger Value)
            in { Value.Sign >= 0 }
        {
            // We're dealing with a positive integer, so first, we'll make
            // sure it fits in the number of bits we have.
            var remainder = BigInteger.Remainder(Value, UnsignedModulus);
            if (remainder.CompareTo(MaxValue) > 0)
                // We're dealing with two's complement here.
                return BigInteger.Subtract(BigInteger.Remainder(remainder, Modulus), Modulus);
            else
                // Unsigned number. Just return the remainder.
                return remainder;
        }

        /// <summary>
        /// Casts the given integer, which currently matches the given spec,
        /// to match this spec.
        /// </summary>
        public BigInteger Cast(BigInteger Value, IntegerSpec ValueSpec)
            out (result) { IsRepresentible(result) }
        {
            if (IsRepresentible(Value))
                // This performs basic sign/zero-extension, and handles identity
                // conversions.
                return Value;

            if (Size > ValueSpec.Size)
            {
                var spec = new IntegerSpec(Size, ValueSpec.IsSigned);
                assert(spec.IsRepresentible(Value));
                return Cast(Value, spec);
            }

            if (Value.Sign < 0)
                Value = BigInteger.Add(Value, ValueSpec.UnsignedModulus);

            return CastUnsigned(Value);
        }

        /// <summary>
        /// "Normalizes" the given value, by casting it to this integer spec,
        /// from this integer spec. The resulting of this operation will always be
        /// representible, but this need not be the case for the input value.
        /// </summary>
        public BigInteger Normalize(BigInteger Value)
            out (result) { IsRepresentible(result) }
            out (result) { !IsRepresentible(Value) || Value.Equals(result) }
        {
            return Cast(Value, this);
        }

        public bool Equals(IntegerSpec Other)
        {
            return Size == Other.Size && IsSigned == Other.IsSigned;
        }

        public override bool Equals(object Other)
        {
            return Other is IntegerSpec && Equals((IntegerSpec)Other);
        }

        public override int GetHashCode()
        {
            return ((int)IsSigned << 16) ^ Size;
        }

        public override string ToString()
        {
            return "{ Size : " + Size + ", IsSigned : " + IsSigned + " }";
        }

        static this()
        {
            i8 = new IntegerSpec(8, true);
            i16 = new IntegerSpec(16, true);
            i32 = new IntegerSpec(32, true);
            i64 = new IntegerSpec(64, true);
            u1 = new IntegerSpec(1, false);
            u8 = new IntegerSpec(8, false);
            u16 = new IntegerSpec(16, false);
            u32 = new IntegerSpec(32, false);
            u64 = new IntegerSpec(64, false);
        }

        private static IntegerSpec i8;
        private static IntegerSpec i16;
        private static IntegerSpec i32;
        private static IntegerSpec i64;
        private static IntegerSpec u1;
        private static IntegerSpec u8;
        private static IntegerSpec u16;
        private static IntegerSpec u32;
        private static IntegerSpec u64;

        /// <summary>
        /// Gets the integer spec for 1-bit unsigned integers.
        /// </summary>
        public static IntegerSpec UInt1 { get { return u1; } }

        /// <summary>
        /// Gets the integer spec for 8-bit signed integers.
        /// </summary>
        public static IntegerSpec Int8 { get { return i8; } }

        /// <summary>
        /// Gets the integer spec for 8-bit unsigned integers.
        /// </summary>
        public static IntegerSpec UInt8 { get { return u8; } }

        /// <summary>
        /// Gets the integer spec for 16-bit signed integers.
        /// </summary>
        public static IntegerSpec Int16 { get { return i16; } }

        /// <summary>
        /// Gets the integer spec for 16-bit unsigned integers.
        /// </summary>
        public static IntegerSpec UInt16 { get { return u16; } }

        /// <summary>
        /// Gets the integer spec for 32-bit signed integers.
        /// </summary>
        public static IntegerSpec Int32 { get { return i32; } }

        /// <summary>
        /// Gets the integer spec for 32-bit unsigned integers.
        /// </summary>
        public static IntegerSpec UInt32 { get { return u32; } }

        /// <summary>
        /// Gets the integer spec for 64-bit signed integers.
        /// </summary>
        public static IntegerSpec Int64 { get { return i64; } }

        /// <summary>
        /// Gets the integer spec for 64-bit unsigned integers.
        /// </summary>
        public static IntegerSpec UInt64 { get { return u64; } }
    }

    /// <summary>
    /// Describes an integer value that adheres to an integer spec.
    /// </summary>
    public class IntegerValue : IComparable<IntegerValue>, IEquatable<IntegerValue>, IComparable
    {
        /// <summary>
        /// Creates an integer value from the given integer and an integer spec.
        /// </summary>
        public this(set BigInteger Value, set IntegerSpec Spec)
            in { Spec != null }
        { }

        /// <summary>
        /// Creates an integer value that wraps the given boolean.
        /// </summary>
        public this(bool Value)
        {
            this.Spec = IntegerSpec.UInt1;
            if (Value)
                this.Value = BigInteger.One;
            else
                this.Value = BigInteger.Zero;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(sbyte Value)
        {
            this.Value = new BigInteger((int)Value);
            this.Spec = IntegerSpec.Int8;
        }

        /// <summary>
        /// Creates an integer value that wraps the given cbaracter value.
        /// </summary>
        public this(char Value)
        {
            this.Value = new BigInteger((int)Value);
            this.Spec = IntegerSpec.UInt16;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(short Value)
        {
            this.Value = new BigInteger((int)Value);
            this.Spec = IntegerSpec.Int16;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(int Value)
        {
            this.Value = new BigInteger(Value);
            this.Spec = IntegerSpec.Int32;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(long Value)
        {
            this.Value = new BigInteger(Value);
            this.Spec = IntegerSpec.Int64;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(byte Value)
        {
            this.Value = new BigInteger((int)Value);
            this.Spec = IntegerSpec.UInt8;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(ushort Value)
        {
            this.Value = new BigInteger((int)Value);
            this.Spec = IntegerSpec.UInt16;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(uint Value)
        {
            this.Value = new BigInteger(Value);
            this.Spec = IntegerSpec.UInt32;
        }

        /// <summary>
        /// Creates an integer value that wraps the given integer.
        /// </summary>
        public this(ulong Value)
        {
            this.Value = new BigInteger(Value);
            this.Spec = IntegerSpec.UInt64;
        }

        /// <summary>
        /// Gets this integer's value.
        /// </summary>
        public BigInteger Value { get; private set; }

        /// <summary>
        /// Gets this integer's spec, which defines its size and signedness.
        /// </summary>
        public IntegerSpec Spec { get; private set; }

        /// <summary>
        /// Checks if this value is valid, i.e. it conforms to the given
        /// spec.
        /// </summary>
        public bool IsValid
        {
            get { return Spec.IsRepresentible(Value); }
        }

        /// <summary>
        /// Gets a normalized value. A normalized value will always conform
        /// to the integer spec.
        /// </summary>
        public IntegerValue Normalized
        {
            get { return new IntegerValue(Spec.Normalize(Value), Spec); }
        }

        /// <summary>
        /// Gets the negated value of this integer. This may or may not
        /// be representible by the integer spec this value adheres to.
        /// </summary>
        public IntegerValue Negated
        {
            get { return new IntegerValue(BigInteger.Negate(Value), Spec); }
        }

        /// <summary>
        /// Gets the one's complement of this integer.
        /// </summary>
        public IntegerValue OnesComplement
        {
            get { return new IntegerValue(BigInteger.op_OnesComplement(Value), Spec); }
        }

        /// <summary>
        /// Extends or wraps this integer to match the given number of bits.
        /// </summary>
        public IntegerValue CastSize(int Size)
            out (result) { result.IsValid }
        {
            return Cast(new IntegerSpec(Size, Spec.IsSigned));
        }

        /// <summary>
        /// Extends or wraps this integer to match the given signedness.
        /// </summary>
        public IntegerValue CastSignedness(bool IsSigned)
            out (result) { result.IsValid }
        {
            return Cast(new IntegerSpec(Spec.Size, IsSigned));
        }

        /// <summary>
        /// Casts this integer value to match the given spec.
        /// </summary>
        public IntegerValue Cast(IntegerSpec NewSpec)
            out (result) { result.Spec.Equals(NewSpec) }
            out (result) { result.IsValid }
        {
            return new IntegerValue(NewSpec.Cast(Value, Spec), NewSpec);
        }

        /// <summary>
        /// Adds the given integer to this integer.
        /// The result retains this integer's spec.
        /// </summary>
        public IntegerValue Add(IntegerValue Other)
        {
            return new IntegerValue(BigInteger.Add(Value, Other.Value), Spec);
        }

        /// <summary>
        /// Subtracts the given integer from this integer.
        /// The result retains this integer's spec.
        /// </summary>
        public IntegerValue Subtract(IntegerValue Other)
        {
            return new IntegerValue(BigInteger.Subtract(Value, Other.Value), Spec);
        }

        /// <summary>
        /// Multiplies the given integer with this integer.
        /// The result retains this integer's spec.
        /// </summary>
        public IntegerValue Multiply(IntegerValue Other)
        {
            return new IntegerValue(BigInteger.Multiply(Value, Other.Value), Spec);
        }

        /// <summary>
        /// Divides this integer by the given integer.
        /// The result retains this integer's spec.
        /// </summary>
        public IntegerValue Divide(IntegerValue Other)
        {
            return new IntegerValue(BigInteger.Divide(Value, Other.Value), Spec);
        }

        /// <summary>
        /// Computes the remainder of the division of this integer by the given
        /// integer. The result retains this integer's spec.
        /// </summary>
        public IntegerValue Remainder(IntegerValue Other)
        {
            return new IntegerValue(BigInteger.Remainder(Value, Other.Value), Spec);
        }

        /// <summary>
        /// Applies the bitwise 'and' operator to this integer and the given
        /// other integer. The result retains this integer's spec.
        /// </summary>
        public IntegerValue BitwiseAnd(IntegerValue Other)
        {
            return new IntegerValue(Value & Other.Value, Spec);
        }

        /// <summary>
        /// Applies the bitwise 'or' operator to this integer and the given
        /// other integer. The result retains this integer's spec.
        /// </summary>
        public IntegerValue BitwiseOr(IntegerValue Other)
        {
            return new IntegerValue(Value | Other.Value, Spec);
        }

        /// <summary>
        /// Applies the bitwise 'xor' operator to this integer and the given
        /// other integer. The result retains this integer's spec.
        /// </summary>
        public IntegerValue BitwiseXor(IntegerValue Other)
        {
            return new IntegerValue(Value ^ Other.Value, Spec);
        }

        /// <summary>
        /// Applies the bitwise left shift operator to this integer and the given
        /// other integer. The result retains this integer's spec.
        /// </summary>
        public IntegerValue ShiftLeft(IntegerValue Other)
        {
            // TODO: replace this with an operator application after upgrading
            // the D# compiler version.
            return new IntegerValue(
                BigInteger.Multiply(
                    Value,
                    BigInteger.Pow(new BigInteger((int)2), Other.ToInt32())),
                Spec);
        }

        /// <summary>
        /// Applies the bitwise right shift operator to this integer and the given
        /// other integer. The result retains this integer's spec.
        /// </summary>
        public IntegerValue ShiftRight(IntegerValue Other)
        {
            // TODO: replace this with an operator application after upgrading
            // the D# compiler version.
            return new IntegerValue(
                BigInteger.Divide(
                    Value,
                    BigInteger.Pow(new BigInteger((int)2), Other.ToInt32())),
                Spec);
        }

        /// <summary>
        /// Compares this integer value to the given integer value.
        /// </summary>
        public int CompareTo(IntegerValue Other)
        {
            return Value.CompareTo(Other.Value);
        }

        /// <summary>
        /// Compares this integer value to the given object.
        /// </summary>
        public int CompareTo(object Other)
        {
            if (Other == null)
                return 1;
            else
                return CompareTo((IntegerValue)Other);
        }

        private byte[] ToPaddedByteArray(IntegerSpec NewSpec, int ArraySize)
        {
            // FIXME: dsc doesn't support implicit/explicit conversion operators,
            // and this is an ugly workaround.

            byte[] byteArr = Cast(NewSpec).Value.ToByteArray();
            int byteArrSize = byteArr.Length;
            while (byteArrSize > 0 && byteArr[byteArrSize - 1] == (byte)0)
                byteArrSize--;

            byte[] paddedByteArr = new byte[ArraySize];

            if (BitConverter.IsLittleEndian)
            {
                for (int i = 0; i < byteArrSize; i++)
                    paddedByteArr[i] = byteArr[i];
            }
            else
            {
                for (int i = 0; i < byteArrSize; i++)
                    paddedByteArr[i + paddedByteArr.Length - byteArrSize] = byteArr[i];
            }

            return paddedByteArr;
        }

        /// <summary>
        /// Converts this integer value to an 8-bit unsigned integer.
        /// </summary>
        public byte ToUInt8()
        {
            return ToPaddedByteArray(IntegerSpec.UInt8, 1)[0];
        }

        /// <summary>
        /// Converts this integer value to an 8-bit signed integer.
        /// </summary>
        public sbyte ToInt8()
        {
            return (sbyte)ToUInt8();
        }

        /// <summary>
        /// Converts this integer value to a 16-bit unsigned integer.
        /// </summary>
        public ushort ToUInt16()
        {
            return BitConverter.ToUInt16(ToPaddedByteArray(IntegerSpec.UInt16, 2), 0);
        }

        /// <summary>
        /// Converts this integer value to a 16-bit signed integer.
        /// </summary>
        public short ToInt16()
        {
            return (short)ToUInt16();
        }

        /// <summary>
        /// Converts this integer value to a 32-bit unsigned integer.
        /// </summary>
        public uint ToUInt32()
        {
            return BitConverter.ToUInt32(ToPaddedByteArray(IntegerSpec.UInt32, 4), 0);
        }

        /// <summary>
        /// Converts this integer value to a 32-bit signed integer.
        /// </summary>
        public int ToInt32()
        {
            return (int)ToUInt32();
        }

        /// <summary>
        /// Converts this integer value to a 64-bit unsigned integer.
        /// </summary>
        public ulong ToUInt64()
        {
            return BitConverter.ToUInt64(ToPaddedByteArray(IntegerSpec.UInt64, 8), 0);
        }

        /// <summary>
        /// Converts this integer value to a 64-bit signed integer.
        /// </summary>
        public long ToInt64()
        {
            return (long)ToUInt64();
        }

        /// <summary>
        /// Converts this integer value to a 32-bit floating point number.
        /// </summary>
        public float ToFloat32()
        {
            // HACK: this is not The Right Way to do this. Ideally, we'd
            // use the user-defined conversion operator in BigInteger, but
            // older versions of the D# compiler don't support that.
            // TODO: update the D# compiler after the next release, and
            // replace this with a proper user-defined conversion.
            return (float)ToInt64();
        }

        /// <summary>
        /// Converts this integer value to a 64-bit floating point number.
        /// </summary>
        public double ToFloat64()
        {
            // HACK: this is not The Right Way to do this. Ideally, we'd
            // use the user-defined conversion operator in BigInteger, but
            // older versions of the D# compiler don't support that.
            // TODO: update the D# compiler after the next release, and
            // replace this with a proper user-defined conversion.
            return (double)ToInt64();
        }

        public bool Equals(IntegerValue Other)
        {
            return Value.Equals(Other.Value) && Spec.Equals(Other.Spec);
        }

        public override bool Equals(object Other)
        {
            return Other is IntegerValue && Equals((IntegerValue)Other);
        }

        public override int GetHashCode()
        {
            return (Spec.GetHashCode() << 8) ^ Value.GetHashCode();
        }

        public override string ToString()
        {
            return "{ Value : " + Value + ", Size : " + Spec.Size + ", IsSigned : " + Spec.IsSigned + " }";
        }
    }
}
