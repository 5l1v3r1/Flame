using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Flame
{
    /// <summary>
    /// Describes common functionality for all generic constraints.
    /// </summary>
    public interface IGenericConstraint
    {
        /// <summary>
        /// Transforms the types in this generic constraint using the
        /// given type converter.
        /// </summary>
        IGenericConstraint Transform(IConverter<IType, IType> Converter);

        /// <summary>
        /// Gets a boolean value that indicates whether the given type argument
        /// satisfies the generic constraint.
        /// </summary>
        bool Satisfies(IType TypeArgument);
    }

    public static class GenericConstraintExtensions
    {
        /// <summary>
        /// Extracts all required base types from this generic constraint.
        /// </summary>
        public static const [IType] ExtractBaseTypes(this IGenericConstraint Constraint)
        {
            if (Constraint is TypeConstraint)
            {
                return new IType[] { ((TypeConstraint)Constraint).Type };
            }
            else if (Constraint is AndConstraint)
            {
                return ((AndConstraint)Constraint).Constraints.ExtractBaseTypes();
            }
            else
            {
                return Enumerable.Empty<IType>();
            }
        }

        /// <summary>
        /// Extracts all required base types from these generic constraints.
        /// </summary>
        public static const [IType] ExtractBaseTypes(this [IGenericConstraint] Constraints)
        {
            return Enumerable.Distinct<IType>(
                       Enumerable.SelectMany<IGenericConstraint, IType>(
                           Constraints,
                           ExtractBaseTypes));
        }

        /// <summary>
        /// Gets a boolean value that indicates if the generic constraint requires a constraint of type 'T' to be met.
        /// </summary>
        public static bool HasConstraint<T>(this IGenericConstraint Constraint)
        {
            if (Constraint is AndConstraint)
                return ((AndConstraint)Constraint).Constraints.HasConstraint<T>();
            else
                return Constraint is T;
        }

        /// <summary>
        /// Gets a boolean value that indicates if any of the given generic constraints require a constraint of type 'T' to be met.
        /// </summary>
        public static bool HasConstraint<T>(this [IGenericConstraint] Constraints)
        {
            return Enumerable.Any<IGenericConstraint>(Constraints, HasConstraint<T>);
        }
    }
}
