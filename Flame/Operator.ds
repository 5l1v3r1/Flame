using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace Flame
{
    /// <summary>
    /// Represents an operator type.
    /// </summary>
    public struct Operator
    {
        private this(set int typeIndex);
        public this(Operator Other)
        {
            this.typeIndex = Other.typeIndex;
        }

        // The index of this operator in the typeNames list. This index is
        // one-based, not zero-based (because that makes more sense for
        // `default(Operator)`)
        private int typeIndex;

        /// <summary>
        /// Gets a boolean value that tells if this operator is a defined
        /// operator or not.
        /// </summary>
        public bool IsDefined
        {
            get { return typeIndex > 0; }
        }

        /// <summary>
        /// Gets this operator's name.
        /// </summary>
        public string Name
        {
            get
            {
                if (IsDefined)
                {
                    string result;
                    rwLock.EnterReadLock();
                    try
                    {
                        // typeIndex is one-based, so we'll have to decrement
                        // it before retrieving the operator type's name.
                        result = typeNames[typeIndex - 1];
                    }
                    finally
                    {
                        rwLock.ExitReadLock();
                    }
                    return result;
                }
                else
                {
                    return null;
                }
            }
        }

        #region Equality

        public override int GetHashCode()
        {
            return typeIndex.GetHashCode();
        }

        public bool Equals(Operator Other)
        {
            return Other.typeIndex == typeIndex;
        }

        public override bool Equals(object obj)
        {
            if (obj is Operator)
            {
                return Equals((Operator)obj);
            }
            else
            {
                return false;
            }
        }

        #endregion

        #region ToString

        public override string ToString()
        {
            return Name;
        }

        #endregion

        #region Static

        #region Management

        static this()
        {
            typeNames = new List<string>();
            operatorDict = new Dictionary<string, Operator>();
            rwLock = new ReaderWriterLockSlim();
            RegisterAll(new Operator[]
            {
                Operator.Add, Operator.Subtract,
                Operator.Multiply, Operator.Divide, Operator.Remainder,
                Operator.LeftShift, Operator.RightShift,
                Operator.Or, Operator.And, Operator.Xor,
                Operator.LogicalOr, Operator.LogicalAnd,
                Operator.BitwiseComplement,
                Operator.CheckEquality, Operator.CheckInequality,
                Operator.CheckLessThan, Operator.CheckLessThanOrEqual,
                Operator.CheckGreaterThan, Operator.CheckGreaterThanOrEqual,
                Operator.Not, Operator.Hash, Operator.Concat,
                Operator.IsInstance, Operator.AsInstance,
                Operator.StaticCast, Operator.DynamicCast,
                Operator.Box, Operator.UnboxReference, Operator.UnboxValue,
                Operator.ReinterpretCast,
                Operator.ConvertImplicit, Operator.ConvertExplicit,
                Operator.GetDelegate, Operator.GetVirtualDelegate,
                Operator.GetCurriedDelegate,
                Operator.Increment, Operator.Decrement
            });
        }

        private static List<string> typeNames;
        private static Dictionary<string, Operator> operatorDict;
        private static ReaderWriterLockSlim rwLock;

        private static void RegisterAll(Operator[] Operators); // Does nothing. 'Operator' values are already registered.

        /// <summary>
        /// Returns the operator with the given name if it exists. If not,
        /// then a new operator is defined.
        /// </summary>
        public static Operator Register(string Name)
        {
            rwLock.EnterUpgradeableReadLock();
            Operator result;
            try
            {
                // Check if the operator has already been defined.
                if (!operatorDict.TryGetValue(Name, &result))
                {
                    rwLock.EnterWriteLock();
                    try
                    {
                        // Define the operator.
                        int index = typeNames.Count;
                        typeNames.Add(Name);
                        // Note: the typeIndex field is one-based, not
                        // zero-based.
                        result = new Operator(index + 1);
                        operatorDict[Name] = result;
                    }
                    finally
                    {
                        rwLock.ExitWriteLock();
                    }
                }
            }
            finally
            {
                rwLock.ExitUpgradeableReadLock();
            }
            return result;
        }

        /// <summary>
        /// Tests if an operator with the given name has been defined.
        /// </summary>
        public static bool IsOperator(string Operator)
        {
            rwLock.EnterReadLock();
            bool result;
            try
            {
                result = typeNames.Contains(Operator);
            }
            finally
            {
                rwLock.ExitReadLock();
            }
            return result;
        }

        /// <summary>
        /// Gets the operator with the given name, if it exists.
        /// </summary>
        public static bool TryGetOperator(string OperatorName, out Operator^ Result)
        {
            rwLock.EnterReadLock();
            bool result;
            try
            {
                result = operatorDict.TryGetValue(OperatorName, Result);
            }
            finally
            {
                rwLock.ExitReadLock();
            }
            return result;
        }

        /// <summary>
        /// Gets the operator with the given name, if it exists. Otherwise,
        /// returns the undefined operator.
        /// </summary>
        public static Operator GetOperator(string OperatorName)
        {
            if (TryGetOperator(OperatorName, &Operator result))
                return result;
            else
                return Undefined;
        }

        /// <summary>
        /// Tests if the given operator is a comparison operator.
        /// </summary>
        public static bool IsComparisonOperator(Operator Op)
        {
            int tIndex = Op.typeIndex;
            return tIndex == Operator.CheckEquality.typeIndex
                || tIndex == Operator.CheckInequality.typeIndex
                || tIndex == Operator.CheckGreaterThan.typeIndex
                || tIndex == Operator.CheckGreaterThanOrEqual.typeIndex
                || tIndex == Operator.CheckLessThan.typeIndex
                || tIndex == Operator.CheckLessThanOrEqual.typeIndex;
        }

        #endregion

        #region Common Accessors

        /// <summary>
        /// Gets the undefined operator.
        /// </summary>
        public static Operator Undefined
        {
            get
            {
                return default(Operator);
            }
        }

        public static Operator Add
        {
            get
            {
                return Register("+");
            }
        }

        public static Operator Subtract
        {
            get
            {
                return Register("-");
            }
        }

        public static Operator Multiply
        {
            get
            {
                return Register("*");
            }
        }

        public static Operator Divide
        {
            get
            {
                return Register("/");
            }
        }

        public static Operator Remainder
        {
            get
            {
                return Register("%");
            }
        }

        public static Operator CheckEquality
        {
            get
            {
                return Register("==");
            }
        }

        public static Operator CheckInequality
        {
            get
            {
                return Register("!=");
            }
        }

        public static Operator CheckGreaterThan
        {
            get
            {
                return Register(">");
            }
        }

        public static Operator CheckLessThan
        {
            get
            {
                return Register("<");
            }
        }

        public static Operator CheckGreaterThanOrEqual
        {
            get
            {
                return Register(">=");
            }
        }

        public static Operator CheckLessThanOrEqual
        {
            get
            {
                return Register("<=");
            }
        }

        public static Operator Not
        {
            get
            {
                return Register("!");
            }
        }

        /// <summary>
        /// Gets the bitwise complement operator symbol. Note that this symbol
        /// should only be used for user-defined operators: intrinsics use
        /// the logical complement operator.
        /// </summary>
        public static Operator BitwiseComplement
        {
            get
            {
                return Register("~");
            }
        }

        public static Operator Or
        {
            get
            {
                return Register("|");
            }
        }
        public static Operator LogicalOr
        {
            get
            {
                return Register("||");
            }
        }

        public static Operator And
        {
            get
            {
                return Register("&");
            }
        }
        public static Operator LogicalAnd
        {
            get
            {
                return Register("&&");
            }
        }

        public static Operator Xor
        {
            get
            {
                return Register("^");
            }
        }

        public static Operator LeftShift
        {
            get
            {
                return Register("<<");
            }
        }
        public static Operator RightShift
        {
            get
            {
                return Register(">>");
            }
        }
        public static Operator Hash
        {
            get
            {
                return Register("hash");
            }
        }
        public static Operator Concat
        {
            get
            {
                return Register("++");
            }
        }

        public static Operator Increment
        {
            get
            {
                return Register("+1");
            }
        }

        public static Operator Decrement
        {
            get
            {
                return Register("-1");
            }
        }

        /// <summary>
        /// An operator that tests if a given reference or pointer is of a specific type,
        /// and returns a boolean.
        /// This is equivalent to the C# `is` operator.
        /// </summary>
        public static Operator IsInstance
        {
            get
            {
                return Register("is_instance");
            }
        }

        /// <summary>
        /// An operator that returns the given given reference or pointer if it is
        /// of the given type. Otherwise, null is returned.
        /// This is equivalent to the C# `as` operator.
        /// </summary>
        public static Operator AsInstance
        {
            get
            {
                return Register("as_instance");
            }
        }

        /// <summary>
        /// A conversion operator that converts a given value to an equivalent value
        /// of a different type. User-defined conversions overload this operator.
        /// </summary>
        /// <example>
        /// <code>
        /// double x = 3.0;
        /// double i = (int)x;
        ///            ^~~~~
        /// </code>
        /// </example>
        public static Operator StaticCast
        {
            get
            {
                return Register("static_cast");
            }
        }

        /// <summary>
        /// Defines a dynamic cast operator, which performs a runtime check to
        /// determine if a given reference or pointer is of a given type.
        /// The given reference or pointer is returned if this is the case.
        /// Otherwise, an exception is thrown at runtime.
        /// </summary>
        public static Operator DynamicCast
        {
            get
            {
                return Register("dynamic_cast");
            }
        }

        /// <summary>
        /// Defines a reinterpret cast operator, which converts a reference or
        /// pointer type to another reference or pointer type. The operation is
        /// assumed to always succeed, and does not require a runtime check.
        /// </summary>
        public static Operator ReinterpretCast
        {
            get
            {
                return Register("reinterpret_cast");
            }
        }

        /// <summary>
        /// Creates a non-virtual delegate from a method and a closure value.
        /// Said closure value's type must be a subtype of the given method's
        /// declaring type.
        /// </summary>
        public static Operator GetDelegate
        {
            get
            {
                return Register("get_delegate");
            }
        }

        /// <summary>
        /// Creates a virtual delegate from a method and a closure value.
        /// Said closure value's type must be a subtype of the given method's
        /// declaring type.
        /// </summary>
        public static Operator GetVirtualDelegate
        {
            get
            {
                return Register("get_virtual_delegate");
            }
        }

        /// <summary>
        /// Creates a non-virtual delegate from a static method and a closure value,
        /// which is the method's first parameter. Said closure value's type need not
        /// be a subtype of the given method's declaring type. The resulting delegate
        /// will have one parameter fewer than the number of parameters the
        /// method it is based on.
        /// </summary>
        public static Operator GetCurriedDelegate
        {
            get
            {
                return Register("get_curried_delegate");
            }
        }

        /// <summary>
        /// Creates a boxed version of a value.
        /// </summary>
        public static Operator Box
        {
            get
            {
                return Register("box");
            }
        }

        /// <summary>
        /// Unboxes a boxed value, and returns a reference to the value in the
        /// box. This operator cannot be applied to reference types.
        /// </summary>
        public static Operator UnboxReference
        {
            get
            {
                return Register("unbox_ref");
            }
        }

        /// <summary>
        /// Unboxes a boxed value, and returns the value in the box.
        /// This is a no-op for reference types.
        /// </summary>
        public static Operator UnboxValue
        {
            get
            {
                return Register("unbox_val");
            }
        }

        /// <summary>
        /// A user-defined implicit conversion operator.
        /// </summary>
        public static Operator ConvertImplicit
        {
            get
            {
                return Register("convert_implicit");
            }
        }

        /// <summary>
        /// A user-defined explicit conversion operator.
        /// </summary>
        public static Operator ConvertExplicit
        {
            get
            {
                return Register("convert_explicit");
            }
        }

        #endregion

        #endregion
    }
}
