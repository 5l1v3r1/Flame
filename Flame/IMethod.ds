using System;
using System.Collections.Generic;

namespace Flame
{
    /// <summary>
    /// Defines a common interface for methods.
    /// </summary>
    public interface IMethod : ITypeMember, IGenericMember
    {
        /// <summary>
        /// Gets a boolean value that indicates if this method is a constructor.
        /// </summary>
        bool IsConstructor { get; }

        /// <summary>
        /// Gets the method's return type.
        /// </summary>
        IType ReturnType { get; }

        /// <summary>
        /// Gets the method's parameters.
        /// </summary>
        [IParameter] Parameters { get; }

        /// <summary>
        /// Gets the method's base methods.
        /// </summary>
        [IMethod] BaseMethods { get; }
    }

    /// <summary>
    /// Supplies an interface that defines invocable methods.
    /// </summary>
    public interface IInvocableMethod : IMethod
    {
        /// <summary>
        /// Invokes the method with the provided caller and arguments.
        /// </summary>
        /// <param name="Caller"></param>
        /// <param name="Arguments"></param>
        /// <returns>
        /// A bound object if the invocation was successful.
        /// Otherwise, null.
        /// </returns>
        IBoundObject Invoke(IBoundObject Caller, [IBoundObject] Arguments);
    }

    /// <summary>
    /// Defines common behavior for property accessor methods.
    /// </summary>
    public interface IAccessor : IMethod
    {
        /// <summary>
        /// Gets the accessor's type.
        /// </summary>
        AccessorType AccessorType { get; }

        /// <summary>
        /// Gets the property this accessor belongs to.
        /// </summary>
        IProperty DeclaringProperty { get; }
    }
}
