using System;

namespace Flame
{
	public interface IContainerType : IType
    {
        /// <summary>
        /// Gets the kind of container this type represents.
        /// </summary>
        ContainerTypeKind ContainerKind { get; }

        /// <summary>
        /// Gets the type of the object encompassed or referred to by the current container type.
        /// </summary>
        /// <returns></returns>
        IType GetElementType();

        /// <summary>
        /// Returns this type as an array type.
        /// </summary>
        /// <returns></returns>
        IArrayType AsArrayType();
        /// <summary>
        /// Returns this type as a pointer type.
        /// </summary>
        /// <returns></returns>
        IPointerType AsPointerType();
        /// <summary>
        /// Returns this type as a vector type.
        /// </summary>
        /// <returns></returns>
        IVectorType AsVectorType();
    }
    
    public interface IArrayType : IContainerType
    {
        /// <summary>
        /// Gets the number of dimensions in an array.
        /// </summary>
        int ArrayRank { get; }
    }
    
    /// <summary>
    /// Represents a pointer type: an integer that points to the location in memory of an object.
    /// </summary>
    public interface IPointerType : IContainerType
    {
        PointerKind PointerKind { get; }
    }
    
    /// <summary>
    /// Represents a vector type: an array with fixed dimensions.
    /// </summary>
    public interface IVectorType : IContainerType
    {
        /// <summary>
        /// Gets the vector's dimensions.
        /// </summary>
        int[] GetDimensions();
    }
}