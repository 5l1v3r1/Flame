using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;

namespace Flame
{
	public class GenericInstanceProperty : IProperty, IEquatable<IProperty>
    {
    	public const this(set IProperty Property, set IGenericResolver Resolver, set IType DeclaringType)
        {
            this.cachedAccessors = new Lazy<IAccessor>(createAccessors);
            this.cachedIndexerParameters = new Lazy<IParameter>(createIndexerParameters);
        }
        public const this(set IProperty Property, set IGenericResolverType Resolver)
        {
        	this.DeclaringType = Resolver;
            this.cachedAccessors = new Lazy<IAccessor>(createAccessors);
            this.cachedIndexerParameters = new Lazy<IParameter>(createIndexerParameters);
        }

        public IProperty Property { const get; private set; }
        public IGenericResolver Resolver { const get; private set; }
        public IType DeclaringType { const get; private set; }

        public IType PropertyType
        {
            const get { return Resolver.ResolveType(Property.PropertyType); }
        }
        public bool IsStatic
        {
            const get { return Property.IsStatic; }
        }

        public string FullName
        {
            const get { return MemberExtensions.CombineNames(DeclaringType.FullName, Property.Name); }
        }

        public string Name
        {
            const get { return Property.Name; }
        }

        public [IAttribute] Attributes
        {
            const get { return Property.Attributes; }
        }

        private Lazy<IAccessor[]> cachedAccessors;
        public [IAccessor] Accessors
        {
            const get { return cachedAccessors.Value; }
        }

        private IAccessor[] createAccessors()
        {
        	var results = new List<IAccessor>();
        	foreach (var input in Property.Accessors)
        	{
        		results.Add(new GenericInstanceAccessor(input, Resolver, this));
        	}
            return results;
        }

        private IParameter[] cachedIndexerParameters;
        public [IParameter] IndexerParameters
        {
            const get { return cachedIndexerParameters.Value; }
        }
        private IParameter[] createIndexerParameters()
        {
            return Enumerable.ToArray<IParameter>(Resolver.ResolveParameters(Property.IndexerParameters));
        }

        #region Equality

        public override const bool Equals(object Other)
        {
        	if (Other is IProperty)
        		return Equals((IProperty)Other);
        	else
                return false;
        }

        public const bool Equals(IProperty Other)
        {
        	if (Other is GenericInstanceProperty)
        		return Equals((GenericInstanceProperty)Other);
        	else
                return false;
        }

        public const bool Equals(DescribedGenericPropertyInstance Other)
        {
        	return this.DeclaringType == Other.DeclaringType && this.Property == Other.Property;
        }

        public override const int GetHashCode()
        {
        	return DeclaringType.GetHashCode() ^ Property.GetHashCode();
        }

        #endregion
	}
}
