using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;

namespace Flame
{
    /// <summary>
    /// Defines a generic type instantiation.
    /// </summary>
	public virtual class GenericType : GenericTypeBase, IGenericMemberInstance,
									   IGenericResolver, IEquatable<IType>
	{
        /// <summary>
        /// Creates a generic instantiation of the given type with the given
        /// type arguments.
        /// </summary>
		public const this(IType Declaration, set [IType] TypeArguments)
            : base(Declaration)
		{
			this.ancestryRules = new GenericAncestryRules(Declaration.AncestryRules);
		}

        /// <summary>
        /// Gets this generic instantiation's type arguments.
        /// </summary>
        public [IType] TypeArguments { const get; private set; }

		public override IGenericResolver Resolver { const get { return this; } }
		public override IType DeclaringType { const get { return Method.DeclaringType; } }

        public override string Name
        {
			const get { return GenericNameExtensions.AppendTypeArguments(Declaration.GetGenericFreeName(), TypeArguments.Names); }
        }

		private IAncestryRules ancestryRules;
		public override IAncestryRules AncestryRules
		{
			const get { return ancestryRules; }
		}

        public const IType ResolveTypeParameter(IGenericParameter TypeParameter)
        {
            foreach (var param in GenericParameters, var arg in TypeArguments)
            {
                if (TypeParameter.Equals(param))
                {
                    return arg;
                }
            }
            return TypeParameter;
        }

        #region Equality

        public override const bool Equals(object Other)
        {
        	if (Other is IType)
        		return Equals((IType)Other);
        	else
                return false;
        }

        public const bool Equals(IType Other)
        {
        	if (Other is GenericType)
        		return Equals((GenericType)Other);
            else
        	   return false;
        }

        public const bool Equals(GenericType Other)
        {
        	return this.Declaration == Other.Declaration &&
                   this.TypeArguments.AreEqual(Other.TypeArguments);
        }

        public override const int GetHashCode()
        {
            int result = DeclaringType.GetHashCode();
            foreach (var item in TypeArguments)
            {
                result = (result << 1) ^ item.GetHashCode();
            }
        	return result;
        }

        #endregion
	}
}
