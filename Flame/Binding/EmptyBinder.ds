using System;
using System.Collections.Generic;
using System.Linq;

namespace Flame.Binding
{
    public static class EmptyEnvironment : IEnvironment
    {
        public string Name { const get return ""; }

        public IType RootType { const get return null; }

        public IType EnumerableType { const get return null; }

        public IType EnumeratorType { const get return null; }

        public IEnumerable<IType> GetDefaultBaseTypes(
            IType Type, IEnumerable<IType> DefaultBaseTypes)
        {
            return Enumerable.Empty<IType>();
        }

        /// <inheritdoc/>
        public IType GetEquivalentType(IType Type)
        {
            return Type;
        }

        /// <inheritdoc/>
        public IType GetBuiltinType(IType Type)
        {
            return Type;
        }
    }

    /// <summary>
    /// A type binder implementation that defines no types.
    /// </summary>
    public class EmptyBinder : IBinder
    {
        /// <summary>
        /// Creates an empty binder with an empty environment.
        /// </summary>
        public this()
        {
            this.Environment = EmptyEnvironment;
        }

        /// <summary>
        /// Creates an empty binder from the given environment.
        /// </summary>
        public this(IEnvironment Environment)
        {
            this.Environment = Environment;
        }

        public IType BindType(QualifiedName Name) { return null; }
        public [IType] GetTypes() { return Enumerable.Empty<IType>(); }

        /// <inheritdoc/>
        public IEnvironment Environment { get; private set; }
    }
}
