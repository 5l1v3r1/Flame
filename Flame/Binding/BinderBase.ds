using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Flame
{
    public abstract class BinderBase : IBinder
    {
    	public const this();

    	/// <summary>
		/// Gets the environment for this binder.
		/// </summary>
        public abstract IEnvironment Environment : IBinder.Environment { get; }
        public abstract [IType] GetTypes() : IBinder.GetTypes;

        public abstract IType BindTypeCore(QualifiedName Name);

        public IType BindType(QualifiedName Name) : IBinder.BindType
        {
            if (Name.IsQualified)
                return BindTypeCore(Name);

            var unqualName = Name.Qualifier;
            if (unqualName is PointerName)
            {
                var ptrName = (PointerName)unqualName;
                var elemTy = BindType(ptrName.ElementName);
                if (elemTy == null)
                    return null;
                else
                    return elemTy.MakePointerType(ptrName.Kind);
            }
            else if (unqualName is ArrayName)
            {
                var arrName = (ArrayName)unqualName;
                var elemTy = BindType(arrName.ElementName);
                if (elemTy == null)
                    return null;
                else
                    return elemTy.MakeArrayType(arrName.Rank);
            }
            else if (unqualName is VectorName)
            {
                var vecName = (VectorName)unqualName;
                var elemTy = BindType(vecName.ElementName);
                if (elemTy == null)
                    return null;
                else
                    return elemTy.MakeVectorType(vecName.Dimensions);
            }
            else if (unqualName is GenericName)
            {
                var genName = (GenericName)unqualName;
                var elemTy = BindType(genName.DeclarationName);
                if (elemTy == null)
                    return null;

                var tArgs = new List<IType>();
                foreach (var item in genName.TypeArgumentNames)
                {
                    var resolvedTArg = BindType(item);
                    if (resolvedTArg == null)
                        return null;
                    tArgs.Add(resolvedTArg);
                }
                return elemTy.MakeGenericType(tArgs);
            }
            else
            {
                return BindTypeCore(Name);
            }
        }
    }
}
