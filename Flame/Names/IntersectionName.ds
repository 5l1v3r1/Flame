using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Flame
{
    /// <summary>
    /// Defines an intersection name: a name for intersection types.
    /// </summary>
    public class IntersectionName : UnqualifiedName, IEquatable<IntersectionName>
    {
        /// <summary>
        /// Creates a new intersection name from the given intersected names.
        /// </summary>
        public const this(set QualifiedName LeftName, set QualifiedName RightName);

        /// <summary>
        /// Gets the qualified name on the left of this intersection name.
        /// </summary>
        public QualifiedName LeftName { get; private set; }

        /// <summary>
        /// Gets the qualified name on the right of this intersection name.
        /// </summary>
        public QualifiedName RightName { get; private set; }

        public override string ToString()
        {
            return LeftName.ToString() + "&" + RightName.ToString();
        }

        public override bool Equals(IntersectionName Other)
        {
            return (LeftName.Equals(Other.LeftName)
                    && RightName.Equals(Other.RightName))
                || (LeftName.Equals(Other.RightName)
                    && RightName.Equals(Other.LeftName));
        }
        public override bool Equals(UnqualifiedName Other)
        {
            return Other is IntersectionName && Equals((IntersectionName)Other);
        }
        public override int GetHashCode()
        {
            return LeftName.GetHashCode() ^ RightName.GetHashCode();
        }
    }
}
