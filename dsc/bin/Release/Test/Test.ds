/// <summary>
/// Describes a generic list.
/// </summary>
public interface IList<T>
{
	/// <summary>
	/// Gets the length of the list.
	/// </summary>
	public int Length { const get; }

    /// <summary>
    /// Adds an item to the end of the list.
    /// </summary>
	public void Add(T Item);

	/// <summary>
	/// Inserts an item in the list at the specified position.
	/// </summary>
	public bool Insert(int Index, T Item);
}

/// <summary>
/// An array-based implementation of a list.
/// </summary>
public class List<T> : IList<T>
{
    /// <summary>
    /// Creates a new instance of a list.
    /// </summary>
    public const this();

    private T[] data = new T[5];
    private int count;
    public int Length { const get return count; }

    /// <summary>
    /// Adds an item to the end of the list.
    /// </summary>
    public void Add(T Item) : IList<T>.Add
    {
        if (Length >= data.Length)
        {
            var newData = new T[data.Length + 5];
            CopyTo(newData);
            this.data = newData;
        }
        this.data[this.count] = Item;
        this.count++;
    }

    public bool Insert(int Index, T Item)
    {
        if (Index == Length)
        {
            Add(Item);
            return true;
        }
        else if (Index < Length)
        {
            ShiftRight(Index);
            this.data[Index] = Item;
            this.count++;
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool RemoveAt(int Index)
    {
        if (Index > 0 && Index < Length)
        {
            ShiftLeft(Index);
            count--;
            return true;
        }
        else
        {
            return false;
            }
    }

                    private void ShiftRight(int StartIndex)
                    {
                        if (Length >= data.Length)
                        {
                            var newData = new T[data.Length + 5];
                            for (int i = 0; i < StartIndex; i++)
                            {
                                newData[i] = data[i];
                            }
                            for (int i = StartIndex; i < Length; i++)
                            {
                                newData[i + 1] = data[i];
                            }
                            this.data = newData;
                        }
                        else
                        {
                            for (int i = StartIndex; i < Length; i++)
                            {
                                this.data[i + 1] = data[i];
                            }
                        }
                    }
                    private void ShiftLeft(int StartIndex)
                    {
                        for (int i = StartIndex + 1; i < Length; i++)
                        {
                            this.data[i - 1] = data[i];
                        }
                    }

                    public void CopyTo(T[] Target)
                    {
                        foreach (var input in data, var output in Target)
                            output = input;
                    }

                    public const bool Contains(T Item)
                    {
                        for (int i = 0; i < Length; i++)
                        {
                            if (data[i] == Item)
                                return true;
                        }
                        return false;
                    }

                    public const T[] ToArray()
                    {
                        T[] arr = new T[Length];
                        CopyTo(arr);
                        return arr;
                    }
                }