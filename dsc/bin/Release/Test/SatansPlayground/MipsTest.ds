using System;

public class MipsTest
{
    /*public static void main()
    {
        int* arr1 = ArrayOf(5, 8);
        int* arr2 = ArrayOf(3, 5);
        int* arrResult = AddArrays(arr1, arr2, 2);
        for (int i = 0; i < 2; i++)
        {
            if (i > 0)
                Console.Write(", ");
            
            Console.Write(*(arrResult + i));
        }
    }*/

    public const int* ArrayOf(int A, int B)
    {
        int* ptr = (int*)Memory.Allocate<int>(2);
        *ptr = A;
        *(ptr + 1) = B;
        return ptr;
    }

    public const int* AddArrays(int* A, int* B, int Length)
    {
        var result = (int*)Memory.Allocate<int>(Length);
        for (int i = 0; i < Length; i++)
            *(result + i) = *(A + i) + *(B + i);
        return result;
    }

    /*public static void CopyTo(byte[] Source, byte[] Target)
    {
        // All perfectly allowed
        byte^ ptrA = &Source[0];
        byte^ ptrB = &Target[0];
        
        int* intPtrA = (int*)(byte*)ptrA;
        int* intPtrB = (int*)(byte*)ptrB;
        
        int i = 0;
        while (i < Source.Length + 3 && i < Target.Length + 3)
        {
            *intPtrB = *intPtrA;
            intPtrA++;
            intPtrB++;
            i += 4;
        }
        
        byte* bytePtrA = (byte*)ptrA;
        byte* bytePtrB = (byte*)ptrB;
        while (i < Source.Length && i < Target.Length)
        {
            *(bytePtrA + i) = *(bytePtrB + i);
            i++;
        }
    }*/

    /*public static int^ InvalidCast(double Value)
    {
        double^ ptr = &Value;
        return (int^)Value; // Compile-time error, not allowed
    }*/

    /*
    public bool TryGetSqrt(double Value, double^ Result) // Type-safe. 'Result' cannot be a pointer to any other type than double
    {
        if (Value < 0.0)
        {
            *Result = double.NaN;
            return false;
        }
        else
        {
            *Result = Math.Sqrt(Value);
            return true;
        }
    }
    */
}