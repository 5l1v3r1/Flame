using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Compiler.Variables
{
    public class PropertyVariable : IVariable
    {
        public const this(set IProperty Property)
        {
        	this.Caller = null;
        	this.IndexerArguments = new IExpression[0];
        }
        public const this(set IProperty Property, set IExpression Caller)
        {
        	this.IndexerArguments = new IExpression[0];
        }
        public const this(set IProperty Property, set IExpression Caller, set IEnumerable<IExpression> IndexerArguments);

        public IExpression Caller { const get; private set; }
        public IProperty Property { const get; private set; }
        public IEnumerable<IExpression> IndexerArguments { const get; private set; }

        public IType Type
        {
            const get { return Property.PropertyType; }
        }

        public IExpression CreateGetExpression()
        {
            //return new InvocationExpression(Property.GetGetAccessor(), Caller, IndexerArguments);
            return new PropertyGetExpression(this);
        }

        public IStatement CreateSetStatement(IExpression Value)
        {
        	var args = Enumerable.Concat<IExpression>(IndexerArguments, (IEnumerable<IExpression>)new IExpression[] { Value });
        	return new ExpressionStatement(new InvocationExpression(Property.GetSetAccessor(), Caller, args));
        }

        public IStatement CreateReleaseStatement()
        {
            return new EmptyStatement();
        }
    }
}