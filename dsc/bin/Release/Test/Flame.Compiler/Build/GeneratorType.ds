using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler.Expressions;

namespace Flame.Compiler
{
	/*public class GeneratorType : IType
	{
		public const this(set string Name, set INamespace DeclaringNamespace, set IEnvironment Environment, set IType ElementType);
	
		public IEnvironment Environment { const get; private set; }
		
		public IType ElementType { const get; private set; }
		public IType EnumeratorType { const get return Environment.EnumeratorType.MakeGenericType((IEnumerable<IType>)new IType[] { ElementType }); }
		
		public string Name { const get; private set; }
		public INamespace DeclaringNamespace { const get; private set; }
		public string FullName { const get return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name); }
		
		public const IEnumerable<IAttribute> GetAttributes()
		{
			return (IEnumerable<IAttribute>)new IAttribute[]
			{
				PrimitiveAttributes.HiddenAttribute
			};
		}
		
		public const IType[] GetBaseTypes()
		{
			return new IType[] { EnumeratorType };
		}
		
		public const IEnumerable<IType> GetGenericArguments()
		{
			return (IEnumerable<IType>)new IType[0];
		}
		public const IEnumerable<IGenericParameter> GetGenericParameters()
		{
			return (IEnumerable<IGenericParameter>)new IGenericParameter[0];
		}
		public const IType MakeGenericType(IEnumerable<IType> TypeArguments)
		{
			return this;
		}
		public const IType GetGenericDeclaration()
		{
			return this;
		}
		
		public const IArrayType MakeArrayType(int Rank)
		{
			return new DescribedArrayType(this, Rank);
		}
		public const IPointerType MakePointerType(PointerKind Kind)
		{
			return new DescribedPointerType(this, Kind);
		}
		public const IVectorType MakeVectorType(int[] Dimensions)
		{
			return new DescribedVectorType(Dimensions);
		}
		
		public bool IsContainerType
		{
			const get return false;
		}
		public const IContainerType AsContainerType()
		{
			return null;
		}
		
		public const IBoundObject GetDefaultValue()
		{
			return new NullExpression();
		}
	}*/
}