/// <summary>
/// An array-based implementation of a list.
/// </summary>
public class ArrayList<T> : IList<T>
{
    /// <summary>
    /// Creates a new instance of a list.
    /// </summary>
    public const this();

    private T[] data = new T[5];
    private int elemCount;
    public int Count { const get return elemCount; }
    
    /// <summary>
    /// Gets or sets the item in the list at the specified position.
    /// </summary>
    public T this[int Index]
    {
        const get
        {
            return data[Index];
        }
        set
        {
            data[Index] = value;
        }
    }

    /// <summary>
    /// Adds an item to the end of the list.
    /// </summary>
    public void Add(T Item) : IList<T>.Add
    {
        if (Count >= data.Length)
        {
            var newData = new T[data.Length + 5];
            CopyTo(newData);
            this.data = newData;
        }
        this.data[this.elemCount] = Item;
        this.elemCount++;
    }

    public bool Insert(int Index, T Item)
    {
        if (Index == Count)
        {
            Add(Item);
            return true;
        }
        else if (Index < Count)
        {
            ShiftRight(Index);
            this.data[Index] = Item;
            this.elemCount++;
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool RemoveAt(int Index)
    {
        if (Index >= 0 && Index < Count)
        {
            ShiftLeft(Index);
            elemCount--;
            return true;
        }
        else
        {
            return false;
            }
    }

                    private void ShiftRight(int StartIndex)
                    {
                        if (Count >= data.Length)
                        {
                            var newData = new T[data.Length + 5];
                            for (int i = 0; i < StartIndex; i++)
                            {
                                newData[i] = data[i];
                            }
                            for (int i = StartIndex; i < Count; i++)
                            {
                                newData[i + 1] = data[i];
                            }
                            this.data = newData;
                        }
                        else
                        {
                            for (int i = Count - 1; i >= StartIndex; i--)
                            {
                                this.data[i + 1] = data[i];
                            }
                        }
                    }
                    private void ShiftLeft(int StartIndex)
                    {
                        for (int i = StartIndex + 1; i < Count; i++)
                        {
                            this.data[i - 1] = data[i];
                        }
                    }

                    public void CopyTo(T[] Target)
                    {
                        foreach (var input in data, var output in Target)
                            output = input;
                    }

                    public const bool Contains(T Item)
                    {
                        for (int i = 0; i < Count; i++)
                        {
                            if (data[i] == Item)
                                return true;
                        }
                        return false;
                    }

                    public const T[] ToArray()
                    {
                        T[] arr = new T[Count];
                        CopyTo(arr);
                        return arr;
                    }
                }