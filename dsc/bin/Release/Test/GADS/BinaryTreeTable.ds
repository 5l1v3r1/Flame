using System;

/// <summary>
/// Represents a binary tree implementation of a table.
/// </summary>
public class BinaryTreeTable<TKey, TValue> : IDictionary<TKey, TValue>
{
    public const this();

    private BinaryTree<KeyValuePair<TKey, TValue>> tree;
    
    /// <summary>
    /// Inserts a new item into the binary tree table.
    /// </summary>
    public void Insert(TKey Key, TValue Value)
    {
        var pair = new KeyValuePair<TKey, TValue>(Key, Value);
        if (tree == null)
            this.tree = new BinaryTree<KeyValuePair<TKey, TValue>>(pair);
        else
            this.tree.Insert(pair)
    }
    
    /// <summary>
    /// Finds out of this table contains the specified key.
    /// </summary>
    public const bool ContainsKey(TKey Key)
    {
        return tree != null && tree.Contains(new KeyValuePair<TKey, TValue>(Key, default(TValue)));
    }
    
    /// <summary>
    /// Removes a key from the table.
    /// </summary>
    public bool Remove(TKey Key)
    {
        if (ContainsKey(Key))
        {
            var pair = new KeyValuePair<TKey, TValue>(Key, default(TValue));
            this.tree.Remove(pair);
            if (this.tree.Value == null)
                this.tree = null;
            return true;
        }
        else return false;
    }
    
    /// <summary>
    /// Gets or sets the value associated with a key.
    /// </summary>
    public TValue this[TKey Key]
    {
        const get
        {
            if (this.tree == null)
                return default(TValue);
            return this.tree.Retrieve(new KeyValuePair<TKey, TValue>(Key, default(TValue))).Value;
        }
        set
        {
            this.Remove(Key);
            this.Insert(Key, value);
        }
    }
    
    /// <summary>
    /// Gets the contents of this table as a list.
    /// </summary>
    public IReadOnlyList<KeyValuePair<TKey, TValue>> ToList()
    {
        if (tree == null) return new ArrayList<KeyValuePair<TKey, TValue>>();
        return tree.TraverseInorder();
    }
    
    /// <summary>
    /// Gets all keys in this table.
    /// </summary>
    public IReadOnlyList<TKey> Keys
    {
        const get
        {
            var items = ToList();
            ArrayList<TKey> keys = new ArrayList<TKey>();
            for (int i = 0; i < items.Count; i++)
                keys.Add(items[i].Key);
            return keys;
        }
    }
    /// <summary>
    /// Gets all keys in this table.
    /// </summary>
    public IReadOnlyList<TValue> Values
    {
        const get
        {
            var items = ToList();
            ArrayList<TValue> vals = new ArrayList<TValue>();
            for (int i = 0; i < items.Count; i++)
                vals.Add(items[i].Value);
            return vals;
        }
    }
}