/// <summary>
/// Describes a generic read-only collection of items.
/// </summary>
public interface IReadOnlyCollection<T>
{
	/// <summary>
	/// Gets the number of elements in the collection.
	/// </summary>
	int Count { const get; }
}

/// <summary>
/// Describes a collection that allows items to be added.
/// </summary>
public interface ICollection<T> : IReadOnlyCollection<T>
{
    /// <summary>
    /// Adds an item to the collection.
    /// </summary>
    void Add(T Item);
}

/// <summary>
/// Describes a generic read-only list.
/// </summary>
public interface IReadOnlyList<T> : IReadOnlyCollection<T>
{
    /// <summary>
    /// Gets the item at the specified position in the list.
    /// </summary>
    T this[int Index] { const get; }
}

/// <summary>
/// Describes a generic list.
/// </summary>
public interface IList<T> : IReadOnlyList<T>, ICollection<T>
{
    // <summary>
    // Adds an item to the end of the list.
    // </summary>
	// void Add(T Item);

	/// <summary>
	/// Inserts an item in the list at the specified position.
	/// </summary>
	bool Insert(int Index, T Item);
    
    /// <summary>
    /// Removes the element at the specified index from the list.
    /// </summary>
    bool RemoveAt(int Index);
    
    /// <summary>
    /// Sets the item at the specified position in the list.
    /// </summary>
    T this[int Index] { const get; set; }
}