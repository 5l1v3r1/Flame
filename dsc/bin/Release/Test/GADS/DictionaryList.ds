/// <summary>
/// Represents a list that sorts its contents through a dictionary.
/// </summary>
public class DictionarySortedList<TRecord, TKey> : ISortedList<TRecord>
{
    public const this(set IDictionary<TKey, TRecord> Dictionary, set IMap<TRecord, TKey> KeyMap);

    private IDictionary<TKey, TRecord> Dictionary;
    
    /// <summary>
    /// Gets the mapping function that maps the records to their respective keys.
    /// </summary>
    public IMap<TRecord, TKey> KeyMap { const get; private set; }
    
    /// <summary>
    /// Gets the number of items in the sorted list.
    /// </summary>
    public int Count { const get return Dictionary.Keys.Count; }
    
    public void Add(TRecord Item)
    {
        Dictionary[KeyMap.Map(Item)] = Item;
    }
    
    public bool Remove(TRecord Item)
    {
        return Dictionary.Remove(KeyMap.Map(Item));
    }
    
    public const bool Contains(TRecord Item)
    {
        return Dictionary.ContainsKey(KeyMap.Map(Item));
    }
    
    public const IReadOnlyList<TRecord> ToList()
    {
        return Dictionary.Values;
    }
}