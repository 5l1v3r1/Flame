using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
	public static class DSharpTypeExtensions
	{
        public static IEnumerable<IGenericParameter> CreateConstrainedGenericParameters(ISyntaxState State, IGenericMember DeclaringMember, IEnumerable<IGenericParameterDeclarationSyntax> GenericDeclarations, IEnumerable<GenericConstraintSyntax> GenericConstraints)
		{
			var simpleGenericParams = new List<IGenericParameterBuilder>();
			foreach (var item in GenericDeclarations)
			{
				simpleGenericParams.Add(item.GetGenericParameter(DeclaringMember));
			}
			
            var genericBinder = new PredefinedBinder(State.Binder);

			foreach (var item in simpleGenericParams)
			{
				genericBinder.MapType(item.Name, item);
			}

            var fullSyntaxState = new IndirectSyntaxState(State, genericBinder);
			
			foreach (var genParam in simpleGenericParams, var item in GenericDeclarations)
			{
				foreach (var genericConstraint in GenericConstraints)
                {
                    if (genParam.Name.Equals(genericConstraint.GenericParameterIdentifier.TokenValue))
                    {
                        foreach (var type in genericConstraint.Constraints)
                        {
                            genParam.AddTypeConstraint(type.CreateType(fullSyntaxState));
                        }
                    }
                }
			}
			
			return (IEnumerable<IGenericParameter>)simpleGenericParams;
        }
        
        public static IType CreateExtensionType(INamespace Namespace, ISyntaxState State, TypeDeclarationSyntax Syntax)
        {
	    	var descType = new DescribedType(Syntax.Signature.NameToken.TokenValue + "_Extensions", Namespace);
	    	descType.AddAttribute(new AccessAttribute(AccessModifier.Public));
	    	descType.AddAttribute(PrimitiveAttributes.StaticTypeAttribute);
	    	
	    	var descMethod = new DescribedMethod();
			descMethod.DeclaringType = (IType)Namespace;

            var state = new SyntaxState(descMethod, State.Binder, State.Log, State.MemberProvider);
            
	    	foreach (var item in Syntax.Methods)
	    	{
	    		descType.AddMethod(item.CreateMember(state));
	    	}
	    	foreach (var item in Syntax.Properties)
	    	{
	    		descType.AddProperty(item.CreateMember(state));
	    	}
	    	
	    	return descType;
	    }
	    
	    /*public static bool CompileToSingleton(this MethodSyntax Syntax)
	    {
	    	var modifiers = Syntax.Signature.ModifierTokens;
	    	if (modifiers.IsStatic && modifiers.GetAccess() == AccessModifier.Public)
	    	{
	    		return true;
	    	}
	    	else return false;
	    }
	    
	    public static bool CompileToSingleton(this PropertySyntax Syntax)
	    {
	    	var modifiers = Syntax.Signature.ModifierTokens;
	    	if (modifiers.IsStatic && modifiers.GetAccess() == AccessModifier.Public)
	    	{
	    		return true;
	    	}
	    	else return false;
	    }
	    
	    public static bool CompileToSingleton(this FieldPropertySyntax Syntax)
	    {
	    	if (Syntax.PropertySyntax.CompileToSingleton())
	    	{
	    		return true;
	    	}
	    	else return false;
	    }*/
	    
	    public static IBodyMethod CreateParameterlessConstructor(ISyntaxState State)
	    {
	    	var declType = State.DeclaringType;
    	    var defaultCtor = new DescribedBodyMethod("this", declType, PrimitiveTypes.Void, false);
    		defaultCtor.IsConstructor = true;
    		
    		if (!declType.IsSingleton && !declType.IsHidden)
    			defaultCtor.AddAttribute(new AccessAttribute(AccessModifier.Public));
    		else if (declType.IsVirtual || declType.IsAbstract)
    			defaultCtor.AddAttribute(new AccessAttribute(AccessModifier.Protected));
    		else
    			defaultCtor.AddAttribute(new AccessAttribute(AccessModifier.Private));
    		
		    var parent = declType.GetParent();
        	if (parent != null)
        	{
                var ctor = parent.GetConstructor(new IType[0]);
                if (ctor == null)
                {
                	State.Log.LogError(new LogEntry("Could not generate constructor", "A parameterless constructor for '" + declType.FullName + "' could not be generated because no appropriate parameterless constructor could be found for type \'" + parent.FullName + "\'"));
                }
                defaultCtor.Body = new ExpressionStatement(new InvocationExpression(ctor, new ThisVariable(declType).CreateGetExpression(), (IEnumerable<IExpression>)new IExpression[0]));
        		if (ctor.IsConstant)
        		{
        			defaultCtor.AddAttribute(PrimitiveAttributes.ConstantAttribute);	
        		}
        	}
        	else
        	{
        		defaultCtor.Body = new EmptyStatement();
        		defaultCtor.AddAttribute(PrimitiveAttributes.ConstantAttribute);	
        	}
        	defaultCtor.Body = new BlockStatement((IEnumerable<IStatement>)new IStatement[] { defaultCtor.Body, new ReturnStatement() });
        	return defaultCtor;
	    }
	    
	    /*public static IType CreateAssociatedSingleton(INamespace DeclaringNamespace, ISyntaxState State, TypeDeclarationSyntax Syntax)
	    {
	    	var descType = new DescribedType("Associated_Singleton", DeclaringNamespace);
	    	descType.AddAttribute(new AccessAttribute(AccessModifier.Public));
	    	descType.AddAttribute(new AssociatedTypeAttribute(State.DeclaringType));
	    	descType.AddAttribute(PrimitiveAttributes.HiddenAttribute);
	    	if (State.DeclaringType.IsAbstract)
	    	{
	    		descType.AddAttribute(PrimitiveAttributes.AbstractAttribute);
	    	}
	    	else if (State.DeclaringType.IsVirtual)
	    	{
	    		descType.AddAttribute(PrimitiveAttributes.VirtualAttribute);
	    	}
	    	
	    	var descMethod = new DescribedMethod();
			descMethod.DeclaringType = descType;

            var descState = new SyntaxState(descMethod, State.Binder, State.Log, State.MemberProvider);
            
            bool hasSingletonCtor = false;
	    	foreach (var item in Syntax.FieldProperties)
	    	{
	    		if (((FieldPropertySyntax)item).CompileToSingleton())
	    		{
	    			var fieldProp = item.CreateMember(descState);
	    			descType.AddField(fieldProp.Field);
	    			descType.AddProperty(fieldProp.Property);
	    		}
	    	}
	    	foreach (var item in Syntax.Properties)
	    	{
	    		if (((PropertySyntax)item).CompileToSingleton())
	    		{
	    			descType.AddProperty(item.CreateMember(descState));
	    		}
	    	}
	    	foreach (var item in Syntax.Methods)
	    	{
	    		if (((MethodSyntax)item).CompileToSingleton())
	    		{
	    			var method = item.CreateMember(descState);
	    			if (method.IsConstructor && method.GetParameters().Length == 0)
	    				hasSingletonCtor = true;
	    			descType.AddMethod(method);
	    		}
	    	}
	    	if (!hasSingletonCtor)
	    	{
	    		var defaultCtor = DSharpTypeExtensions.CreateParameterlessConstructor(descState);
            	descType.AddMethod(defaultCtor);
	    	}
	    	
	    	if (!descType.IsAbstract)
	    	{
		    	var singletonInstance = SingletonInstanceAccessor.CreateAccessorProperty(descType);
		    	descType.AddField(singletonInstance.Field);
		    	descType.AddProperty(singletonInstance.Property);
	    	}
	    	
	    	return descType;
	    }*/
	    
	    private static const IExpression CreateNotBinaryOp(IMethod Method, ISyntaxState State, Operator Op)
        {
        	var parameters = Method.GetParameters();
        	if (parameters.Length == 1)
        		return new NotExpression(new DirectBinaryExpression(new ThisVariable(State.CurrentType).CreateGetExpression(), Op, new ArgumentVariable(parameters[0], 0).CreateGetExpression()));
        	else
        		return new NotExpression(new DirectBinaryExpression(new ArgumentVariable(parameters[0], 0).CreateGetExpression(), Op, new ArgumentVariable(parameters[1], 0).CreateGetExpression()));
        }
        
        private static const IMethod CreateNotOperator(IMethod Method, ISyntaxState State, Operator Op)
        {
    	    var bodyMethod = new DescribedBodyMethod("operator" + Op.ToString(), State.DeclaringType, Method.ReturnType, false);
    	    foreach (var item in Method.GetParameters())
    	    {
    	    	bodyMethod.AddParameter(item);
    	    }
    		bodyMethod.AddAttribute(new OperatorAttribute(Op));
    		if (Method.IsConstant)
    		{
    			bodyMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
    		}
    		bodyMethod.Body = new ReturnStatement(CreateNotBinaryOp(bodyMethod, State, Method.GetOperator()));
    		return bodyMethod;
        }
	    
	    public static const IEnumerable<IMethod> GenerateOperators(IEnumerable<IMethod> Methods, ISyntaxState State)
	    {
	    	List<IMethod> results = new List<IMethod>();
	    	
	    	IMethod ceq = null;
	    	IMethod cne = null;
	    	foreach (var item in Methods)
	    	{
	    		var attr = item.GetAttribute(OperatorAttribute.OperatorAttributeType);
	    		if (attr != null)
	    		{
	    			var op = ((OperatorAttribute)attr).Operator;
					if (op == Operator.CheckEquality)
					{
						ceq = item;
					}
					else if (op == Operator.CheckInequality)
					{
						cne = item;
					}
	    		}
	    	}
	    	
        	if (ceq != null && cne == null)
        	{
        		results.Add(CreateNotOperator(ceq, State, Operator.CheckInequality));
        	}
        	else if (ceq == null && cne != null)
        	{
        	    results.Add(CreateNotOperator(cne, State, Operator.CheckEquality));
        	}
        	
            return results;
	    }
	}
}