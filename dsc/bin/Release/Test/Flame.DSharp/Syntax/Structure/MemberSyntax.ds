using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public virtual class MemberSyntax : ISyntaxNode, IRelevantSyntax<Token>
    {
    	public const this();
        public const this(set ISignatureSyntax Signature);

        public ISignatureSyntax Signature { const get; protected set; }
        public string Name
        {
            const get
            {
                return Signature.NameToken.TokenValue;
            }
        }
        
        public IEnumerable<Token> LeadingTrivia
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
        		
				foreach (var item in Signature.Attributes)
					tokens.AddRange(item.GetAllTrivia());
				foreach (var item in Signature.ModifierTokens)
					tokens.AddRange(item.GetAllTrivia());
				tokens.AddRange(Signature.TypeSyntax.GetAllTrivia());
				tokens.AddRange(Signature.NameToken.GetAllTrivia());
				
				AddExtraLeadingTrivia(tokens);
				
				return tokens;
        	}
        }
        
        protected virtual void AddExtraLeadingTrivia(List<Token> Target);
        
        public IEnumerable<Token> TrailingTrivia { const get return (IEnumerable<Token>)new Token[0]; }

        public virtual override string ToString()
        {
            return Signature.GetCode().ToString();
        }

        public virtual CodeBuilder GetCode()
        {
            return Signature.GetCode();
        }
    }
}