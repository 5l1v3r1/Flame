using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Lexer;
using Flame.DSharp.Build;

namespace Flame.Syntax.DSharp
{
    public class ConstructorSignatureSyntax : ISignatureSyntax
    {
        public const this(set IEnumerable<IAttributeSyntax> Attributes, set IEnumerable<Token> ModifierTokens, set Token NameToken);

        public IEnumerable<IAttributeSyntax> Attributes { const get; private set; }
        public IEnumerable<Token> ModifierTokens { const get; private set; }
        public Token NameToken { const get; private set; }
        public bool IsOperator { const get return false; }

        public IEnumerable<IGenericParameterDeclarationSyntax> GenericDeclarations
        {
            const get { return (IEnumerable<IGenericParameterDeclarationSyntax>)new IGenericParameterDeclarationSyntax[0]; }
        }

        public ITypeSyntax TypeSyntax
        {
            const get 
            {
           		var tokens = new Token[] { new Token(TokenType.Identifier, "void") };
           		return new TypeSyntax((IEnumerable<Token>)tokens);
            }
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            foreach (var item in Attributes)
            {
                cb.Append(item.GetCode());
                cb.AppendLine();
            }
            foreach (var item in ModifierTokens)
            {
                cb.Append(item.ToString());
            }
            cb.Append(NameToken.ToString());
            return cb;
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }
    }
}