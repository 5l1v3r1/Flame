using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class SignatureSyntax : ISignatureSyntax, IRelevantSyntax<Token>
    {
        public const this(set IEnumerable<IAttributeSyntax> Attributes, set IEnumerable<Token> ModifierTokens, 
        					set ITypeSyntax TypeSyntax, set Token NameToken, 
        					set IEnumerable<IGenericParameterDeclarationSyntax> GenericDeclarations);
        public const this(ISignatureSyntax Syntax)
        {
        	this.Attributes = Syntax.Attributes;
        	this.ModifierTokens = Syntax.ModifierTokens;
        	this.TypeSyntax = Syntax.TypeSyntax;
        	this.NameToken = Syntax.NameToken;
        	this.GenericDeclarations = Syntax.GenericDeclarations;
        }

        public IEnumerable<IAttributeSyntax> Attributes { const get; private set; }
        public IEnumerable<Token> ModifierTokens { const get; private set; }
        public ITypeSyntax TypeSyntax { const get; private set; }
        public Token NameToken { const get; private set; }
        public IEnumerable<IGenericParameterDeclarationSyntax> GenericDeclarations { const get; private set; }
        public bool IsOperator { const get return false; }
        
        public IEnumerable<Token> LeadingTrivia
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
				foreach (var item in Attributes)
					tokens.AddRange(item.GetAllTrivia());
				foreach (var item in ModifierTokens)
					tokens.AddRange(item.GetAllTrivia());
				tokens.AddRange(TypeSyntax.GetAllTrivia());
				tokens.AddRange(NameToken.GetAllTrivia());
				foreach (var item in GenericDeclarations)
					tokens.AddRange(item.GetAllTrivia());
				return tokens;
        	}
        }
        public IEnumerable<Token> TrailingTrivia { const get return (IEnumerable<Token>)new Token[0]; }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            foreach (var item in Attributes)
            {
                cb.Append(item.GetCode());
                cb.AppendLine();
            }
            foreach (var item in ModifierTokens)
            {
                cb.Append(item.ToString());
            }
            if (TypeSyntax != null)
            {
                cb.Append(TypeSyntax.GetCode());
            }
            cb.Append(NameToken.ToString());
            var genDeclArray = Enumerable.ToArray<IGenericParameterDeclarationSyntax>(GenericDeclarations);
            if (genDeclArray.Length > 0)
            {
                cb.Append("<");
                for (int i = 0; i < genDeclArray.Length; i++)
                {
                    if (i > 0)
                    {
                        cb.Append(", ");
                    }
                    cb.Append(genDeclArray[i].GetCode());
                }
                cb.Append(">");
            }
            return cb;
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }
    }
}