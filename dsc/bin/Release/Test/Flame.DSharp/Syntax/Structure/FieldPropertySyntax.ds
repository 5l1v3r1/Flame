using System;
using System.Collections.Generic;
using System.Text;
using Flame.Attributes;
using Flame.Build;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class FieldPropertySyntax : IMemberSyntax<FieldProperty>
    {
        public const this(set PropertySyntax PropertySyntax);

        public PropertySyntax PropertySyntax { const get; private set; }
        
        public static const string GetBackingFieldName(string PropertyName)
        	return PropertyName + "_value";

        public FieldProperty CreateMember(ISyntaxState State)
        {
            var property = PropertySyntax.CreateMember(State);
            var field = new DescribedField(GetBackingFieldName(property.Name), property.PropertyType, property.IsStatic);
            field.AddAttribute(new AccessAttribute(AccessModifier.Private));
            field.AddAttribute(PrimitiveAttributes.HiddenAttribute);
            field.DeclaringType = State.DeclaringType;
            return new FieldProperty(property, field);
        }

        public CodeBuilder GetCode()
        {
            return PropertySyntax.GetCode();
        }

        public bool IsExtensionMember
        {
            const get { return false; }
        }
        
        public bool IsSingletonMember
        {
        	const get return PropertySyntax.IsSingletonMember;
        }
    }
}