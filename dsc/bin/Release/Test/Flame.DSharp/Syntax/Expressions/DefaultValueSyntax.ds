using System;
using System.Collections.Generic;
using Flame.DSharp.Lexer;
using Flame.Compiler;
using Flame.Compiler.Expressions;

namespace Flame.Syntax.DSharp
{
    public class DefaultValueSyntax : IExpressionSyntax
    {
        public const this(set Token DefaultKeyword, set Token RParentheses, set ITypeSyntax TypeSyntax, set Token LParentheses);

        public Token DefaultKeyword { const get; private set; }
        public Token RParentheses { const get; private set; }
        public ITypeSyntax TypeSyntax { const get; private set; }
        public Token LParentheses { const get; private set; }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var tks = new List<Token>();
        		tks.Add(DefaultKeyword);
        		tks.Add(RParentheses);
				tks.AddRange(TypeSyntax.GetTokens());
				tks.Add(LParentheses);
				return tks;
        	}
        }

        public IExpression CreateExpression(ISyntaxState State)
        {        
            return new DefaultValueExpression(TypeSyntax.CreateVerifiedType(State));
        }

        public CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(DefaultKeyword.ToString());
            cb.Append(RParentheses.ToString());
            cb.Append(TypeSyntax.GetCode());
            cb.Append(LParentheses.ToString());
            return cb;
        }
    }
}