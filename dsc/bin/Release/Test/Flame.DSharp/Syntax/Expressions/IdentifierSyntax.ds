using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class IdentifierSyntax : VariableSyntaxBase, ITypeMemberAccessSyntax, ITokenNode
    {
        public const this(string Identifier)
        {
        	this.Identifier = new Token(TokenType.Identifier, Identifier);
        }
        public const this(set Token Identifier);

        public Token Identifier { const get; private set; }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get return (IReadOnlyList<Token>)new Token[] { Identifier };
        }

        public override const IVariable CreateVariable(ISyntaxState State)
        {
            var variable = State.GetVariable(Identifier.TokenValue);
            if (variable != null)
            {
                return variable;
            }
            else
            {
            	var localVar = new MemberAccessSyntax(new ThisSyntax(), Identifier).CreateVariable(State);
            	if (localVar != null)
            	{
            		return localVar;
            	}
            
            	var tSyntax = new IdentifierTypeSyntax(Identifier);
            	var type = tSyntax.CreateType(State);
            	// Try singleton as a last resort. This will return null if there is no singleton class in sight.
            	return MemberAccessSyntaxBase.CreateSingletonVariable(type);
            }
        }

        public override const string ToString()
        {
            return Identifier.ToString();
        }

        public const IVariable GetCallerVariable(ISyntaxState State)
        {
            return new ThisSyntax().CreateVariable(State);
        }

        public const IEnumerable<ITypeMember> GetAccessedMembers(ISyntaxState State)
        {
            var localMembers = State.MemberProvider.GetMembers(State.CurrentType, Identifier.TokenValue);
            if (Enumerable.Any<ITypeMember>(localMembers))
            {
            	return localMembers;
            }
            else
            {
            	var typeMembers = State.CurrentType.GetAllMembers(Identifier.TokenValue);
            	return typeMembers;
            }
        }

        public override const CodeBuilder GetCode()
        {
            return new CodeBuilder(Identifier.ToString());
        }
    }
}