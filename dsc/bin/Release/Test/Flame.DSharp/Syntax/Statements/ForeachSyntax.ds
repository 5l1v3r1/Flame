using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Variables;
using Flame.DSharp;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class ForeachSyntax : IStatementSyntax, ITokenNode
    {
        public const this(set Token ForeachKeyword, set Token LeadingParentheses,
            set IEnumerable<ElementInCollectionSyntax> Elements, 
            set Token TrailingParentheses, set IStatementSyntax Body);

        public Token ForeachKeyword { const get; private set; }
        public Token LeadingParentheses { const get; private set; }
        public IEnumerable<ElementInCollectionSyntax> Elements { const get; private set; }
        public Token TrailingParentheses { const get; private set; }
        public IStatementSyntax Body { const get; private set; }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		List<Token> results = new List<Token>();
				results.Add(ForeachKeyword);
				results.Add(LeadingParentheses);
				foreach (var item in Elements)
				{
					results.AddRange(item.GetTokens());
				}
				results.Add(TrailingParentheses);
				results.AddRange(Body.GetTokens());
				return results;
        	}
        } 

        public const IStatement CreateStatement(ISyntaxState State)
        {
            State.PushScope();
            
        	var collExprs = new List<CollectionElement>();
        	foreach (var item in Elements)
        	{
        		string variableName = Enumerable.Single<string>((IEnumerable<string>)item.VariableDeclaration.VariableNames);
        		var expr = item.Collection.CreateExpression(State);
        		
        		IType variableType;
        		if (item.VariableDeclaration.Type.IsVariable)
        			variableType = expr.Type.GetEnumerableElementType();
        		else
        			variableType = item.VariableDeclaration.Type.CreateType(State);
        		
        		collExprs.Add(new CollectionElement(new DescribedVariableMember(variableName, variableType), expr));
        	}
        	var loop = new ForeachStatement(collExprs);
        	
        	foreach (var item in collExprs, var elem in loop.Elements)
        	{
        		State.DeclareVariable(item.Member.Name, elem);
        	}
        	
        	loop.Body = Body.CreateStatement(State);
        	
        	var cleanup = State.PopScope();
        	
        	return new BlockStatement(new IStatement[] { loop, cleanup });
        }

        public CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ForeachKeyword.ToString());
            cb.Append(LeadingParentheses.ToString());
            bool first = true;
            foreach (var item in Elements)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    cb.Append(",");
                }
                cb.Append(item.GetCode());
            }
            cb.Append(TrailingParentheses.ToString());
            cb.AppendLine();
            cb.Append(Body.GetCode());
            return cb;
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }
    }
}