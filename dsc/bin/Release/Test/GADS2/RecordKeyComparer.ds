/// <summary>
/// A comparer that compares records based on their keys.
/// </summary>
public class RecordKeyComparer<T> : IComparer<IRecord<T>>
{
    /// <summary>
    /// Creates a new record key comparer.
    /// </summary>
    public const this();
    
    private DefaultComparer<T> actualComparer = new DefaultComparer<T>();
    
    public const int Compare(IRecord<T> Item, IRecord<T> Other)
    {
        return actualComparer.Compare(Item.Key, Other.Key);
    }
}

/// <summary>
/// A comparer inverts the result of another comparer.
/// </summary>
public class InvertedComparer<T> : IComparer<T>
{
    /// <summary>
    /// Creates a new inverted comparer that uses the given comparer.
    /// </summary>
    public const this(set IComparer<T> Comparer);
    
    /// <summary>
    /// Gets the internal comparer this comparer uses.
    /// </summary>
    public IComparer<T> Comparer { const get; private set; }
    
    public const int Compare(T Item, T Other)
    {
        return -Comparer.Compare(Item, Other);
    }
}

/// <summary>
/// A comparer that compares two objects directly based on their comparison operators.
/// </summary>
public class DefaultComparer<T> : IComparer<T>
{
    /// <summary>
    /// Creates a new instance of a default comparer.
    /// </summary>
    public const this();
    
    public const int Compare(T Item, T Other)
    {
        if (Item < Other)
            return -1;
        else if (Item > Other)
            return 1;
        else
            return 0;
    }
}

/// <summary>
/// Compares items based on a mapping function.
/// </summary>
public class MapComparer<TInput, TResult> : IComparer<TInput>
{
    /// <summary>
    /// Creates a new map comparer.
    /// </summary>
    public const this(set IMap<TInput, TResult> ItemMap);
    
    private DefaultComparer<TResult> actualComparer = new DefaultComparer<TResult>();
    
    /// <summary>
    /// Gets the mapping function that is used to produce two comparable items.
    /// </summary>
    public IMap<TInput, TResult> ItemMap { const get; private set; }

    public const int Compare(TInput Item, TInput Other)
    {
        return actualComparer.Compare(ItemMap.Map(Item), ItemMap.Map(Other));
    }
}