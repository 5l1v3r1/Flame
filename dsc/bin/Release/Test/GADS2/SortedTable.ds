/// <summary>
/// A sortable table implementation that provides access to sorted objects which are sorted lazily.
/// </summary>
public class SortedTable<TKey, TItem> : ISortableTable<TKey, TItem>
{
    /// <summary>
    /// Creates a lazily sorted table with the specified table as backing storage, and the specified list sorter for sorting functionality.
    /// </summary>
    public const this(set ITable<TKey, TItem> Table, set IListSorter<TItem> Sorter);
    
    public IMap<TItem, TKey> KeyMap { const get return Table.KeyMap; }
    
    /// <summary>
    /// Gets the sorted table's list sorter.
    /// </summary>
    public IListSorter<TItem> Sorter { const get; private set; }
    
    private ITable<TKey, TItem> Table;
    private IList<TItem> sortedList;
    
    /// <summary>
    /// Writes a sorted list of the table's items to 'sortedList'.
    /// </summary>
    private void SortTable()
    {
        if (sortedList == null)
        {
            var targetList = new ArrayList<TItem>();
            foreach (TItem item in Table)
                targetList.Add(item);
            sortedList = Sorter.Sort(targetList);
        }
    }
    
    /// <summary>
    /// 'Sorts' the sorted table with the specified list sorter.
    /// The actual sorting process is deferred until __iter__ or ToList are called, however.
    /// </summary>
    public void Sort(set IListSorter<TItem> Sorter)
    {
        this.sortedList = null;
    }
    
    public int Count { const get return Table.Count; }
    
    public TItem this[TKey Key]
    {
        const get return Table[Key];
    }
    
    public bool Insert(TItem Item)
    {
        sortedList = null;
        return Table.Insert(Item);
    }
    
    public bool Remove(TKey Key)
    {
        sortedList = null;
        return Table.Remove(Key);
    }
    
    public const bool ContainsKey(TKey Key)
    {
        return Table.ContainsKey(Key);
    }
    
    public const IReadOnlyList<TItem> ToList()
    {
        SortTable();
        return sortedList;
    }
    
    public const [<TItem>] __iter__()
    {
        return ToList().__iter__();
    }
}