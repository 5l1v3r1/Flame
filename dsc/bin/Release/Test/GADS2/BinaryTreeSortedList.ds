/// <summary>
/// Describes a tree implementation of a sorted list.
/// </summary>
public class TreeSortedList<T> : ISortedList<T>
{
    /// <summary>
    /// Creates a new search tree implementation of a sorted list, using the provided tree as backing storage.
    /// </summary>
    public const this(set ITree<T, object> tree);
    
    /// <summary>
    /// Gets the mapping function that maps list items to their search keys.
    /// </summary>
    public IMap<T, object> KeyMap { const get return tree.KeyMap; }

    private ITree<T, object> tree;
    
    public int Count { const get return tree.Count; }
    /// <summary>
    /// Gets a boolean value that indicates whether the sorted list is empty or not.
    /// </summary>
    public bool IsEmpty { const get return tree.IsEmpty; }

    public void Add(T Item)
    {
        tree.Insert(Item);
    }
    
    public bool Remove(T Item)
    {
        return tree.Remove(KeyMap.Map(Item));
    }
    
    public const bool Contains(T Item)
    {
        return tree.Retrieve(KeyMap.Map(Item)) != null;
    }
    
    public const IReadOnlyList<T> ToList()
    {
        return tree.TraverseInorder();
    }
    
    public const [<T>] __iter__()
    {
        return tree.__iter__();
    }
}