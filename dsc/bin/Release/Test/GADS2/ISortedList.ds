/// <summary>
/// Describes a modified version of the Sorted List ADT.
/// </summary>
/// <remarks>
/// Design changes from the original ADT:
/// Rather than allowing the client of sorted lists to access its items through an index,
/// this sorted list uses the ToList() method.
/// This change was introduced to improve efficiency for the common case, which is enumerating over the sorted list's items.
/// Implementing 'void sortedRetrieve(int index, out T dataItem, out bool success)' would require an increasingly large number of nodes to be counted through inorder traversal
/// before arriving at the desired element when enumerating over a sorted list with a naive binary tree implementation. 
/// Also, the 'int locatePosition(T anItem, out bool isPresent)' method has been removed,
/// as this is essentially table functionality, and the position of an item cannot be retrieved unambiguously,
/// since sorted lists may contain more than one item with the same search key.
/// 'void sortedInsert(T anItem)' is handled by the inherited 'void Add(T Item)' method in ICollection<T>.
/// </remarks>
public interface ISortedList<T> : ICollection<T>
{
    /// <summary>
    /// Gets a record-to-key map that maps records to sortable keys.
    /// </summary>
    IMap<T, object> KeyMap { const get; }

    /// <summary>
    /// Gets a boolean value that indicates if the sorted list is empty.
    /// </summary>
    /// <post>
    /// Return true if empty, false if not.
    /// </post>
    /// <remarks>
    /// This property is technically redundant, as Count could be used as well.
    /// It is useful, however, to maximize performance for certain implementations.
    /// For example, counting all elements is O(n), but determining if it is empty is O(1).
    /// </remarks>
    bool IsEmpty { const get; }

    /// <summary>
    /// Removes an item from the list.
    /// </summary>
    /// <pre>
    /// For Item to be successfully removed from the sorted list, it must have been in the list before removal.
    /// </pre>
    /// <post>
    /// Returns true if the sorted list contained the given item, false if not.
    /// If this returns true, the item has been removed from the sorted list.
    /// </post>
    bool Remove(T Item);
    
    /// <summary>
    /// Finds out if the sorted list contains the given item.
    /// </summary>
    const bool Contains(T Item);
    
    /// <summary>
    /// Returns a read-only list that represents this list's contents, for easy enumeration.
    /// </summary>
    const IReadOnlyList<T> ToList();
}