/// <summary>
/// Represents a movie theater.
/// </summary>
public class Theater
{
    /// <summary>
    /// Creates a new movie theater instance.
    /// </summary>
    public const this(set string Name)
    {
        this.Reservations = new ReservationManager();
        this.slots.Add(new Time(14, 30));
        this.slots.Add(new Time(17, 00));
        this.slots.Add(new Time(20, 00));
        this.slots.Add(new Time(22, 30));
    }

    private int showtimeIndex;
    private int movieIndex;
    private SwapList<Auditorium> auditors = new SwapList<Auditorium>(new ArrayList<Auditorium>());
    private SwapList<Time> slots = new SwapList<Time>(new ArrayList<Time>());
    private SortedSwapList<Movie> allmovies = new SortedSwapList<Movie>(new TreeSortedList<Movie>(new BinarySearchTree<Movie, object>((IMap<Movie, object>)new MovieRatingMap())));
    private SortableSwapTable<int, Showtime> scheduledShowtimes = new SortableSwapTable<int, Showtime>(new ListTable<int, Showtime>((IMap<Showtime, int>)new DefaultRecordMap<int>(), new LinkedList<Showtime>()));
    private SwapList<User> registeredUsers = new SwapList<User>(new ArrayList<User>());
    
    /// <summary>
    /// Gets the movie theater's name.
    /// </summary>
    public string Name { const get; private set; }    
    /// <summary>
    /// Gets a read-only list of all auditoria in this movie theater.
    /// </summary>
    public SwapList<Auditorium> Auditoria { const get return auditors; }
    /// <summary>
    /// Gets the list of all available timeslots for this movie theater.
    /// </summary>
    public SwapList<Time> Timeslots { const get return slots; }
    /// <summary>
    /// Gets the list of all movies known to the movie theater.
    /// </summary>
    /// <remarks>
    /// Movies are stored in a sorted list, rather than a table, as a table does not guarantee that its contents be sorted.
    /// The underlying implementation can be used for both the sorted list and the table, though.
    /// Also, a table is intended to access items by their search keys (the movie's rating, if the table must be sorted based on the movie's rating), which excludes two movies with the same rating.
    /// A sorted list does not exclude this scenario, and has support for traversal through a sorted read-only list at the ADT level.
    /// </remarks>
    public SortedSwapList<Movie> Movies { const get return allmovies; }
    
    /// <summary>
    /// Gets a table containing scheduled showtimes. The showtimes are contained in a table that uses the showtimes' IDs as search keys.
    /// </summary>
    public ISortableTable<int, Showtime> Showtimes { const get return scheduledShowtimes; }
    
    /// <summary>
    /// Gets a read-only view of all customers registered with this theater.
    /// </summary>
    public SwapList<User> RegisteredCustomers { const get return registeredUsers; }
    
    /// <summary>
    /// Gets the reservation manager instance.
    /// </summary>
    /// <remarks>
    /// The reservation manager handles reservation requests and processes them.
    /// </remarks>
    public ReservationManager Reservations { const get; private set; }
    
    /// <summary>
    /// Tries to find a movie based on its complete title.
    /// </summary>
    /// <post>
    /// Searches through all movies until it finds one that corresponds to the given title.
    /// The first movie that matches this title will be returned.
    /// If no movie matches the given title, 'None' is returned.
    /// </post>
    public const Movie FindMovie(string Title)
    {
        foreach (Movie item in Movies)
            if (item.Title == Title)
        {
            return item;
        }
        return null;
    }
    
    /// <summary>
    /// Gets a boolean value that indicates if the provided time corresponds to a timeslot.
    /// </summary>
    public const bool IsTimeslot(Time Value)
    {
        foreach (Time item in Timeslots)
            if (Value == item)
        {
            return true;
        }
        return false;
    }
    
    /// <summary>
    /// Gets a boolean value that indicates whether a showtime has been planned or not at the specified time in the specified auditorium.
    /// </summary>
    public const bool ShowtimePlanned(Auditorium Location, DateTime StartTime)
    {
        foreach (Showtime item in Showtimes)
            if (item.Location == Location && item.StartTime == StartTime)
        {
            return true;
        }
        return false;
    }
    
    /// <summary>
    /// Builds and returns a new auditorium with the specified number of seats.
    /// </summary>
    /// <pre>
    /// 'NumberOfSeats' must be a nonzero positive integer.
    /// </pre>
    /// <post>
    /// This method creates a new Auditorium object, adds it to the current movie theater, and returns it.
    /// </post>
    public Auditorium BuildAuditorium(int NumberOfSeats)
    {
        Auditorium auditor = new Auditorium(auditors.Count, NumberOfSeats);
        auditors.Add(auditor);
        return auditor;
    }
    
    /// <summary>
    /// Schedules a new showtime at this theater, based on the provided arguments.
    /// </summary>
    /// <pre>
    /// The auditorium must not be booked for a showtime yet at that specific time, the movie must be a known movie to this theater, and the start time must correspond to a future, valid timeslot.
    /// </pre>
    /// <post>
    /// A new showtime is created and assigned its own unique identifier, it is subsequently added to the theater's list of showtimes and then returned.
    /// If any of the provided arguments are invalid, 'None' is returned, and no showtime will be scheduled.
    /// </post>
    public Showtime ScheduleShowtime(Auditorium Location, Movie MoviePlaying, DateTime StartTime)
    {
        if (!IsTimeslot(StartTime.TimeOfDay) || !Movies.Contains(MoviePlaying) || ShowtimePlanned(Location, StartTime))
        {
            return null;
        }
        var show = new Showtime(showtimeIndex, Location, MoviePlaying, StartTime);
        showtimeIndex++;
        scheduledShowtimes.Insert(show);
        return show;
    }
    
    /// <summary>
    /// Registers a new customer and returns a User instance that describes them.
    /// </summary>
    /// <pre>
    /// FirstName and LastName should be the user's first and last name, respectively, and EmailAddress should be the user's e-mail address.
    /// </pre>
    /// <post>
    /// Creates a new User instance, assigns it a unique id and the given arguments, adds it to the list of registered users, and returns it.
    /// </post>
    public User RegisterCustomer(string FirstName, string LastName, string EmailAddress)
    {
        var customer = new User(registeredUsers.Count, FirstName, LastName, EmailAddress);
        registeredUsers.Add(customer);
        return customer;
    }
    
    /// <summary>
    /// Creates a new movie from the given arguments and adds it to the list of playing movies.
    /// </summary>
    /// <post>
    /// A new movie is created based on a unique ID, 'Title' and 'Rating', and is then added to the 'Movies' list.
    /// The created movie is subsequently returned.
    /// </post>
    public Movie RegisterMovie(string Title, double Rating)
    {
        // Index is kept as an attribute to make sure that no two movies have the same ID
        var result = new Movie(movieIndex, Title, Rating);
        Movies.Add(result);
        movieIndex++;
        return result;
    }
}

/// <summary>
/// Describes an auditorium.
/// </summary>
public class Auditorium : IRecord<int>
{
    /// <summary>
    /// Creates a new auditorium instance for the provided index and number of seats.
    /// </summary>
    /// <pre>
    /// 'Index' must be a unique index and 'NumberOfSeats' must be a nonzero positive integer.
    /// </pre>
    public const this(set int Index, set int NumberOfSeats);

    /// <summary>
    /// Gets the auditorium's index, or room number.
    /// </summary>
    public int Index { const get; private set; }
    /// <summary>
    /// Gets the number of seats in the auditorium.
    /// </summary>
    public int NumberOfSeats { const get; private set; }
    
    public int Key { const get return Index; }
    
    /// <summary>
    /// Gets the auditorium's string representation.
    /// </summary>
    public const string __str__()
    {
        return "Auditorium " + Index + " (" + NumberOfSeats + " seats)";
    }
    
    /// <summary>
    /// Finds out if this auditorium equals the given auditorium.
    /// </summary>
    public const bool operator ==(Auditorium Other)
    {
        if (Other == null) return false;
        else return this.Index == Other.Index;
    }
    
    /// <summary>
    /// Finds out if this auditorium is not equal to the given auditorium.
    /// </summary>
    public const bool operator !=(Auditorium Other)
    {
        return !(this == Other);
    }
}

/// <summary>
/// Describes a movie.
/// </summary>
public class Movie : IRecord<int>
{
    /// <summary>
    /// Creates a new movie instance for the given parameters.
    /// </summary>
    public const this(set int Id, set string Title, set double Rating);

    /// <summary>
    /// Gets the movie's identifier.
    /// </summary>
    public int Id { const get; private set; }
    /// <summary>
    /// Gets the movie's title.
    /// </summary>
    public string Title { const get; private set; }
    /// <summary>
    /// Gets the movie's rating.
    /// </summary>
    public double Rating { const get; private set; }
    
    public int Key { const get return Id; }
    
    public const string __str__()
    {
        return Title + " (Rated " + (string)Rating + ")";
    }
    public const string __repr__()
    {
        return (string)Id + ": " + (string)this;
    }
}

/// <summary>
/// A mapping function that maps a movie to its rating.
/// </summary>
public class MovieRatingMap : IMap<Movie, double>
{
    /// <summary>
    /// Creates a new movie-rating map.
    /// </summary>
    public const this();

    public double Map(Movie Item)
    {
        return Item.Rating;
    }
}

/// <summary>
/// A mapping function that maps a movie to its title.
/// </summary>
public class MovieTitleMap : IMap<Movie, string>
{
    /// <summary>
    /// Creates a new movie-title map.
    /// </summary>
    public const this();

    public string Map(Movie Item)
    {
        return Item.Title;
    }
}