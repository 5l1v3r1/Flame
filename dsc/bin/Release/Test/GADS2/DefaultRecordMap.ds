/// <summary>
/// A mapping function that simply passes along the search key provided by the record.
/// </summary>
public class DefaultRecordMap<TKey> : IMap<IRecord<TKey>, TKey>
{
    public TKey Map(IRecord<TKey> Record)
    {
        return Record.Key;
    }
}

/// <summary>
/// A mapping function that represents the identity function: its 'map' method simply returns the given argument.
/// </summary>
public class IdentityMap<T> : IMap<T, T>
{
    public T Map(T Value)
        return Value;
}

/// <summary>
/// A pair record that contains a key and a value.
/// </summary>
/// <remarks>
/// This type is particularly useful to associate keys with unrelated values.
/// </remarks> 
public class KeyValuePair<TKey, TValue> : IRecord<TKey>
{
    /// <summary>
    /// Creates a new instance of a key-value pair based on the given key and value.
    /// </summary>
    public const this(set TKey Key, set TValue Value);
    
    /// <summary>
    /// Gets the key-value pair's key.
    /// </summary>
    public TKey Key { const get; private set; }
    
    /// <summary>
    /// Gets the key-value pair's value.
    /// </summary>
    public TValue Value { const get; private set; }
}