/// <summary>
/// An array-based implementation of a list.
/// </summary>
public class ArrayList<T> : IList<T>
{
    /// <summary>
    /// Creates a new instance of a list.
    /// </summary>
    public const this();
    /// <summary>
    /// Creates a new instance of a list backed by the provided array.
    /// </summary>
    public const this(set T[] data)
    {
        this.elemCount = data.Length;
    }

    private T[] data = new T[5];
    private int elemCount;
    public int Count { const get return elemCount; }
    
    /// <summary>
    /// Gets or sets the item in the list at the specified position.
    /// </summary>
    public T this[int Index]
    {
        const get
        {
            return data[Index];
        }
        set
        {
            data[Index] = value;
        }
    }

    /// <summary>
    /// Adds an item to the end of the list.
    /// </summary>
    public void Add(T Item) : IList<T>.Add
    {
        if (Count >= data.Length)
        {
            var newData = new T[data.Length + 5];
            CopyTo(newData);
            this.data = newData;
        }
        this.data[this.elemCount] = Item;
        this.elemCount++;
    }

    public bool Insert(int Index, T Item)
    {
        if (Index == Count)
        {
            Add(Item);
            return true;
        }
        else if (Index < Count && Index >= 0)
        {
            ShiftRight(Index);
            this.data[Index] = Item;
            this.elemCount++;
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool RemoveAt(int Index)
    {
        if (Index >= 0 && Index < Count)
        {
            ShiftLeft(Index);
            elemCount--;
            return true;
        }
        else
        {
            return false;
            }
    }

    /// <summary>
    /// Shifts the elements in the list to the right from the provided index onward.
    /// </summary>
    private void ShiftRight(int StartIndex)
    {
        if (Count >= data.Length)
        {
            var newData = new T[data.Length + 5];
            for (int i = 0; i < StartIndex; i++)
            {
                newData[i] = data[i];
            }
            for (int i = StartIndex; i < Count; i++)
            {
                newData[i + 1] = data[i];
            }
            this.data = newData;
        }
        else
        {
            for (int i = Count - 1; i >= StartIndex; i--)
            {
                this.data[i + 1] = data[i];
            }
        }
    }

    /// <summary>
    /// Shifts the elements in the list to the left from the provided index onward.
    /// </summary>
    private void ShiftLeft(int StartIndex)
    {
        for (int i = StartIndex + 1; i < Count; i++)
        {
            this.data[i - 1] = data[i];
        }
    }
    
    /// <summary>
    /// Copies the array list's contents to the provided target array.
    /// </summary>
    /// <post>
    /// Copies all elements from the list, starting at index 0 up to and including the last index of this list or the target array, whichever comes first.
    /// </post>
    public void CopyTo(T[] Target)
    {
        foreach (var input in data, var output in Target)
            output = input;
    }

    //public const bool Contains(T Item)
    //{
    //    for (int i = 0; i < Count; i++)
    //    {
    //        if (data[i] == Item)
    //            return true;
    //    }
    //    return false;
    //}

    /// <summary>
    /// Gets an array with length the number of elements in this list, and the same contents as this list.
    /// </summary>
    /// <remarks>
    /// The resulting array is not the backing array for this list, but rather an array whereto the elements of this list are copied.
    /// This method was added to make copying an 'ArrayList<T>' easier. 
    /// Creating a new 'ArrayList<T>' from an array is also faster than creating an empty list and then adding every element from the original list, as the internal array will not need expanding.
    /// </remarks>
    public const T[] ToArray()
    {
        T[] arr = new T[Count];
        CopyTo(arr);
        return arr;
    }
    
    public const [<T>] __iter__()
    {
        for (int i = 0; i < Count; i++)
        {
            yield return data[i];
        }
    }
}