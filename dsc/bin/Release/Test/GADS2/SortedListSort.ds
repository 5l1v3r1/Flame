/// <summary>
/// An implementation 'IListSorter<T>' that uses a sorted list to sort a regular list.
/// This amounts to treesort when a 'TreeSortedList<T>' is used.
/// </summary>
public class SortedListSort<T> : IListSorter<T>
{
    /// <summary>
    /// Creates a new instance of a quicksort implementation for 'IListSorter<T>' based on the given sorted list.
    /// </summary>
    public const this(set ISortedList<T> SortedList);
    
    private ISortedList<T> SortedList;
    
    /// <summary>
    /// Removes all items from the sorted list.
    /// </summary>
    private void ClearList()
    {
        var contents = new ArrayList<T>();
        foreach (T item in SortedList)
            contents.Add(item);
        foreach (T item in contents)
            SortedList.Remove(item);
    }
    
    public IList<T> Sort(IList<T> List)
    {
        ClearList();
        while (List.Count > 0)
        {
            SortedList.Add(List[0]);
            List.RemoveAt(0);
        }
        foreach (T input in SortedList)
        {
            List.Add(input);
        }
        return List;
    }
}