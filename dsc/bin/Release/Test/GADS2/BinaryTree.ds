/// <summary>
/// A link-based implementation of the Binary Tree ADT.
/// </summary>
public class BinaryTree<T>
{
    /// <summary>
    /// Creates a new binary tree from a data item.
    /// </summary>
    public const this(set T Data);

    /// <summary>
    /// Gets or sets the binary tree's data, i.e. the record contained in the root.
    /// </summary>
    public T Data { const get; set; }
    
    /// <summary>
    /// Gets or sets the binary tree's left subtree.
    /// </summary>
    public BinaryTree<T> Left { const get; set; }
    /// <summary>
    /// Gets or sets the binary tree's right subtree.
    /// </summary>
    public BinaryTree<T> Right { const get; set; }
    
    /// <summary>
    /// Gets the number of items in the binary tree.
    /// </summary>
    public int Count
    {
        const get
        {
            int result = 1;
            if (Left != null) result += Left.Count;
            if (Right != null) result += Right.Count;
            return result;
        }
    }
    
    /// <summary>
    /// Performs inorder traversal on the binary tree and writes its items to the given target collection.
    /// </summary>
    public void TraverseInorder(ICollection<T> Target)
    {
        if (Left != null) Left.TraverseInorder(Target);
        Target.Add(Data);
        if (Right != null) Right.TraverseInorder(Target);
    }
    
    /// <summary>
    /// Copies all information in the given binary tree into this binary tree.
    /// </summary>
    /// <pre>
    /// Other must either be a 'BinaryTree<T>' or 'None'.
    /// </pre>
    /// <post>
    /// If the given tree is not 'None', the Data, Left and Right properties are copied from the target tree into this tree.
    /// Note that these copies are shallow: the left and right trees (and possibly Data) will be mere aliases to the information contained in the other tree.
    /// If the provided other tree is 'None', Data, Left and Right are all set to 'None'.
    /// </post>
    public void CopyFrom(BinaryTree<T> Other)
    {
        if (Other == null)
        {
            this.Data = null;
            this.Left = null;
            this.Right = null;
        }
        else
        {
            this.Data = Other.Data;
            this.Left = Other.Left;
            this.Right = Other.Right;
        }
    }
}