/// <summary>
/// Describes a generic search tree.
/// This is a generalization of a binary search tree that is also applicable to 2-3 trees, 2-3-4 trees, black-red trees and AVL trees.
/// </summary>
/// <remarks>
/// Every implementation of ITree<T, TKey> must also implement the '__iter__' method, which is implied by the 'iterable<T>' base type.
/// See the 'IReadOnlyCollection<T>' contract for a detailed explanation of what 'iterable<T>' entails.
/// </remarks>
public interface ITree<T, TKey> : [T]
{
    /// <summary>
    /// Gets the function that maps the search tree's records to their search keys.
    /// </summary>
    IMap<T, TKey> KeyMap { const get; }

    /// <summary>
    /// Counts the number of items in the search tree.
    /// </summary>
    /// <remarks>
    /// This operation is O(n) in most implementations. Use IsEmpty to determine if the tree is empty.
    /// </remarks>
    int Count { const get; }
    
    /// <summary>
    /// Gets a boolean value that indicates if the tree is empty.
    /// </summary>
    bool IsEmpty { const get; }
    
    /// <summary>
    /// Inserts an item in the search tree.
    /// </summary>
    /// <post>
    /// The item will be added to the tree, regardless of whether the tree already contains an item with the same search key.
    /// </post>
    void Insert(T Item);
    
    /// <summary>
    /// Retrieves the item with the specified key.
    /// </summary>
    /// <post>
    /// If the search tree contains an item with the specified key, said item is returned. If not, None is returned.
    /// </post>
    const T Retrieve(TKey Key);
    
    /// <summary>
    /// Removes the item with the specified key from the search tree.
    /// </summary>
    /// <post>
    /// If the search tree contains an item with the provided key, it is removed, and true is returned.
    /// Otherwise, the tree's state remains unchanged, and false is returned.
    /// </post>
    bool Remove(TKey Key);
    
    /// <summary>
    /// Performs inorder traversal on the binary search tree and writes its items to a new list.
    /// </summary>
    /// <post>
    /// This method returns a read-only list with element type 'T' that can be used for iteration.
    /// </post>
    const IReadOnlyList<T> TraverseInorder();
    
    /// <summary>
    /// Creates an iterator that iterates over every element in the tree.
    /// </summary>
    const [<T>] __iter__();
}