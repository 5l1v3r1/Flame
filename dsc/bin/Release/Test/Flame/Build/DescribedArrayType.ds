using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Build
{
	public class DescribedArrayType : DescribedContainerType, IArrayType
	{
        public this(set IType ElementType, set int ArrayRank);

        public int ArrayRank { public get; private set; }
        
        public virtual IType[] GetBaseTypes()
        {
            return new IType[] { PrimitiveTypes.IHashCodeProvider };
        }

        public override IProperty[] GetProperties()
        {
            var descProp = new DescribedProperty("Length", this, PrimitiveTypes.Int32, false);
            var getter = new DescribedAccessor(AccessorType.GetAccessor, descProp, PrimitiveTypes.Int32);
            descProp.AddAccessor(getter);
            return new IProperty[] { descProp };
        }

        public override ContainerTypeKind ContainerKind
        {
            const get { return ContainerTypeKind.Array; }
        }

        protected override string GetName(string ElementName)
        {
            var sb = new StringBuilder();
            sb.Append(ElementName);
            sb.Append('[');
            for (int i = 1; i < ArrayRank; i++)
            {
                sb.Append(',');
            }
            sb.Append(']');
            return sb.ToString(); 
        }

        public override bool Equals(object obj)
        {
            if (obj is IArrayType)
            {
                var arrType = (IArrayType)obj;
                if (arrType.IsArray)
                {
                    int rank = arrType.ArrayRank;
                    var elemType = arrType.GetElementType();
                    return rank == ArrayRank && ElementType.Equals(elemType);
                }
            }
            return false;
        }

        public override int GetHashCode()
        {
            return ElementType.GetHashCode() + ArrayRank;
        }
    }
}