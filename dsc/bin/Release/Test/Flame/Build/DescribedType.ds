using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Build
{
	public class DescribedType : DescribedMember, IType
	{
		public const this(set string Name, set INamespace DeclaringNamespace)
		{
			this.baseTypes = new List<IType>();
			this.ctors = new List<IMethod>();
			this.methods = new List<IMethod>();
			this.fields = new List<IField>();
			this.properties = new List<IProperty>();
		}
		
		public INamespace DeclaringNamespace { const get; private set; }
		
		private List<IType> baseTypes;
		private List<IMethod> ctors;
		private List<IMethod> methods;
		private List<IField> fields;
		private List<IProperty> properties;
		
		public const IType[] GetBaseTypes()
        {
            return baseTypes.ToArray();
        }
        
        public void AddBaseType(IType BaseType)
        {
        	this.baseTypes.Add(BaseType);
        }

        public const ITypeMember[] GetMembers()
        {
            List<ITypeMember> members = new List<ITypeMember>();
            foreach (var method in methods) members.Add(method);
            foreach (var prop in properties) members.Add(prop);
            foreach (var ctor in ctors) members.Add(ctor);
            foreach (var field in fields) members.Add(field);
            return members.ToArray();
        }

        public const IMethod[] GetMethods()
        {
            return methods.ToArray();
        }
        
        public void AddMethod(IMethod Method)
        {
        	if (Method.IsConstructor)
        		this.ctors.Add(Method);
        	else
        		this.methods.Add(Method);
        }

        public const IProperty[] GetProperties()
        {
            return properties.ToArray();
        }
        
        public void AddProperty(IProperty Property)
        {
        	this.properties.Add(Property);
        }

        public const IMethod[] GetConstructors()
        {
            return ctors.ToArray();
        }

        public const IField[] GetFields()
        {
            return fields.ToArray();
        }
        
        public void AddField(IField Field)
        {
        	this.fields.Add(Field);
        }

        public string FullName
        {
            get
            {
                return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name);
            }
        }

        public IBoundObject GetDefaultValue()
        {
            return null;
        }

        public bool IsContainerType
        {
            const get { return false; }
        }

        public const IContainerType AsContainerType()
        {
            return null;
        }
        
        public IArrayType MakeArrayType(int Rank)
        {
            return new DescribedArrayType(this, Rank);
        }

        public IPointerType MakePointerType(PointerKind PointerKind)
        {
            return new DescribedPointerType(this, PointerKind);
        }

        public IVectorType MakeVectorType(int[] Dimensions)
        {
            return new DescribedVectorType(this, Dimensions);
        }

        public IType MakeGenericType(IEnumerable<IType> TypeArguments)
        {
            return null;
        }

        public IEnumerable<IGenericParameter> GetGenericParameters()
        {
            return (IEnumerable<IGenericParameter>)new IGenericParameter[0];
        }

        public IEnumerable<IType> GetGenericArguments()
        {
            return (IEnumerable<IType>)new IType[0];
        }

        public IType GetGenericDeclaration()
        {
            return this;
        }
        
        public override string ToString()
        {
            return FullName;
        }
	}
}