using System;
using System.Collections.Generic;

namespace Flame.Build
{
	public abstract class TemplatedMethod : IMethod
	{
		public this();
		public this(set IMethod Template);
	
		public IMethod Template { const get; protected set; }
	
		public IType ReturnType : IMethod.ReturnType { const get return Template.ReturnType; }
		public const IParameter[] GetParameters() : IMethod.GetParameters return Template.GetParameters();
		
		public string Name : IMethod.Name { const get return Template.Name; }
		public string FullName : IMethod.FullName { const get return Template.FullName; }
		public IType DeclaringType : IMethod.DeclaringType { const get return Template.DeclaringType; }
		public bool IsStatic : IMethod.IsStatic { const get return Template.IsStatic; }
		public const IMethod[] GetBaseMethods() : IMethod.GetBaseMethods return Template.GetBaseMethods();
		public bool IsConstructor : IMethod.IsConstructor { const get return Template.IsConstructor; }
		public const IEnumerable<IAttribute> GetAttributes() : IMethod.GetAttributes return Template.GetAttributes();
		
		public abstract IMethod MakeGenericMethod(IEnumerable<IType> TypeArguments) : IMethod.MakeGenericMethod;
		public abstract IMethod GetGenericDeclaration() : IMethod.GetGenericDeclaration;
		/// <summary>
        /// Gets this method's generic parameters.
        /// </summary>
        /// <returns></returns>
        public virtual IEnumerable<IGenericParameter> GetGenericParameters() : IMethod.GetGenericParameters return Template.GetGenericParameters();
        /// <summary>
        /// Gets the method's generic arguments.
        /// </summary>
        /// <returns></returns>
        public virtual IEnumerable<IType> GetGenericArguments() : IMethod.GetGenericArguments return Template.GetGenericArguments();
        
        public override int32 GetHashCode()
		{
			return Template.GetHashCode();
		}
		
		public virtual override bool Equals(object Other)
		{
			if (Other is TemplatedMethod)
			{
				return Template.Equals(((TemplatedMethod)Other).Template);
			}
			else
			{
				return Template.Equals(Other);
			}
		}
	}
}