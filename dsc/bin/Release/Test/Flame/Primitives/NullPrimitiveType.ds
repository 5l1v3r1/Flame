using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;

namespace Flame.Primitives
{
	public class NullPrimitiveType : IType
	{
		public const this();

        public int32 Magnitude { const get return 0; }
        public object DefaultValue { const get return null; }
        public string Name { const get return "Null"; }

        public INamespace DeclaringNamespace
        {
            const get
            {
                return new PrimitivesNamespace();
            }
        }

        public ITypeMember[] GetMembers()
        {
            List<ITypeMember> members = new List<ITypeMember>();
            members.AddRange((IEnumerable<ITypeMember>)GetMethods());
            members.AddRange((IEnumerable<ITypeMember>)GetProperties());
            members.AddRange((IEnumerable<ITypeMember>)GetFields());
            members.AddRange((IEnumerable<ITypeMember>)GetConstructors());
            return members.ToArray();
        }

        public IMethod[] GetMethods()
        {
            return new IMethod[0];
        }

        public IProperty[] GetProperties()
        {
            return new IProperty[0];
        }

        public IField[] GetFields()
        {
            return new IField[0];
        }

        public IMethod[] GetConstructors()
        {
            return new IMethod[0];
        }

        public IBoundObject GetDefaultValue()
        {
            return new BoundPrimitive<object>(this, DefaultValue);
        }

        public bool IsContainerType
        {
            get { return false; }
        }

        public IContainerType AsContainerType()
        {
            return null;
        }

        public IArrayType MakeArrayType(int Rank)
        {
        	return new DescribedArrayType(this, Rank);
        }

        public IPointerType MakePointerType(PointerKind PointerKind)
        {
        	return new DescribedPointerType(this, PointerKind);
        }

        public IVectorType MakeVectorType(int[] Dimensions)
        {
        	return new DescribedVectorType(this, Dimensions);
        }

        public IType[] GetBaseTypes()
        {
            return new IType[0];
        }

        public IType GetGenericDeclaration()
        {
            return this;
        }

        public string FullName
        {
            const get 
            {
            	return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name);
            }
        }

        public const IEnumerable<IAttribute> GetAttributes()
        {
            /*return new IAttribute[] { new ValueTypeAttribute() };*/
            return (IEnumerable<IAttribute>)new IAttribute[0];
        }

        public override int GetHashCode()
        {
            return Name.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            return obj is NullPrimitiveType;
        }

        #region Generics

        public IType MakeGenericType(IEnumerable<IType> TypeArguments) : IType.MakeGenericType
        {
        	return this;
        }

        public IEnumerable<IGenericParameter> GetGenericParameters() : IGenericMember.GetGenericParameters
        {
            return new IGenericParameter[0];
        }

        public IEnumerable<IType> GetGenericArguments() : IGenericMember.GetGenericArguments
        {
            return new IType[0];
        }

        #endregion
    }
}