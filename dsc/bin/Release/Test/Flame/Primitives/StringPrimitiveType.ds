using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Attributes;

namespace Flame.Primitives
{
	public class StringPrimitiveType : IType
	{
            public const this();

            public int32 Magnitude { const get return 0; }
            public string DefaultValue { const get return null; }
            public string Name { const get return "String"; }

            public INamespace DeclaringNamespace
            {
                const get
                {
                    return new PrimitivesNamespace();
                }
            }

            public ITypeMember[] GetMembers()
            {
	            List<ITypeMember> members = new List<ITypeMember>();
	            members.AddRange((IEnumerable<ITypeMember>)GetMethods());
	            members.AddRange((IEnumerable<ITypeMember>)GetProperties());
	            members.AddRange((IEnumerable<ITypeMember>)GetFields());
	            members.AddRange((IEnumerable<ITypeMember>)GetConstructors());
	            return members.ToArray();
            }

            public IMethod[] GetMethods()
            {
            	var endsWithMethod = new DescribedMethod("EndsWith", this, PrimitiveTypes.Boolean, false); // const bool EndsWith(string Value);
            	endsWithMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
            	endsWithMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var startsWithMethod = new DescribedMethod("StartsWith", this, PrimitiveTypes.Boolean, false); // const bool StartsWith(string Value);
            	startsWithMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
            	startsWithMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var substringMethod = new DescribedMethod("Substring", this, PrimitiveTypes.String, false); // const string Substring(int StartIndex, int Length);
            	substringMethod.AddParameter(new DescribedParameter("StartIndex", PrimitiveTypes.Int32));
            	substringMethod.AddParameter(new DescribedParameter("Length", PrimitiveTypes.Int32));
            	substringMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var substringStartMethod = new DescribedMethod("Substring", this, PrimitiveTypes.String, false); // const string Substring(int StartIndex);
            	substringStartMethod.AddParameter(new DescribedParameter("StartIndex", PrimitiveTypes.Int32));
            	substringStartMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var indexOfCharMethod = new DescribedMethod("IndexOf", this, PrimitiveTypes.Int32, false); // const int IndexOf(char Value);
            	indexOfCharMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
            	indexOfCharMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var indexOfStringMethod = new DescribedMethod("IndexOf", this, PrimitiveTypes.Int32, false); // const int IndexOf(string Value);
            	indexOfStringMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
            	indexOfStringMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var concatMethod = new DescribedMethod("Concat", this, PrimitiveTypes.String, true); // static const string Concat(string First, string Second);
            	concatMethod.AddParameter(new DescribedParameter("First", PrimitiveTypes.String));
            	concatMethod.AddParameter(new DescribedParameter("Second", PrimitiveTypes.String));
            	concatMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var nullOrEmptyMethod = new DescribedMethod("IsNullOrEmpty", this, PrimitiveTypes.Boolean, true); // static const bool IsNullOrEmpty(string Value);
            	nullOrEmptyMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
            	nullOrEmptyMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var nullOrWhitespaceMethod = new DescribedMethod("IsNullOrWhiteSpace", this, PrimitiveTypes.Boolean, true); // static const bool IsNullOrWhiteSpace(string Value);
            	nullOrWhitespaceMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
            	nullOrWhitespaceMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var splitMethod = new DescribedMethod("Split", this, PrimitiveTypes.String.MakeArrayType(1), false); // const string[] Split(char[] Delimiters);
            	splitMethod.AddParameter(new DescribedParameter("Delimiters", PrimitiveTypes.Char.MakeArrayType(1)));
            	splitMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var replaceMethod = new DescribedMethod("Replace", this, PrimitiveTypes.String, false); // const string Replace(string Value, string NewValue);
            	replaceMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.String));
            	replaceMethod.AddParameter(new DescribedParameter("NewValue", PrimitiveTypes.String));
            	replaceMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var replaceCharMethod = new DescribedMethod("Replace", this, PrimitiveTypes.String, false); // const string Replace(char Value, char NewValue);
            	replaceCharMethod.AddParameter(new DescribedParameter("Value", PrimitiveTypes.Char));
            	replaceCharMethod.AddParameter(new DescribedParameter("NewValue", PrimitiveTypes.Char));
            	replaceCharMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var toLowerMethod = new DescribedMethod("ToLower", this, PrimitiveTypes.String, false); // const string ToLower();
            	toLowerMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var toUpperMethod = new DescribedMethod("ToUpper", this, PrimitiveTypes.String, false); // const string ToUpper();
            	toUpperMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	var trimEndMethod = new DescribedMethod("TrimEnd", this, PrimitiveTypes.String, false); // const string TrimEnd(char[] Elements);
            	trimEndMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	trimEndMethod.AddParameter(new DescribedParameter("Elements", PrimitiveTypes.Char.MakeArrayType(1)));
            	var trimStartMethod = new DescribedMethod("TrimStart", this, PrimitiveTypes.String, false); // const string TrimStart(char[] Elements);
            	trimStartMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	trimStartMethod.AddParameter(new DescribedParameter("Elements", PrimitiveTypes.Char.MakeArrayType(1)));
            	var trimMethod = new DescribedMethod("Trim", this, PrimitiveTypes.String, false); // const string Trim(char[] Elements);
            	trimMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	trimMethod.AddParameter(new DescribedParameter("Elements", PrimitiveTypes.Char.MakeArrayType(1)));
            	
                return new IMethod[]
                {
                    new PrimitiveMethod(this, "ToString", false, PrimitiveTypes.String, new IParameter[0]),
                    endsWithMethod,
                    startsWithMethod,
                    substringMethod,
                    substringStartMethod,
                    indexOfCharMethod,
                    indexOfStringMethod,
                    concatMethod,
                    nullOrEmptyMethod,
                    nullOrWhitespaceMethod,
                    splitMethod,
                    replaceMethod,
                    replaceCharMethod,
                    toLowerMethod,
                    toUpperMethod,
                    trimEndMethod, 
                    trimStartMethod,
                    trimMethod,
                    new GetHashCodeImplementation<string>(this),
                    new EqualsImplementation<string>(this)
                };
            }

            public IProperty[] GetProperties()
            {
            	var lenProp = new DescribedProperty("Length", this, PrimitiveTypes.Int32, false);
            	var getter = new DescribedAccessor(AccessorType.GetAccessor, lenProp, PrimitiveTypes.Int32);
            	getter.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	lenProp.AddAccessor(getter);
            	
            	var indexerProp = new DescribedProperty("this", this, PrimitiveTypes.Char, false);
            	indexerProp.AddAttribute(PrimitiveAttributes.IndexerAttribute);
            	var indexerParam = new DescribedParameter("Index", PrimitiveTypes.Int32);
            	indexerProp.AddIndexerParameter(indexerParam);
            	var indexerGetter = new DescribedAccessor(AccessorType.GetAccessor, indexerProp, PrimitiveTypes.Char);
            	indexerGetter.AddParameter(indexerParam);
            	indexerGetter.AddAttribute(PrimitiveAttributes.ConstantAttribute);
            	indexerProp.AddAccessor(indexerGetter);
            	
            	return new IProperty[] { lenProp, indexerProp };
            }

            public IField[] GetFields()
            {
	            var emptyField = new DescribedLiteralField<string>("Empty", this, string.Empty); // static const string Empty = "";
				emptyField.DeclaringType = this;
				return new IField[] { emptyField };
            }

            public IMethod[] GetConstructors()
            {
                return new IMethod[0];
            }

            public IBoundObject GetDefaultValue()
            {
                return new BoundPrimitive<string>(this, DefaultValue);
            }

            public bool IsContainerType
            {
                get { return false; }
            }

            public IContainerType AsContainerType()
            {
                return null;
            }

            public IArrayType MakeArrayType(int Rank)
            {
            	return new DescribedArrayType(this, Rank);
            }

            public IPointerType MakePointerType(PointerKind PointerKind)
            {
            	return new DescribedPointerType(this, PointerKind);
            }

            public IVectorType MakeVectorType(int[] Dimensions)
            {
            	return new DescribedVectorType(this, Dimensions);
            }

            public IType[] GetBaseTypes()
            {
                return new IType[]
                {
                	PrimitiveTypes.IHashCodeProvider,
                	PrimitiveTypes.IEquatable
                };
            }

            public IType GetGenericDeclaration()
            {
                return this;
            }

            public string FullName
            {
                const get 
                {
                	return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name);
                }
            }

            public const IEnumerable<IAttribute> GetAttributes()
            {
                return (IEnumerable<IAttribute>)new IAttribute[] { PrimitiveAttributes.ReferenceTypeAttribute };
            }

            public override int GetHashCode()
            {
                return Name.GetHashCode();
            }

            public override bool Equals(object obj)
            {
            	return obj is StringPrimitiveType;
            }

            #region Generics

            public IType MakeGenericType(IEnumerable<IType> TypeArguments) : IType.MakeGenericType
            {
            	return this;
            }

            public IEnumerable<IGenericParameter> GetGenericParameters() : IGenericMember.GetGenericParameters
            {
                return new IGenericParameter[0];
            }

            public IEnumerable<IType> GetGenericArguments() : IGenericMember.GetGenericArguments
            {
                return new IType[0];
            }

            #endregion
        }
}