using System;
using System.Collections.Generic;

namespace Flame
{
    public interface IMethod : ITypeMember, IGenericMember
    {
        /// <summary>
        /// Gets the method's return type.
        /// </summary>
        IType ReturnType { const get; }
        /// <summary>
        /// Gets the method's parameters.
        /// </summary>
        const IParameter[] GetParameters();

        /// <summary>
        /// Gets a boolean value that indicates if this method is a constructor.
        /// </summary>
        bool IsConstructor { const get; }
        
        /// <summary>
        /// Gets the method's base methods.
        /// </summary>
        const IMethod[] GetBaseMethods();

        /// <summary>
        /// Invokes the method with the provided caller and arguments.
        /// </summary>
        /// <param name="Caller"></param>
        /// <param name="Arguments"></param>
        /// <returns></returns>
        IBoundObject Invoke(IBoundObject Caller, IEnumerable<IBoundObject> Arguments);

        /// <summary>
        /// Gets a generic method of this type with the provided type arguments.
        /// </summary>
        /// <param name="TypeArguments"></param>
        /// <returns></returns>
        IMethod MakeGenericMethod(IEnumerable<IType> TypeArguments);

        /// <summary>
        /// Gets the method's generic declaration.
        /// </summary>
        /// <returns></returns>
        IMethod GetGenericDeclaration();
    }
    public interface IAccessor : IMethod
    {
        /// <summary>
        /// Gets the accessor's type.
        /// </summary>
        AccessorType AccessorType { get; }
        /// <summary>
        /// Gets the property this accessor belongs to.
        /// </summary>
        IProperty DeclaringProperty { get; }
    }
}