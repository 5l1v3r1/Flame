namespace Engine
{
    /// <summary>
    /// Describes a surface: an object that specifies its own dimensions.
    /// </summary>
    public interface ISurface
    {
        /// <summary>
        /// Gets the surface's width.
        /// </summary>
        double Width { const get; }
        /// <summary>
        /// Gets the surface's height.
        /// </summary>
        double Height { const get; }
    }

    /// <summary>
    /// Provides common functionality for a render context, which is a surface that supports the creation of primitive shapes.
    /// </summary>
    public interface IRenderContext : ISurface
    {
        const IPartialSegment CreateLineSegment(Vector2<double> Start);
        
        // const IPartialSegment CreateBezierSegment(Vector2<double> Start, Vector2<double> ControlPoint1, Vector2<double> ControlPoint2);
        
        const IShape CreateShape(IPartialSegment[] Segments, Vector2<double> End);

        const IShape CreateTriangle(Vector2<double> Point1, Vector2<double> Point2, Vector2<double> Point3);
    }

    /// <summary>
    /// Describes a render target, which is a surface that can be drawn to.
    /// </summary>
    public interface IRenderTarget : ISurface
    {
        /// <summary>
        /// Gets the render target's render context, which supports the creation of shapes to draw on this render target.
        /// </summary>
        IRenderContext Context { const get; }
    }
}