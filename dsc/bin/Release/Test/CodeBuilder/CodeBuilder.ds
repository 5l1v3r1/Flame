using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.Compiler
{
    public class CodeBuilder
    {
        public const this()
        {
			Init();
        }
        public const this(string Code)
        {
        	Init();
            string[] codeLines = Code.Replace("\r", "").Split(new char[] { '\n' });
            for (int32 i = 0; i < codeLines.Length; i++)
            {
                AddLine(codeLines[i]);
            }
        }
        private void Init()
        {
        	indentation = 0;
            lines = new List<CodeLine>();
            IndentationString = "\t"
        }

        private List<CodeLine> lines;
        private int indentation;
        public string IndentationString { const get; set; }

        #region Increase/Decrease Indentation

        public void IncreaseIndentation()
        {
            indentation++;
        }
        public void DecreaseIndentation()
        {
            if (indentation > 0)
            {
                indentation--;
            }
        }

        #endregion

        #region Append

        public void Append(char Character)
        {
            Append(Character.ToString());
        }
        public void Append(string Text)
        {
            if (lines.Count == 0)
            {
                AddLine();
            }
            string[] splitText = Text.Replace("\r", "").Split(new char[] { '\n' });
            var oldLine = lines[lines.Count - 1];
            lines[lines.Count - 1] = new CodeLine(oldLine.Text + splitText[0], oldLine.Indentation);
            for (int i = 1; i < splitText.Length; i++)
            {
	        	AddLine(splitText[i]);
	        }
        }
        public void Append(CodeBuilder Builder)
        {
            if (Builder.lines.Count > 0)
            {
                if (lines.Count == 0)
                {
                    AddLine();
                }
                var oldLine = lines[lines.Count - 1];
                lines[lines.Count - 1] = new CodeLine(oldLine.Text + Builder.lines[0].Text, oldLine.Indentation);
                for (int i = 1; i < Builder.lines.Count; i++)
                {
                    CodeLine item = Builder.lines[i];
                    AddLine(new CodeLine(item.Text, item.Indentation + indentation));
                }
            }
        }
        public void AppendLine(string Text)
        {
            Append(Text);
            AddLine();
        }
        public void AppendLine()
        {
            AddLine();
        }

        #endregion

        #region AddLine

        public void AddLine()
        {
            AddLine("");
        }
        public void AddEmptyLine()
        {
            AddLine("\0");
        }
        public void AddLine(string Text)
        {
            lines.Add(new CodeLine(Text, indentation));
        }
        public void AddLine(CodeLine Line)
        {
            lines.Add(Line);
        }
        public void AddCodeBuilder(CodeBuilder Builder)
        {
            foreach (var item in Builder.lines)
            {
                AddLine(new CodeLine(item.Text, item.Indentation + indentation));
            }
        }

        #endregion

        public int LineCount
        {
            const get
            {
                return lines.Count;
            }
        }

        public void InsertLine(int Index, CodeLine Line)
        {
            lines.Insert(Index, Line);
        }

        public CodeLine this[int index]
        {
            const get { return lines[index]; }
            set { lines[index] = value; }
        }
        
        public const char CharacterAt(int Index)
        {
        	int count = 0;
            for (int i = 0; i < lines.Count; i++)
            {
            	StringBuilder sb = new StringBuilder();
                var line = lines[i];
                if (line.Text == "\0")
                {
                	for (int32 j = 0; i < line.Indentation; j++)
                	{
                		sb.Append(IndentationString);
                	}
                	sb.AppendLine();
                }
                else if (!line.IsWhitespace)
                {
                    sb.AppendLine(lines[i].ToString(IndentationString));
                }
                
                if (Index < count + sb.Length)
                {
                	return sb[Index - count];
                }
                else
                {
                	count += sb.Length;
                }
            }
            return default(char);
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < lines.Count; i++)
            {
                var line = lines[i];
                if (line.Text == "\0")
                {
                	for (int32 j = 0; i < line.Indentation; j++)
                	{
                		sb.Append(IndentationString);
                	}
                	sb.AppendLine();
                }
                else if (!line.IsWhitespace)
                {
                    sb.AppendLine(lines[i].ToString(IndentationString));
                }
            }
            return sb.ToString().TrimEnd(new char[] { '\r', '\n', '\t', ' ' });
        }
    }
}