using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

public module MergeModule<T1, T2>
{
    public static [T3] Merge<T3>([T1] First, [T2] Second, T3(T1, T2) Function)
    {
        foreach (var left in First, var right in Second)
            yield return Function(left, right);
    }
}

public static class LowerYieldTest
{
    public const [double] Fibonacci()
    {
        double val1 = 0.0;
        double val2 = 1.0;
        yield return val1;
        yield return val2;
        while (true)
        {
            double nextValue = val1 + val2;
            val1 = val2;
            val2 = nextValue;
            yield return val2;
        }
    }

    public const [double] Linear()
    {
        double val = 0.0;
        while (true)
        {
            yield return val;
            val++;
        }
    }

    public const double Multiply(double First, double Second)
    {
        return First * Second;
    }

    public const [double] Multiply([double] First, [double] Second)
    {
        return MergeModule<double, double>.Merge<double>(First, Second, Multiply);
    }

    private string PrintSequence<T>([T] Values)
        where T : object
    {
        var result = new StringBuilder();
        bool isFirst = true;
        foreach (var item in Values)
        {
            if (isFirst) isFirst = false;
            else result.Append(" ");

            result.Append(item);
        }
        return (string)result;
    }

    public void Main(string[] Args)
    {
        var results = Multiply(Fibonacci(), Enumerable.Take<double>(Linear(), 5));
        Console.WriteLine("Results: " + PrintSequence<double>(results));
        Console.WriteLine("Expected: " + PrintSequence<double>(new double[] { 0, 1, 2, 6, 12 }));
    }
}
