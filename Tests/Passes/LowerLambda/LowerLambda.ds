using System;
using System.Collections.Generic;
using System.Text;

public static class Program
{
    public TOut[] Map<TIn, TOut>(TOut(TIn) Function, TIn[] Values)
    {
        var results = new TOut[Values.Length];
        foreach (var input in Values, var output in results)
        {
            output = Function(input);
        }
        return results;
    }

    /// <summary>
    /// Defines partial application for functions that take two arguments.
    /// </summary>
    public T3(T2) Partial<T1, T2, T3>(T3(T1, T2) Function, T1 Arg)
    {
        return T3(T2 x) => Function(Arg, x);
    }

    public T1(T2) Constant<T1, T2>(T1 Value)
    {
        return T1(T2) => Value;
    }

    public object() GetThis
    {
        const get return object() => this;
    }

    public T3(T2)(T1) Curry<T1, T2, T3>(T3(T1, T2) Function)
    {
        return T3(T2)(T1 x) => T3(T2 y) => Function(x, y);
    }

    public TOut[](TIn[]) PartialMap<TIn, TOut>(TOut(TIn) Function)
    {
        alias funcType = TOut(TIn);

        return Partial<funcType, TIn[], TOut[]>(Map<TIn, TOut>, Function);
    }

    public int[](int[]) DoubleAll
    {
        const get return PartialMap<int, int>(int(int x) => x * 2);
    }

    public string PrintAll(int[] Args)
    {
        var print = string(int x) => (string)x;
        var vals = Map<int, string>(print, Args);
        return PrintArray(vals);
    }

    public string PrintArray(string[] Values)
    {
        var result = new StringBuilder();
        result.Append('{');
        bool first = true;
        foreach (var item in Values)
        {
            result.Append(' ');
            if (first)
                first = false;
            else
                result.Append(',');
            result.Append(item);
        }
        result.Append('}');
        return (string)result;
    }

    public void Main(string[] Input)
    {
        Console.WriteLine(PrintAll(new int[] { 1, 2, 3 }));
    }
}
