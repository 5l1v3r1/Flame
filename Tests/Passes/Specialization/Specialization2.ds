using System;
using System.Collections.Generic;
using System.Linq;

public interface INum<T>
{
    T Zero { get; }
    T One { get; }
    T Add(T a, T b);
    bool IsLessThan(T a, T b);
    bool Equals(T a, T b);
    bool IsGreaterThan(T a, T b);
}

public static class IntNum : INum<int>
{
    public int Zero { get { return 0; } }
    public int One { get { return 1; } }

    public int Add(int a, int b)
    {
        return a + b;
    }

    public bool IsLessThan(int a, int b)
    {
        return a < b;
    }

    public bool IsGreaterThan(int a, int b)
    {
        return a > b;
    }

    public bool Equals(int a, int b)
    {
        return a == b;
    }
}

public module FindSorted
{
    public int FindSorted<T>(T Item, T[] Data, int first, int last, INum<T> NumImpl)
    {
        if (first > last)
            return -1;

        int mid = (first + last) / 2;

        if (NumImpl.Equals(Item, Data[mid]))
            return mid;
        else if (NumImpl.IsLessThan(Item, Data[mid]))
            return FindSorted<T>(Item, Data, first, mid - 1, NumImpl);
        else
            return FindSorted<T>(Item, Data, mid + 1, last, NumImpl);
    }

    private T[] CreateArray<T>(int n, INum<T> NumImpl)
    {
        T[] results = new T[n];
        T val = NumImpl.Zero;
        for (int i = 0; i < n; i++)
        {
            results[i] = val;
            val = NumImpl.Add(val, NumImpl.One);
        }
        return results;
    }

    public void Main(string[] Args)
    {
        int n, i;
        if (Args.Length > 0)
            n = int.Parse(Args[0]);
        else
            n = 2000;

        if (Args.Length > 1)
            i = int.Parse(Args[1]);
        else
            i = n / 2 - 1;

        var arr = CreateArray<int>(n, IntNum);
        Console.WriteLine(FindSorted<int>(i, arr, 0, arr.Length, IntNum));
    }
}
