using System;

public static class Test
{
    public const int AddOne(int Value)
    {
        int one = 1;
        return Value + one;
    }

    public const int DeadStore()
    {
        int x = 3;
        return 5;
    }

    public const int PropagateCopy(int X)
    {
        int y = X;
        return y;
    }

    public const int Select(int X, int Y)
    {
        int z = 5;
        if (X > Y)
        {
            int w = z + X;
            z = w;
            return z;
        }
        else
        {
            return Y;
        }
    }

    public const int Sum(int N, int(int) Func)
    {
        int result = 0;
        for (int i = 0; i < N; i++)
        {
            result += Func(i);
        }
        return result;
    }

    public const int InlineSum(int N)
    {
        var thisCopy = this;
        int nCopy = N;
        int result = 0;
        int(int) Func = thisCopy.PropagateCopy;
        for (int i = 0; i < nCopy; i++)
        {
            result += Func(i);
        }
        return result;
    }

    public int MaterializeCopy(int X)
    {
        // -fpropagate-locals should not propagate `int z = X;` here,
        // as doing so would change the program's meaning.

        int z = X;
        X = z + 5;
        Console.WriteLine(z + " -> " + X);
        return X;
    }
}
