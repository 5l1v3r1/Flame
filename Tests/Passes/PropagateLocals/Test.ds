using System;
using System.Collections.Generic;

public static class Test
{
    public const int AddOne(int Value)
    {
        int one = 1;
        return Value + one;
    }

    public const int AddFive(int Value)
    {
        int one   = 1;
        int two   = one + one;
        int three = two + one;
        int five  = three + two;
        return Value + five;
    }

    public const int AddTen(int Value)
    {
        int(int) func = AddFive;

        return func(func(Value));
    }

    public const int DeadStore()
    {
        int x = 3;
        return 5;
    }

    public const int PropagateCopy(int X)
    {
        int y = X;
        return y;
    }

    public const int SelfAssign(int X)
    {
        X = X; // Eliminating this is a cool side-effect of copy propagation
        return X;
    }

    public const int Select(int X, int Y)
    {
        int z = 5;
        if (X > Y)
        {
            int w = z + X;
            z = w;
            return z;
        }
        else
        {
            return Y;
        }
    }

    public const int Sum(int N, int(int) Func)
    {
        int result = 0;
        for (int i = 0; i < N; i++)
        {
            result += Func(i);
        }
        return result;
    }

    public const int InlineSum(int N)
    {
        var thisCopy = this;
        int nCopy = N;
        int result = 0;
        int(int) Func = thisCopy.PropagateCopy;
        for (int i = 0; i < nCopy; i++)
        {
            result += Func(i);
        }
        return result;
    }

    public int MaterializeCopy(int X)
    {
        // -fpropagate-locals should not propagate `int z = X;` here,
        // as doing so would change the program's meaning.

        int z = X;
        X = z + 5;
        Console.WriteLine(z + " -> " + X);
        return X;
    }

    public int Sum([int] Values)
    {
        int result = 0;
        foreach (var item in Values)
        {
            int x = result + item;
            result = x;
        }
        return result;
    }

    public const bool AnyInRange(int N, bool(int) Pred)
    {
        // Analysis of what -fpropagate-locals does (roughly), and why
        // cyclic variable definition dependencies matter.

        bool inserted = false; // inserted0 := false

        for (int i = 0; i < N; i++)
        {
            // inserted3 := phi(inserted0, inserted2)
            // ^~~~~~~~~ depends on `inserted2`

            if (Pred(i))
            {
                inserted = true; // inserted1 := true
                break;
            }
            // inserted2 := phi(inserted3, inserted1)
            // ^~~~~~~~~ depends on `inserted3`
            //
            // Old method:
            //     Liveliness analysis does not take any parameters. If a definition's
            //     liveliness depends on that of another, the other definition's liveliness
            //     is determined first.
            //
            //     Therefore, to determine either `inserted2`/`inserter3`'s liveliness,
            //     we must first know if the other definition is live,
            //     which is done by making the exact same function call as before.
            // ==> Infinite recursion
            // ==> Cyclic dependencies must be handled properly by -fpropagate-locals

            // New method:
            //     Cyclic dependencies do not result in infinite recursion.
            //     Instead, variable definitions that depend solely on a cyclic
            //     dependency to determine their liveliness are assumed to be dead.
        }

        return inserted;
    }

    public const int FirstOrZero([int] Values)
    {
        int result = 0;
        foreach (var item in Values)
        {
            // -fpropagate-locals cannot always just assign variables at the last
            // possible instance, because a `break;` or `continue;` could turn
            // said assignment into dead code.

            int x = item;
            result = x; // <-- -fpropagate-locals should propagate this copy
                        //     under normal circumstances. It should not, however,
                        //     delay the assignment until after the `break;` statement.
            break;
        }
        return result;
    }

    public const int DelayAssignment(int N)
    {
        int i = 0;
        while (true)
        {
            i = 3; // -fpropagate-locals will first delay this assignment until after `return N;`,
                   // and the associated dce pass will take care of the rest.
            return N;
        }
        return i;
    }
}
