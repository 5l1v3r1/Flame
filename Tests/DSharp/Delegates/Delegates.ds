using System;
using System.Collections.Generic;

public struct IntValue
{
    public const this(set int Data);

    public int Data;

    public const IntValue Add(IntValue Val)
    {
        return new IntValue(Data + Val.Data);
    }
}

public class DelegatesTest
{
    public virtual const int Twice(int Value)
    {
        return Value * 2;
    }
    public virtual const double Twice(double Value)
    {
        return Value * 2.0;
    }
    public virtual const IntValue Twice(IntValue Value)
    {
        return Value.Add(Value);
    }

    public virtual const [V] Apply<T, V>([T] Values, V(T) Func)
    {
        var results = new List<V>();
        foreach (var item in Values)
        {
            results.Add(Func(item));
        }
        return results;
    }

    public virtual const [int] Double([int] Values)
    {
        return Apply<int, int>(Values, Twice);
    }
    public virtual const [double] Double([double] Values)
    {
        return Apply<double, double>(Values, Twice);
    }
    public virtual const [IntValue] Double([IntValue] Values)
    {
        return Apply<IntValue, IntValue>(Values, Twice);
    }

    public virtual const IntValue Convert(int Value)
    {
        return new IntValue(Value);
    }
    public virtual const [T] Convert<T>([IntValue] Values, T(IntValue) Converter)
    {
        return Apply<IntValue, T>(Values, Converter);
    }
}
