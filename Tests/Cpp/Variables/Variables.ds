
/// <summary>
/// A small test suite for local variables.
/// </summary>
public class VariablesTest
{
    /// <summary>
    /// Tests variable declarations in a single block.
    /// </summary>
    public const int Accumulate(int A, int B, int C)
    {
        int result = A;
        result += B;
        result += C;
        return result;
    }

    /// <summary>
    /// Tests variable declarations in for loops.
    /// </summary>
    public const int Sum(int[] Values)
    {
        int result = 0;
        for (int i = 0; i < Values.Length; i++)
        {
            result += Values[i];
        }
        return result;
    }

    /// <summary>
    /// Tests variable declarations in and around if blocks.
    /// </summary>
    public const int Ternary(bool Condition, int First, int Second)
    {
        int result;
        if (Condition)
        {
            int temp = First;
            result = temp;
        }
        else
        {
            double temp = Second; // Obviously, this is a distinct variable.
                                  // Declaring temp as a double here will
                                  // stop dsc from acting all smart and reusing
                                  // a variable.
            result = (int)temp;
        }
        return result;
    }

    /// <summary>
    /// Tests whether a variable is inserted optimally.
    /// </summary>
    public const int OptimalInsertion(int A, int B, int C)
    {
        int result;
        if (A < B)
        {
            if (A < C)
            {
                result = A;
                return result;
            }
        }
        return B + C;
    }
}
