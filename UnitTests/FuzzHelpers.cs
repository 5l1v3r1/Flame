using System;
using System.Numerics;
using Flame.Constants;

namespace UnitTests
{
    /// <summary>
    /// A collection of helpers that make it easier to randomly generate values.
    /// </summary>
    public static class FuzzHelpers
    {
        /// <summary>
        /// Generates a random integer constant.
        /// </summary>
        /// <param name="random">A random number generator.</param>
        /// <returns>An integer constant that conforms to its spec.</returns>
        public static IntegerConstant NextIntegerConstant(this Random random)
        {
            return random.NextIntegerConstant(random.NextIntegerSpec());
        }

        /// <summary>
        /// Generates a random integer constant that conforms to a particular spec.
        /// </summary>
        /// <param name="random">A random number generator.</param>
        /// <param name="spec">The spec for the integer constant to generate.</param>
        /// <returns>An integer constant that conforms to its spec.</returns>
        public static IntegerConstant NextIntegerConstant(this Random random, IntegerSpec spec)
        {
            var bigNum = BigInteger.Zero;
            for (int i = 0; i < spec.Size / 30; i++)
            {
                bigNum = (bigNum << 30) | random.Next(0, 1 << 30);
            }
            bigNum = (bigNum << (spec.Size % 30)) | random.Next(0, 1 << (spec.Size % 30));
            return new IntegerConstant(bigNum, spec).Normalized;
        }

        /// <summary>
        /// Generates a random integer spec.
        /// </summary>
        /// <param name="random">A random number generator.</param>
        /// <returns>An integer spec.</returns>
        public static IntegerSpec NextIntegerSpec(this Random random)
        {
            return random.NextIntegerSpec(4097);
        }

        /// <summary>
        /// Generates a random integer spec.
        /// </summary>
        /// <param name="random">A random number generator.</param>
        /// <param name="maxSize">
        /// The size of the largest integer spec that can be generated by this function.
        /// </param>
        /// <returns>An integer spec.</returns>
        public static IntegerSpec NextIntegerSpec(this Random random, int maxSize)
        {
            return new IntegerSpec(random.Next(1, maxSize), random.NextBoolean());
        }

        /// <summary>
        /// Generates a random Boolean.
        /// </summary>
        /// <param name="random">A random number generator.</param>
        /// <returns>A Boolean value.</returns>
        public static bool NextBoolean(this Random random)
        {
            return random.Next(0, 2) == 0;
        }
    }
}