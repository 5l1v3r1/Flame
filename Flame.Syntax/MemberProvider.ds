using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Syntax;

namespace Flame.Syntax
{
    public class MemberProvider : IMemberProvider
    {
        public const this(IExtensionTypeProvider GlobalExtensionTypeProvider, set IBinder Binder)
        {
            this.ExtensionTypeProvider = new LocalExtensionTypeProvider(GlobalExtensionTypeProvider, Binder);
            this.memberMapping = new ConcurrentDictionary<IType, ITypeMember[]>();
        }
        public const this(set IBinder Binder)
        {
            this.ExtensionTypeProvider = new LocalExtensionTypeProvider(Binder);
            this.memberMapping = new ConcurrentDictionary<IType, ITypeMember[]>();
        }

        public IExtensionTypeProvider ExtensionTypeProvider { const get; private set; }

        public IType[] ExtensionTypes
        {
            const get
            {
                return ExtensionTypeProvider.ExtensionTypes;
            }
        }
        private ConcurrentDictionary<IType, ITypeMember[]> memberMapping;

        public IBinder Binder { const get; private set; }

        private ITypeMember[] GetMembersCore(IType Type)
        {
            var members = new HashSet<ITypeMember>();
            members.UnionWith(Type.GetAllMembers());

            if (Type.IsPureInterface)
            {
                var rootType = Binder.RootType;
                if (rootType != null)
                {
                    members.UnionWith(GetMembers(rootType));
                }
            }

            foreach (var related in Type.GetAssociatedTypes())
            {
                members.UnionWith(related.GetAllMembers());
            }

            foreach (var item in ExtensionTypes)
            {
                foreach (var method in item.GetMethods())
                {
                    if (method.IsExtension && Type.Is(method.GetParameters()[0].ParameterType))
                    {
                        members.Add(method);
                    }
                }
                foreach (var prop in item.Properties)
                {
                    if (prop.IsExtension && Type.Is(prop.GetIndexerParameters()[0].ParameterType))
                    {
                        members.Add(prop);
                    }
                }
            }

            return Enumerable.ToArray<ITypeMember>(members);
        }

        public [ITypeMember] GetMembers(IType Type)
        {
            return memberMapping.GetOrAdd(Type, GetMembersCore);
        }
    }
}
