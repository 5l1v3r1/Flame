using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Syntax;

namespace Flame.Syntax
{
    public class CurriedClosure<T1, T2, T3, T4>
    {
        public const this(set T4(T1, T2, T3) Delegate, set T1 Arg0);

        public T4(T1, T2, T3) Delegate { const get; private set; }
        public T1 Arg0 { const get; private set; }

        public T4 Invoke(T2 Arg1, T3 Arg2)
        {
            return Delegate(Arg0, Arg1, Arg2);
        }
    }

    public class MemberProvider : IMemberProvider
    {
        public const this(IExtensionTypeProvider GlobalExtensionTypeProvider, set IBinder Binder)
        {
            this.ExtensionTypeProvider = new LocalExtensionTypeProvider(GlobalExtensionTypeProvider, Binder);
            this.memberMapping = new ConcurrentDictionary<IType, ITypeMember[]>();
        }
        public const this(set IBinder Binder)
        {
            this.ExtensionTypeProvider = new LocalExtensionTypeProvider(Binder);
            this.memberMapping = new ConcurrentDictionary<IType, ITypeMember[]>();
        }

        public IExtensionTypeProvider ExtensionTypeProvider { const get; private set; }

        public IType[] ExtensionTypes
        {
            const get
            {
                return ExtensionTypeProvider.ExtensionTypes;
            }
        }
        private ConcurrentDictionary<IType, ITypeMember[]> memberMapping;

        public IBinder Binder { const get; private set; }

        private bool IsShadowed(IType Type, IMethod Bottom, IMethod Top)
        {
            if (Bottom.IsExtension && Bottom.DeclaringType.Equals(Type))
            {
                return false;
            }
            else
            {
                return Top.ShadowsExtension(Bottom);
            }
        }

        private bool IsShadowed(IType Type, IProperty Bottom, IProperty Top)
        {
            if (Bottom.IsExtension && Bottom.DeclaringType.Equals(Type))
            {
                return false;
            }
            else
            {
                return Top.ShadowsExtension(Bottom);
            }
        }

        private ITypeMember[] GetMembersCore(IType Type)
        {
            var members = new HashSet<ITypeMember>();
            members.UnionWith(Type.GetAllMembers());

            if (Type.IsPureInterface)
            {
                var rootType = Binder.RootType;
                if (rootType != null)
                {
                    members.UnionWith(GetMembers(rootType));
                }
            }

            foreach (var related in Type.GetAssociatedTypes())
            {
                members.UnionWith(related.GetAllMembers());
            }

            var methods = new HashSet<IMethod>(Enumerable.OfType<IMethod>(members));
            members.ExceptWith(methods);
            var properties = new HashSet<IProperty>(Enumerable.OfType<IProperty>(members));
            members.ExceptWith(properties);

            foreach (var item in ExtensionTypes)
            {
                foreach (var method in item.GetMethods())
                {
                    if (method.IsExtension && Type.Is(method.GetParameters()[0].ParameterType))
                    {
                        methods.Add(method);
                    }
                }
                foreach (var prop in item.Properties)
                {
                    if (prop.IsExtension && Type.Is(prop.GetIndexerParameters()[0].ParameterType))
                    {
                        properties.Add(prop);
                    }
                }
            }

            members.UnionWith(SetExtensions.UpperBounds<IMethod>(methods,
                new CurriedClosure<IType, IMethod, IMethod, bool>(IsShadowed, Type).Invoke));
            members.UnionWith(SetExtensions.UpperBounds<IProperty>(properties,
                new CurriedClosure<IType, IProperty, IProperty, bool>(IsShadowed, Type).Invoke));

            return Enumerable.ToArray<ITypeMember>(members);
        }

        public [ITypeMember] GetMembers(IType Type)
        {
            return memberMapping.GetOrAdd(Type, GetMembersCore);
        }
    }
}
