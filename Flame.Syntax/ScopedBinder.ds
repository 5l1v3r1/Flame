using System;
using System.Collections.Generic;
using System.Text;
using Flame.Binding;
using Flame.Compiler;

namespace Flame.Syntax
{
	public class ScopedBinder : IScopedBinder
	{
		protected const this(set IBinder Binder, set ISyntaxState State, List<NamespaceScope> Scopes)
		{
			this.scopes = new List<NamespaceScope>(Scopes);
		}
		public const this(set IBinder Binder, set ISyntaxState State)
        {
        	this.scopes = new List<NamespaceScope>();
        	PushScope();
        }

		public IBinder Binder { const get; private set; }
		public ISyntaxState State { const get; private set; }

		private List<NamespaceScope> scopes;

		public NamespaceScope CurrentScope
		{
			const get return scopes[scopes.Count - 1];
		}

		public IScopedBinder PopScope()
		{
			if (scopes.Count > 1)
			{
				var newBinder = new ScopedBinder(Binder, State, scopes);
				newBinder.scopes.RemoveAt(scopes.Count - 1);
				return newBinder;
			}
			else
			{
				return new ScopedBinder(Binder, State, scopes);
			}
		}
		public IScopedBinder PushScope()
		{
			return PushScope(new SimpleName(""));
		}
		public IScopedBinder PushScope(UnqualifiedName Name)
		{
			var newBinder = new ScopedBinder(Binder, State, scopes);
			newBinder.scopes.Add(new NamespaceScope(Name));
			return newBinder;
		}
		public IScopedBinder PushScope(UnqualifiedName Name, INamespace CurrentNamespace)
		{
			var newBinder = new ScopedBinder(Binder, State, scopes);
			newBinder.scopes.Add(new NamespaceScope(Name, CurrentNamespace));
			return newBinder;
		}

        public void UseNamespace(QualifiedName Namespace)
        {
        	CurrentScope.UsingNamespaces.Add(Namespace);
			usingNs = null;
        }

        public void MapNamespace(UnqualifiedName Key, QualifiedName Namespace)
        {
        	CurrentScope.MappedNamespaces[Key] = Namespace;
			mappedNs = null;
        }

		public void UseAlias(UnqualifiedName Key, ITypeSyntax Alias)
		{
			CurrentScope.Aliases[Key] = Alias;
			allAliases = null;
		}

        public INamespace CurrentNamespace
        {
        	const get
        	{
        		for (int i = scopes.Count - 1; i >= 0; i--)
				{
					if (scopes[i].CurrentNamespace != null)
						return scopes[i].CurrentNamespace;
				}
				return null;
        	}
        }

        private QualifiedName[] localNs;
        protected QualifiedName[] LocalNamespaces
        {
            const get
            {
                if (localNs == null)
                {
                    var ns = new List<QualifiedName>();
                    var qualifier = default(QualifiedName);
					for (int i = 0; i < scopes.Count; i++)
                    {
                    	var scopeName = scopes[i].Name;
                    	if (!string.IsNullOrWhiteSpace(scopeName.ToString()))
                    	{
							var qualName = new QualifiedName(scopeName);
                    		if (!qualifier.IsEmpty)
								qualName = qualName.Qualify(qualifier);

                        	ns.Add(qualName);
							qualifier = qualName;
                    	}
                    }
                    localNs = ns.ToArray();
                }
                return localNs;
            }
        }

        public override IEnvironment Environment : IBinder.Environment { const get return Binder.Environment; }

        public override IType BindType(QualifiedName Name)
        {
			var typeAliases = Aliases;
			if (!Name.IsQualified && typeAliases.ContainsKey(Name.Qualifier))
			{
				var aliasType = typeAliases[Name.Qualifier].CreateType(State);
				if (VerifyMatch(aliasType))
					return aliasType;
			}

            IType type = Binder.BindType(Name);
            if (VerifyMatch(type))
            {
                return type;
            }
            if (Name.IsQualified
				&& MappedNamespaces.TryGetValue(Name.Qualifier, &QualifiedName namePrefix))
            {
				var newName = Name.Name.Qualify(namePrefix);
                type = Binder.BindType(newName);
                if (VerifyMatch(type))
                    return type;
            }
            foreach (var item in UsingNamespaces)
            {
                var newName = Name.Qualify(item);
                type = Binder.BindType(newName);
                if (VerifyMatch(type))
                    return type;
            }
            return null;
        }

        #region Match Verification

        protected bool VerifyMatch(IType Type)
        {
            if (Type == null)
            {
                return false;
            }
			else if (CurrentNamespace == null)
			{
				return true;
			}
            else
            {
                var accessModifier = Type.Access;
                if (accessModifier == AccessModifier.Assembly)
                	return VerifyAssemblyType(Type);
                else if (accessModifier == AccessModifier.Protected)
                	return VerifyProtectedType(Type);
                else if (accessModifier == AccessModifier.ProtectedAndAssembly)
                	return VerifyAssemblyType(Type) && VerifyProtectedType(Type);
                else if (accessModifier == AccessModifier.ProtectedOrAssembly)
                	return VerifyAssemblyType(Type) || VerifyProtectedType(Type);
                else if (accessModifier == AccessModifier.Private)
                	return VerifyPrivateType(Type);
				else
					return true;
            }
        }

        protected bool VerifyPrivateType(IType Type)
        {
            if (!(CurrentNamespace is IType))
            {
                return false;
            }
            var declType = (IType)Type.DeclaringNamespace;
            if (declType != null)
            {
                if (declType.Equals(CurrentNamespace))
                {
                    return true;
                }
                else
                {
                    return VerifyPrivateType(declType);
                }
            }
            else
            {
                return false;
            }
        }

        protected bool VerifyProtectedType(IType Type)
        {
            if (!(CurrentNamespace is IType))
            {
                return false;
            }
            var declType = (IType)Type.DeclaringNamespace;
            if (declType != null)
            {
                if (declType.Is((IType)CurrentNamespace))
                {
                    return true;
                }
                else
                {
                    return VerifyPrivateType(declType);
                }
            }
            else
            {
                return false;
            }
        }

        protected bool VerifyAssemblyType(IType Type)
        {
        	if (CurrentNamespace == null)
        	{
        		return false;
        	}
            return CurrentNamespace.DeclaringAssembly.Equals(Type.DeclaringNamespace.DeclaringAssembly);
        }

        #endregion

		private HashSet<QualifiedName> usingNs;
        public [QualifiedName] UsingNamespaces
        {
	        const get
	        {
	        	if (object.ReferenceEquals(usingNs, null))
				{
		        	var usingNamespaces = new HashSet<QualifiedName>();
					usingNamespaces.UnionWith(LocalNamespaces);
					for (int i = 0; i < scopes.Count; i++)
                    {
		        		usingNamespaces.UnionWith(scopes[i].UsingNamespaces);
		        	}
		        	usingNs = usingNamespaces;
		        }
	            return usingNs;
	        }
        }


		private Dictionary<UnqualifiedName, QualifiedName> mappedNs;
        public IReadOnlyDictionary<UnqualifiedName, QualifiedName> MappedNamespaces
        {
        	const get
        	{
        		if (mappedNs == null)
				{
	                var dict = new Dictionary<UnqualifiedName, QualifiedName>();
	        		foreach (var item in scopes)
	        		{
	        			foreach (var map in item.MappedNamespaces)
	        			{
	        				dict[map.Key] = map.Value;
	        			}
	        		}
	        		mappedNs = dict;
	        	}
	        	return mappedNs;
        	}
        }

		private Dictionary<UnqualifiedName, ITypeSyntax> allAliases;
		public IReadOnlyDictionary<UnqualifiedName, ITypeSyntax> Aliases
		{
			const get
			{
				if (allAliases == null)
				{
					var dict = new Dictionary<UnqualifiedName, ITypeSyntax>();
					foreach (var item in scopes)
					{
						foreach (var map in item.Aliases)
						{
							dict[map.Key] = map.Value;
						}
					}
					allAliases = dict;
				}
				return allAliases;
			}
		}

        public bool SupportsNamespaces
        {
            const get { return true; }
        }

        public override const [IType] GetTypes()
        {
            return Binder.GetTypes();
        }
	}
}
