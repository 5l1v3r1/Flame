using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;

namespace Flame.Syntax
{
	public static class EnumerableSyntaxExtensions
	{
		public static SourceLocation GetSourceLocation(this [ISyntaxNode] Syntax)
		{
			SourceLocation result = new SourceLocation(null);
			foreach (var item in Syntax)
			{
				var loc = item.GetSourceLocation();
				if (loc != null)
				{
					result = result.Concat(loc);
				}
			}
			if (result.Document == null && result.Position < 0)
			{
				return null;
			}
			else return result;
		}

		public static [IExpression] CreateExpressions(this IEnumerable<IExpressionSyntax> Syntax, ISyntaxState State)
		{
			List<IExpression> exprs = new List<IExpression>();
			foreach (var item in Syntax)
			{
				exprs.Add(item.CreateExpression(State));
			}
			return exprs;
		}

		public static [IExpression] CreateVerifiedExpressions(this IEnumerable<IExpressionSyntax> Syntax, ISyntaxState State)
		{
			List<IExpression> exprs = new List<IExpression>();
			foreach (var item in Syntax)
			{
				exprs.Add(item.CreateVerifiedExpression(State));
			}
			return exprs;
		}

		public static [IType] CreateVerifiedTypes(this IEnumerable<ITypeSyntax> Syntax, ISyntaxState State)
		{
			List<IType> exprs = new List<IType>();
			foreach (var item in Syntax)
			{
				exprs.Add(item.CreateVerifiedType(State));
			}
			return exprs;
		}
	}
}
