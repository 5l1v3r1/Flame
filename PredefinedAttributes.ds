using System;
using System.Collections.Generic;

namespace Pixie
{
    /// <summary>
    /// Defines an attribute collection based on a dictionary of
    /// predefined attributes.
    /// </summary>
    public class PredefinedAttributes : IAttributes
    {
        /// <summary>
        /// Creates an empty attribute collection.
        /// </summary>
        public const this()
        {
            this.Values = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new attribute collection based on a dictionary of
        /// predefined attributes.
        /// </summary>
        public const this(set IReadOnlyDictionary<string, object> Values);

        /// <summary>
        /// Gets the attribute collection's values.
        /// </summary>
        public IReadOnlyDictionary<string, object> Values { const get; private set; }

        public const T Get<T>(string Key, T Default) : IAttributes.Get<T>
        {
            if (ContainsKey(Key))
            {
                var val = Values[Key];
                if (val is T)
                {
                    return (T)val;
                }
            }
            return Default;
        }

        public const bool ContainsKey(string Key)
        {
            return Values.ContainsKey(Key);
        }

        public const [string] Keys
        {
            const get return Values.Keys;
        }
    }
}
