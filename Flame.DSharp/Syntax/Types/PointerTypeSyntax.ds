using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class PointerTypeSyntax : ITokenTypeSyntax, IRelevantSyntax<Token>, ISourceSyntax
	{
		public const this(set ITokenTypeSyntax ElementType, set Token PointerToken);

		public ITokenTypeSyntax ElementType { const get; private set; }
		public Token PointerToken { const get; private set; }

		public SourceLocation Location
		{
			const get return ElementType.GetSourceLocation().Concat(PointerToken.Location);
		}

		public [Token] LeadingTrivia
        {
        	const get
        	{
        		var trivia = new List<Token>();
        		trivia.AddRange(ElementType.GetAllTrivia());
        		trivia.AddRange(PointerToken.GetAllTrivia());
        		return trivia;
        	}
        }

        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var list = new List<Token>();
				list.AddRange(ElementType.Tokens);
				list.Add(PointerToken);
				return list;
        	}
        }

        private PointerKind GetPointerKind(ISyntaxState State)
        {
        	if (PointerToken.Type == TokenType.Asterisk)
        		return PointerKind.TransientPointer;
        	else if (PointerToken.Type == TokenType.Caret)
        		return PointerKind.ReferencePointer;
        	else
        	{
        		State.Log.LogError(new LogEntry(
					"type resolution error",
					"pointer token '" + PointerToken.TokenValue + "' in '" + this.GetCode().ToString() + "' is not mapped to any known pointer type.",
					PointerToken.Location));
        		return default(PointerKind);
        	}
        }

        public IType CreateType(ISyntaxState State)
        {
        	var elemType = ElementType.CreateType(State);
        	if (elemType == null) return null;
        	var ptrType = GetPointerKind(State);
            return elemType.MakePointerType(ptrType);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ElementType.GetCode());
            cb.Append(PointerToken.ToString());
            return cb;
        }

        public bool IsVariable
        {
            const get return false;
        }
	}
}
