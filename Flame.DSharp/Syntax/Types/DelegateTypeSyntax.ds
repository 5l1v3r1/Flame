using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class DelegateTypeSyntax : ITokenTypeSyntax, IRelevantSyntax<Token>, ISourceSyntax
	{
		public const this(set ITokenTypeSyntax ElementType,
                          set DelimitedList<ITokenTypeSyntax> ParameterTypes);

		public ITokenTypeSyntax ElementType { const get; private set; }
		public DelimitedList<ITokenTypeSyntax> ParameterTypes { const get; private set; }

		public SourceLocation Location
		{
			const get return ElementType.GetSourceLocation()
                                        .Concat(ParameterTypes.Location);
		}

		public [Token] LeadingTrivia
        {
        	const get
        	{
        		List<Token> trivia = new List<Token>();
        		trivia.AddRange(ElementType.GetAllTrivia());
        		trivia.AddRange(ParameterTypes.GetAllTrivia());
				return trivia;
        	}
        }

        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var list = new List<Token>();
				list.AddRange(ElementType.Tokens);
                list.AddRange(ParameterTypes.Tokens);
				return list;
        	}
        }

        public IType[] CreateParameterTypes(ISyntaxState State)
        {
        	IType[] args = new IType[ParameterTypes.Count];
        	foreach (var item in ParameterTypes, var output in args)
        	{
        		output = item.CreateVerifiedType(State);
        	}
        	return args;
        }

        public IType CreateType(ISyntaxState State)
        {
        	var elemType = ElementType.CreateVerifiedType(State);
        	var typeArgs = CreateParameterTypes(State);

            var descMethod = new DescribedMethod("", null, elemType, true);
            for (int i = 0; i < typeArgs.Length; i++)
            {
                descMethod.AddParameter(new DescribedParameter("param" + i, typeArgs[i]));
            }
            return MethodType.Create(descMethod);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ElementType.GetCode());
            cb.Append(ParameterTypes.GetCode());
            return cb;
        }

        public bool IsVariable
        {
            const get return false;
        }
	}
}
