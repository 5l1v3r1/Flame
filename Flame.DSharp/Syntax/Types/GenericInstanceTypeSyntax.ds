using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class GenericInstanceTypeSyntax : ITokenTypeSyntax, IRelevantSyntax<Token>, ISourceSyntax
	{
		public const this(set ITokenTypeSyntax ElementType, set DelimitedList<ITokenTypeSyntax> GenericArguments);

		public ITokenTypeSyntax ElementType { const get; private set; }
		public DelimitedList<ITokenTypeSyntax> GenericArguments { const get; private set; }

		public SourceLocation Location
		{
			const get return ElementType.GetSourceLocation()
										.Concat(GenericArguments.Location);
		}

		public [Token] LeadingTrivia
        {
        	const get
        	{
        		List<Token> trivia = new List<Token>();
        		trivia.AddRange(ElementType.GetAllTrivia());
        		trivia.AddRange(GenericArguments.GetAllTrivia());
				return trivia;
        	}
        }

        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var list = new List<Token>();
				list.AddRange(ElementType.Tokens);
				list.AddRange(GenericArguments.Tokens);
				return list;
        	}
        }

        public IType[] GetGenericArguments(ISyntaxState State)
        {
        	IType[] args = new IType[GenericArguments.Count];
        	foreach (var item in GenericArguments, var output in args)
        	{
        		output = item.CreateType(State);
				if (output == null)
					return null;
        	}
        	return args;
        }

        public QualifiedName GenericTypeName
        {
        	const get
			{
				var result = default(QualifiedName);
				foreach (var item in Enumerable.Reverse<Token>(ElementType.Tokens))
				{
					if (item.Type == TokenType.Identifier)
					{
						if (result.IsEmpty)
							result = new QualifiedName(new SimpleName(item.TokenValue, GenericArguments.Count));
						else
							result = result.Qualify(new QualifiedName(new SimpleName(item.TokenValue)));
					}
				}
				return result;
			}
        }

        public IType CreateType(ISyntaxState State)
        {
        	var elemType = State.Binder.BindType(GenericTypeName);
        	if (elemType == null)
            	return null;
        	IType[] typeArgs = GetGenericArguments(State);
			if (typeArgs == null)
				return null;
        	return elemType.MakeGenericType(typeArgs);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ElementType.GetCode());
            cb.Append(GenericArguments.GetCode());
            return cb;
        }

        public bool IsVariable
        {
            const get return false;
        }
	}
}
