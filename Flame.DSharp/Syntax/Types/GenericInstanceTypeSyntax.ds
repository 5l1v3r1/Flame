using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class GenericInstanceTypeSyntax : ITokenTypeSyntax, IRelevantSyntax<Token>, ISourceSyntax
	{
		public const this(set ITokenTypeSyntax ElementType, set Token LeadingLessThan, set SeparatedList<ITokenTypeSyntax> GenericArguments, set Token TrailingGreaterThan);
		
		public ITokenTypeSyntax ElementType { const get; private set; }
		public Token LeadingLessThan { const get; private set; }
		public Token TrailingGreaterThan { const get; private set; }
		public SeparatedList<ITokenTypeSyntax> GenericArguments { const get; private set; }
		
		public SourceLocation Location
		{
			const get return ElementType.GetSourceLocation().Concat(LeadingLessThan.Location).Concat(GenericArguments.Location).Concat(TrailingGreaterThan.Location);
		}
		
		public [Token] LeadingTrivia
        {
        	const get
        	{
        		List<Token> trivia = new List<Token>();
        		trivia.AddRange(ElementType.GetAllTrivia());
        		trivia.AddRange(LeadingLessThan.GetAllTrivia());
        		trivia.AddRange(GenericArguments.GetAllTrivia());
        		trivia.AddRange(TrailingGreaterThan.GetAllTrivia());
				return trivia;
        	}
        }
        
        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var list = new List<Token>();
				list.AddRange(ElementType.Tokens);
				list.Add(LeadingLessThan);
				foreach (var item in GenericArguments.Items)
				{
					if (item.Separator.Type != TokenType.UNDEFINED)
					{
						list.Add(item.Separator);
					}
					list.AddRange(item.Item.Tokens);
				}
				list.Add(TrailingGreaterThan);
				return list;
        	}
        }
        
        public IType[] GetGenericArguments(ISyntaxState State)
        {
        	IType[] args = new IType[GenericArguments.Count];
        	foreach (var item in GenericArguments.Items, var output in args)
        	{
        		output = item.Item.CreateType(State);
        	}
        	return args;
        }
        
        public string GenericTypeName
        {
        	const get
			{
				StringBuilder sb = new StringBuilder();
				foreach (var item in ElementType.Tokens)
					sb.Append(item.TokenValue);
				sb.Append(LeadingLessThan.TokenValue);
				for (int i = 1; i < GenericArguments.Count; i++)
				{
					sb.Append(',');
				}
				sb.Append(TrailingGreaterThan.TokenValue);
				return sb.ToString();
			}
        }
        
        public IType CreateType(ISyntaxState State)
        {
        	var elemType = State.Binder.BindType(GenericTypeName);
        	if (elemType == null)
            {
            	return null;
            }
        	IType[] typeArgs = GetGenericArguments(State);
        	return elemType.MakeGenericType(typeArgs);
        }
        
        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ElementType.GetCode());
            cb.Append(LeadingLessThan.ToString());
            cb.Append(GenericArguments.GetCode());
            cb.Append(TrailingGreaterThan.ToString());
            return cb;
        }

        public bool IsVariable
        {
            const get return false;
        }
	}
}