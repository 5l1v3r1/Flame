using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class VectorTypeSyntax : ITokenTypeSyntax, IRelevantSyntax<Token>
	{
		public const this(set ITokenTypeSyntax ElementType, set Token LeadingBrackets, set SeparatedList<IExpressionSyntax> Dimensions, set Token TrailingBrackets);
		
		public ITokenTypeSyntax ElementType { const get; private set; }
		public Token LeadingBrackets { const get; private set; }
		public Token TrailingBrackets { const get; private set; }
		public SeparatedList<IExpressionSyntax> Dimensions { const get; private set; }
		
		public IEnumerable<Token> LeadingTrivia
        {
        	const get
        	{
        		List<Token> trivia = new List<Token>();
        		trivia.AddRange(ElementType.GetAllTrivia());
        		trivia.AddRange(LeadingBrackets.GetAllTrivia());
        		trivia.AddRange(Dimensions.GetAllTrivia());
        		trivia.AddRange(TrailingBrackets.GetAllTrivia());
				return trivia;
        	}
        }
        
        public IEnumerable<Token> TrailingTrivia
        {
        	const get return (IEnumerable<Token>)new Token[0];
        }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var list = new List<Token>();
				list.AddRange(ElementType.Tokens);
				list.Add(LeadingBrackets);
				foreach (var item in Dimensions.Items)
				{
					if (item.Separator.Type != TokenType.UNDEFINED)
					{
						list.Add(item.Separator);
					}
					if (item.Item is ITokenNode)
					{
						list.AddRange(((ITokenNode)item.Item).Tokens);
					}
					else
					{
						list.Add(Token.Undefined);
					}
				}
				list.Add(TrailingBrackets);
				return list;
        	}
        }
        
        public int[] GetDimensions(ISyntaxState State)
        {
        	int[] dims = new int[Dimensions.Count];
        	foreach (var item in Dimensions.Items, var output in dims)
        	{
        		output = BoundObjectExtensions.GetInt32Value(item.Item.CreateVerifiedExpression(State).Evaluate());
        	}
        	return dims;
        }
        
        public IType CreateType(ISyntaxState State)
        {
        	var elemType = ElementType.CreateType(State);
        	if (elemType == null) return null;
        	int[] dims = GetDimensions(State);
        	return elemType.MakeVectorType(dims);
        }
        
        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ElementType.GetCode());
            cb.Append(LeadingBrackets.ToString());
            cb.Append(Dimensions.GetCode());
            cb.Append(TrailingBrackets.ToString());
            return cb;
        }

        public bool IsVariable
        {
            const get return false;
        }
	}
}