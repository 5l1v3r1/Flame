using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class DotTypeSyntax : ITokenTypeSyntax, IRelevantSyntax<Token>, ISourceSyntax
	{
		public const this(set ITokenTypeSyntax ElementType, set Token Dot, set Token Identifier);
		
		public ITokenTypeSyntax ElementType { const get; private set; }
		public Token Dot { const get; private set; }
		public Token Identifier { const get; private set; }
		
		public SourceLocation Location
		{
			const get return ElementType.GetSourceLocation().Concat(Dot.Location).Concat(Identifier.Location);
		}
		
		public [Token] LeadingTrivia
        {
        	const get
        	{
        		var list = new List<Token>();
        		list.AddRange(ElementType.GetAllTrivia());
        		list.AddRange(Dot.GetAllTrivia());
        		list.AddRange(Identifier.GetAllTrivia());
        		return list;
        	}
        }
        
        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var elemTokens = ElementType.Tokens;
        		Token[] tokens = new Token[elemTokens.Count + 2];
        		for (int i = 0; i < elemTokens.Count; i++)
        		{
        			tokens[i] = elemTokens[i];
        		}
        		tokens[tokens.Length - 2] = Dot;
        		tokens[tokens.Length - 1] = Identifier;
        		return (IReadOnlyList<Token>)tokens;
        	}
        } 
        
        public string TypeName
        {
        	const get
			{
				StringBuilder sb = new StringBuilder();
				foreach (var item in ElementType.Tokens)
					sb.Append(item.TokenValue);
				sb.Append(Dot.TokenValue);
				sb.Append(Identifier.TokenValue);
				return sb.ToString();
			}
        }
        
        public IType CreateType(ISyntaxState State)
        {
        	return State.Binder.BindType(TypeName);
        }
        
        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ElementType.GetCode());
            cb.Append(Dot.ToString());
            cb.Append(Identifier.ToString());
            return cb;
        }

        public bool IsVariable
        {
            const get return false;
        }
	}
}