using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class InferredTypeSyntax : ITokenTypeSyntax, IRelevantSyntax<Token>, ISourceSyntax
	{
		public const this(set Token VarKeyword);
		
		public Token VarKeyword { const get; private set; }
		
		public SourceLocation Location
		{
			const get return VarKeyword.Location;
		}
		
		public [Token] LeadingTrivia
        {
        	const get
        	{
        		return VarKeyword.GetAllTrivia();
        	}
        }
        
        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		return (IReadOnlyList<Token>)new Token[] { VarKeyword };
        	}
        }
        
        public IType CreateType(ISyntaxState State)
        {
        	return null;
        }
        
        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(VarKeyword.ToString());
            return cb;
        }

        public bool IsVariable
        {
            const get return true;
        }
	}
}