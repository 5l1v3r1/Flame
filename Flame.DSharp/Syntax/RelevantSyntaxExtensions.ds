using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public static class RelevantSyntaxExtensions
	{
		public static const [Token] GetAllTrivia(this ISyntaxNode Syntax)
		{
			if (Syntax is IRelevantSyntax<Token>)
			{
				var relevantSyntax = (IRelevantSyntax<Token>)Syntax;
				return Enumerable.Concat<Token>(relevantSyntax.LeadingTrivia, relevantSyntax.TrailingTrivia);
			}
			else
			{
				return Enumerable.Empty<Token>();
			}
		}
		public static const [Token] GetDescriptionComments(this IRelevantSyntax<Token> Syntax)
		{
			var tokens = new List<Token>();
			foreach (var item in Syntax.LeadingTrivia)
				if (item.Type == TokenType.DescriptionComment)
					tokens.Add(item);
			return tokens;
		}
		public static const Tuple<string, SourceLocation> GetDescription(this IRelevantSyntax<Token> Syntax)
		{
			var descComments = Syntax.GetDescriptionComments();
			var desc = new StringBuilder();
			SourceLocation loc = null;
			foreach (var item in descComments)
			{
				loc = loc.Concat(item.Location);
				desc.Append(item.ToString().Substring(3));
				TrimEnd(desc);
				desc.AppendLine();
			}
			TrimEnd(desc);
			desc.Replace("\t", "    ");
			return new Tuple<string, SourceLocation>(desc.ToString(), loc);
		}

		/// <summary>
		/// Trims whitespace from the end of a StringBuilder instance.
		/// </summary>
		/// <remarks>
		/// Thanks, http://stackoverflow.com/questions/24769701/trim-whitespace-from-the-end-of-a-stringbuilder-without-calling-tostring-trim !
		/// </remarks>
		private static StringBuilder TrimEnd(StringBuilder sb)
		{
			if (sb == null || sb.Length == 0) return sb;

			int i = sb.Length - 1;
			for (; i >= 0; i--)
				if (!char.IsWhiteSpace(sb[i]))
					break;

			if (i < sb.Length - 1)
				sb.Length = i + 1;

			return sb;
		}

		public static const [IAttribute] GetDescriptionAttributes(this IRelevantSyntax<Token> Syntax, ISyntaxState State)
		{
			Tuple<string, SourceLocation> desc = Syntax.GetDescription();
			var parser = State.Log.GetDocumentationParser();
			return parser.Parse(desc.Item1, desc.Item2, State.Log);
		}
	}
}
