using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.Syntax.DSharp
{
	public class MethodContract : ISyntaxNode, ISourceSyntax
	{
		public const this(set [PreconditionSyntax] Preconditions, set [PostconditionSyntax] Postconditions);

        public [PreconditionSyntax] Preconditions { const get; private set; }
        public [PostconditionSyntax] Postconditions { const get; private set; }

		public SourceLocation Location
		{
			get
			{
				SourceLocation result = null;
				foreach (var item in Preconditions)
				{
					result = result.Concat(item.Location);
				}
				foreach (var item in Postconditions)
				{
					result = result.Concat(item.Location);
				}
				return result;
			}
		}

        public CodeBuilder GetCode()
        {
        	var cb = new CodeBuilder();
        	foreach (var item in Preconditions)
        	{
        		cb.AddCodeBuilder(item.GetCode());
        	}
        	foreach (var item in Postconditions)
        	{
        		cb.AddCodeBuilder(item.GetCode());
        	}
        	return cb;
        }

        public override string ToString()
        {
        	return GetCode().ToString();
        }

        public IStatement CreateContractBody(IStatement Body, ISyntaxState State)
        {
        	var pres = new List<IStatement>();
        	var posts = new List<IStatement>();
        	foreach (var item in Preconditions)
			{
        		pres.Add(new AssertStatement(
					item.CreateVerifiedExpression(State),
					new StringExpression(item.Location.Source)));
			}
			foreach (var item in Postconditions)
			{
				posts.Add(new AssertStatement(
					item.CreateVerifiedExpression(State),
					new StringExpression(item.Location.Source)));
			}

        	return new ContractBodyStatement(
				Body,
				new BlockStatement(pres),
				new BlockStatement(posts));
        }
        public IStatement CreateContractBody(IStatementSyntax Body, ISyntaxState State)
        {
        	return CreateContractBody(Body.CreateVerifiedStatement(State), State);
        }
	}
}
