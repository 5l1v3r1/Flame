using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class AccessorSyntax : IAccessorSyntax, IRelevantSyntax<Token>, ISourceSyntax
    {
        public const this(set ISignatureSyntax Signature, set MethodContract Contract, set IStatementSyntax Body);

        public Token NameToken
        {
            const get
            {
                return Signature.NameToken;
            }
        }
        public string Name
        {
            const get
            {
                return Signature.NameToken.TokenValue;
            }
        }

        public SourceLocation NameLocation
        {
            const get return Signature.NameToken.Location;
        }

        public ISignatureSyntax Signature { const get; private set; }
        public MethodContract Contract { const get; private set; }
        public IStatementSyntax Body { const get; private set; }

        public SourceLocation Location
        {
            const get return Signature.GetSourceLocation().Concat(Contract.Location)
                                                          .Concat(Body.GetSourceLocation());
        }

        public [Token] LeadingTrivia
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();

				foreach (var item in Signature.Attributes)
					tokens.AddRange(item.GetAllTrivia());
				foreach (var item in Signature.ModifierTokens)
					tokens.AddRange(item.GetAllTrivia());
				tokens.AddRange(Signature.TypeSyntax.GetAllTrivia());
				tokens.AddRange(Signature.NameToken.GetAllTrivia());

				return tokens;
        	}
        }

        public [Token] TrailingTrivia { const get return new Token[0]; }

        public bool IsEmpty
        {
            get
            {
                return Body is EmptySyntax;
            }
        }

        public IAccessor CreateAccessor(IProperty DeclaringProperty, IBinder Binder)
        {
            return new SyntaxAccessor(this, (SyntaxProperty)DeclaringProperty, Binder);
        }

        public override string ToString()
        {
            return Signature.GetCode().ToString();
        }

        public CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(Signature.GetCode());
            cb.Append(Body.GetCode());
            return cb;
        }
    }
}
