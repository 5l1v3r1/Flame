using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class AccessorSignatureSyntax : ISignatureSyntax, ISourceSyntax
    {
        public const this(set [IAttributeSyntax] Attributes, set [Token] ModifierTokens, set Token NameToken);

        public [IAttributeSyntax] Attributes { const get; private set; }
        public [Token] ModifierTokens { const get; private set; }
        public Token NameToken { const get; private set; }
        public bool IsOperator { const get return false; }

        public SourceLocation Location
        {
            const get
            {
                var result = NameToken.Location;
                foreach (var item in Attributes)
                {
                    result = result.Concat(item.GetSourceLocation());
                }
                foreach (var item in ModifierTokens)
                {
                    result = result.Concat(item.Location);
                }
                return result;
            }
        }

        public [IGenericParameterDeclarationSyntax] GenericDeclarations
        {
            const get { return Enumerable.Empty<IGenericParameterDeclarationSyntax>(); }
        }

        public ITypeSyntax TypeSyntax
        {
            const get { return null; }
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public static const bool IsAccessorName(Token Token)
        {
            return IsAccessorName(Token.TokenValue);
        }

        public static const bool IsAccessorName(string Name)
        {
        	foreach (var item in AccessorSignatureSyntax.AccessorNames)
        	{
        		if (Name.Equals(item))
				{
					return true;
				}
        	}
        	return false;
        }

        public static string[] AccessorNames
        {
            get
            {
                return new string[]
                {
                    "get",
                    "set"
                };
            }
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            foreach (var item in ModifierTokens)
            {
                cb.Append(item.ToString());
            }
            cb.Append(NameToken.ToString());
            return cb;
        }
    }
}
