using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class PropertySyntax : MemberSyntax, IMemberSyntax<IProperty>, ISourceSyntax
    {
        public const this(set ISignatureSyntax Signature,
            set DelimitedList<IMemberSyntax<IParameter>> IndexerParameters,
            set DelimitedList<ITypeMemberAccessSyntax> ImplementedProperties,
            set Token LeadingBraces, set [IAccessorSyntax] Accessors, set Token TrailingBraces);


        public DelimitedList<IMemberSyntax<IParameter>> IndexerParameters { const get; private set; }
        public DelimitedList<ITypeMemberAccessSyntax> ImplementedProperties { const get; private set; }
        public Token LeadingBraces { const get; private set; }
        public [IAccessorSyntax] Accessors { const get; private set; }
        public Token TrailingBraces { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                var result = Signature.GetSourceLocation()
                                      .Concat(IndexerParameters.Location)
                                      .Concat(ImplementedProperties.Location)
                                      .Concat(LeadingBraces.Location);
                foreach (var item in Accessors)
                {
                    result = result.Concat(item.GetSourceLocation());
                }
                return result.Concat(TrailingBraces.Location);
            }
        }

        public bool IsFieldProperty
        {
            const get
            {
            	if (Signature.ModifierTokens.IsAbstract)
            	{
            		return false;
            	}
            	else
            	{
            		foreach (var item in Accessors)
            		{
            			if (!item.IsEmpty)
            			{
            				return false;
            			}
            		}
            	}
                return true;
            }
        }

        protected override void AddExtraLeadingTrivia(List<Token> tokens)
        {
            foreach (var item in IndexerParameters)
        		tokens.AddRange(item.GetAllTrivia());
        	foreach (var item in ImplementedProperties)
        		tokens.AddRange(item.GetAllTrivia());
        	/*foreach (var item in Accessors)
        		tokens.AddRange(item.GetAllTrivia());*/
        	// Do not include trivia from accessors. Otherwise, descriptions would be copied from the accessor level to the property level.
        }

        #region GetCode

        public override CodeBuilder GetCode()
        {
            var cb = Signature.GetCode();
            cb.Append(IndexerParameters.GetCode());
            cb.Append(ImplementedProperties.GetCode());
            cb.Append(LeadingBraces.ToString());
            cb.IncreaseIndentation();
            foreach (var item in Accessors)
            {
                cb.AddCodeBuilder(item.GetCode());
            }
            cb.DecreaseIndentation();
            cb.Append(TrailingBraces.ToString());
            return cb;
        }

        #endregion

        #region CreateMember

        public IProperty CreateMember(ISyntaxState State)
        {
            return new SyntaxProperty(this, State.DeclaringType, State.Binder,
                State.Log, State.MemberProvider, State.TypeNamer);
        }

        #endregion

        public bool IsExtensionMember
        {
            get
            {
                var firstIndexerParam = Enumerable.FirstOrDefault<IMemberSyntax<IParameter>>(IndexerParameters);
                if (firstIndexerParam == null)
                    return false;
                return firstIndexerParam.IsExtensionMember;
            }
        }

        public bool IsSingletonMember
        {
        	const get
        	{
        		if (Signature.ModifierTokens.IsStatic)
				{
					return Signature.ModifierTokens.GetAccess() != AccessModifier.Private;
				}
				else
				{
					return false;
				}
        	}
        }
    }
}
