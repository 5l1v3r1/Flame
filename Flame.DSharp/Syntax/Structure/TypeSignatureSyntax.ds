using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class TypeSignatureSyntax : ISignatureSyntax, IRelevantSyntax<Token>, ISourceSyntax
    {
        public const this(set ISignatureSyntax SignatureSyntax, set Token Colon, set [ITypeSyntax] BaseTypes)
        {
            this.GenericConstraints = new GenericConstraintSyntax[0];
        }
        public const this(set ISignatureSyntax SignatureSyntax, set Token Colon, set [ITypeSyntax] BaseTypes, set [GenericConstraintSyntax] GenericConstraints);
        public const this(ISignatureSyntax CommonSignatureSyntax)
        {
            this.SignatureSyntax = CommonSignatureSyntax;
            this.BaseTypes = new ITypeSyntax[0];
            this.GenericConstraints = new GenericConstraintSyntax[0];
        }

        public ISignatureSyntax SignatureSyntax { const get; private set; }
        public Token Colon { const get; private set; }
        public [ITypeSyntax] BaseTypes { const get; private set; }
        public [GenericConstraintSyntax] GenericConstraints { const get; private set; }
        public bool IsOperator { const get return false; }

        public SourceLocation HeaderLocation
        {
            const get return SignatureSyntax.GetSourceLocation();
        }

        public SourceLocation Location
        {
            const get
            {
                var result = SignatureSyntax.GetSourceLocation().Concat(Colon.Location);
                foreach (var item in BaseTypes)
                {
                    result = result.Concat(item.GetSourceLocation());
                }
                foreach (var item in GenericConstraints)
                {
                    result = result.Concat(item.GetSourceLocation());
                }
                return result;
            }
        }

        public [Token] LeadingTrivia
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
				foreach (var item in SignatureSyntax.Attributes)
					tokens.AddRange(item.GetAllTrivia());
				foreach (var item in SignatureSyntax.ModifierTokens)
					tokens.AddRange(item.GetAllTrivia());
				tokens.AddRange(SignatureSyntax.TypeSyntax.GetAllTrivia());
				tokens.AddRange(SignatureSyntax.NameToken.GetAllTrivia());
				foreach (var item in SignatureSyntax.GenericDeclarations)
					tokens.AddRange(item.GetAllTrivia());
				tokens.AddRange(Colon.GetAllTrivia());
				foreach (var item in BaseTypes)
					tokens.AddRange(item.GetAllTrivia());
				foreach (var item in GenericConstraints)
					tokens.AddRange(item.GetAllTrivia());
				return tokens;
        	}
        }
        public [Token] TrailingTrivia { const get return new Token[0]; }

        public [IAttributeSyntax] Attributes
        {
            const get { return SignatureSyntax.Attributes; }
        }

        public [Token] ModifierTokens
        {
            const get { return SignatureSyntax.ModifierTokens; }
        }

        public [IGenericParameterDeclarationSyntax] GenericDeclarations
        {
            const get { return SignatureSyntax.GenericDeclarations; }
        }

        public ITypeSyntax TypeSyntax
        {
            const get { return SignatureSyntax.TypeSyntax; }
        }

        public Token NameToken
        {
            const get { return SignatureSyntax.NameToken; }
        }

        public const CodeBuilder GetCode()
        {
            var cb = SignatureSyntax.GetCode();
            bool first = true;
            foreach (var item in this.BaseTypes)
            {
            	if (first)
             	{
                	cb.Append(Colon.ToString());
                	first = false;
               	}
               	else
               	{
                	cb.Append(",");
                }
               	cb.Append(item.GetCode());
	        }
            foreach (var item in GenericConstraints)
            {
                cb.Append(item.GetCode());
            }
            return cb;
        }
    }
}
