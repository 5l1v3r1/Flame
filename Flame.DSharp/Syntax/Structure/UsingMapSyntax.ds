using System;
using System.Collections.Generic;
using System.Text;
using Flame.Binding;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class AliasSyntax : IBinderDirectiveSyntax
    {
        public const this(set Token AliasKeyword, set Token Alias, set Token Operator, set ITypeSyntax Type, set Token Semicolon);

        public Token AliasKeyword { const get; private set; }
        public Token Alias { const get; private set; }
        public Token Operator { const get; private set; }
        public ITypeSyntax Type { const get; private set; }
        public Token Semicolon { const get; private set; }

        public void ApplyDirective(ISyntaxBinder Binder)
        {
            if (!string.IsNullOrWhiteSpace(Alias.TokenValue))
            {
                Binder.UseAlias(Alias.TokenValue, Type);
            }
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(AliasKeyword.ToString());
            cb.Append(Alias.ToString());
            cb.Append(Operator.ToString());
            cb.Append(Type.GetCode());
            cb.Append(Semicolon.ToString());
            return cb;
        }
    }
}
