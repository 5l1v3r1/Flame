using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class FieldSyntax : MemberSyntax, IMemberSyntax<IField>
    {
        public const this(set ISignatureSyntax Signature, set Token Semicolon);
        public const this(set ISignatureSyntax Signature, set Token FieldAssignmentToken, set IExpressionSyntax FieldValueSyntax, set Token Semicolon);

        public Token FieldAssignmentToken { const get; private set; }
        public IExpressionSyntax FieldValueSyntax { const get; private set; }
        public Token Semicolon { const get; private set; }
        
        protected override void AddExtraLeadingTrivia(List<Token> tokens)
        {
        	tokens.AddRange(FieldAssignmentToken.GetAllTrivia());
        	tokens.AddRange(FieldValueSyntax.GetAllTrivia());
        	tokens.AddRange(Semicolon.GetAllTrivia());
        }

        public const IField CreateMember(ISyntaxState State)
        {
            return new SyntaxField(this, State);
        }

        public override const CodeBuilder GetCode()
        {
            CodeBuilder cb = Signature.GetCode();
            if (FieldValueSyntax != null)
            {
                cb.Append(" ");
                cb.Append(FieldAssignmentToken.ToString());
                cb.Append(" ");
                cb.Append(FieldValueSyntax.GetCode());
            }
            cb.Append(Semicolon.ToString());
            return cb;
        }

        public bool IsExtensionMember
        {
            const get { return false; }
        }
        
        public bool IsSingletonMember
        {
        	const get
        	{
        		if (Signature.ModifierTokens.IsStatic)
				{
					return Signature.ModifierTokens.GetAccess() != AccessModifier.Private;
				}
				else
				{
					return false;
				}
        	}
        }
    }
}