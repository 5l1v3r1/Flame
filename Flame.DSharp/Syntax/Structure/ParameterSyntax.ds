using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class ParameterSyntax : IMemberSyntax<IParameter>, ISourceSyntax
    {
        public const this(ISignatureSyntax Signature)
        {
            this.ModifierTokens = Signature.ModifierTokens;
            this.TypeSyntax = Signature.TypeSyntax;
            this.NameToken = Signature.NameToken;
        }
        public const this(set [Token] ModifierTokens, set ITypeSyntax TypeSyntax, set Token NameToken);

        public [Token] ModifierTokens { const get; private set; }
        public ITypeSyntax TypeSyntax { const get; private set; }
        public Token NameToken { const get; private set; }
        public string Name
        {
            const get
            {
                return NameToken.TokenValue;
            }
        }

        public SourceLocation Location
        {
            const get
            {
                var result = TypeSyntax.GetSourceLocation().Concat(NameToken.Location);
                foreach (var item in ModifierTokens)
                {
                    result = result.Concat(item.Location);
                }
                return result;
            }
        }

        public IParameter CreateMember(ISyntaxState State)
        {
            string name = Name;

			var descParam = new DescribedParameter(name, TypeSyntax.CreateVerifiedType(State));

            if (ModifierTokens.SetsMember)
            {
                descParam.AddAttribute(new SetsMemberAttribute(name));
            }
            foreach (var item in ModifierTokens.GetModifiers())
            {
            	if (!item.AttributeType.Equals(SetsMemberAttribute.SetsMemberAttributeType))
            		descParam.AddAttribute(item)
            }

            return descParam;
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            foreach (var item in ModifierTokens)
            {
                cb.Append(item.ToString());
            }
            cb.Append(TypeSyntax.GetCode());
            cb.Append(NameToken.ToString());
            return cb;
        }

        public bool IsExtensionMember
        {
            const get { return ModifierTokens.ContainsTokenOfType(TokenType.ThisKeyword); }
        }

        public bool IsSingletonMember
        {
        	const get return false;
        }
    }
}
