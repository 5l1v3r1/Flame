using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class OperatorSignatureSyntax : ISignatureSyntax, IRelevantSyntax<Token>
    {
        public const this(set [IAttributeSyntax] Attributes, set [Token] ModifierTokens,
        					set ITypeSyntax TypeSyntax, set Token OperatorKeyword,
        					set Token OperatorToken);

        public [IAttributeSyntax] Attributes { const get; private set; }
        public [Token] ModifierTokens { const get; private set; }
        public ITypeSyntax TypeSyntax { const get; private set; }
        public Token OperatorKeyword { const get; private set; }
        public Token OperatorToken { const get; private set; }
        public Token NameToken { const get return OperatorToken; }
        public bool IsOperator { const get return true; }
        public [IGenericParameterDeclarationSyntax] GenericDeclarations { const get return new IGenericParameterDeclarationSyntax[0]; }

        public [Token] LeadingTrivia
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
				foreach (var item in Attributes)
					tokens.AddRange(item.GetAllTrivia());
				foreach (var item in ModifierTokens)
					tokens.AddRange(item.GetAllTrivia());
				tokens.AddRange(TypeSyntax.GetAllTrivia());
				tokens.AddRange(OperatorKeyword.GetAllTrivia());
				tokens.AddRange(OperatorToken.GetAllTrivia());
				return tokens;
        	}
        }
        public [Token] TrailingTrivia { const get return new Token[0]; }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            foreach (var item in Attributes)
            {
                cb.Append(item.GetCode());
                cb.AppendLine();
            }
            foreach (var item in ModifierTokens)
            {
                cb.Append(item.ToString());
            }
            if (TypeSyntax != null)
            {
                cb.Append(TypeSyntax.GetCode());
            }
            cb.Append(OperatorKeyword.ToString());
            cb.Append(OperatorToken.ToString());
            return cb;
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }
    }
}
