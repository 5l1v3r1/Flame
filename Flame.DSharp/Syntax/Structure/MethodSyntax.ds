using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class MethodSyntax : MemberSyntax, IMemberSyntax<IMethod>, ISourceSyntax
    {
        public const this(set ISignatureSyntax Signature, set DelimitedList<IMemberSyntax<IParameter>> Parameters,
        				  set DelimitedList<ITypeMemberAccessSyntax> ImplementedMethods, set [GenericConstraintSyntax] GenericConstraints,
        				  set MethodContract Contract, set IStatementSyntax Body);

        public IStatementSyntax Body { const get; private set; }
        public DelimitedList<IMemberSyntax<IParameter>> Parameters { const get; private set; }
        public DelimitedList<ITypeMemberAccessSyntax> ImplementedMethods { const get; private set; }
        public [GenericConstraintSyntax] GenericConstraints { const get; private set; }
        public MethodContract Contract { const get; private set; }

        public static const bool IsConstructorSignature(ISignatureSyntax Value)
        {
            return Value.NameToken.TokenValue.Equals("this");
        }

        public bool IsConstructor
        {
        	const get return IsConstructorSignature(Signature);
        }

        public SourceLocation Location
        {
            const get
            {
                var result = Signature.GetSourceLocation()
                                      .Concat(Parameters.Location)
                                      .Concat(ImplementedMethods.Location);

                foreach (var item in GenericConstraints)
                {
                    result = result.Concat(item.GetSourceLocation());
                }

                return result.Concat(Contract.Location).Concat(Body.GetSourceLocation());
            }
        }

        protected override void AddExtraLeadingTrivia(List<Token> tokens)
        {
        	foreach (var item in Parameters)
        		tokens.AddRange(item.GetAllTrivia());
        	foreach (var item in ImplementedMethods)
        		tokens.AddRange(item.GetAllTrivia());
        	foreach (var item in GenericConstraints)
        		tokens.AddRange(item.GetAllTrivia());
        }

        public const IMethod CreateMember(ISyntaxState State)
        {
            return new SyntaxMethod(this, State);
        }

        #region ToString/GetCode

        public const CodeBuilder GetHeaderCode()
        {
        	var cb = Signature.GetCode();
            cb.Append(Parameters.GetCode());
            cb.Append(ImplementedMethods.GetCode());
            cb.IncreaseIndentation();
            foreach (var item in GenericConstraints)
            {
            	cb.AddCodeBuilder(item.GetCode());
            }
            cb.AddCodeBuilder(Contract.GetCode());
            cb.DecreaseIndentation();
            return cb;
        }

        public override const string ToString()
        {
            return GetHeaderCode().ToString();
        }

        private static char GetFirstCharacter(CodeBuilder cb)
        {
        	char val = cb.CharacterAt(0);
        	int i = 1;
        	while (val == ' ' || val == '\t' || val == '\n' || val == '\r')
        	{
        		val = cb.CharacterAt(i);
        		i++;
        	}
        	return val;
        }

        public override const CodeBuilder GetCode()
        {
            var cb = GetHeaderCode();
            CodeBuilder bodyCode = Body.GetCode();
            char firstChar = GetFirstCharacter(bodyCode);
            if (firstChar != ';')
            {
            	if (firstChar == '{')
            		cb.AppendLine();
            	else
            		cb.Append(" ");
            }
            cb.Append(Body.GetCode());
            return cb;
        }

        #endregion

        public bool IsExtensionMember
        {
            const get
            {
                var firstIndexerParam = Enumerable.FirstOrDefault<IMemberSyntax<IParameter>>(Parameters);
                if (firstIndexerParam == null)
                    return false;
                return firstIndexerParam.IsExtensionMember;
            }
        }

        public bool IsSingletonMember
        {
        	const get
        	{
        		if (Signature.ModifierTokens.IsStatic)
				{
					return !IsConstructor && Signature.ModifierTokens.GetAccess() != AccessModifier.Private;
				}
				else
				{
					return false;
				}
        	}
        }
    }
}
