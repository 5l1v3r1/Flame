using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class TypeDeclarationSyntax : ITypeDeclarationSyntax, IMemberSyntax<IType>, ISourceSyntax
    {
        public const this(set TypeSignatureSyntax Signature,
            set [IMemberSyntax<IMember>] Members);

        #region Signature

        public TypeSignatureSyntax Signature { const get; private set; }

        #endregion

        #region Location

        public SourceLocation NameLocation
        {
            const get return Signature.NameLocation;
        }

        public SourceLocation HeaderLocation
        {
            const get return Signature.HeaderLocation;
        }

        public SourceLocation Location
        {
            const get
            {
                var result = Signature.Location;
                foreach (var item in Members)
                {
                    result = result.Concat(item.GetSourceLocation());
                }
                return result;
            }
        }

        #endregion

        #region Contents

        public [IMemberSyntax<IMember>] Members { const get; private set; }

        public [IMemberSyntax<T>] GetMembersOfType<T>() where T : IMember
        {
        	return Enumerable.OfType<IMemberSyntax<T>>(Members);
        }

        public [IMemberSyntax<IField>] Fields
        {
            const get
            {
                return GetMembersOfType<IField>();
            }
        }
        public [IMemberSyntax<IProperty>] Properties
        {
            const get
            {
                return GetMembersOfType<IProperty>();
            }
        }
        public [IMemberSyntax<IMethod>] Methods
        {
            const get
            {
                return GetMembersOfType<IMethod>();
            }
        }
        public [IMemberSyntax<IInvariant>] Invariants
        {
            const get
            {
                return GetMembersOfType<IInvariant>();
            }
        }
        public [IMemberSyntax<FieldProperty>] FieldProperties
        {
            const get
            {
                return GetMembersOfType<FieldProperty>();
            }
        }
        public [IMemberSyntax<IType>] Types
        {
            const get
            {
                return GetMembersOfType<IType>();
            }
        }

        public [IMemberSyntax<BinderDirectiveMember>] BinderDeclarations
        {
            const get
            {
                return GetMembersOfType<BinderDirectiveMember>();
            }
        }

        #endregion

        public IType CreateType(INamespace Namespace, IBinder Binder, ICompilerLog Log, IExtensionTypeProvider ExtensionTypeProvider, IConverter<IType, string> TypeNamer)
        {
            return new OpenGenericType(this, Namespace, Binder, Log, ExtensionTypeProvider, TypeNamer);
        }

        public IType CreateMember(ISyntaxState State)
        {
            return new OpenGenericType(this, (INamespace)State.DeclaringType, State.Binder, State.Log, State.MemberProvider, State.TypeNamer);
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = Signature.GetCode();
            cb.AddLine("{");
            cb.IncreaseIndentation();
            foreach (var item in Members)
            {
                cb.AddCodeBuilder(item.GetCode());
            }
            cb.DecreaseIndentation();
            cb.AddLine("}");
            return cb;
        }

        public bool IsExtensionMember
        {
            const get return false;
        }

        public bool IsSingletonMember
        {
            const get return false;
        }
    }
}
