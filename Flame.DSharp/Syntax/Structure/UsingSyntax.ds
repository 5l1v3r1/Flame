using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Flame.Binding;
using Flame.Compiler;
using Flame.DSharp;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class UsingSyntax : IBinderDirectiveSyntax, ISourceSyntax
    {
        public const this(set Token UsingKeyword, set [Token] UsingNamespace, set Token Semicolon);

        public Token UsingKeyword { const get; private set; }
        public [Token] UsingNamespace { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                var result = UsingKeyword.Location;
                foreach (var item in UsingNamespace)
                {
                    result = result.Concat(item.Location);
                }
                return result;
            }
        }

        public QualifiedName UsingNamespaceName
        {
            const get
            {
                QualifiedName result = null;
                foreach (var item in Enumerable.Reverse<Token>(UsingNamespace))
                {
                    if (item.Type == TokenType.Identifier)
                    {
                        result = new QualifiedName(new SimpleName(item.TokenValue), result);
                    }
                }
                return result;
            }
        }

        public Token Semicolon { const get; private set; }

        public void ApplyDirective(ISyntaxBinder Binder)
        {
            Binder.UseNamespace(UsingNamespaceName);
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(UsingKeyword.ToString());
            foreach (var item in UsingNamespace)
            {
                cb.Append(item.ToString());
            }
            cb.Append(Semicolon.ToString());
            return cb;
        }
    }

    public class EmptyUsingSyntax : IBinderDirectiveSyntax
    {
        public const this(set Token UsingKeyword, set Token Semicolon);

        public Token UsingKeyword { const get; private set; }
        public Token Semicolon { const get; private set; }

        public void ApplyDirective(ISyntaxBinder Binder)
        {
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(UsingKeyword.ToString());
            cb.Append(Semicolon.ToString());
            return cb;
        }
    }
}
