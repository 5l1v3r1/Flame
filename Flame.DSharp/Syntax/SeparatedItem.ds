using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class SeparatedItem<T> : ISyntaxNode, IRelevantSyntax<Token>, ISourceSyntax, ITokenNode
		where T : ISyntaxNode
	{
		public const this(set T Item)
		{
			this.Separator = Token.Undefined;
		}
		public const this(set Token Separator, set T Item);

		public Token Separator { const get; private set; }
		public T Item { const get; private set; }

		public SourceLocation Location
		{
			const get
			{
				return Separator.Location.Concat(Item.GetSourceLocation());
			}
		}

		public IReadOnlyList<Token> Tokens
		{
			const get
			{
				var results = new List<Token>();
				if (Separator.Type != TokenType.UNDEFINED)
					results.Add(Separator);
				results.AddRange(Item.GetTokens());
				return results;
			}
		}

		public [Token] LeadingTrivia
		{
			const get
			{
				List<Token> tokens = new List<Token>();
				tokens.AddRange(Separator.GetAllTrivia());
				tokens.AddRange(Item.GetAllTrivia());
				return tokens;
			}
		}

		public [Token] TrailingTrivia
		{
			const get
			{
				return Enumerable.Empty<Token>();
			}
		}

		public CodeBuilder GetCode()
		{
			CodeBuilder cb = new CodeBuilder();
			cb.Append(Separator.ToString());
			cb.Append(Item.GetCode());
			return cb;
		}
	}
}
