using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;
using Pixie;

namespace Flame.Syntax.DSharp
{
    public class SyntaxState : ISyntaxState
    {
        public const this(set IMethod Method, set IScopedBinder Binder, set ICompilerLog Log, set TypeRenderer Renderer)
        {
            this.MemberProvider = new MemberProvider(Binder);
            this.ParameterProvider = new MethodParameterProvider(Method);
            this.locals = new LocalScopeStack();
            this.tags = new TagStack();
            PushScope();
        }
        public const this(set IMethod Method, IBinder OuterBinder, set ICompilerLog Log, set TypeRenderer Renderer)
        {
            this.Binder = new ScopedBinder(OuterBinder, this);
            this.ParameterProvider = new MethodParameterProvider(Method);
            this.MemberProvider = new MemberProvider(Binder);
            this.locals = new LocalScopeStack();
            this.tags = new TagStack();
            PushScope();
        }
        public const this(set IMethod Method, IBinder OuterBinder, set ICompilerLog Log, set IMemberProvider MemberProvider, set TypeRenderer Renderer)
        {
            this.Binder = new ScopedBinder(OuterBinder, this);
            this.ParameterProvider = new MethodParameterProvider(Method);
            this.locals = new LocalScopeStack();
            this.tags = new TagStack();
            PushScope();
        }
        public const this(set IMethod Method, IBinder OuterBinder, set ICompilerLog Log,
            set IMemberProvider MemberProvider, set TypeRenderer Renderer,
            set IVariableProvider ParameterProvider)
        {
            this.Binder = new ScopedBinder(OuterBinder, this);
            this.locals = new LocalScopeStack();
            this.tags = new TagStack();
            PushScope();
        }

        public IType CurrentType
        {
            const get
            {
                var declType = Method.DeclaringType;
                if (declType == null)
                {
                    return null;
                }
                else
                {
                    return declType.GetRecursiveGenericDeclaration().MakeRecursiveGenericType(
                        declType.GetRecursiveGenericParameters());
                }
            }
        }

        public ICompilerLog Log { const get; private set; }
        public IScopedBinder Binder { const get; private set; }
        public TypeRenderer Renderer { const get; private set; }
        public IMemberProvider MemberProvider { const get; private set; }

        private LocalScopeStack locals;
        private TagStack tags;

        public UniqueTag Tag
        {
            get
            {
                var result = tags.Top;
                if (result == null)
                    throw new InvalidOperationException("Could not get the local block's tag, because the syntax state is not inside a control flow block.");
                return result;
            }
        }

        public IMethod Method { const get; private set; }
        public IVariableProvider ParameterProvider { const get; private set; }

        public IType ReturnType
        {
            get
            {
                return Method.ReturnType;
            }
        }
        public IType DeclaringType
        {
            get
            {
                return Method.DeclaringType;
            }
        }

        public IVariable DeclareVariable(string Name, IVariable Variable, SourceLocation Location)
        {
            var localDecls = locals.DeclaredLocals;
            if (localDecls.ContainsKey(Name))
            {
                var body = RedefinitionHelpers.CreateRedefinitionNode(Name, Location, localDecls[Name].Location);
                Log.LogError(new LogEntry("variable redefinition", body));
            }
            else if (Warnings.Shadow.UseWarning(Log.Options) && VariableExists(Name))
            {
                var node = RedefinitionHelpers.CreateRedefinitionMessageNode(
                    Warnings.Shadow.CreateMessage(
                        "variable '" + Name + "' is shadowed. "),
                    Location, this.GetDeclarationLocation(Name));
                Log.LogWarning(new LogEntry("variable shadowed", node));
            }
            locals.Declare(Name, Variable, Location);
            return Variable;
        }

        public IVariable GetVariable(string Name)
        {
            return GetDeclaredVariable(Name).Variable;
        }

        public const DeclaredVariable GetDeclaredVariable(string Name)
        {
            var localDict = locals.VisibleLocals;
            if (localDict.ContainsKey(Name))
            {
                return localDict[Name];
            }
            else if (ParameterProvider != null && ParameterProvider.VariableExists(Name))
            {
                return new DeclaredVariable(ParameterProvider.GetVariable(Name), null);
            }
            else if (Name.Equals("this") && CurrentType != null)
            {
                return new DeclaredVariable(ThisReferenceVariable.Create(CurrentType), null);
            }
            else
            {
                return default(DeclaredVariable);
            }
        }
        public const bool VariableExists(string Name)
        {
            if (locals.VisibleLocals.ContainsKey(Name) ||
                (Name.Equals("this") && CurrentType != null))
            {
                return true;
            }
            else
            {
                return ParameterProvider != null && ParameterProvider.VariableExists(Name);
            }
        }

        public void PushScope()
        {
            PushScope(null);
        }

        public void PushScope(UniqueTag Tag)
        {
            Binder = Binder.PushScope();
            locals.Push();
            tags.Push(Tag);
        }

        public IStatement PopScope()
        {
            tags.Pop();
            Binder = Binder.PopScope();
            return locals.Pop();
        }
    }
}
