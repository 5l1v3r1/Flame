using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class VariableDeclarationSyntax : LineStatementSyntax, ITokenNode, ISourceSyntax
    {
        public const this(set ITypeSyntax Type, set [SingleVariableDeclaration] Declarations, set Token SemicolonToken);

        public ITypeSyntax Type { const get; private set; }
        public [SingleVariableDeclaration] Declarations { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                var loc = Type.GetSourceLocation();
                foreach (var item in Declarations)
                {
                    loc = loc.Concat(item.Location);
                }
                return loc.Concat(SemicolonToken.Location);
            }
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		List<Token> results = new List<Token>();
				results.AddRange(Type.GetTokens());
				foreach (var item in Declarations)
					results.AddRange(item.GetTokens());
				results.Add(SemicolonToken);
				return results;
        	}
        }

        public const IEnumerable<string> VariableNames
        {
            const get
            {
            	List<string> names = new List<string>();
            	foreach (var item in Declarations)
            	{
            		names.Add(item.Name.TokenValue);
            	}
                return names;
            }
        }

        public IEnumerable<IVariable> GetDeclaredVariables(ISyntaxState State)
        {
        	var list = new List<IVariable>();
        	foreach (var item in Declarations)
        	{
        		list.Add(item.GetDeclaredVariable(State));
        	}
        	return list;
        }

        public override IStatement CreateStatement(ISyntaxState State)
        {
            return CreateStatement(State, null);
        }

        public IStatement CreateStatement(ISyntaxState State, IType TypeHint)
        {
            var children = new List<IStatement>();
            foreach (var item in Declarations)
            {
                children.Add(item.CreateStatement(Type, State, TypeHint));
            }
            return new BlockStatement(children);
        }

        protected override CodeBuilder GetStatementCode()
        {
            CodeBuilder cb = Type.GetCode();
            cb.Append(" ");
            bool first = true;
            foreach (var item in Declarations)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    cb.Append(", ");
                }
                cb.Append(item.GetCode());
            }
            return cb;
        }
    }
}
