using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class AssertSyntax : LineStatementSyntax, IRelevantSyntax<Token>, ITokenNode, ISourceSyntax
	{
		public const this(set Token AssertKeyword, set Token LeadingParen, set IExpressionSyntax Target, set Token TrailingParen, set Token SemicolonToken);

		public Token AssertKeyword { const get; private set; }
		public Token LeadingParen { const get; private set; }
		public IExpressionSyntax Target { const get; private set; }
		public Token TrailingParen { const get; private set; }

		public SourceLocation Location
		{
			const get
			{
				return AssertKeyword.Location
									.Concat(LeadingParen.Location)
									.Concat(Target.GetSourceLocation())
									.Concat(TrailingParen.Location);
			}
		}

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var tks = new List<Token>();
        		tks.Add(AssertKeyword);
        		tks.Add(LeadingParen);
				tks.AddRange(Target.GetTokens());
				tks.Add(TrailingParen);
				tks.Add(SemicolonToken);
				return tks;
        	}
        }

		public [Token] LeadingTrivia
		{
			const get
			{
				List<Token> trivia = new List<Token>();
				trivia.AddRange(AssertKeyword.GetAllTrivia());
				trivia.AddRange(LeadingParen.GetAllTrivia());
				return trivia;
			}
		}

		public [Token] TrailingTrivia
		{
			const get
			{
				List<Token> trivia = new List<Token>();
				trivia.AddRange(TrailingParen.GetAllTrivia());
				trivia.AddRange(SemicolonToken.GetAllTrivia());
				return trivia;
			}
		}

		public const IStatement CreateStatement(ISyntaxState State)
		{
			var innerExpr = Target.CreateVerifiedExpression(State);
			if (innerExpr != null && State.Log.ShowConstantAssertWarnings && innerExpr.IsConstant)
			{
				var evalExpr = innerExpr.Evaluate();
				string assertCode = this.GetCode().Trim().ToString();
				string warningName = Warnings.GetWarningNameMessage(Warnings.ConstantAssert);
				if (evalExpr != null && evalExpr.Type.Equals(PrimitiveTypes.Boolean))
				{
					if (evalExpr.GetValue<bool>())
					{
						State.Log.LogWarning(new LogEntry("Constant assertion",
							"Assertion '" + assertCode +
							"' always evaluates to true (which makes it meaningless). " +
							warningName,
							Location));
					}
					else
					{
						State.Log.LogWarning(new LogEntry("Constant assertion",
							"Assertion '" + assertCode +
							"' always evaluates to false (which will always results in an assertion failure). " +
							warningName,
							Location));
					}
				}
				else
				{
					State.Log.LogWarning(new LogEntry("Constant assertion",
						"Assertion '" + assertCode +
						"' depends on a compile-time constant (which means it doesn't check any run-time behavior). " +
						warningName,
						Location));
				}
			}
			return new AssertStatement(innerExpr);
		}

		protected override CodeBuilder GetStatementCode()
        {
			CodeBuilder cb = new CodeBuilder();
			cb.Append(AssertKeyword.ToString());
			cb.Append(LeadingParen.ToString());
			cb.Append(Target.GetCode());
			cb.Append(TrailingParen.ToString());
			return cb;
        }
	}
}
