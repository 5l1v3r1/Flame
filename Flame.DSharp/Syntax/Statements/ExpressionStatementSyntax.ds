using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;
using Pixie;

namespace Flame.Syntax.DSharp
{
    public class ExpressionStatementSyntax : LineStatementSyntax, ITokenNode, ISourceSyntax
    {
        public const this(set IExpressionSyntax Expression);
        public const this(set IExpressionSyntax Expression, set Token SemicolonToken);

        public IExpressionSyntax Expression { const get; private set; }

        public SourceLocation Location
        {
        	const get return Expression.GetSourceLocation().Concat(SemicolonToken.Location);
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
				tokens.AddRange(Expression.GetTokens());
				tokens.Add(SemicolonToken);
				return tokens;
        	}
        }

        public override IStatement CreateStatement(ISyntaxState State)
        {
        	var expr = Expression.CreateVerifiedExpression(State);
        	if (expr != null && Warnings.ConstantDiscarded.UseWarning(State.Log.Options) &&
                expr.IsConstantNode)
        	{
                if (expr.IsConstant)
                {
            		State.Log.LogWarning(new LogEntry(
                        "value discarded",
                        Warnings.ConstantDiscarded.CreateMessage(
                            "expression statement discards a constant value (of type '" +
                            State.Renderer.Convert(expr.Type).GetAllText() + "'). "),
                        Location));
                }
                else
                {
                    State.Log.LogWarning(new LogEntry(
                        "redundant top-level expression",
                        Warnings.ConstantDiscarded.CreateMessage(
                            "this expression statement's top-level expression " +
                            " is constant, hence redundant."),
                        Location));
                }
        	}
            return SourceStatement.Create(new ExpressionStatement(expr), Location);
        }

        protected override CodeBuilder GetStatementCode()
        {
            return Expression.GetCode();
        }
    }
}
