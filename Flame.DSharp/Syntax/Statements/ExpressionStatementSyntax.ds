using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class ExpressionStatementSyntax : LineStatementSyntax, ITokenNode, ISourceSyntax
    {
        public const this(set IExpressionSyntax Expression);
        public const this(set IExpressionSyntax Expression, set Token SemicolonToken);

        public IExpressionSyntax Expression { const get; private set; }
        
        public SourceLocation Location
        {
        	const get
        	{
        		return Expression.GetSourceLocation().Concat(SemicolonToken.Location);	
        	}
        }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
				tokens.AddRange(Expression.GetTokens());
				tokens.Add(SemicolonToken);
				return tokens;
        	}
        }

        public override IStatement CreateStatement(ISyntaxState State)
        {
        	var expr = Expression.CreateVerifiedExpression(State);
        	if (expr != null && expr.IsConstant)
        	{
        		State.Log.LogWarning(new LogEntry("Value discarded", "Expression statement '" + this.GetCode().ToString() + "' discards a constant value (of type '" + expr.Type.FullName + "').", Location));	
        	}
            return new ExpressionStatement(expr);
        }

        protected override CodeBuilder GetStatementCode()
        {
            return Expression.GetCode();
        }
    }
}