using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class ThrowSyntax : LineStatementSyntax, ITokenNode, ISourceSyntax
    {
        public const this(set IExpressionSyntax Expression)
        {
            this.ThrowKeyword = new Token(TokenType.ThrowKeyword, "throw");
        }
        public const this(set IExpressionSyntax Expression, set Token ThrowKeyword);
        public const this(set IExpressionSyntax Expression, set Token ThrowKeyword, set Token SemicolonToken);

        public Token ThrowKeyword { const get; private set; }
        public IExpressionSyntax Expression { const get; private set; }

        public SourceLocation Location
        {
            const get return ThrowKeyword.Location.Concat(Expression.GetSourceLocation());
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
				tokens.Add(ThrowKeyword);
				tokens.AddRange(Expression.GetTokens());
				tokens.Add(SemicolonToken);
				return tokens;
        	}
        }

        public override IStatement CreateStatement(ISyntaxState State)
        {
        	return new ThrowStatement(Expression.CreateVerifiedExpression(State));
        }

        protected override CodeBuilder GetStatementCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ThrowKeyword.ToString());
	        cb.Append(" ");
            cb.Append(Expression.GetCode().ToString());
            return cb;
        }
    }
}
