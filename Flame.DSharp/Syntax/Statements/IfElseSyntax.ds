using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class IfElseSyntax : IStatementSyntax, ITokenNode
    {
        public const this(set Token IfKeyword, set Token LeadingParentheses, set IExpressionSyntax Condition, set Token TrailingParentheses, set IStatementSyntax IfBody)
        {
            this.ElseKeyword = new Token(TokenType.UNDEFINED, "");
            this.ElseBody = null;
        }
        public const this(set Token IfKeyword, set Token LeadingParentheses, set IExpressionSyntax Condition, set Token TrailingParentheses, set IStatementSyntax IfBody, set Token ElseKeyword, set IStatementSyntax ElseBody);

        public Token IfKeyword { const get; private set; }
        public Token LeadingParentheses { const get; private set; }
        public IExpressionSyntax Condition { const get; private set; }
        public Token TrailingParentheses { const get; private set; }
        public IStatementSyntax IfBody { const get; private set; }
        public Token ElseKeyword { const get; private set; }
        public IStatementSyntax ElseBody { const get; private set; }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		List<Token> results = new List<Token>();
				results.Add(IfKeyword);
				results.Add(LeadingParentheses);
				results.AddRange(Condition.GetTokens());
				results.Add(TrailingParentheses);
				results.AddRange(IfBody.GetTokens());
				results.Add(ElseKeyword);
				results.AddRange(ElseBody.GetTokens());
				return results;
        	}
        }

        public IStatement CreateStatement(ISyntaxState State)
        {
        	State.PushScope();
            var cond = Condition.CreateVerifiedExpression(State);
            var ifBody = IfBody.CreateStatement(State);

            if (ifBody.IsEmpty && State.Log.ShowEmptyBodyWarnings)
            {
                State.Log.LogWarning(new LogEntry("If block without body",
                    "If block '" + IfKeyword.ToString().TrimStart(null) +
                    LeadingParentheses.ToString() + Condition.GetCode().ToString() +
                    TrailingParentheses.ToString().TrimEnd(null) +
                    "' has an empty statement as its body. " +
                    Warnings.GetWarningNameMessage(Warnings.EmptyBody),
                    IfBody.GetSourceLocation()));
            }

            var cleanup = State.PopScope();
            IStatement[] statements;
            if (ElseBody == null)
            {
            	statements = new IStatement[] { new IfElseStatement(cond, ifBody), cleanup };
            }
            else
            {
                var elseBody = ElseBody.CreateStatement(State);
                if (elseBody.IsEmpty && State.Log.ShowEmptyBodyWarnings)
                {
                    State.Log.LogWarning(new LogEntry("Else block without body",
                        "Else block '"  + ElseKeyword.ToString().TrimStart(null) +
                        ElseBody.GetCode().ToString().TrimEnd(null) +
                        "' has an empty statement as its body. " +
                        Warnings.GetWarningNameMessage(Warnings.EmptyBody),
                        ElseBody.GetSourceLocation()));
                }
                statements = new IStatement[] { new IfElseStatement(cond, ifBody, elseBody), cleanup };
            }
            return new BlockStatement(statements);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(IfKeyword.ToString());
            cb.Append(LeadingParentheses.ToString());
            cb.Append(Condition.GetCode());
            cb.Append(TrailingParentheses.ToString());
            cb.AppendLine();
            cb.Append(IfBody.GetCode());
            if (ElseBody != null)
            {
                cb.AppendLine();
                cb.Append(ElseKeyword.ToString());
                if (!(ElseBody is IfElseSyntax))
                {
                    cb.AppendLine();
                }
                cb.Append(ElseBody.GetCode());
            }
            return cb;
        }
    }
}
