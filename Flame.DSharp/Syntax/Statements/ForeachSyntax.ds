using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Variables;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class ForeachSyntax : IStatementSyntax, ITokenNode, ISourceSyntax
    {
        public const this(set Token ForeachKeyword,
            set DelimitedList<ElementInCollectionSyntax> Elements,
            set IStatementSyntax Body);

        public Token ForeachKeyword { const get; private set; }
        public DelimitedList<ElementInCollectionSyntax> Elements { const get; private set; }
        public IStatementSyntax Body { const get; private set; }

        public SourceLocation Location
        {
            const get return ForeachKeyword.Location.Concat(Elements.Location)
                                                    .Concat(Body.GetSourceLocation());
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var results = new List<Token>();
				results.Add(ForeachKeyword);
				results.Add(Elements.Tokens);
				results.AddRange(Body.GetTokens());
				return results;
        	}
        }

        public const IStatement CreateStatement(ISyntaxState State)
        {
            var tag = new UniqueTag();

            State.PushScope(tag);

        	var collExprs = new List<CollectionElement>();
        	foreach (var item in Elements)
        	{
        		[string] varNames = item.VariableDeclaration.VariableNames;

        		string variableName = Enumerable.Single<string>(varNames);
        		var expr = item.Collection.CreateVerifiedExpression(State);

        		IType variableType;
        		if (item.VariableDeclaration.Type.IsVariable)
        			variableType = expr.Type.GetEnumerableElementType();
        		else
        			variableType = item.VariableDeclaration.Type.CreateVerifiedType(State);

        		collExprs.Add(new CollectionElement(new DescribedVariableMember(variableName, variableType), expr));
        	}
        	var loop = new ForeachStatement(tag, collExprs);

        	foreach (var item in collExprs, var elem in loop.Elements, var node in Elements)
        	{
        		State.DeclareVariable(item.Member.Name, elem, node.Location);
        	}

        	loop.Body = Body.CreateVerifiedStatement(State);

            if (loop.Body.IsEmpty && Warnings.EmptyBody.UseWarning(State.Log.Options))
            {
                State.Log.LogWarning(new LogEntry(
                    "empty 'foreach' statement",
                    Warnings.EmptyBody.CreateMessage(
                        "'foreach' block '" + this.GetCode().Trim().ToString() +
                        "' has an empty statement as its body. "),
                    Body.GetSourceLocation()));
            }

        	var cleanup = State.PopScope();

        	return new BlockStatement(new IStatement[]
            {
                SourceStatement.Create(loop, Location),
                cleanup
             });
        }

        public CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ForeachKeyword.ToString());
            cb.Append(Elements.GetCode());
            cb.Append(Body.GetCode());
            return cb;
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }
    }
}
