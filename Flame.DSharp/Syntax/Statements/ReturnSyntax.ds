using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class ReturnSyntax : LineStatementSyntax, ITokenNode, ISourceSyntax
    {
        public const this()
        {
            this.Expression = null;
            this.ReturnKeyword = new Token(TokenType.ReturnKeyword, "return");
        }
        public const this(set IExpressionSyntax Expression)
        {
            this.ReturnKeyword = new Token(TokenType.ReturnKeyword, "return");
        }
        public const this(set Token ReturnKeyword, Token SemicolonToken)
            : base(SemicolonToken)
        {
            this.Expression = null;
        }
        public const this(set Token ReturnKeyword, set IExpressionSyntax Expression, Token SemicolonToken)
            : base(SemicolonToken);

        public Token ReturnKeyword { const get; private set; }
        public IExpressionSyntax Expression { const get; private set; }

        public SourceLocation Location
        {
            const get
                if (Expression == null)
                    return ReturnKeyword.Location.Concat(SemicolonToken.Location);
                else
                    return ReturnKeyword.Location.Concat(Expression.GetSourceLocation())
                                                 .Concat(SemicolonToken.Location);
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		List<Token> tokens = new List<Token>();
				tokens.Add(ReturnKeyword);
				tokens.AddRange(Expression.GetTokens());
				tokens.Add(SemicolonToken);
				return tokens;
        	}
        }

        public override IStatement CreateStatement(ISyntaxState State)
        {
            if (Expression == null)
            {
                return SourceStatement.Create(new ReturnStatement(), Location);
            }
            else
            {
                return SourceStatement.Create(new ReturnStatement(CastSyntax.CreateImplicitCast(State, Expression, State.ReturnType)), Location);
            }
        }

        protected override CodeBuilder GetStatementCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(ReturnKeyword.ToString());
            if (Expression != null)
            {
	            cb.Append(" ");
	            cb.Append(Expression.GetCode().ToString());
            }
            return cb;
        }
    }
}
