using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class BlockSyntax : IStatementSyntax
    {
        public const this(set Token OpeningToken, set Token ClosingToken, set IEnumerable<IStatementSyntax> Statements);
        public const this(set IEnumerable<IStatementSyntax> Statements)
        {
            this.OpeningToken = Token.RBraces;
            this.ClosingToken = Token.LBraces;
        }

        public Token OpeningToken { const get; private set; }
        public IEnumerable<IStatementSyntax> Statements { const get; private set; }
        public Token ClosingToken { const get; private set; }

        public IStatement CreateStatement(ISyntaxState State)
        {
            var children = new List<IStatement>();
            State.PushScope();
            foreach (var item in Statements)
            {
                children.Add(item.CreateStatement(State));
            }
            children.Add(State.PopScope());
            return new BlockStatement(children);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public CodeBuilder GetCode()
        {
            CodeBuilder builder = new CodeBuilder();
            builder.AddLine(OpeningToken.ToString());
            builder.IncreaseIndentation();
            foreach (var item in Statements)
            {
                builder.AddCodeBuilder(item.GetCode());
            }
            builder.DecreaseIndentation();
            builder.AddLine(ClosingToken.ToString());
            return builder;
        }
    }
}