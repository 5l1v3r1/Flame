using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public virtual class SyntaxVisitorBase<TResult> : ISyntaxVisitor<TResult>
	{
		public const this();
	
		#region Visit Default
	
		protected virtual TResult VisitDefaultSyntax(ISyntaxNode Syntax);
		protected virtual TResult VisitDefaultExpressionSyntax(IExpressionSyntax Syntax)
		{
			return VisitDefaultSyntax(Syntax);
		}
		protected virtual TResult VisitDefaultStatementSyntax(IStatementSyntax Syntax)
		{
			return VisitDefaultSyntax(Syntax);
		}
		protected virtual TResult VisitDefaultTypeSyntax(ITypeSyntax Syntax)
		{
			return VisitDefaultSyntax(Syntax);
		}
		
		#endregion
		
		#region Expression Syntax
		
		protected virtual TResult VisitBinaryExpressionSyntax(BinaryExpressionSyntax Syntax)
		{
			return VisitDefaultExpressionSyntax(Syntax);
		}
		protected virtual TResult VisitUnaryExpressionSyntax(UnaryExpressionSyntax Syntax)
		{
			return VisitDefaultExpressionSyntax(Syntax);
		}
		protected virtual TResult VisitCastSyntax(CastSyntax Syntax)
		{
			return VisitDefaultExpressionSyntax(Syntax);
		}
	
		protected virtual TResult VisitExpressionSyntax(IExpressionSyntax Syntax)
		{
			if (Syntax is BinaryExpressionSyntax)
			{
				return VisitBinaryExpressionSyntax((BinaryExpressionSyntax)Syntax);
			}
			else if (Syntax is UnaryExpressionSyntax)
			{
				return VisitUnaryExpressionSyntax((UnaryExpressionSyntax)Syntax);
			}
			else if (Syntax is CastSyntax)
			{
				return VisitCastSyntax((CastSyntax)Syntax);
			}
			else
			{
				return VisitDefaultExpressionSyntax(Syntax);
			}
		}
		
		#endregion
		
		#region Statement Syntax
		
		protected virtual TResult VisitBlockSyntax(BlockSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitBreakSyntax(BreakSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitDoWhileSyntax(DoWhileSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitElementInCollectionSyntax(ElementInCollectionSyntax Syntax)
		{
			return VisitDefaultSyntax(Syntax);
		}
		
		protected virtual TResult VisitEmptySyntax(EmptySyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitExpressionStatementSyntax(ExpressionStatementSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitForSyntax(ForSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitForeachSyntax(ForeachSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitIfElseSyntax(IfElseSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitNextSyntax(NextSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		} 
		
		protected virtual TResult VisitReturnSyntax(ReturnSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitWhileSyntax(WhileSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitSetVariableStatementSyntax(SetVariableStatementSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitVariableDeclarationSyntax(VariableDeclarationSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitYieldBreakSyntax(YieldBreakSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitYieldReturnSyntax(YieldReturnSyntax Syntax)
		{
			return VisitDefaultStatementSyntax(Syntax);
		}
		
		protected virtual TResult VisitStatementSyntax(IStatementSyntax Syntax)
		{
			if (Syntax is BlockSyntax)
			{
				return VisitBlockSyntax((BlockSyntax)Syntax);
			}
			else if (Syntax is BreakSyntax)
			{
				return VisitBreakSyntax((BreakSyntax)Syntax);
			}
			else if (Syntax is DoWhileSyntax)
			{
				return VisitDoWhileSyntax((DoWhileSyntax)Syntax);
			}
			else if (Syntax is EmptySyntax)
			{
				return VisitEmptySyntax((EmptySyntax)Syntax);
			}
			else if (Syntax is ExpressionStatementSyntax)
			{
				return VisitExpressionStatementSyntax((ExpressionStatementSyntax)Syntax);
			}
			else if (Syntax is ForSyntax)
			{
				return VisitForSyntax((ForSyntax)Syntax);
			}
			else if (Syntax is ForeachSyntax)
			{
				return VisitForeachSyntax((ForeachSyntax)Syntax);
			}
			else if (Syntax is IfElseSyntax)
			{
				return VisitIfElseSyntax((IfElseSyntax)Syntax);
			}
			else if (Syntax is NextSyntax)
			{
				return VisitNextSyntax((NextSyntax)Syntax);
			}
			else if (Syntax is ReturnSyntax)
			{
				return VisitReturnSyntax((ReturnSyntax)Syntax);
			}
			else if (Syntax is WhileSyntax)
			{
				return VisitWhileSyntax((WhileSyntax)Syntax);
			}
			else if (Syntax is SetVariableStatementSyntax)
			{
				return VisitSetVariableStatementSyntax((SetVariableStatementSyntax)Syntax);
			}
			else if (Syntax is VariableDeclarationSyntax)
			{
				return VisitVariableDeclarationSyntax((VariableDeclarationSyntax)Syntax);
			}
			else if (Syntax is YieldBreakSyntax)
			{
				return VisitYieldBreakSyntax((YieldBreakSyntax)Syntax);
			}
			else if (Syntax is YieldReturnSyntax)
			{
				return VisitYieldReturnSyntax((YieldReturnSyntax)Syntax);
			}
			else
			{
				return VisitDefaultStatementSyntax(Syntax);
			}
		}
		
		#endregion
		
		#region Type Syntax
		
		protected virtual TResult VisitIdentifierTypeSyntax(IdentifierTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitInferredTypeSyntax(InferredTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitDotTypeSyntax(DotTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitPointerTypeSyntax(PointerTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitArrayTypeSyntax(ArrayTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitVectorTypeSyntax(VectorTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitEnumerableTypeSyntax(EnumerableTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitEnumeratorTypeSyntax(EnumeratorTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitGenericInstanceTypeSyntax(GenericInstanceTypeSyntax Syntax)
		{
			return VisitDefaultTypeSyntax(Syntax);
		}
		
		protected virtual TResult VisitTypeSyntax(ITypeSyntax Syntax)
		{
			if (Syntax is IdentifierTypeSyntax)
				return VisitIdentifierTypeSyntax((IdentifierTypeSyntax)Syntax);
				
			else if (Syntax is InferredTypeSyntax)
				return VisitInferredTypeSyntax((InferredTypeSyntax)Syntax);
				
			else if (Syntax is PointerTypeSyntax)
				return VisitPointerTypeSyntax((PointerTypeSyntax)Syntax);
				
			else if (Syntax is VectorTypeSyntax)
				return VisitVectorTypeSyntax((VectorTypeSyntax)Syntax);
				
			else if (Syntax is ArrayTypeSyntax)
				return VisitArrayTypeSyntax((ArrayTypeSyntax)Syntax);
				
			else if (Syntax is DotTypeSyntax)
				return VisitDotTypeSyntax((DotTypeSyntax)Syntax);
				
			else if (Syntax is EnumerableTypeSyntax)
				return VisitEnumerableTypeSyntax((EnumerableTypeSyntax)Syntax);
				
			else if (Syntax is EnumeratorTypeSyntax)
				return VisitEnumeratorTypeSyntax((EnumeratorTypeSyntax)Syntax);
				
			else if (Syntax is GenericInstanceTypeSyntax)
				return VisitGenericInstanceTypeSyntax((GenericInstanceTypeSyntax)Syntax);
				
			else
				return VisitDefaultTypeSyntax(Syntax);
		}
		
		#endregion
		
		#region Public Visit
	
		public virtual TResult Visit(ISyntaxNode Syntax)
		{
			if (Syntax is IExpressionSyntax)
			{
				return VisitExpressionSyntax((IExpressionSyntax)Syntax);
			}
			else if (Syntax is IStatementSyntax)
			{
				return VisitStatementSyntax((IStatementSyntax)Syntax);
			}
			else if (Syntax is ITypeSyntax)
			{
				return VisitTypeSyntax((ITypeSyntax)Syntax);
			}
			else if (Syntax is ElementInCollectionSyntax)
			{
				return VisitElementInCollectionSyntax((ElementInCollectionSyntax)Syntax);
			}
			else
			{
				return VisitDefaultSyntax(Syntax);
			}
		}
		
		#endregion
	}
}