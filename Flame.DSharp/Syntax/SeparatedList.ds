using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class SeparatedList<T> : IRelevantSyntax<Token>, ISyntaxNode, ISourceSyntax
		// : IEnumerable<T>, IReadOnlyList<T>, IRelevantSyntax<Token>, ISyntaxNode --> commented out because of IEnumerable<T>.GetEnumerator ambiguity
		where T : ISyntaxNode
	{
		public const this(set IReadOnlyList<SeparatedItem<T>> Items);
		public const this(IReadOnlyList<T> Values, IReadOnlyList<Token> Separators)
		{
			List<SeparatedItem<T>> pairs = new List<SeparatedItem<T>>();
			for (int i = 0; i < Values.Count; i++)
			{
				if (i > 0 && i + 1 < Separators.Count)
					pairs.Add(new SeparatedItem<T>(Separators[i], Values[i]));
				else
					pairs.Add(new SeparatedItem<T>(Values[i]));
			}
			this.Items = pairs;
		}
		
		public IReadOnlyList<SeparatedItem<T>> Items { const get; private set; }
		
		public int Count { const get return Items.Count; }
		
		public T this[int Index]
		{
			const get return Items[Index].Item;
		}
		
		public SourceLocation Location
		{
			const get
			{
				SourceLocation result = new SourceLocation(null);
				foreach (var item in Items)
				{
					result = result.Concat(item.Location);
				}
				return result;
			}
		}
		
		/*public IEnumerator<T> GetGenericEnumerator() : IEnumerable<T>.GetEnumerator
		{
			List<T> nodes = new List<T>();
			foreach (var item in Items)
			{
				nodes.Add(item.Item);
			}
			return nodes.GetEnumerator();
		}
		
		public System.Collections.IEnumerator GetObjectEnumerator() : System.Collections.IEnumerable.GetEnumerator
		{
			return GetGenericEnumerator();
		}*/
		
		public [Token] LeadingTrivia
		{
			const get
			{
				List<Token> tokens = new List<Token>();
				foreach (var item in Items)
				{
					tokens.AddRange(item.GetAllTrivia());		
				}
				return tokens;
			}
		}
		
		public [Token] TrailingTrivia
		{
			const get return Enumerable.Empty<Token>();
		}
		
		public CodeBuilder GetCode()
		{
			CodeBuilder cb = new CodeBuilder();
			foreach (var item in Items)
			{
				cb.Append(item.GetCode());	
			}
			return cb;
		}
	}
}