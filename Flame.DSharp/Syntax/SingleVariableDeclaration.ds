using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class SingleVariableDeclaration : ISourceSyntax
    {
        public const this(set Token Name)
        {
            this.Operator = Token.Undefined;
            this.Value = null;
        }
        public const this(set Token Name, set Token Operator, set IExpressionSyntax Value);

        public Token Name { const get; private set; }
        public Token Operator { const get; private set; }
        public IExpressionSyntax Value { const get; private set; }

        public SourceLocation AssignmentLocation
        {
            const get
            {
                if (Value == null) return null;
                else return Operator.Location.Concat(Value.GetSourceLocation());
            }
        }

        public SourceLocation Location
        {
            const get
            {
                if (Value == null) return Name.Location;
                else return Name.Location.Concat(AssignmentLocation);
            }
        }

        public const IVariable GetDeclaredVariable(ISyntaxState State)
        {
            return State.GetVariable(Name.TokenValue);
        }

        public const IStatement CreateStatement(ITypeSyntax VariableType, ISyntaxState State)
        {
            return CreateStatement(VariableType, State, null);
        }

        public const IStatement CreateStatement(ITypeSyntax VariableType, ISyntaxState State, IType TypeHint)
        {
        	var variable = CreateVariable(VariableType, State, TypeHint);
        	if (variable is AssignedVariable)
        	{
        		return ((AssignedVariable)variable).CreateStoreStatement();
        	}
        	else
        	{
        		return EmptyStatement;
        	}
        }

        public const IVariable CreateVariable(ITypeSyntax VariableType, ISyntaxState State, IType TypeHint)
        {
            string name = Name.TokenValue;

        	bool varType;
        	if (VariableType == null)
        	{
        		varType = true;
        	}
        	else
        	{
        		varType = VariableType.IsVariable;
        	}
            IType type;
            if (varType && TypeHint != null)
            {
                type = TypeHint;
            }
            else
            {
                type = VariableType.CreateType(State);
                if (!varType && type == null)
                {
                	State.Log.LogError(new LogEntry(
                        "type resolution error",
                        "type '" + VariableType.GetCode().ToString() + "' in variable declaration '" + this.GetCode().ToString() + "' could not be resolved",
                        VariableType.GetSourceLocation()));
                }
            }

            if (Value == null)
            {
            	if (varType)
            	{
            		State.Log.LogError(new LogEntry(
                        "type inference error",
                        "could not infer 'var' type in variable declaration '" + this.GetCode().ToString() + "' as the variable was not initialized with an expression",
                        VariableType.GetSourceLocation()));
            	}
                return State.DeclareVariable(name, type, Location);
            }
            else
            {
                IVariable val = SyntaxExtensions.CreateVerifiedVariable(Value, State);

                if (varType && type == null)
                {
                	type = val.Type;
                }
                else if (CastSyntax.UseImplicitCast(State, val.Type, type))
                {
                	val = new ExpressionVariable(CastSyntax.CreateImplicitCast(State, val.CreateGetExpression(), Value, type));
                }

                var variable = State.DeclareVariable(name, type, Location);
                return new AssignedVariable(variable, val);
            }
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(Name.TokenValue);
            if (Value != null)
            {
                cb.Append(" ");
                cb.Append(Operator.TokenValue);
                cb.Append(" ");
                cb.Append(Value.GetCode());
            }
            return cb;
        }
    }
}
