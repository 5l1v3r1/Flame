using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Variables;
using Flame.DSharp;
using Flame.DSharp.Build;

namespace Flame.Syntax.DSharp
{
    public class IndirectSyntaxState : ISyntaxState
    {
        public const this(set ISyntaxState State, IBinder OuterBinder)
        {
            this.Binder = new ScopedBinder(OuterBinder, this);
        	this.MemberProvider = new MemberProvider(Binder);
        }
        public const this(set ISyntaxState State, IBinder OuterBinder,
            set IMemberProvider MemberProvider)
        {
            this.Binder = new ScopedBinder(OuterBinder, this);
        }

        public ISyntaxState State { const get; private set; }
        public IScopedBinder Binder { const get; private set; }
        public IMemberProvider MemberProvider { const get; private set; }
        public UniqueTag Tag { const get return State.Tag; }

        public IConverter<IType, string> TypeNamer { const get return State.TypeNamer; }

        public IVariable DeclareVariable(string Name, IVariable Variable, SourceLocation Location) : ISyntaxState.DeclareVariable
        {
            return State.DeclareVariable(Name, Variable, Location);
        }

        public IType CurrentType : ISyntaxState.CurrentType
        {
            const get { return State.CurrentType; }
        }
        public IType DeclaringType : ISyntaxState.DeclaringType
        {
        	const get { return State.DeclaringType; }
        }
        public IType ReturnType : ISyntaxState.ReturnType
        {
            const get { return State.ReturnType; }
        }

        public ICompilerLog Log : ISyntaxState.Log
        {
        	const get { return State.Log; }
        }

        public const IVariable GetVariable(string Name) : IVariableProvider.GetVariable
        {
            return State.GetVariable(Name);
        }

        public const DeclaredVariable GetDeclaredVariable(string Name) : ISyntaxState.GetDeclaredVariable
        {
            return State.GetDeclaredVariable(Name);
        }

        public const bool VariableExists(string Name) : IVariableProvider.VariableExists
        {
            return State.VariableExists(Name);
        }

        public void PushScope() : ISyntaxState.PushScope
        {
            Binder = Binder.PushScope();
            State.PushScope();
        }

        public void PushScope(UniqueTag Tag) : ISyntaxState.PushScope
        {
            Binder = Binder.PushScope();
            State.PushScope(Tag);
        }

        public IStatement PopScope() : ISyntaxState.PopScope
        {
            Binder = Binder.PopScope();
            return State.PopScope();
        }
    }
}
