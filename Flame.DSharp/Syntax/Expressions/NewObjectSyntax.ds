using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.DSharp.Build;
using Pixie;

namespace Flame.Syntax.DSharp
{
    public class NewObjectSyntax : IInvocationSyntax, ISourceSyntax
    {
        public const this(set Token NewKeyword, set ITypeSyntax Type, set DelimitedList<IExpressionSyntax> ArgumentList);
        public const this(set ITypeSyntax Type, set DelimitedList<IExpressionSyntax> ArgumentList)
        {
        	this.NewKeyword = new Token(TokenType.NewKeyword, "new");
        }
        public const this(set ITypeSyntax Type)
        {
        	this.NewKeyword = new Token(TokenType.NewKeyword, "new");
        	this.ArgumentList = new DelimitedList<IExpressionSyntax>();
        }

        public Token NewKeyword { const get; private set; }
        public ITypeSyntax Type { const get; private set; }
        public DelimitedList<IExpressionSyntax> ArgumentList { const get; private set; }

        public [IExpressionSyntax] Arguments { const get return ArgumentList; }

        public SourceLocation Location
        {
        	const get
        	{
        		return NewKeyword.Location.Concat(Type.GetSourceLocation())
                                          .Concat(ArgumentList.Location);
        	}
        }

        protected IType CreateType(ISyntaxState State)
        {
            ISyntaxState localSyntaxState;
            if (NewKeyword.Type == TokenType.UNDEFINED)
            {
                var attrBinder = new AttributeBinder(State.Binder);
                localSyntaxState = new IndirectSyntaxState(State, attrBinder, State.MemberProvider);
            }
            else
            {
                localSyntaxState = State;
            }

            return Type.CreateVerifiedType(localSyntaxState);
        }

        public static LogEntry CreateFailedConstructorCallEntry(ISyntaxNode Node,
            ISyntaxNode TypeNode, string NodeDescription,
            [IMethod] Candidates, IType[] ArgumentTypes, ISyntaxState State)
        {
            var newInstanceCode = new CodeBuilder();
            newInstanceCode.Append("new ");
            newInstanceCode.Append(TypeNode.GetCode().Trim());

            // Construct the set of all types that we might end up rendering.
            var allTypes = SimpleTypeFinder.ConvertAndMerge(ArgumentTypes);
            allTypes.UnionWith(SimpleTypeFinder.ConvertAndMerge(Candidates));
            allTypes.ExceptWith(DSharpTypeRenderer.KeywordPrimitiveTypes);

            // Create an abbreviating type renderer.
            var namer = State.Renderer.AbbreviateTypeNames(allTypes);

            var expectedSignature = InvocationSyntax.CreateExpectedSignatureDescription(newInstanceCode, ArgumentTypes, namer);
            var failedMatches = Enumerable.ToArray<IMethod>(Candidates);
            if (failedMatches.Length > 0)
            {
                var failedMatchesList = new List<MarkupNode>();
                foreach (var item in failedMatches)
                {
                    failedMatchesList.Add(InvocationSyntax.CreateSignatureDiff(item, ArgumentTypes, namer));
                }
                var explanationNode = new MarkupNode(NodeConstants.TextNodeType,
                    "No appropriate constructor for '" + TypeNode.GetCode().ToString() +
                    "' could be found in " + NodeDescription + " '" + Node.GetCode().Trim().ToString() +
                    "', expected signature compatible with " + expectedSignature.ToString() +
                    ". Incompatible or ambiguous matches:");
                var failedMatchesNode = new MarkupNode("list", failedMatchesList);
                var messageNode = new MarkupNode("entry", new MarkupNode[] { explanationNode, failedMatchesNode });
                return new LogEntry("Constructor resolution error", messageNode, Node.GetSourceLocation());
            }
            else
            {
                return new LogEntry("Constructor resolution error", "No appropriate constructor for '" + TypeNode.GetCode().Trim().ToString() + "' could be found in " + NodeDescription + " '" + Node.GetCode().Trim().ToString() + "', expected signature compatible with " + expectedSignature.ToString(), Node.GetSourceLocation());
            }
        }

        public IExpression CreateExpression(ISyntaxState State)
        {
            var realType = CreateType(State);

			var argList = new List<IExpression>();
			foreach (var item in Arguments)
			{
				argList.Add(item.CreateVerifiedExpression(State));
			}
            var args = argList.ToArray();

            if (args.Length == 0 && realType.IsVector)
            {
            	var vectType = realType.AsContainerType().AsVectorType();
                return new NewVectorExpression(vectType.ElementType, vectType.Dimensions);
            }
            else if (args.Length == 0 && realType.IsArray) // special case to support initialized arrays
            {
                return new NewArrayExpression(realType.AsContainerType().ElementType, (IReadOnlyList<IExpression>)new IExpression[] { null });
            }
            else
            {
                if (realType.IsAbstract)
                {
                    State.Log.LogError(new LogEntry(
                        "abstract class instantiation",
                        "abstract class '" + State.Renderer.Convert(realType).GetAllText() +
                        "' cannot be instantiated directly.",
                        Location));
                }

            	var argTypes = args.Types;

                var ctor = realType.GetConstructors().GetBestMethod(false, realType, argTypes);

                if (ctor == null)
                {
                    var entry = CreateFailedConstructorCallEntry(this, Type, "new object expression",
                                realType.GetConstructors(), argTypes, State);

                    State.Log.LogError(entry);
                	return null;
                }

                var callArgs = new List<IExpression>();
                foreach (var input in args, var node in Arguments, var targetParam in ctor.Parameters)
                {
                    callArgs.Add(CastSyntax.CreateImplicitCast(
                        State, input, node, targetParam.ParameterType));
                }

                return new NewObjectExpression(ctor, callArgs);
            }
        }

        public IExpression GetCallerExpression(ISyntaxState State)
        {
            return null;
        }

        public IVariable GetCallerVariable(ISyntaxState State)
        {
            return null;
        }

        public const [ITypeMember] GetAccessedMembers(ISyntaxState State)
        {
            var realType = CreateType(State);

			var argTypes = new List<IType>();
			foreach (var arg in Arguments)
			{
				argTypes.Add(arg.CreateVerifiedExpression(State).Type);
			}

            return new ITypeMember[]
            {
                realType.GetConstructors().GetBestMethod(false, realType, argTypes.ToArray())
            };
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            if (NewKeyword.Type != TokenType.UNDEFINED)
            {
                cb.Append(NewKeyword.ToString());
            }
            cb.Append(Type.GetCode());
            cb.Append(ArgumentList.GetCode());
            return cb;
        }
    }
}
