using System;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class HexIntegerSyntax : LiteralSyntax
    {
        /*public const this(int Value)
        {
        	this.Value = new Token(TokenType.HexInteger, Value.ToString("{0:X}"));
        }
        public const this(uint Value)
        {
        	this.Value = new Token(TokenType.HexInteger, Value.ToString("{0:X}"));
        }*/
        public const this(set Token Value);

        protected override IExpression CreateExpression(ISyntaxState State, Token Value)
        {
        	uint64 val = Convert.ToUInt64(Value.TokenValue.Substring(2), 16);
        	if (val > (uint64)uint32.MaxValue)
        		return new IntegerExpression(val);
        	else if (val > (uint64)uint16.MaxValue)
        		return new IntegerExpression((uint32)val);
        	else if (val > (uint64)uint8.MaxValue)
        		return new IntegerExpression((uint16)val);
        	else
        		return new IntegerExpression((uint8)val);
        }
    }
}