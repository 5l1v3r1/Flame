using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Pixie;

namespace Flame.Syntax.DSharp
{
    public class CastSyntax : IExpressionSyntax, ITokenNode, ISourceSyntax
    {
        public const this(set ITypeSyntax TargetType, set IExpressionSyntax Expression)
        {
            this.OpeningToken = new Token(TokenType.RParen, "(");
            this.ClosingToken = new Token(TokenType.LParen, ")");
        }
        public const this(set Token OpeningToken, set ITypeSyntax TargetType, set Token ClosingToken, set IExpressionSyntax Expression);

        public Token OpeningToken { const get; private set; }
        public ITypeSyntax TargetType { const get; private set; }
        public Token ClosingToken { const get; private set; }
        public IExpressionSyntax Expression { const get; private set; }

        public SourceLocation Location
        {
            const get return CastLocation.Concat(Expression.GetSourceLocation());
        }

        public SourceLocation CastLocation
        {
            const get return OpeningToken.Location.Concat(TargetType.GetSourceLocation()).Concat(ClosingToken.Location);
        }

        public IReadOnlyList<Token> Tokens
        {
            const get
            {
                var tks = new List<Token>();
                tks.Add(OpeningToken);
                tks.AddRange(TargetType.GetTokens());
                tks.Add(ClosingToken);
                tks.AddRange(Expression.GetTokens());
                return tks;
            }
        }

        public const IExpression CreateExpression(ISyntaxState State)
        {
            var expr = Expression.CreateVerifiedExpression(State);
            var type = TargetType.CreateVerifiedType(State);
            var exprType = expr.Type;

            if (Warnings.MeaninglessCast.UseWarning(State.Log.Options) &&
                exprType.Equals(type))
            {
                State.Log.LogWarning(new LogEntry(
                    "meaningless cast",
                    Warnings.MeaninglessCast.CreateMessage(
                    "'" + this.GetCode().Trim().ToString() + "' does not change the type of '" +
                    Expression.GetCode().Trim().ToString() + "'. "),
                CastLocation));
            }
            else if (Warnings.Bitcast.UseWarning(State.Log.Options) &&
                     exprType.IsBit && type.IsBit)
            {
                if (exprType.GetPrimitiveBitSize() > type.GetPrimitiveBitSize())
                {
                    State.Log.LogWarning(new LogEntry(
                    "bit type downcast",
                    Warnings.Bitcast.CreateMessage(
                        "'" + this.GetCode().Trim().ToString() + "' implies a downcast of bit types ('" +
                        State.Renderer.Convert(exprType).GetAllText() + "' to '" + State.Renderer.Convert(type).GetAllText() +
                        "'). This could lead to an arbitrary loss of information. "),
                    CastLocation));
                }
            }

            if ((exprType.IsEnum || exprType.IsPrimitive) && (type.IsEnum || type.IsPrimitive))
            {
                // Early-out in this common case.
                return ConversionExpression.Create(expr, type);
            }

            // Try to find user-defined conversions first.
            var userDefConv = FindUserDefinedConversion(
                exprType, type, Operator.ConvertExplicit);

            if (userDefConv == null)
                userDefConv = FindUserDefinedConversion(
                    exprType, type, Operator.ConvertImplicit);

            if (userDefConv == null)
            {
                return ConversionExpression.Create(expr, type);
            }
            else
            {
                if (userDefConv.IsStatic)
                {
                    return new InvocationExpression(userDefConv, null, new IExpression[] { expr });
                }
                else
                {
                    return new InvocationExpression(userDefConv, expr, new IExpression[] { });
                }
            }
        }

        private bool IsApplicableUserDefinedConversion(
            IMethod Conversion, IType From, IType To)
        {
            if (Conversion.IsStatic)
            {
                return Enumerable.Count<IParameter>(Conversion.Parameters) == 1
                    && Conversion.ReturnType.Equals(To)
                    && Enumerable.First<IParameter>(Conversion.Parameters)
                        .ParameterType.Equals(From);
            }
            else
            {
                return Enumerable.Count<IParameter>(Conversion.Parameters) == 0
                    && Conversion.ReturnType.Equals(To)
                    && Conversion.DeclaringType.Equals(From);
            }
        }

        private IMethod FindUserDefinedConversion(
            IType From, IType To, Operator Op)
        {
            var opMethods = Enumerable.Concat<IMethod>(
                From.GetAssociatedOperatorMethods(Op),
                To.GetAssociatedOperatorMethods(Op));

            foreach (var item in opMethods)
            {
                if (IsApplicableUserDefinedConversion(item, From, To))
                    return item;
            }
            return null;
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(OpeningToken.ToString());
            cb.Append(TargetType.GetCode());
            cb.Append(ClosingToken.ToString());
            cb.Append(Expression.GetCode());
            return cb;
        }

        #region Static

        public static IExpression[] CreateImplicitCast(ISyntaxState State, [IExpressionSyntax] Values, IType TargetType)
        {
            var results = new List<IExpression>();
            foreach (var item in Values)
            {
                results.Add(CreateImplicitCast(State, item, TargetType));
            }
            return results.ToArray();
        }

        public static IExpression CreateImplicitCast(ISyntaxState State, IExpressionSyntax Value, IType TargetType)
        {
            var expr = Value.CreateVerifiedExpression(State);
            return CastSyntax.CreateImplicitCast(State, expr, Value, TargetType);
        }

        public static IExpression CreateImplicitCast(ISyntaxState State, IExpression expr, ISyntaxNode Value, IType TargetType)
        {
            var valType = expr.Type;
            if (CastSyntax.UseImplicitCast(State, valType, TargetType))
            {
                return ConversionExpression.Create(expr, TargetType);
            }

            var envTgtType = State.Environment.GetEquivalentType(TargetType);
            var envValType = State.Environment.GetEquivalentType(expr.Type);
            if (CastSyntax.UseImplicitCast(State, envValType, envTgtType))
            {
                return ConversionExpression.Create(expr, TargetType);
            }
            else
            {
                var diffBuilder = new TypeDiffComparer(State.Renderer);
                var leftDiff = diffBuilder.Compare(TargetType, valType);
                var rightDiff = diffBuilder.Compare(valType, TargetType);
                var nodes = new List<MarkupNode>();
                nodes.Add(diffBuilder.Renderer.CreateTextNode("expression '"));
                nodes.Add(diffBuilder.Renderer.CreateTextNode(Value.GetCode().Trim().ToString()));
                nodes.Add(diffBuilder.Renderer.CreateTextNode("' of type '"));
                nodes.Add(leftDiff);
                nodes.Add(diffBuilder.Renderer.CreateTextNode("' could not be cast implicitly to '"));
                nodes.Add(rightDiff);
                nodes.Add(diffBuilder.Renderer.CreateTextNode("'"));
                var message = new MarkupNode("entry", nodes);

                State.Log.LogError(new LogEntry("cast error", message, Value.GetSourceLocation()));
                return ConversionExpression.Create(expr, TargetType);
            }
        }

        public static const bool UseImplicitCast(ISyntaxState State, IType SourceType, IType TargetType)
        {
            if (SourceType.Is(TargetType))
            {
                return true;
            }
            else if (SourceType.IsVector && TargetType.IsArray)
            {
                return SourceType.AsContainerType().ElementType.Is(
                            TargetType.AsContainerType().ElementType) &&
                       SourceType.AsContainerType().AsVectorType().Dimensions.Count ==
                            TargetType.AsContainerType().AsArrayType().ArrayRank;
            }
            if (SourceType.IsPointer && TargetType.IsPointer)
            {
                var firstPtrType = SourceType.AsContainerType().AsPointerType();
                var secondPtrType = TargetType.AsContainerType().AsPointerType();
                return firstPtrType.PointerKind.Equals(PointerKind.ReferencePointer) &&
                       secondPtrType.PointerKind.Equals(PointerKind.TransientPointer);
            }
            if (SourceType.IsPrimitive && TargetType.IsPrimitive)
            {
                if (SourceType.GetPrimitiveBitSize() <= TargetType.GetPrimitiveBitSize())
                {
                    if (SourceType.IsSignedInteger)
                    {
                         return TargetType.IsSignedInteger || TargetType.IsFloatingPoint;
                    }
                    else if (SourceType.IsUnsignedInteger)
                    {
                        if (TargetType.IsUnsignedInteger || TargetType.IsFloatingPoint)
                            return true;
                        else if (TargetType.IsSignedInteger)
                            return SourceType.GetPrimitiveBitSize() < TargetType.GetPrimitiveBitSize();
                        else
                            return false;
                    }
                    else if (SourceType.IsBit && TargetType.IsBit)
                    {
                        return true;
                    }
                    else if (SourceType.IsFloatingPoint && TargetType.IsFloatingPoint)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            else if ((SourceType.IsArray || SourceType.IsVector) && TargetType.GetGenericDeclaration().Equals(State.Environment.EnumerableType))
            {
                if (!TargetType.IsGeneric)
                    return true;
                return SourceType.AsContainerType().ElementType.Is(Enumerable.First<IType>(TargetType.GetGenericArguments()));
            }
            return false;
        }

        #endregion
    }
}
