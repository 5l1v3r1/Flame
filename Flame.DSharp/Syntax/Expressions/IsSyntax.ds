using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;
using Flame.Compiler;
using Flame.Compiler.Expressions;

namespace Flame.Syntax.DSharp
{
    public class IsSyntax : IExpressionSyntax, ITokenNode, IRelevantSyntax<Token>, ISourceSyntax
    {
        public const this(set IExpressionSyntax Target, set Token IsKeyword, set ITypeSyntax Type);

        public IExpressionSyntax Target { const get; private set; }
        public Token IsKeyword { const get; private set; }
        public ITypeSyntax Type { const get; private set; }

        public const IExpression CreateExpression(ISyntaxState State)
        {
        	var sourceExpr = Target.CreateVerifiedExpression(State);
        	var targetType = Type.CreateVerifiedType(State);
        	if (targetType != null && sourceExpr != null &&
                Warnings.HiddenNullCheck.UseWarning(State.Log.Options) &&
                sourceExpr.Type.Is(targetType))
        	{
        		State.Log.LogWarning(new LogEntry("Constant 'is' expression",
                    Warnings.HiddenNullCheck.CreateMessage(
                        "Expression '" + this.GetCode().ToString() +
                        "' will always evaluate to true for non-null values of '" +
                        Target.GetCode().ToString() + ".' An explicit null-check may be clearer. "),
                    IsKeyword.Location.Concat(Type.GetSourceLocation())));
        	}
            return new IsExpression(sourceExpr, targetType);
        }

        public SourceLocation Location
        {
        	const get return Target.GetSourceLocation().Concat(IsKeyword.Location).Concat(Type.GetSourceLocation());
        }

        public [Token] LeadingTrivia
        {
        	const get return Target.GetAllTrivia();
        }

        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var tks = new List<Token>();
        		tks.AddRange(Target.GetTokens());
        		tks.Add(IsKeyword);
				tks.AddRange(Type.GetTokens());
				return tks;
        	}
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(Target.GetCode());
            cb.Append(" ");
            cb.Append(IsKeyword.TokenValue);
            cb.Append(" ");
            cb.Append(Type.GetCode());
            return cb;
        }
    }
}
