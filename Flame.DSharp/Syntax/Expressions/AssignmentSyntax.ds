using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Variables;
using Flame.DSharp;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
	public class AssignmentSyntax : VariableSyntaxBase, ISetVariableExpressionSyntax, ITokenNode, IRelevantSyntax<Token>
    {
        public const this(set IVariableSyntax Variable, set IExpressionSyntax Value)
        {
        	this.Operator = new Token(TokenType.Equals, "=");
        }
        public const this(set IVariableSyntax Variable, set Token Operator, set IExpressionSyntax Value);

        public IVariableSyntax Variable { const get; private set; }
        public Token Operator { const get; private set; }
        public IExpressionSyntax Value { const get; private set; }
        
        public [Token] LeadingTrivia
        {
        	const get return Operator.GetAllTrivia();
        }
        
        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }
        
        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var tks = new List<Token>();
        		tks.AddRange(Variable.GetTokens());
        		tks.Add(Operator);
				tks.AddRange(Value.GetTokens());
				return tks;
        	}
        }
        
        public static const AssignedVariable CreateStoreVariable(ISyntaxState State, IVariable TargetVariable, Token Operator, IExpressionSyntax Value)
        {
        	var SourceVariable = SyntaxExtensions.CreateVerifiedVariable(Value, State);
            IVariable val;
        	if (Operator.Type == TokenType.PlusEquals)
        	{
        		val = new AsymmetricVariable(SourceVariable, new AddExpression(TargetVariable.CreateGetExpression(), SourceVariable.CreateGetExpression()));
        	}
        	else if (Operator.Type == TokenType.MinusEquals)
        	{
        		val = new AsymmetricVariable(SourceVariable, new SubtractExpression(TargetVariable.CreateGetExpression(), SourceVariable.CreateGetExpression()));
        	}
        	else if (Operator.Type == TokenType.AsteriskEquals)
        	{
        		val = new AsymmetricVariable(SourceVariable, new MultiplyExpression(TargetVariable.CreateGetExpression(), SourceVariable.CreateGetExpression()));
        	}
        	else if (Operator.Type == TokenType.SlashEquals)
        	{
        		val = new AsymmetricVariable(SourceVariable, new DivideExpression(TargetVariable.CreateGetExpression(), SourceVariable.CreateGetExpression()));
        	}
        	else if (Operator.Type == TokenType.AndEquals)
        	{
        		val = new AsymmetricVariable(SourceVariable, new AndExpression(TargetVariable.CreateGetExpression(), SourceVariable.CreateGetExpression()));
        	}
        	else if (Operator.Type == TokenType.BarEquals)
        	{
        		val = new AsymmetricVariable(SourceVariable, new OrExpression(TargetVariable.CreateGetExpression(), SourceVariable.CreateGetExpression()));
        	}
        	else if (Operator.Type == TokenType.CaretEquals)
        	{
        		val = new AsymmetricVariable(SourceVariable, new XorExpression(TargetVariable.CreateGetExpression(), SourceVariable.CreateGetExpression()));
        	}
        	else
        	{
        		if (Operator.Type != TokenType.Equals)
        		{
        			State.Log.LogError("The operator " + Operator.ToString() + " is not supported as an assignment operator.");
        		}
        		if (SourceVariable.Type.Is(TargetVariable.Type))
        		{
        			val = SourceVariable;
        		}
        		else
        		{
        			val = new ExpressionVariable(CastSyntax.CreateImplicitCast(State, SourceVariable.CreateGetExpression(), Value, TargetVariable.Type));
        		}
        	}
        	return new AssignedVariable(TargetVariable, val);
        }
        
        public AssignedVariable CreateStoreVariable(ISyntaxState State)
        {
            return CreateStoreVariable(State, Variable.CreateVerifiedVariable(State), Operator, Value);
        }

        public override IVariable CreateVariable(ISyntaxState State)
        {
            return CreateStoreVariable(State);
        }

        public IStatement CreateSetStatement(ISyntaxState State)
        {
            return CreateStoreVariable(State).CreateStoreStatement();
        }

        public override CodeBuilder GetCode()
        {
            CodeBuilder cb = Variable.GetCode();
            cb.Append(Operator.ToString());
            cb.Append(Value.GetCode());
            return cb;
        }
    }
}