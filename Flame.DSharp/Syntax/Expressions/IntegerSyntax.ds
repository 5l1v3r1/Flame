using System;
using System.Collections.Generic;
using System.Globalization;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class IntegerSyntax : LiteralSyntax
    {
        public const this(ulong Value)
        {
        	this.Value = new Token(TokenType.Integer, Value.ToString());
        }
        public const this(long Value)
        {
        	this.Value = new Token(TokenType.Integer, Value.ToString());
        }
        public const this(set Token Value);

        protected override IExpression CreateExpression(ISyntaxState State, Token Value)
        {
        	string tokenVal = Value.TokenValue;
        	if (tokenVal[0] == '-') // Negation
        	{
        		int64 val = int64.Parse(tokenVal);
        		if (val < (int64)int32.MinValue)
	        	{
	        		return new IntegerExpression(val);
	        	}
	        	else if (val < (int64)int16.MinValue)
	        	{
	        		return new IntegerExpression((int32)val);
	        	}
	        	else if (val < (int64)int8.MinValue)
	        	{
	        		return new IntegerExpression((int16)val);
	        	}
	        	else
	        	{
	        		return new IntegerExpression((int8)val);
	        	}
        	}
        	else
        	{
        		uint64 val = uint64.Parse(tokenVal);
        		if (val < (uint64)int8.MaxValue)
        		{
        			return new IntegerExpression((int8)val);
        		}
	        	else if (val > (uint64)int8.MaxValue && val < (uint64)uint8.MaxValue)
	        	{
	        		return new IntegerExpression((uint8)val);
	        	}
	        	else if (val < (uint64)int16.MaxValue)
	        	{
	        		return new IntegerExpression((int16)val);
	        	}
	        	else if (val > (uint64)int16.MaxValue && val < (uint64)uint16.MaxValue)
	        	{
	        		return new IntegerExpression((uint16)val);
	        	}
	        	else if (val < (uint64)int32.MaxValue)
	        	{
	        		return new IntegerExpression((int32)val);
	        	}
	        	else if (val > (uint64)int32.MaxValue && val < (uint64)uint32.MaxValue)
	        	{
	        		return new IntegerExpression((uint32)val);
	        	}
	        	else if (val < (uint64)int64.MaxValue)
	        	{
	        		return new IntegerExpression((int64)val);
	        	}
	        	else
	        	{
	        		return new IntegerExpression(val);
	        	}
        	}
        }
    }
    public class BinaryIntegerSyntax : LiteralSyntax
    {
    	public const this(set Token Value);

    	private static const uint64 Pow2Long(int Exponent)
    	{
    		uint64 result = (uint64)1;
        	for (int i = 0; i < Exponent; i++)
        		result *= (uint64)2;
        	return result;
    	}
    	private static const uint32 Pow2(int Exponent)
    	{
    		uint32 result = (uint32)1;
        	for (int i = 0; i < Exponent; i++)
        		result *= (uint32)2;
        	return result;
    	}
    	private static const uint16 Pow2Short(int Exponent)
    	{
    		uint16 result = (uint16)1;
        	for (int i = 0; i < Exponent; i++)
        		result *= (uint16)2;
        	return result;
    	}
    	private static const uint8 Pow2Byte(int Exponent)
    	{
    		uint8 result = (uint8)1;
        	for (int i = 0; i < Exponent; i++)
        		result *= (uint8)2;
        	return result;
    	}

    	public static const IExpression ParseBinaryInteger(string Binary)
        {
            if (Binary.Length > 32)
            {
                uint64 val = (uint64)0;
                for (int i = 0; i < Binary.Length; i++)
                {
                	if (Binary[i] == '1')
                		val += Pow2Long(Binary.Length - i - 1);
                }
                return new BitExpression((bit64)val);
            }
            else if (Binary.Length > 16)
            {
                uint32 val = (uint32)0;
                for (int i = 0; i < Binary.Length; i++)
                {
                	if (Binary[i] == '1')
                		val += Pow2(Binary.Length - i - 1);
                }
                return new BitExpression((bit32)val);
            }
            else if (Binary.Length > 8)
            {
                uint16 val = (uint16)0;
                for (int i = 0; i < Binary.Length; i++)
                {
                	if (Binary[i] == '1')
                		val += Pow2Short(Binary.Length - i - 1);
                }
                return new BitExpression((bit16)val);
            }
            else
            {
                uint8 val = (uint8)0;
                for (int i = 0; i < Binary.Length; i++)
                {
                	if (Binary[i] == '1')
                		val += Pow2Byte(Binary.Length - i - 1);
                }
                return new BitExpression((bit8)val);
            }
        }

        protected override IExpression CreateExpression(ISyntaxState State, Token Value)
        {
        	string binary = Value.TokenValue.Substring(2);
            if (binary.Length > 64)
            	State.Log.LogError(new LogEntry("literal out of bounds", "bitstring '" + Value.TokenValue + "' was out of bounds"));
            return ParseBinaryInteger(binary);
        }
    }
    /*public class BinaryIntegerSyntax : LiteralSyntax
    {
        public this(set Token Value);
        public this(bit64 Value)
        {
        	this.Value = new Token(TokenType.BinaryInteger, GetBinaryString(Value));
        }

        private static string GetBinaryString(bit64 n)
        {
            char[64] b = new char[64];
            int pos = 63;
            int32 i = 0;

            while (i < 64)
            {
                if ((n & (bit64)(1 << i)) != (bit32)0)
                {
                    b[pos] = '1';
                }
                else
                {
                    b[pos] = '0';
                }
                pos--;
                i++;
            }
            return new string(b).TrimStart('0');
        }

        private static IExpression ParseBinaryInteger(string Binary)
        {
            if (Binary.Length > 32)
            {
                bit64 val = 0;
                for (int i = 0; i < Binary.Length; ++i)
                {
                    bit64 charVal = Binary[i] == '0' ? (bit64)0 : (bit64)1;
                    val |= charVal << (Binary.Length - i - 1);
                }
                return new Bit64Expression(val);
            }
            else
            {
                bit32 val = 0;
                for (int i = 0; i < Binary.Length; ++i)
                {
                    bit32 charVal = Binary[i] == '0' ? (bit32)0 : (bit32)1;
                    val |= charVal << (Binary.Length - i - 1);
                }
                return new Bit32Expression(val);
            }
        }

        protected override IExpression CreateExpression(ISyntaxState State, Token Value)
        {
            return ParseBinaryInteger(Value.TokenValue.Substring(2));
        }
    }*/
}
