using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public abstract class LiteralSyntax : IExpressionSyntax, ITokenNode, IRelevantSyntax<Token>, ISourceSyntax
    {
    	public const this();
        public const this(set Token Value);

        public Token Value { const get; protected set; }

        protected abstract const IExpression CreateExpression(ISyntaxState State, Token Value);

        public const IExpression CreateExpression(ISyntaxState State)
        {
            return CreateExpression(State, Value);
        }

        public SourceLocation Location
        {
        	const get return Value.Location;
        }

        public [Token] LeadingTrivia
        {
        	const get return Value.GetAllTrivia();
        }

        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		return (IReadOnlyList<Token>)new Token[] { Value };
        	}
        }

        public override const string ToString()
        {
            return Value.ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(Value.ToString());
            return cb;
        }
    }
}
