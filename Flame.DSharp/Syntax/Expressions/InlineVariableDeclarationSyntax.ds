using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.DSharp;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class InlineVariableDeclarationSyntax : VariableSyntaxBase, ISetVariableExpressionSyntax
    {
        public const this(set ITypeSyntax Type, set SingleVariableDeclaration Declaration);
		
        public ITypeSyntax Type { const get; private set; }
        public SingleVariableDeclaration Declaration { const get; private set; }

        public IStatement CreateSetStatement(ISyntaxState State, IType TypeHint)
        {
            return Declaration.CreateStatement(Type, State, TypeHint);
        }
        
        public IStatement CreateSetStatement(ISyntaxState State)
        {
        	return CreateSetStatement(State, null);
        }
        
        public IVariable CreateVariable(ISyntaxState State, IType TypeHint)
        {
        	return Declaration.CreateVariable(Type, State, TypeHint);
        }
        public override IVariable CreateVariable(ISyntaxState State)
        {
        	return CreateVariable(State, null);
        }

        public override CodeBuilder GetCode()
        {
            CodeBuilder cb = Type.GetCode();
            cb.Append(Declaration.GetCode());
            return cb;
        }
    }
}