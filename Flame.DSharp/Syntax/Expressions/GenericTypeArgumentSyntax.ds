using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class GenericTypeArgumentsSyntax : IExpressionSyntax, ITypeMemberAccessSyntax, ITokenNode, IRelevantSyntax<Token>, ISourceSyntax
    {
        public const this(set ITypeMemberAccessSyntax Target, set Token LeftDelimiter, set [ITypeSyntax] TypeArguments, set Token RightDelimiter);

        public ITypeMemberAccessSyntax Target { const get; private set; }
        public Token LeftDelimiter { const get; private set; }
        public [ITypeSyntax] TypeArguments { const get; private set; }
        public Token RightDelimiter { const get; private set; }

        public SourceLocation Location
        {
        	const get
        	{
        		var loc = Target.GetSourceLocation().Concat(LeftDelimiter.Location);
        		foreach (var item in TypeArguments) loc = loc.Concat(item.GetSourceLocation());
        		loc = loc.Concat(RightDelimiter.Location);
        		return loc;
        	}
        }

        public [Token] LeadingTrivia
        {
        	const get return LeftDelimiter.GetAllTrivia();
        }

        public [Token] TrailingTrivia
        {
        	const get return RightDelimiter.GetAllTrivia();
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var tks = new List<Token>();
				tks.AddRange(Target.GetTokens());
				tks.Add(LeftDelimiter);
				foreach (var item in TypeArguments)
					tks.AddRange(item.GetTokens());
				tks.Add(RightDelimiter);
				return tks;
        	}
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = Target.GetCode();
            cb.Append(LeftDelimiter.ToString());
            bool first = true;
            foreach (var item in TypeArguments)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    cb.Append(",");
                }
                cb.Append(item.GetCode());
            }
            cb.Append(RightDelimiter.ToString());
            return cb;
        }

        public const IExpression GetCallerExpression(ISyntaxState State)
        {
            return Target.GetCallerExpression(State);
        }

        public const IVariable GetCallerVariable(ISyntaxState State)
        {
            return Target.GetCallerVariable(State);
        }

        public const [ITypeMember] GetAccessedMembers(ISyntaxState State)
        {
            var genericArgs = Enumerable.ToArray<IType>(TypeArguments.CreateVerifiedTypes(State));

            var members = Target.GetAccessedMembers(State);
            var filteredMembers = new List<ITypeMember>();
            foreach (var item in members)
            {
            	if (item is IGenericMember)
            	{
            		var genericItem = (IGenericMember)item;
            		var genericParams = Enumerable.ToArray<IGenericParameter>(genericItem.GenericParameters);
	                if (genericParams.Length != genericArgs.Length)
	                {
	                    break;
	                }
	                bool assignable = genericItem is IMethod;
	                for (int i = 0; i < genericParams.Length && assignable; i++)
	                {
	                    if (!genericParams[i].Constraint.Satisfies(genericArgs[i]))
	                    {
	                        assignable = false;
	                    }
	                }
	                if (assignable)
	                {
	                	filteredMembers.Add(((IMethod)genericItem).MakeGenericMethod(genericArgs));
	                }
            	}
            }

            return filteredMembers;
        }

        public IExpression CreateExpression(ISyntaxState State)
        {
            var expr = ((IExpressionSyntax)Target).CreateExpression(State);

            if (expr == null) // Something like IEnumerable<T> would be parsed as
                              // generic type argument syntax, even though it is a type.
                              // Gracefully return null in that case.
                return null;

            var genericArgs = Enumerable.ToArray<IType>(TypeArguments.CreateVerifiedTypes(State));
            var delegates = IntersectionExpression.GetIntersectedExpressions(expr);

            var results = new List<IExpression>();
            foreach (var item in delegates)
            {
                var method = MethodType.GetMethod(item.Type);
                if (method != null)
                {
                    var typeParams = Enumerable.ToArray<IGenericParameter>(method.GenericParameters);
                    if (typeParams.Length == genericArgs.Length)
                    {
                        var genDeleg = item.MakeGenericDelegateExpression(genericArgs);
                        if (genDeleg != null)
                        {
                            results.Add(genDeleg);
                        }
                    }
                }
            }
            return IntersectionExpression.Create(results);
        }
    }
}
