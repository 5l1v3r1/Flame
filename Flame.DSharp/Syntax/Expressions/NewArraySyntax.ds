using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class NewArraySyntax : IExpressionSyntax
    {
        public const this(set Token NewKeyword, set ITypeSyntax ElementType, set IEnumerable<IExpressionSyntax> Arguments);
        public const this(set ITypeSyntax ElementType, set IEnumerable<IExpressionSyntax> Arguments)
        {
        	this.NewKeyword = new Token(TokenType.NewKeyword, "new");
        }

        public Token NewKeyword { const get; private set; }
        public ITypeSyntax ElementType { const get; private set; }
        public IEnumerable<IExpressionSyntax> Arguments { const get; private set; }

        public IExpression CreateExpression(ISyntaxState State)
        {
            var realType = ElementType.CreateVerifiedType(State);

            var args = Arguments.CreateExpressions(State);

            return new NewArrayExpression(realType, args);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(NewKeyword.ToString());
            cb.Append(ElementType.GetCode());
            bool first = true;
            cb.Append("[");
            foreach (var item in Arguments)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    cb.Append(",");
                }
                cb.Append(item.GetCode().ToString());
            }
            cb.Append("]");
            return cb;
        }
    }
}