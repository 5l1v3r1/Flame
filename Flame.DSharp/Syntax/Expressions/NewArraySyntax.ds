using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class NewArraySyntax : IExpressionSyntax, ISourceSyntax
    {
        public const this(set Token NewKeyword, set ITypeSyntax ElementType, set DelimitedList<IExpressionSyntax> Arguments);
        public const this(set ITypeSyntax ElementType, set DelimitedList<IExpressionSyntax> Arguments)
        {
        	this.NewKeyword = new Token(TokenType.NewKeyword, "new");
        }

        public Token NewKeyword { const get; private set; }
        public ITypeSyntax ElementType { const get; private set; }
        public DelimitedList<IExpressionSyntax> Arguments { const get; private set; }

        public SourceLocation Location
        {
        	const get
			{
				return NewKeyword.Location
                                 .Concat(ElementType.GetSourceLocation())
                                 .Concat(Arguments.Location);
			}
        }

        public IExpression CreateExpression(ISyntaxState State)
        {
            var realType = ElementType.CreateVerifiedType(State);

            var args = Arguments.CreateVerifiedExpressions(State);

            return new NewArrayExpression(realType, args);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(NewKeyword.ToString());
            cb.Append(ElementType.GetCode());
            cb.Append(Arguments.GetCode());
            return cb;
        }
    }
}
