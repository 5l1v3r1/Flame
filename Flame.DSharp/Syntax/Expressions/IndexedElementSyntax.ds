using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class IndexedElementSyntax : VariableSyntaxBase, IInvocationSyntax, ISourceSyntax
    {
        public const this(set IExpressionSyntax Caller, set DelimitedList<IExpressionSyntax> ArgumentList);

        public IExpressionSyntax Caller { const get; private set; }
        public DelimitedList<IExpressionSyntax> ArgumentList { const get; private set; }

        public [IExpressionSyntax] Arguments { const get return ArgumentList; }

        public SourceLocation Location
        {
        	const get return Caller.GetSourceLocation().Concat(ArgumentList.Location);
        }

        public override const IVariable CreateVariable(ISyntaxState State)
        {
            var args = Enumerable.ToArray<IExpression>(Arguments.CreateVerifiedExpressions(State));

            var callerExpr = Caller.CreateVerifiedExpression(State);

            var elemVariable = new ElementVariable(callerExpr, args);

            if (!elemVariable.CanResolve)
            {
                var callerCode = Caller.GetCode().Trim();
                var thisCode = this.GetCode().Trim();
            	State.Log.LogError(new LogEntry(
                    "indexer resolution error",
                    "indexer property on '" + callerCode.ToString() +
                    "' could not be resolved in '" + thisCode.ToString() + "'",
                    Location));
            }

            return elemVariable;
        }

        public const IVariable GetCallerVariable(ISyntaxState State)
        {
            if (Caller is IVariableSyntax)
            {
                return ((IVariableSyntax)Caller).CreateVariable(State);
            }
            else
            {
                var expr = Caller.CreateExpression(State);
                if (expr == null)
                {
                    return null;
                }
                else
                {
                    return new ExpressionVariable(expr);
                }
            }
        }

        public const [ITypeMember] GetAccessedMembers(ISyntaxState State)
        {
            var callerExpr = Caller.CreateVerifiedExpression(State);
            return callerExpr.Type.GetBestIndexers(false, Arguments.CreateVerifiedExpressions(State).Types);
        }

        #region GetCode

        public override CodeBuilder GetCode()
        {
            CodeBuilder sb = new CodeBuilder();
            sb.Append(Caller.GetCode());
            sb.Append(ArgumentList.GetCode());
            return sb;
        }

        #endregion
    }
}
