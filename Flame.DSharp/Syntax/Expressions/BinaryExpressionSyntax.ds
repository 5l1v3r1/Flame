using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Build;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    #region BinaryExpressionSyntax

    public abstract class BinaryExpressionSyntax : IExpressionSyntax, ITokenNode, IRelevantSyntax<Token>, ISourceSyntax
    {
    	protected const this();
        public const this(set IExpressionSyntax Left, set Token OperatorToken, set IExpressionSyntax Right);

        public IExpressionSyntax Left { const get; protected set; }
        public Token OperatorToken { const get; protected set; }
        public IExpressionSyntax Right { const get; protected set; }

        public SourceLocation Location
        {
        	const get return Left.GetSourceLocation().Concat(OperatorToken.Location).Concat(Right.GetSourceLocation());
        }

        public [Token] LeadingTrivia
        {
        	const get return OperatorToken.GetAllTrivia();
        }

        public [Token] TrailingTrivia
        {
        	const get return Enumerable.Empty<Token>();
        }

        public IReadOnlyList<Token> Tokens
        {
        	const get
        	{
        		var tks = new List<Token>();
				tks.AddRange(Left.GetTokens());
				tks.Add(OperatorToken);
				tks.AddRange(Right.GetTokens());
				return tks;
        	}
        }

        public static const IType GetBinaryExpressionType(ISyntaxState State, IType Left, IType Right)
        {
        	if (CastSyntax.UseImplicitCast(State, Left, Right))
        	{
        		return Right;
        	}
        	else
        	{
        		return Left;
        	}
        }

        public static const IExpression CastLeftOperand(ISyntaxState State, IType TargetType, IExpression Left, ISyntaxNode Node, Operator Op)
        {
        	return CastSyntax.CreateImplicitCast(State, Left, Node, TargetType);
        }

        public static const IExpression CastRightOperand(ISyntaxState State, IType TargetType, IExpression Right, ISyntaxNode Node, Operator Op)
        {
        	/*if (Op == Operator.RightShift || Op == Operator.LeftShift)
        	{
        		return Right;
        	}
        	else
        	{
        		return CastSyntax.CreateImplicitCast(State, Right, Node, TargetType);
        	}*/
        	return CastSyntax.CreateImplicitCast(State, Right, Node, TargetType);
        }

        private static const bool IsPrimitiveOperation(IType Left, IType Right, Operator Op)
        {
        	return (Left.IsEnum || Left.IsPrimitive) && (Right.IsEnum || Right.IsPrimitive);
        }

        private static const bool IsReferenceComparison(IType Left, IType Right, Operator Op)
        {
        	return (Op == Operator.CheckEquality || Op == Operator.CheckInequality)
        		&& (Left.Equals(PrimitiveTypes.Null) || Left.IsPointer || Left.IsReferenceType)
        		&& (Right.Equals(PrimitiveTypes.Null) || Right.IsPointer || Right.IsReferenceType)
        		&& (Left.Is(Right) || Right.Is(Left));
        }

        public static const IExpression CreateExpression(ISyntaxState State, IExpressionSyntax Left, Operator Op, IExpressionSyntax Right)
        {
        	var leftExpr = Left.CreateVerifiedExpression(State);
            var rightExpr = Right.CreateVerifiedExpression(State);

            var lType = leftExpr.Type;
            var rType = rightExpr.Type;

            IMethod overload;
            if (IsPrimitiveOperation(lType, rType, Op))
            {
            	overload = null;
            }
            else
            {
            	overload = Op.GetOperatorOverload(new IType[] { lType, rType });

            	if (overload == null && !IsReferenceComparison(lType, rType, Op))
                {
                    if (lType.IsGenericParameter || rType.IsGenericParameter)
                    {
                        if (Warnings.GenericOperators.UseWarning(State.Log.Options))
                        {
                            State.Log.LogWarning(new LogEntry(
                                "operator overload missing",
                                Warnings.GenericOperators.CreateMessage(
                                    "no operator overload could be found for generic parameter operator '" +
                                    Op.ToString() + "'. "),
                                Left.GetSourceLocation().Concat(Right.GetSourceLocation())));
                        }
                    }
                    else if (Warnings.Operators.UseWarning(State.Log.Options))
                    {
                        State.Log.LogWarning(new LogEntry(
                            "operator overload missing",
                            Warnings.Operators.CreateMessage(
                                "no operator overload could be found for operator '" +
                                Op.ToString() + "'. "),
                            Left.GetSourceLocation().Concat(Right.GetSourceLocation())));
                    }
                }

            }

            if (overload == null)
            {
			    var tType = GetBinaryExpressionType(State, lType, rType);

		    	var lExpr = CastLeftOperand(State, tType, leftExpr, Left, Op);
		    	var rExpr = CastRightOperand(State, tType, rightExpr, Right, Op);
		        return DirectBinaryExpression.Create(lExpr, Op, rExpr);
	        }
	        else
	        {
	        	var overloadParams = overload.GetParameters();
	        	if (overloadParams.Length == 2)
	        	{
		        	var lExpr = CastSyntax.CreateImplicitCast(State, leftExpr, Left, overloadParams[0].ParameterType);
		        	var rExpr = CastSyntax.CreateImplicitCast(State, rightExpr, Right, overloadParams[1].ParameterType);

                    return new InvocationExpression(overload, null, new IExpression[] { lExpr, rExpr });
	        	}
	        	else
	        	{
	        		var lExpr = CastSyntax.CreateImplicitCast(State, leftExpr, Left, overload.DeclaringType);
		        	var rExpr = CastSyntax.CreateImplicitCast(State, rightExpr, Right, overloadParams[0].ParameterType);

                    return new InvocationExpression(overload, lExpr, new IExpression[] { rExpr });
	        	}
	        }
        }

        protected abstract const IExpression CreateExpression(ISyntaxState State, IExpressionSyntax Left, Token Op, IExpressionSyntax Right);

        public const IExpression CreateExpression(ISyntaxState State)
        {
            return CreateExpression(State, Left, OperatorToken, Right);
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(Left.GetCode());
            cb.Append(OperatorToken.ToString());
            cb.Append(Right.GetCode());
            return cb;
        }
    }

    #endregion
}
