using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.DSharp.Parser;
using Pixie;

namespace Flame.Syntax.DSharp
{
    public class CurriedClosure<T1, T2, T3, T4>
    {
        public const this(set T4(T1, T2, T3) Delegate, set T1 Arg0);

        public T4(T1, T2, T3) Delegate { const get; private set; }
        public T1 Arg0 { const get; private set; }

        public T4 Invoke(T2 Arg1, T3 Arg2)
        {
            return Delegate(Arg0, Arg1, Arg2);
        }
    }

    public abstract class MemberAccessSyntaxBase : VariableSyntaxBase, ITypeMemberAccessSyntax, ISourceSyntax
    {
    	public const this();
        public const this(set IExpressionSyntax Target, set Token Operator, set Token Member);

        public IExpressionSyntax Target { const get; protected set; }
        public Token Operator { const get; protected set; }
        public Token Member { const get; protected set; }

        public SourceLocation Location
        {
        	const get return Target.GetSourceLocation().Concat(MemberAccessLocation);
        }

        public SourceLocation MemberAccessLocation
        {
        	const get return Operator.Location.Concat(Member.Location);
        }

        public abstract IVariable GetCallerVariable(ISyntaxState State);

        public override string ToString()
        {
            return this.GetCode().ToString();
        }

        public override CodeBuilder GetCode()
        {
            var cb = Target.GetCode();
            cb.Append(Operator.ToString());
            cb.Append(Member.ToString());
            return cb;
        }

        #region CreateAddressToValueExpression

        public static IExpression CreateAddressToValueExpression(IVariable Variable)
        {
            IExpression callerExpr;
            if (Variable is IUnmanagedVariable)
            {
                callerExpr = ((IUnmanagedVariable)Variable).CreateAddressOfExpression();
            }
            else
            {
                // This is hacky, and slower on .Net (tests on .Net 4.5 showed unbox/box takes about 1.1x as much time as the other approach). In addition, boxing/unboxing may cause the gc to kick in.
                // The upside of this approach is that the temporary variable will be released by the gc.
                // Temporary variables are released after they are used, though.
                /*callerExpr = new Expressions.ConversionExpression(
                    new Expressions.ConversionExpression(Caller.CreateGetExpression(), State.Binder.RootType),
                    property.DeclaringType.MakePointerType(PointerKind.ReferencePointer));*/

                var placeholder = new LocalVariable(Variable.Type);

                callerExpr = new Expressions.InitializedExpression(
                    placeholder.CreateSetStatement(Variable.CreateGetExpression()),
                    placeholder.CreateAddressOfExpression(),
                    placeholder.CreateReleaseStatement());
                // This may not be the best place to release the temporary variable. Ideally, it would be released after usage.
            }
            return callerExpr;
        }

        #endregion

        #region CreateCallerExpression

        public static IExpression CreateCallerExpression(ISyntaxState State, IVariable Caller, ITypeMember Member)
        {
            if (Member.IsStatic)
                return null;
            else
                return CreateInstanceCallerExpression(State, Caller, Member.DeclaringType);
        }

        #endregion

        #region CreateInstanceCallerExpression

        private static bool IsPotentialValueType(IType Type)
        {
            return Type.IsValueType
                || (Type.IsGenericParameter && !Type.IsReferenceType);
        }

        public static IExpression CreateInstanceCallerExpression(ISyntaxState State, IVariable Caller, IType CallerType)
        {
            if (CallerType.IsSingleton && (Caller == null || CallerType.IsAssociatedSingletonOf(Caller.Type)))
            	return (SingletonVariable.GetSingletonVariable(CallerType, State.CurrentType)).CreateGetExpression();
            else if (Caller != null && IsPotentialValueType(Caller.Type))
                return CreateAddressToValueExpression(Caller);
            else
                return Caller.CreateGetExpression();
        }

        #endregion

        #region CreateExtensionCallerExpression

        public static IExpression CreateExtensionCallerExpression(ISyntaxState State, IVariable Caller, IType CallerType)
        {
            if (CallerType.IsPointer && !Caller.Type.IsPointer)
            	return CreateAddressToValueExpression(Caller);
            else if (CastSyntax.UseImplicitCast(State, Caller.Type, CallerType))
                return ConversionExpression.Create(Caller.CreateGetExpression(), CallerType);
            else
                return Caller.CreateGetExpression();
        }

        #endregion

        private static const IVariable CreateFieldVariable([ITypeMember] members,
            IVariable Caller, IType CallerType,
            UnqualifiedName MemberName, ISyntaxState State)
        {
            var possibleFields = Enumerable.OfType<IField>(members);
            var field = possibleFields.GetField(MemberName);
            if (field != null)
            {
            	if (field.IsStatic)
                	return new FieldVariable(field, null);
                else if (CallerType.IsValueType)
                	return new ValueTypeFieldVariable(field, Caller);
                else
                	return new FieldVariable(field, CreateCallerExpression(State, Caller, field));
            }
            return null;
        }

        private static const [T] GroupTypeMembers<T>([ITypeMember] Members,
                                    UnqualifiedName MemberName)
            where T : ITypeMember
        {
            var results = new List<T>();
            var possibleResults = Enumerable.OfType<T>(Members);
            foreach (var item in possibleResults)
                if (!item.IsHidden && item.Name.Equals(MemberName))
            {
                results.Add(item);
            }
            return results;
        }

        private static bool IsShadowed(IType Type, IMethod Bottom, IMethod Top)
        {
            if (Bottom.IsExtension && Bottom.DeclaringType.Equals(Type))
            {
                return false;
            }
            else
            {
                return Top.ShadowsExtension(Bottom);
            }
        }

        private static bool IsShadowed(IType Type, IProperty Bottom, IProperty Top)
        {
            if (Bottom.IsExtension && Bottom.DeclaringType.Equals(Type))
            {
                return false;
            }
            else
            {
                return Top.ShadowsExtension(Bottom);
            }
        }

        private static [IProperty] ExceptShadowed([IProperty] Values, IType ThisType)
        {
            return SetExtensions.UpperBounds<IProperty>(Values,
                       new CurriedClosure<IType, IProperty, IProperty, bool>(IsShadowed, ThisType).Invoke);
        }

        private static [IMethod] ExceptShadowed([IMethod] Values, IType ThisType)
        {
            return SetExtensions.UpperBounds<IMethod>(Values,
                       new CurriedClosure<IType, IMethod, IMethod, bool>(IsShadowed, ThisType).Invoke);
        }

        private static const IType GetNullableType(IVariable Target)
        {
            if (Target == null)
                return null;
            else
                return Target.Type;
        }

        private static const IVariable CreatePropertyVariable([ITypeMember] members,
            IVariable Caller, IType CallerType,
            UnqualifiedName MemberName, ISyntaxState State)
        {
            bool callerNull = Caller == null;
            bool singletonCaller = CallerType.IsSingleton && Caller != null;
            var properties = ExceptShadowed(GroupTypeMembers<IProperty>(members, MemberName), CallerType);

            var propertyTargetType = GetNullableType(Caller);

            var property = Enumerable.FirstOrDefault<IProperty>(properties.GetBestProperties(propertyTargetType, new IType[0]));
            if (property != null)
            {
                IExpression callerExpr;
                if (Caller != null && property.IsExtension)
                {
                    callerExpr = CreateExtensionCallerExpression(State, Caller, Enumerable.First<IParameter>(property.IndexerParameters).ParameterType);
                    return new PropertyVariable(property, null, new IExpression[] { callerExpr });
                }
                else
                {
                    callerExpr = CreateCallerExpression(State, Caller, property);
                    return new PropertyVariable(property, callerExpr);
                }
            }
            else if (singletonCaller)
            {
            	property = Enumerable.FirstOrDefault<IProperty>(properties.GetBestProperties(null, new IType[0]));
            	if (property != null)
            	{
            		return new PropertyVariable(property, null);
            	}
            }

            return null;
        }

        private static const IDelegateExpression CreateGetMethodExpression(IMethod Method,
            IVariable Caller, IType CallerType, ISyntaxState State)
        {
            bool isExt = Method.IsExtension && !Method.DeclaringType.Equals(CallerType);
            if (Caller != null && isExt)
            {
                var callerExpr = CreateExtensionCallerExpression(State, Caller,
                    Enumerable.First<IParameter>(Method.GetParameters()).ParameterType);
                return new GetExtensionMethodExpression(Method, callerExpr);
            }
            else if (!isExt)
            {
                var callerExpr = CreateCallerExpression(State, Caller, Method);
                return new GetMethodExpression(Method, callerExpr);
            }
            else // Extension methods defined in a different type without a caller
                 // variable should not be included.
            {
                return (IDelegateExpression)null;
            }
        }

        private static const IVariable CreateMethodGroupVariable([ITypeMember] members,
            IVariable Caller, IType CallerType,
            UnqualifiedName MemberName, ISyntaxState State)
        {
            var methods = ExceptShadowed(GroupTypeMembers<IMethod>(members, MemberName), CallerType);

            var methodTargetType = GetNullableType(Caller);

            var results = new List<IExpression>();

            foreach (var item in methods)
            {
                var expr = CreateGetMethodExpression(item, Caller, CallerType, State);
                if (expr != null)
                {
                    results.Add(expr);
                }
            }

            if (results.Count == 0)
                return null;

            return new ExpressionVariable(IntersectionExpression.Create(results));
        }

        public static IVariable CreateVariable(IVariable Caller, IType CallerType, UnqualifiedName MemberName, ISyntaxState State)
        {
        	var members = AccessExtensions.FilterAccessible<ITypeMember>(
                            State.CurrentType,
                            State.MemberProvider.GetMembers(CallerType, MemberName.ToString()));

            var fieldVar = CreateFieldVariable(members, Caller, CallerType, MemberName, State);
            if (fieldVar != null)
            {
            	return fieldVar;
            }

            var propVar = CreatePropertyVariable(members, Caller, CallerType, MemberName, State);
            if (propVar != null)
            {
                return propVar;
            }

            return CreateMethodGroupVariable(members, Caller, CallerType, MemberName, State);
        }

        private static const ITypeSyntax CreateTypeSyntax(ISyntaxNode Node, ISyntaxState State)
        {
            // Tokenize and parse
            var tokenStream = new TokenizerStream(Node.GetCode().ToString(), null);
            var parser = new DSharpSyntaxParser(State.Log);
            return parser.ToTypeSyntax(tokenStream);
        }

        private static const IType BindType(ISyntaxNode Node, ISyntaxState State)
        {
        	var tSyntax = CreateTypeSyntax(Node, State);
        	if (tSyntax == null)
        		return null;
        	else
        		return tSyntax.CreateType(State);
        }

        private const IType BindType(ISyntaxState State)
        {
        	return BindType(Target, State);
        }

        public static const IVariable CreateSingletonVariable(ISyntaxState State, IType Type)
        {
        	if (Type == null)
        	{
        		return null;
        	}
        	else if (Type.IsSingleton)
            {
            	return SingletonVariable.GetSingletonVariable(Type, State.CurrentType);
            }
            else
            {
            	var associatedSingleton = Type.GetAssociatedSingleton();
            	if (associatedSingleton != null)
            		return SingletonVariable.GetSingletonVariable(associatedSingleton, State.CurrentType);
            	else return null;
            }
        }

        public override IVariable CreateVariable(ISyntaxState State)
        {
            var variable = GetCallerVariable(State);

            IType exprType;
            if (variable == null)
            {
                exprType = BindType(State);
                variable = CreateSingletonVariable(State, exprType);
            }
            else
            {
                exprType = variable.Type;
            }
            if (exprType == null)
            {
            	// Actually, don't log this. Other expressions may be counting on this returning null
            	// State.Log.LogError("'" + Target.GetCode().ToString() + "' could not be resolved as a variable, expression or type.");
                return null;
            }

            var name = new SimpleName(Member.TokenValue);

            var result = CreateVariable(variable, exprType, name, State);

            if (result == null) // Try singleton
            {
            	var singletonType = BindType(this, State);
            	if (singletonType != null)
            		return CreateSingletonVariable(State, singletonType);
            }

            /*if (result == null) // Actually, don't log this. Other expressions may be counting on this returning null
            {
            	State.Log.LogError(new LogEntry("Member not found error", "The member '" + Member.TokenValue + "' in expression '" + this.GetCode().ToString() + "' could not be resolved"));
            }*/

            return result;
        }

        public [ITypeMember] GetAccessedMembers(ISyntaxState State)
        {
            var expr = this.GetCallerExpression(State);

            IType parentType;
            if (expr == null)
            {
                parentType = BindType(State);
            }
            else
            {
                parentType = expr.Type;
            }

            if (parentType == null)
            {
                var targetCode = Target.GetCode().Trim();
                var thisCode = this.GetCode().Trim();
            	if (Target is MemberAccessSyntaxBase) // Try to go the extra mile and find some type info.
            	{
            		var innerTarget = ((MemberAccessSyntaxBase)Target).Target;
            		var innerCallerExpr = innerTarget.CreateExpression(State);
            		while (innerTarget is MemberAccessSyntaxBase && innerCallerExpr == null)
            		{
            			innerTarget = ((MemberAccessSyntaxBase)innerTarget).Target;
            			innerCallerExpr = innerTarget.CreateExpression(State);
            		}
                    var innerCode = innerTarget.GetCode().Trim();
            		if (innerCallerExpr == null)
            		{
            			State.Log.LogError(new LogEntry("member access error",
                            "'" + targetCode.ToString() + "' in member access syntax '" +
                            thisCode.ToString() +
                            "' could not be resolved as a variable, expression or type, and '" +
                            innerCode.ToString() + "' could not be resolved, either.",
                            Location));
            		}
            		else
            		{
            			State.Log.LogError(new LogEntry("member access error",
                            "'" + targetCode.ToString() + "' in member access syntax '" +
                            thisCode.ToString() +
                            "' could not be resolved as a variable, expression or type, though '" +
                            innerCode.ToString() + "' was resolved as an expression of type '" +
                            State.Renderer.Convert(innerCallerExpr.Type).GetAllText() + "'.",
                            MemberAccessLocation));
            		}
            	}
            	else
            	{
            		State.Log.LogError(new LogEntry("member access error",
                        "'" + targetCode.ToString() + "' in member access syntax '" +
                        thisCode.ToString() + "' could not be resolved as a variable, expression or type.",
                        Target.GetSourceLocation()));
            	}
            	return Enumerable.Empty<ITypeMember>(); // Keep it civilized by returning an empty enumerable instead of null
            }

            string name = Member.TokenValue;

            return State.MemberProvider.GetMembers(parentType, name);
        }
    }
}
