using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.DSharp.Lexer;

namespace Flame.Syntax.DSharp
{
    public class AddSyntax : BinaryExpressionSyntax
    {
        public const this(set IExpressionSyntax Left, set Token OperatorToken, set IExpressionSyntax Right);

        private static const IExpression ToString(IExpression Expression)
        {
            if (Expression.Type.Equals(PrimitiveTypes.String))
            {
                return Expression;
            }
            else
            {
                return ConversionExpression.Create(Expression, PrimitiveTypes.String);
                //var method = Expression.Type.GetMethod("ToString", false, PrimitiveTypes.String, new IType[0]);
                //return new InvocationExpression(method, Expression, new IExpression[0]);
            }
        }

        protected override const IExpression CreateExpression(ISyntaxState State, IExpressionSyntax Left, Token Operator, IExpressionSyntax Right)
        {
            var leftExpr = Left.CreateVerifiedExpression(State);
            var rightExpr = Right.CreateVerifiedExpression(State);
            if (leftExpr.Type.Equals(PrimitiveTypes.String) || rightExpr.Type.Equals(PrimitiveTypes.String))
            {
                return new ConcatExpression(ToString(leftExpr), ToString(rightExpr));
                /*var concatMethod = PrimitiveTypes.String.GetMethod("Concat", true, PrimitiveTypes.String, new IType[] { PrimitiveTypes.String, PrimitiveTypes.String });
                return new InvocationExpression(concatMethod, null, new IExpression[] { ToString(leftExpr), ToString(rightExpr) });*/
            }
            else
            {
                return BinaryExpressionSyntax.CreateExpression(State, Left, Operator.Add, Right);
            }
        }
    }
}
