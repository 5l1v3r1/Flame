using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;

namespace Flame.DSharp.Lexer
{
    #region PeekToken

    /// <summary>
    /// A PeekToken object type
    /// </summary>
    /// <remarks>
    /// A PeekToken is a special pointer object that can be used to Peek() several
    /// tokens ahead in the GetToken() queue.
    /// </remarks>
    public class PeekToken
    {
        public TokenIdentifier Identifier { const get; private set; }
        public Token TokenPeek { const get; private set; }

        public int32 Position
        {
            const get
            {
                return TokenPeek.Position;
            }
        }

        public TokenType Type
        {
            const get
            {
                return TokenPeek.Type;
            }
        }

        public static PeekToken EndOfFile
        {
            const get
            {
                return new PeekToken(-1, Token.EndOfFile);
            }
        }

        public const override string ToString()
        {
            return TokenPeek.TokenValue;
        }

        public this(int32 Identifier, set Token TokenPeek)
        {
            this.Identifier = new TokenIdentifier(Identifier);
        }
        public this(set TokenIdentifier Identifier, set Token TokenPeek);
    }

    #endregion
    
    #region RelevantToken
    
    public class RelevantToken : Token
    {
    	public const this(set [Token] LeadingTrivia, Token Value)
    	{
    		this.Type = Value.Type;
    		this.Position = Value.Position;
    		this.TokenValue = Value.TokenValue;
    		this.SourceDocument = Value.SourceDocument;
    	}
    
    	public [Token] LeadingTrivia { const get; private set; }
    	
    	public override virtual const string ToString()
        {
            StringBuilder sb = new StringBuilder();
            foreach (var item in this.LeadingTrivia)
            {
            	sb.Append(item.ToString());
            }
            sb.Append(TokenValue);
            return sb.ToString();
        }
    }
    
    #endregion

    #region Token

    /// <summary>
    /// A Token object type
    /// </summary>
    /// <remarks>
    /// A Token object holds the token and token value.
    /// </remarks>
    public virtual class Token
    {
        public TokenType Type { const get; set; }
        public int32 Position { const get; protected set; }
        public string TokenValue { const get; set; }
        public ISourceDocument SourceDocument { const get; protected set; }
        
        public SourceLocation Location
        {
        	const get return new SourceLocation(SourceDocument, Position);
        }

        #region Predefined Tokens

        public const static Token Undefined
        {
            get
            {
                return new Token(TokenType.UNDEFINED, "");
            }
        }
        public const static Token EndOfFile
        {
            get
            {
                return new Token(TokenType.EndOfFile, "");
            }
        }
        public static Token StaticKeyword
        {
            const get { return new Token(TokenType.StaticKeyword, "static"); }
        }
        public static Token ConstKeyword
        {
            const get { return new Token(TokenType.ConstKeyword, "const"); }
        }
        public static Token PublicKeyword
        {
            const get { return new Token(TokenType.PublicKeyword, "public"); }
        }
        public static Token PrivateKeyword
        {
            const get { return new Token(TokenType.PrivateKeyword, "private"); }
        }
        public static Token ProtectedKeyword
        {
            const get { return new Token(TokenType.ProtectedKeyword, "protected"); }
        }
        public static Token AssemblyKeyword
        {
            const get { return new Token(TokenType.AssemblyKeyword, "assembly"); }
        }
        public static Token ThisKeyword
        {
            const get { return new Token(TokenType.ThisKeyword, "this"); }
        }
        public static Token SetKeyword
        {
            const get { return new Token(TokenType.SetKeyword, "set"); }
        }
        public static Token ClassKeyword
        {
            const get { return new Token(TokenType.ClassKeyword, "class"); }
        }
        public static Token StructKeyword
        {
            const get { return new Token(TokenType.StructKeyword, "struct"); }
        }
        public static Token InterfaceKeyword
        {
            const get { return new Token(TokenType.InterfaceKeyword, "interface"); }
        }
        public static Token WhereKeyword
        {
            const get { return new Token(TokenType.WhereKeyword, "where"); }
        }
        public static Token IfKeyword
        {
            const get { return new Token(TokenType.IfKeyword, "if"); }
        }
        public static Token WhileKeyword
        {
            const get { return new Token(TokenType.WhileKeyword, "while"); }
        }
        public static Token ElseKeyword
        {
            const get { return new Token(TokenType.ElseKeyword, "else"); }
        }
        public static Token Colon
        {
            const get { return new Token(TokenType.Colon, ":"); }
        }
        public static Token RParen
        {
            const get { return new Token(TokenType.RParen, "("); }
        }
        public static Token LParen
        {
            const get { return new Token(TokenType.LParen, ")"); }
        }
        public static Token RBrackets
        {
            const get { return new Token(TokenType.RBrackets, "["); }
        }
        public static Token LBrackets
        {
            const get { return new Token(TokenType.LBrackets, "]"); }
        }
         public static Token RBraces
        {
            const get { return new Token(TokenType.RBraces, "{"); }
        }
        public static Token LBraces
        {
            const get { return new Token(TokenType.LBraces, "}"); }
        }
        public static Token TrueLiteral
        {
            const get { return new Token(TokenType.TrueLiteral, "true"); }
        }
        public static Token FalseLiteral
        {
            const get { return new Token(TokenType.FalseLiteral, "false"); }
        }

        #endregion

        public override virtual const string ToString()
        {
            return TokenValue;
        }

        public const this(set TokenType Type, set string TokenValue, set ISourceDocument SourceDocument, set int32 Position);
        public const this(set TokenType Type, set string TokenValue)
        {
            this.Position = -1;
        }
        public const this()
        {
        	this.Type = TokenType.UNDEFINED;
        	this.TokenValue = null;
        	this.Position = -1;
        }
    }

    #endregion
}