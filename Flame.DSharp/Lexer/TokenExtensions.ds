using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;

namespace Flame.DSharp.Lexer
{
	public static class TokenExtensions
	{
		#region GetLeadingTrivia

		public static const [Token] GetLeadingTrivia(this Token Item)
		{
			if (Item is RelevantToken)
			{
				return ((RelevantToken)Item).LeadingTrivia;
			}
			else
			{
				return Enumerable.Empty<Token>();
			}
		}

		#endregion

		#region GetAllTrivia

		public static const [Token] GetAllTrivia(this Token Item)
			return Item.GetLeadingTrivia();

		public static const [Token] GetAllTrivia(this IEnumerable<Token> Tokens)
		{
			List<Token> trivia = new List<Token>();
			foreach (var item in Tokens)
			{
				trivia.AddRange(item.GetLeadingTrivia());
			}
			return trivia;
		}

		#endregion

		#region IsTrivia

		public static const bool IsTrivia(this TokenType TokenType)
        {
        	return (TokenType == TokenType.EndOfFile | TokenType == TokenType.Whitespace |
        	TokenType == TokenType.BigComment | TokenType == TokenType.LineComment |
        	TokenType == TokenType.DescriptionComment | TokenType == TokenType.PreprocessorDirective |
        	TokenType == TokenType.UNDEFINED);
        }

		#endregion

		#region IsTypeToken

        /// <summary>
        /// Gets a boolean value that indicates if this type token is followed by another type token.
        /// </summary>
        /// <param name="Type"></param>
        /// <returns></returns>
        public static const bool IsPrefixTypeToken(this TokenType Type)
        {
        	return (Type == TokenType.Dot |  // a.b
        	Type == TokenType.RBrackets | // a[
        	Type == TokenType.Comma | // a<...,
        	Type == TokenType.LessThan); // a<...

            /*switch (Type)
            {
                case TokenType.Dot: // a.b
                case TokenType.RBrackets: // a[
                case TokenType.Comma: // a<...,
                case TokenType.LessThan: // a<...
                    return true;
                default:
                    return false;
            }*/
        }

        /// <summary>
        /// Gets a boolean value that indicates if this token could be used to construct a type.
        /// </summary>
        /// <param name="Type"></param>
        /// <returns></returns>
        public static const bool IsTypeToken(this TokenType Type)
        {
            return (Type == TokenType.Dot |  // a.b
        	Type == TokenType.RBrackets | // a[
        	Type == TokenType.Comma | // a<...,
        	Type == TokenType.LessThan | // a<...,
        	Type == TokenType.Asterisk | // a*
        	Type == TokenType.Caret | // a^
        	Type == TokenType.LBrackets | // a[]
        	Type == TokenType.GreaterThan | // a<...>
        	Type == TokenType.VarKeyword | // var
        	Type == TokenType.Identifier);  // a

            /*switch (Type)
            {
                case TokenType.Dot: // a.b
                case TokenType.RBrackets: // a[
                case TokenType.Comma: // a<...,
                case TokenType.LessThan: // a<...
                case TokenType.Asterisk: // a*
                case TokenType.Caret: // a^
                case TokenType.LBrackets: // a[]
                case TokenType.GreaterThan: // a<...>
                case TokenType.VarKeyword: // var
                case TokenType.Identifier: // a
                    return true;
                default:
                    return false;
            }*/
        }

        /// <summary>
        /// Gets a boolean value that indicates if this type token can trail another type token.
        /// </summary>
        /// <param name="Type"></param>
        /// <returns></returns>
        public static const bool IsSuffixTypeToken(this TokenType Type)
        {
            return (Type == TokenType.Asterisk | // a*
        	Type == TokenType.Caret | // a^
        	Type == TokenType.LBrackets | // a[]
        	Type == TokenType.GreaterThan); // a<...>

            /*switch (Type)
            {
                case TokenType.Asterisk: // a*
                case TokenType.Caret: // a^
                case TokenType.LBrackets: // a[]
                case TokenType.GreaterThan: // a<...>
                    return true;
                default:
                    return false;
            }*/
        }

        /// <summary>
        /// Gets a boolean value that indicates if this type token can trail another type token.
        /// </summary>
        /// <param name="Type"></param>
        /// <returns></returns>
        public static const bool IsPrefixOrSuffixTypeToken(this TokenType Type)
        {
            return Type.IsPrefixTypeToken() || Type.IsSuffixTypeToken();
        }

        #endregion

        #region IsValueToken

        public static const bool IsValueToken(this TokenType Token)
        {
            return Token == TokenType.Float32 || Token == TokenType.Float64 ||
        		Token == TokenType.Integer || Token == TokenType.BinaryInteger ||
        		Token == TokenType.HexInteger || Token == TokenType.String ||
        		Token == TokenType.Char || Token == TokenType.Identifier ||
        		Token == TokenType.TrueLiteral || Token == TokenType.FalseLiteral ||
				Token == TokenType.NullKeyword;
        }

        #endregion

        #region IsTypeKindToken

        public static const bool IsTypeKindToken(this TokenType Token)
        {
            return Token == TokenType.ClassKeyword || Token == TokenType.InterfaceKeyword ||
        		Token == TokenType.StructKeyword || Token == TokenType.EnumKeyword ||
				Token == TokenType.ModuleKeyword;
        }

        #endregion

        #region IsModifier

        public static const bool IsModifier(this TokenType Token)
        {
        	return Token == TokenType.AbstractKeyword || Token == TokenType.VirtualKeyword ||
        			Token == TokenType.OverrideKeyword || Token == TokenType.StaticKeyword ||
        			Token == TokenType.PublicKeyword || Token == TokenType.ProtectedKeyword ||
        			Token == TokenType.AssemblyKeyword || Token == TokenType.PrivateKeyword ||
        			Token == TokenType.ConstKeyword || Token == TokenType.InlineKeyword ||
        			Token == TokenType.SetKeyword || Token == TokenType.NewKeyword ||
        			Token == TokenType.ThisKeyword || Token == TokenType.ClassKeyword ||
        			Token == TokenType.StructKeyword || Token == TokenType.InterfaceKeyword ||
        			Token == TokenType.EnumKeyword || Token == TokenType.OutKeyword ||
        			Token == TokenType.InKeyword || Token == TokenType.ModuleKeyword;
        }

        #endregion

        #region IsAssignmentToken

        public static const bool IsAssignmentToken(this TokenType Token)
        {
        	return Token == TokenType.Equals || Token == TokenType.AndEquals ||
        		Token == TokenType.BarEquals || Token == TokenType.PercentEquals ||
        		Token == TokenType.CaretEquals || Token == TokenType.PlusEquals ||
        		Token == TokenType.MinusEquals || Token == TokenType.AsteriskEquals ||
        		Token == TokenType.SlashEquals || Token == TokenType.TildeEquals;
        }

        #endregion

        #region IsAssignmentToken

        public static const bool IsKeywordToken(this TokenType Token)
        {
        	return Token == TokenType.AbstractKeyword || Token == TokenType.VirtualKeyword ||
        		Token == TokenType.OverrideKeyword || Token == TokenType.StaticKeyword ||
        		Token == TokenType.PublicKeyword || Token == TokenType.ProtectedKeyword ||
        		Token == TokenType.AssemblyKeyword || Token == TokenType.PrivateKeyword ||
        		Token == TokenType.ConstKeyword || Token == TokenType.InlineKeyword ||
        		Token == TokenType.AssemblyKeyword || Token == TokenType.PrivateKeyword ||
        		Token == TokenType.AsKeyword || Token == TokenType.IsKeyword ||
        		Token == TokenType.SetKeyword || Token == TokenType.ReturnKeyword ||
        		Token == TokenType.IfKeyword || Token == TokenType.WhileKeyword ||
        		Token == TokenType.TryKeyword || Token == TokenType.FinallyKeyword ||
        		Token == TokenType.CatchKeyword || Token == TokenType.NewKeyword ||
        		Token == TokenType.ForeachKeyword || Token == TokenType.ForKeyword ||
        		Token == TokenType.ThisKeyword || Token == TokenType.ClassKeyword ||
        		Token == TokenType.StructKeyword || Token == TokenType.InterfaceKeyword ||
        		Token == TokenType.ElseKeyword || Token == TokenType.DefaultKeyword ||
        		Token == TokenType.EnumKeyword || Token == TokenType.BreakKeyword ||
        		Token == TokenType.NextKeyword || Token == TokenType.OutKeyword ||
				Token == TokenType.AssertKeyword || Token == TokenType.ModuleKeyword;
        }

        #endregion

        #region Binary

        public static const bool IsTypeBinaryExpressionToken(this TokenType Token)
        {
            return Token == TokenType.IsKeyword;
        }

        public static const bool IsBinaryExpressionToken(this TokenType Token)
        {
            return Token == TokenType.AndAnd || Token == TokenType.And ||
        		Token == TokenType.BarBar || Token == TokenType.Bar ||
        		Token == TokenType.Percent || Token == TokenType.Caret ||
        		Token == TokenType.GreaterThanOrEquals || Token == TokenType.GreaterThan ||
        		Token == TokenType.LessThanOrEquals || Token == TokenType.LessThan ||
        		Token == TokenType.NotEquals || Token == TokenType.EqualsEquals ||
        		Token == TokenType.Plus || Token == TokenType.Minus ||
        		Token == TokenType.Asterisk || Token == TokenType.Slash ||
        		Token == TokenType.IsKeyword || Token == TokenType.LeftShift ||
        		Token.IsAssignmentToken();
        }

        #endregion

        #region Unary

        public static const bool IsPrefixUnaryToken(this TokenType Token)
        {
        	return Token == TokenType.And || Token == TokenType.Plus ||
        		Token == TokenType.Minus || Token == TokenType.PlusPlus ||
        		Token == TokenType.MinusMinus || Token == TokenType.Tilde ||
        		Token == TokenType.Not || Token == TokenType.Asterisk;
        }

        public static const bool IsPostfixUnaryToken(this TokenType Token)
        {
        	return Token == TokenType.PlusPlus || Token == TokenType.MinusMinus;
        }

        #endregion

		#region Peek

        /// <summary>
        /// Returns the next token, without altering the token stream's state.
        /// </summary>
        public static PeekToken Peek(this ITokenStream Tokens)
        {
            return Tokens.Peek(Tokens.CurrentPosition);
        }

        /// <summary>
        /// Returns the next token after the provided token.
        /// </summary>
        public static PeekToken Peek(this ITokenStream Tokens, PeekToken Token)
        {
            return Tokens.Peek(Token.Identifier);
        }

        #endregion

        #region Next

        public static Token Next(this ITokenStream Tokens, TokenType Type, ICompilerLog Log)
        {
            var Next = Tokens.Next();
            Next.EnsureType(Type, Log);
            return Next;
        }

        #endregion

		#region NextNoTrivia

		public static Token NextNoTrivia(this ITokenStream Tokens)
        {
        	List<Token> trivia = new List<Token>();
            Token token = Tokens.Next();
            while (token.Type != TokenType.EndOfFile && token.Type.IsTrivia())
            {
            	trivia.Add(token);
                token = Tokens.Next();
            }
            return new RelevantToken(trivia, token);
        }

        public static Token NextNoTrivia(this ITokenStream Tokens, TokenType Type, ICompilerLog Log)
        {
            var Next = Tokens.PeekNoTrivia();
            if (!Next.TokenPeek.EnsureType(Type, Log))
            {
            	return new Token(Type, "");
            }
            else
            {
            	return Tokens.NextNoTrivia();
            }
        }

		#endregion

		#region PeekNoTrivia

        public static PeekToken PeekNoTrivia(this ITokenStream Tokens)
        {
            return Tokens.PeekNoTrivia(Tokens.CurrentPosition);
        }
        public static PeekToken PeekNoTrivia(this ITokenStream Tokens, PeekToken Token)
        {
            return Tokens.PeekNoTrivia(Token.Identifier);
        }
        public static PeekToken PeekNoTrivia(this ITokenStream Tokens, TokenIdentifier Identifier)
        {
        	List<Token> trivia = new List<Token>();
            PeekToken tkn = Tokens.Peek(Identifier);
            while (tkn.TokenPeek.Type != TokenType.EndOfFile && tkn.TokenPeek.Type.IsTrivia())
            {
            	trivia.Add(tkn.TokenPeek);
                tkn = Tokens.Peek(tkn);
            }
            return new PeekToken(tkn.Identifier, new RelevantToken(trivia, tkn.TokenPeek));
        }

        #endregion

		#region EnsureType

        public static bool EnsureType(this Token Token, TokenType Type, ICompilerLog Log)
        {
            if (Token.Type != Type)
            {
           		string typeExampleString = TokenExamples.GetExampleString(Type);
           		string tokenValString = Token.TokenValue;
                Log.LogError(new LogEntry(
					"parser error",
					"invalid syntax. Expected " + typeExampleString + ", got '" + tokenValString + "'.",
					Token.FullLocation));
                return false;
            }
            else
            {
            	return true;
            }
        }

        #endregion

        #region Combine

        public static Token Combine(this Token First, Token Second, TokenType Type)
        {
        	var tkn = new Token(Type, First.TokenValue + Second.TokenValue, First.SourceDocument, First.Position);
        	return new RelevantToken(Enumerable.Concat<Token>(First.GetAllTrivia(), Second.GetAllTrivia()), tkn);
        }

        #endregion

        #region Blocks

        /// <summary>
        /// Reads the contents of a "block", delimited by a start and an end token. The end token will also be parsed by this method, but will not be added to the results.
        /// </summary>
        /// <param name="Tokens"></param>
        /// <param name="Start"></param>
        /// <param name="End"></param>
        /// <returns></returns>
        public static ITokenStream NextBlockContents(this ITokenStream Tokens, TokenType Start, TokenType End)
        {
            List<Token> tokens = new List<Token>();
            int scope = 1;
            do
            {
                var token = Tokens.Next();
                if (token.Type == TokenType.EndOfFile)
                {
                    return new MemoryTokenStream(tokens.ToArray());
                }
                else if (token.Type == End)
                {
                    scope--;
                }
                else if (token.Type == Start) // && tokens.Count > 0)
                {
                    scope++;
                }

                if (scope > 0)
                {
                    tokens.Add(token);
                }
            } while (scope > 0)

            return new MemoryTokenStream(tokens.ToArray());
        }

        public static ITokenStream NextBlock(this ITokenStream Tokens, TokenType Start, TokenType End)
        {
            int scope;
            if (Start == TokenType.UNDEFINED)
            {
                scope = 1;
            }
            else
            {
                PeekToken peek;
                while ((peek = Tokens.Peek()).Type != Start && peek.Type != TokenType.EndOfFile)
                {
                    Tokens.Next();
                }
                scope = 0;
            }
            List<Token> tokens = new List<Token>();
            do
            {
                var token = Tokens.Next();
                if (token.Type == TokenType.EndOfFile)
                {
                    return new MemoryTokenStream(tokens.ToArray());
                }
                else if (token.Type == End)
                {
                    scope--;
                }
                else if (token.Type == Start)
                {
                    scope++;
                }

                tokens.Add(token);
            } while (scope > 0)

            return new MemoryTokenStream(tokens.ToArray());
        }

        #endregion

		public static bool IsBinderDirectiveToken[this TokenType Value]
		{
			const get return Value == TokenType.UsingKeyword || Value == TokenType.AliasKeyword;
		}
	}
}
