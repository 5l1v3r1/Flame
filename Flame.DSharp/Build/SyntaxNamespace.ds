using System;
using System.Collections.Generic;
using System.Text;
using Flame.Binding;
using Flame.Compiler;
using Flame.Syntax;

namespace Flame.DSharp.Build
{
	public class SyntaxNamespace : INamespaceBranchBuilder, ISyntaxNode
	{
		public const this(set string Name, set INamespaceBranchBuilder DeclaringNamespace)
		{
			this.Namespaces = new List<INamespace>();
			this.Types = new List<IType>();
		}
		
		public string FullName { const get return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name); }
		public string Name { const get; private set; }
		public IAssembly DeclaringAssembly { const get return DeclaringNamespace.DeclaringAssembly; }
		public INamespaceBranchBuilder DeclaringNamespace { const get; private set; }	
		public IExtensionTypeProvider ExtensionTypeProvider { const get return DeclaringNamespace.ExtensionTypeProvider; }
		
		public List<INamespace> Namespaces { const get; private set; }
		public List<IType> Types { const get; private set; }
		
		private AncestryGraph cachedGraph;
		public AncestryGraph Graph
		{
			const get
			{
				if (cachedGraph == null)
				{
					cachedGraph = DeclaringAssembly.GetAncestryGraph();
				}
					
				return cachedGraph;				
			}
		}
		
		public const [IAttribute] GetAttributes()
		{
			return new IAttribute[] { new AncestryGraphAttribute(Graph) };
		}
		
		public const [INamespaceBranch] GetNamespaces()
		{
			List<INamespaceBranch> branches = new List<INamespaceBranch>();
			foreach (var item in Namespaces)
				if (item is INamespaceBranch)
					branches.Add((INamespaceBranch)item);
			foreach (var item in Types)
				if (item is INamespaceBranch)
					branches.Add((INamespaceBranch)item);
			return branches;
		}
		
		public const IType[] GetTypes()
		{
			return Types.ToArray();
		}
	
		public void AddNamespace(INamespace Namespace)
		{
			this.Namespaces.Add(Namespace);
		}
		public void AddType(IType Type)
		{
			this.Types.Add(Type);
		}
		
		public const CodeBuilder GetCode()
		{
			var cb = new CodeBuilder();
			cb.AddLine("namespace " + Name);
			cb.AddLine("{");
			cb.IncreaseIndentation();
			foreach (var item in Namespaces)
				if (item is ISyntaxNode)
					cb.AddCodeBuilder(((ISyntaxNode)item).GetCode());
			foreach (var item in Types)
				if (item is ISyntaxNode)
					cb.AddCodeBuilder(((ISyntaxNode)item).GetCode());
			cb.DecreaseIndentation();
			cb.AddLine("}");
			return cb;
		}
		
		public override const string ToString()
		{
			return "namespace " + Name;
		}
	}
}