using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public abstract class SyntaxTypeBase : CodeMember, IDSharpSyntaxType, IInvariantType
    {
        public const this(set INamespace DeclaringNamespace)
        {
            this.typeMemberCache = new ConcurrentDictionary<string, object>();
            this.attrCache = new Lazy<IAttribute[]>(CreateAttributes);
            this.methodCache = new Lazy<IMethod[]>(CreateMethods);
            this.cachedNestedTypes = new Lazy<IType[]>(CreateNestedTypes);
        }

        public const ITypeDeclarationSyntax GetSyntax() : IDSharpSyntaxType.GetSyntax
        {
            return Syntax;
        }

		public abstract const TypeDeclarationSyntax GetTypeSyntax();

        public TypeDeclarationSyntax Syntax { const get return GetTypeSyntax(); }

        public INamespace DeclaringNamespace { const get; protected set; }

        public abstract ISyntaxState GetSyntaxState();
        protected abstract ISyntaxState GetNamespaceSyntaxState();

        #region ISourceMember Implementation

        public SourceLocation Location
        {
            const get return Syntax.NameLocation;
        }

        #endregion

        #region IMember

        public virtual string Name
        {
            const get { return Syntax.Signature.NameToken.TokenValue; }
        }

        public virtual string FullName
        {
            const get { return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name); }
        }

		public bool HasStaticModifier
		{
			const get return Syntax.Signature.ModifierTokens.IsStatic;
		}

		public bool IsExtensionType
		{
			const get
			{
				foreach (var member in Syntax.Members)
	            {
	            	if (member.IsExtensionMember)
	            	{
	            		return true;
	            	}
	            }
	            return false;
			}
		}

		public bool HasAssociatedSingleton
		{
			const get
			{
				if (!HasStaticModifier)
    			{
    				foreach (var item in Syntax.Members)
    				{
    					if (item.IsSingletonMember)
    					{
    						return true;
    					}
    				}
    			}
    			return false;
			}
		}

		private AncestryGraph RetrieveAncestryGraph()
		{
			if (DeclaringNamespace == null)
			{
				return new AncestryGraph();
			}
			else
			{
				return DeclaringNamespace.GetAncestryGraph();
			}
		}

		private Lazy<IAttribute[]> attrCache;
		public [IAttribute] Attributes { const get return attrCache.Value; }

        protected virtual IAttribute[] CreateAttributes()
        {
            var state = GetSyntaxState();
            var modifiers = Syntax.Signature.ModifierTokens;
            var attrs = new List<IAttribute>();
            attrs.Add(new AncestryGraphAttribute(RetrieveAncestryGraph()));
            attrs.AddRange(modifiers.GetModifiers());
            if (IsExtensionType)
            {
            	attrs.Add(PrimitiveAttributes.ExtensionAttribute);
            	if (modifiers.IsStatic)
            	{
            		attrs.Add(PrimitiveAttributes.StaticTypeAttribute);
            	}
            }
            else if (modifiers.IsStatic)
            {
            	attrs.Add(new SingletonAttribute("Instance"));
            }

            foreach (var item in Syntax.Signature.Attributes)
            {
            	attrs.Add(item.CreateAttribute(state, this));
            }

            foreach (var related in AssociatedTypes)
            {
            	attrs.Add(new AssociatedTypeAttribute(related));
            }

            attrs.AddRange(Syntax.Signature.GetDescriptionAttributes(GetNamespaceSyntaxState()));

            return attrs.ToArray();
        }

        #endregion

        #region INamespace

		private Lazy<IType[]> cachedNestedTypes;
		public [IType] Types { const get return cachedNestedTypes.Value; }

        protected virtual IType[] CreateNestedTypes()
        {
            var state = GetSyntaxState();
            var types = new List<IType>();
            foreach (var item in Syntax.Types)
            {
            	types.Add(item.CreateMember(state));
            }
            foreach (var item in AssociatedTypes)
                if (item.DeclaringNamespace is IType &&
                    this == ((IType)item.DeclaringNamespace).GetGenericDeclaration())
            {
            	types.Add(item);
            }
            return types.ToArray();
        }

        public [INamespaceBranch] Namespaces
        {
            get { return Enumerable.OfType<INamespaceBranch>(Types); }
        }

        public IAssembly DeclaringAssembly
        {
            const get { return DeclaringNamespace.DeclaringAssembly; }
        }

        #endregion

        #region Associated Types

        /// <summary>
        /// Gets all associated types for this type.
        /// </summary>
        public IType[] AssociatedTypes
        {
        	const get
            {
                return (IType[])typeMemberCache.GetOrAdd("AssociatedTypes", createAssociatedTypesProxy);
            }
        }

        protected virtual IType[] CreateAssociatedTypes()
        {
            var related = new List<IType>();
            if (HasAssociatedSingleton)
            {
                related.Add(new AssociatedSingletonSyntaxType(GetSyntaxState(), Syntax));
            }
            return related.ToArray();
        }

        private object createAssociatedTypesProxy(string Key)
        {
            return CreateAssociatedTypes();
        }

        #endregion

        #region IType

        private ConcurrentDictionary<string, object> typeMemberCache;

        protected T[] CreateTypeMembers<T>([IMemberSyntax<T>] Syntax, string CacheKey)
            where T : ITypeMember
        {
            return (T[])typeMemberCache.GetOrAdd(CacheKey, new CreateTypeMembersClosure<T>(this, Syntax).Invoke);
        }

        public T[] CreateTypeMembers<T>([IMemberSyntax<T>] Syntax)
            where T : ITypeMember
        {
            var state = this.GetSyntaxState();
            var members = new List<T>();
            bool isStaticType = this.IsSingleton || this.IsExtensionType;
            foreach (var item in Syntax)
                if (isStaticType || !item.IsSingletonMember)
            {
                members.Add(item.CreateMember(state));
            }
            return members.ToArray();
        }

        protected FieldProperty GetSingletonInstanceProperty()
        {
            return (FieldProperty)typeMemberCache.GetOrAdd("Instance", createSingletonInstanceProperty);
        }

        private object createSingletonInstanceProperty(string Key)
        {
            return SingletonInstanceAccessor.CreateAccessorProperty(GetSyntaxState());
        }

        protected [FieldProperty] GetFieldProperties()
        {
        	var definedFieldProps = CreateTypeMembers<FieldProperty>(Syntax.FieldProperties, "FieldProperties");
        	if (this.IsSingleton)
        	{
        		return Enumerable.Concat<FieldProperty>(definedFieldProps, new FieldProperty[] { GetSingletonInstanceProperty() });
        	}
        	else
        	{
            	return definedFieldProps;
            }
        }

        private const IExpression CreateNotThisOp(IMethod Method, Operator Op)
        {
        	//return new NotExpression(new InvocationExpression(Method, new ThisVariable(GetSyntaxState().CurrentType).CreateGetExpression(), (IEnumerable<IExpression>)new IExpression[0]));
        	return new NotExpression(new DirectBinaryExpression(new ThisVariable(GetSyntaxState().CurrentType).CreateGetExpression(), Op, new ArgumentVariable(Method.GetParameters()[0], 0).CreateGetExpression()));
        }

        private const IMethod CreateNotOperator(IMethod Method, Operator Op)
        {
    	    var bodyMethod = new DescribedBodyMethod("operator" + Op.ToString(), this, Method.ReturnType, false);
    	    foreach (var item in Method.GetParameters())
    	    {
    	    	bodyMethod.AddParameter(item);
    	    }
    		bodyMethod.AddAttribute(new OperatorAttribute(Op));
    		if (Method.IsConstant)
    		{
    			bodyMethod.AddAttribute(PrimitiveAttributes.ConstantAttribute);
    		}
    		bodyMethod.Body = new ReturnStatement(CreateNotThisOp(bodyMethod, Method.GetOperator()));
    		return bodyMethod;
        }

		private Lazy<IMethod[]> methodCache;
        public [IMethod] Methods { const get return methodCache.Value; }

        protected virtual IMethod[] CreateMethods()
        {
            bool hasInstanceCtors = false;
        	var methods = new List<IMethod>();
        	foreach (var item in CreateTypeMembers<IMethod>(Syntax.Methods))
        	{
                methods.Add(item);
                if (item.IsConstructor && !item.IsStatic)
                {
                    hasInstanceCtors = true;
                }
        	}

        	var state = GetSyntaxState();

            if (!hasInstanceCtors && !this.IsInterface && !this.IsValueType &&
                !this.IsEnum && (this.IsSingleton || !this.HasStaticModifier))
            {
                // Create a default constructor if necessary.
                methods.Add(DSharpTypeExtensions.CreateParameterlessConstructor(state));
            }

            // Generate operators if necessary.
        	methods.AddRange(DSharpTypeExtensions.GenerateOperators(methods, state));

            return methods.ToArray();
        }

        public [IProperty] Properties
        {
            const get
            {
                var properties = new List<IProperty>(CreateTypeMembers<IProperty>(Syntax.Properties, "Properties"));
                foreach (var item in GetFieldProperties())
                {
                    properties.Add(item.Property);
                }
                return properties.ToArray();
            }
        }

        public [IField] Fields
        {
            const get
            {
                var normalTypeMembers = CreateTypeMembers<IField>(Syntax.Fields, "Fields");
                if (!this.IsInterface)
                {
                    var allFields = new List<IField>(normalTypeMembers);
                    foreach (var item in GetFieldProperties())
                    {
                        allFields.Add(item.Field);
                    }
                    return allFields;
                }
                else
                {
                    return normalTypeMembers;
                }
            }
        }

        public virtual [IInvariant] GetInvariants()
        {
            return CreateTypeMembers<IInvariant>(Syntax.Invariants, "Invariants");
        }
        public [IInvariant] Invariants { const get return GetInvariants(); }

        public IBoundObject GetDefaultValue()
        {
            return null;
        }

        protected virtual IType[] CreateBaseTypes()
        {
            var state = GetSyntaxState();
            var bTypes = new List<IType>();
            bool allInterfaces = true;
            foreach (var item in Syntax.Signature.BaseTypes)
            {
            	var type = item.CreateVerifiedType(state);
            	if (type != null)
            	{
	            	if (allInterfaces && !type.IsInterface)
	            		allInterfaces = false;
	            	bTypes.Add(type);
            	}
            }
            if (allInterfaces && !this.IsInterface)
            {
            	var rootType = state.Binder.Environment.RootType;
            	if (rootType != null)
            		bTypes.Add(rootType);
            }

            return bTypes.ToArray();
        }

        private object createBaseTypesProxy(string Key)
        {
            return CreateBaseTypes();
        }

        public [IType] BaseTypes
        {
            const get return (IType[])typeMemberCache.GetOrAdd("BaseTypes", createBaseTypesProxy);
        }

        #endregion

        #region Generics

		public [IGenericParameter] GenericParameters
        {
            const get
            {
                return ([IGenericParameter])typeMemberCache.GetOrAdd("GenericParameters", createGenericParametersProxy);
            }
        }

		protected virtual [IGenericParameter] CreateGenericParameters()
		{
			return DSharpTypeExtensions.CreateConstrainedGenericParameters(GetNamespaceSyntaxState(), this, Syntax.Signature.GenericDeclarations, Syntax.Signature.GenericConstraints);
		}

        private object createGenericParametersProxy(string Key)
        {
            return CreateGenericParameters();
        }

        #endregion

        #region Ancestry Rules

        public IAncestryRules AncestryRules
        {
            const get { return DefinitionAncestryRules; }
        }

        #endregion

        #region Code

        public override const string GetHeaderString()
        {
            return Syntax.Signature.GetCode().ToString();
        }

        public override const CodeBuilder GetBodyCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.AddLine("{");
            cb.IncreaseIndentation();
            foreach (var item in Syntax.Members)
            {
                cb.AddCodeBuilder(item.GetCode());
            }
            foreach (var item in Syntax.Types)
            {
                cb.AddCodeBuilder(item.GetCode());
            }
            cb.DecreaseIndentation();
            cb.AddLine("}");
            return cb;
        }

        public const CodeBuilder GetCode()
        {
            return Syntax.GetCode();
        }

        #endregion
    }

    assembly class CreateTypeMembersClosure<T>
        where T : ITypeMember
    {
        public const this(set SyntaxTypeBase Type, set [IMemberSyntax<T>] Syntax);

        public SyntaxTypeBase Type { const get; private set; }
        public [IMemberSyntax<T>] Syntax { const get; private set; }

        public object Invoke(string Key)
        {
            return Type.CreateTypeMembers<T>(Syntax);
        }
    }
}
