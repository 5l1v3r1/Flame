using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.DSharp.Lexer;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
	public class SyntaxGenericParameter : IGenericParameterBuilder
	{
		public const this(set IGenericMember DeclaringMember,
						  set GenericParameterDeclarationSyntax Declaration)
		{
			backingType = new DescribedGenericParameter(Declaration.Name, DeclaringMember);
            foreach (var item in Declaration.ModifierTokens)
            {
                backingType.AddAttribute(GetGenericConstraintAttribute(item));
            }
		}

		private DescribedGenericParameter backingType;

		public IGenericMember DeclaringMember { const get; private set; }
		public GenericParameterDeclarationSyntax Declaration { const get; private set; }

		public UnqualifiedName Name { const get return new SimpleName(Declaration.Name); }
		public QualifiedName FullName { const get return Name.Qualify(DeclaringMember.FullName); }

		public AttributeMap Attributes
		{
			const get { return backingType.Attributes; }
		}

		public IGenericConstraint Constraint
        {
	        const get { return backingType.Constraint; }
		}

		public [IField] Fields { const get { return backingType.Fields; } }
		public [IMethod] Methods { const get { return backingType.Methods; } }
		public [IProperty] Properties { const get { return backingType.Properties; } }

		public void AddConstraint(IGenericConstraint Constraint)
		{
			backingType.AddConstraint(Constraint);
		}

		public const IBoundObject GetDefaultValue()
        {
        	return backingType.GetDefaultValue();
        }

        public INamespace DeclaringNamespace
        {
            const get { return backingType.DeclaringNamespace; }
        }

        public bool IsContainerType
        {
            const get { return false; }
        }

        public IContainerType AsContainerType()
        {
            return null;
        }

        public [IType] BaseTypes
        {
            const get { return backingType.BaseTypes; }
        }

		public [IGenericParameter] GenericParameters
		{
			const get { return backingType.GenericParameters; }
		}

		public IAncestryRules AncestryRules
		{
			const get { return DefinitionAncestryRules; }
		}

		public override const int GetHashCode()
		{
			return Declaration.GetHashCode();
		}

		public override const bool Equals(object Other)
		{
			if (Other is SyntaxGenericParameter)
			{
				return Declaration.Equals(((SyntaxGenericParameter)Other).Declaration);
			}
			else
			{
				return false;
			}
		}

		#region Static

		public const static IAttribute GetGenericConstraintAttribute(Token Modifier)
        {
        	if (Modifier.Type == TokenType.ClassKeyword)
        	{
        		return PrimitiveAttributes.ReferenceTypeAttribute;
        	}
        	else if	(Modifier.Type == TokenType.StructKeyword)
        	{
        		return PrimitiveAttributes.ValueTypeAttribute;
        	}
        	else if (Modifier.Type == TokenType.OutKeyword)
        	{
        		return PrimitiveAttributes.OutAttribute;
        	}
        	else if (Modifier.Type == TokenType.InKeyword)
        	{
        		return PrimitiveAttributes.InAttribute;
        	}
            else
            {
            	return null;
            }
        }

        #endregion
	}
}
