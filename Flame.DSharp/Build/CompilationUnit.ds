using System;
using System.Collections.Generic;
using System.Text;
using Flame.Binding;
using Flame.Compiler;
using Flame.Syntax;

namespace Flame.DSharp.Build
{
	public class CompilationUnit : ICompilationUnit
	{
		public const this()
		{
			this.Children = new ISyntaxNode[0];
		}
		public const this(set ISyntaxNode[] Children);
	
		public ISyntaxNode[] Children { const get; private set; }
		public const IEnumerable<ISyntaxNode> GetChildren()
			return this.Children;
			
		public virtual void CompileNamespace(INamespaceSyntax Node, INamespaceBranchBuilder DeclaringNamespace, IScopedBinder Binder, ICompilerLog Log)
		{
			Node.CreateNamespace(DeclaringNamespace, Binder, Log);
		}
		
		public virtual void CompileType(ITypeDeclarationSyntax Node, INamespaceBranchBuilder DeclaringNamespace, IScopedBinder Binder, ICompilerLog Log)
		{
			var type = Node.CreateType(DeclaringNamespace, Binder, Log, DeclaringNamespace.ExtensionTypeProvider);
			DeclaringNamespace.AddType(type);
		}
		
		public virtual void CompileToNamespace(INamespaceBranchBuilder DeclaringNamespace, IScopedBinder Binder, ISyntaxNode Node, ICompilerLog Log)
		{
			if (Node is INamespaceSyntax)
			{
				CompileNamespace((INamespaceSyntax)Node, DeclaringNamespace, Binder, Log);
			}
			else if (Node is IBinderDirectiveSyntax)
			{
				((IBinderDirectiveSyntax)Node).ApplyDirective(Binder);
			}
			else if (Node is ITypeDeclarationSyntax)
			{
				CompileType((ITypeDeclarationSyntax)Node, DeclaringNamespace, Binder, Log);
			}
			else
			{
				Log.LogError("'" + Node.GetCode().ToString() + "' could not be resolved as a component of a compilation unit.");
			}
		}
		
		public virtual void CompileToNamespace(INamespaceBranchBuilder DeclaringNamespace, IScopedBinder Binder, ICompilerLog Log)
		{
			var newBinder = Binder.PushScope(DeclaringNamespace.Name, DeclaringNamespace);
			foreach (var child in Children)
			{
				CompileToNamespace(DeclaringNamespace, newBinder, child, Log);
			}
		}
			
		public virtual void CompileToAssembly(ISyntaxAssembly Assembly, ICompilerLog Log)
		{
			var binder = new ScopedBinder(Assembly.GetSyntaxBinder());
			CompileToNamespace(Assembly.RootNamespace, binder, Log);
		}
			
		public virtual const CodeBuilder GetCode()
		{
			CodeBuilder cb = new CodeBuilder();
			foreach (var item in Children)
			{
				cb.AddCodeBuilder(item.GetCode());
			}
			return cb;
		}
		
		public virtual override const string ToString()
		{
			return this.GetCode().ToString();
		}
	}
}