using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Pixie;

namespace Flame.DSharp.Build
{
    public class DSharpTypeRenderer : TypeRenderer
    {
        public this()
        {
            this.PreferTrivialNames = true;
        }
        public this(bool PreferTrivialNames)
        {
            this.PreferTrivialNames = PreferTrivialNames;
        }

        public bool PreferTrivialNames { get; private set; }

        protected override MarkupNode ConvertPrimitiveType(IType Type)
        {
            var typeName = NamePrimitiveType(Type);
            if (!object.ReferenceEquals(typeName, null))
            {
                return CreateTextNode(typeName, DefaultStyle);
            }
            else if (Type.IsValueType)
            {
                return ConvertValueType(Type);
            }
            else
            {
                return ConvertReferenceType(Type);
            }
        }

        private string NamePrimitiveType(IType Type)
        {
            if (Type.Equals(PrimitiveTypes.Int8))
            {
                if (PreferTrivialNames) return "sbyte";
                else return "int8";
            }
            else if (Type.Equals(PrimitiveTypes.Int16))
            {
                if (PreferTrivialNames) return "short";
                else return "int16";
            }
            else if (Type.Equals(PrimitiveTypes.Int32))
            {
                if (PreferTrivialNames) return "int";
                else return "int32";
            }
            else if (Type.Equals(PrimitiveTypes.Int64))
            {
                if (PreferTrivialNames) return "long";
                else return "int64";
            }
            if (Type.Equals(PrimitiveTypes.UInt8))
            {
                if (PreferTrivialNames) return "byte";
                else return "uint8";
            }
            else if (Type.Equals(PrimitiveTypes.UInt16))
            {
                if (PreferTrivialNames) return "ushort";
                else return "uint16";
            }
            else if (Type.Equals(PrimitiveTypes.UInt32))
            {
                if (PreferTrivialNames) return "uint";
                else return "uint32";
            }
            else if (Type.Equals(PrimitiveTypes.UInt64))
            {
                if (PreferTrivialNames) return "ulong";
                else return "uint64";
            }
            else if (Type.Equals(PrimitiveTypes.Float32))
            {
                if (PreferTrivialNames) return "float";
                else return "float32";
            }
            else if (Type.Equals(PrimitiveTypes.Float64))
            {
                if (PreferTrivialNames) return "double";
                else return "float64";
            }
            else if (Type.Equals(PrimitiveTypes.Boolean))
            {
                return "bool";
            }
            else if (Type.Equals(PrimitiveTypes.Char))
            {
                return "char";
            }
            else if (Type.Equals(PrimitiveTypes.String))
            {
                return "string";
            }
            else if (Type.Equals(PrimitiveTypes.Void))
            {
                return "void";
            }
            else if (Type.Equals(PrimitiveTypes.Null))
            {
                return "null";
            }
            else
            {
                return null;
            }
        }
    }
}
