using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;

namespace Flame.DSharp.Build
{
    public class DSharpTypeNamer : TypeConverterBase<string>
	{
        public const this()
        {
            this.PreferTrivialNames = false;
        }
        public const this(set bool PreferTrivialNames);

        public bool PreferTrivialNames { const get; private set; }

		protected override const string MakePointerType(string ElementType, PointerKind Kind)
		{
			return ElementType + Kind.Extension;
		}

		protected override const string MakeArrayType(string ElementType, int ArrayRank)
		{
			return GenericNameExtensions.AppendArraySuffix(ElementType, ArrayRank);
		}

		protected override const string MakeVectorType(string ElementType, int[] Dimensions)
		{
			return GenericNameExtensions.AppendVectorSuffix(ElementType, Dimensions);
		}

		protected override const string MakeGenericType(string GenericDeclaration, [string] TypeArguments)
		{
			return GenericNameExtensions.ChangeTypeArguments(GenericDeclaration, TypeArguments);
		}

		protected override const string ConvertTypeDefault(IType Type)
		{
			return Type.FullName;
		}

        protected override const string ConvertPrimitiveType(IType Type)
        {
            if (Type.Equals(PrimitiveTypes.Int8))
            {
                if (PreferTrivialNames) return "sbyte";
                else return "int8";
            }
            else if (Type.Equals(PrimitiveTypes.Int16))
            {
                if (PreferTrivialNames) return "short";
                else return "int16";
            }
            else if (Type.Equals(PrimitiveTypes.Int32))
            {
                if (PreferTrivialNames) return "int";
                else return "int32";
            }
            else if (Type.Equals(PrimitiveTypes.Int64))
            {
                if (PreferTrivialNames) return "long";
                else return "int64";
            }
            if (Type.Equals(PrimitiveTypes.UInt8))
            {
                if (PreferTrivialNames) return "byte";
                else return "uint8";
            }
            else if (Type.Equals(PrimitiveTypes.UInt16))
            {
                if (PreferTrivialNames) return "ushort";
                else return "uint16";
            }
            else if (Type.Equals(PrimitiveTypes.UInt32))
            {
                if (PreferTrivialNames) return "uint";
                else return "uint32";
            }
            else if (Type.Equals(PrimitiveTypes.UInt64))
            {
                if (PreferTrivialNames) return "ulong";
                else return "uint64";
            }
            else if (Type.Equals(PrimitiveTypes.Float32))
            {
                if (PreferTrivialNames) return "float";
                else return "float32";
            }
            else if (Type.Equals(PrimitiveTypes.Float64))
            {
                if (PreferTrivialNames) return "double";
                else return "float64";
            }
            else if (Type.Equals(PrimitiveTypes.Boolean))
            {
                return "bool";
            }
            else if (Type.Equals(PrimitiveTypes.Char))
            {
                return "char";
            }
            else if (Type.Equals(PrimitiveTypes.String))
            {
                return "string";
            }
            else if (Type.Equals(PrimitiveTypes.Void))
            {
                return "void";
            }
            else if (Type.Equals(PrimitiveTypes.Null))
            {
                return "null";
            }
            else if (Type.IsValueType)
			{
				return ConvertValueType(Type);
			}
			else
			{
				return ConvertReferenceType(Type);
			}
        }
    }
}
