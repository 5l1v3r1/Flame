using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Pixie;

namespace Flame.DSharp.Build
{
    public class DSharpTypeRenderer : TypeRenderer
    {
        public this()
        {
            this.PreferTrivialNames = true;
        }
        public this(bool PreferTrivialNames)
        {
            this.PreferTrivialNames = PreferTrivialNames;
        }

        public bool PreferTrivialNames { get; private set; }

        protected override MarkupNode ConvertPrimitiveType(IType Type)
        {
            var typeName = NamePrimitiveType(Type);
            if (!object.ReferenceEquals(typeName, null))
            {
                return CreateTextNode(typeName, DefaultStyle);
            }
            else if (Type.IsValueType)
            {
                return ConvertValueType(Type);
            }
            else
            {
                return ConvertReferenceType(Type);
            }
        }

        private string NamePrimitiveType(IType Type)
        {
            string result;
            bool success;
            if (PreferTrivialNames)
            {
                success = trivialPrimitiveTypeNames.TryGetValue(Type, &result);
            }
            else
            {
                success = technicalPrimitiveTypeNames.TryGetValue(Type, &result);
            }
            if (success)
            {
                return result;
            }
            else
            {
                return null;
            }
        }

        static this()
        {
            trivialPrimitiveTypeNames = new Dictionary<IType, string>();
            technicalPrimitiveTypeNames = new Dictionary<IType, string>();

            trivialPrimitiveTypeNames[PrimitiveTypes.Int8] = "sbyte";
            technicalPrimitiveTypeNames[PrimitiveTypes.Int8] = "int8";
            trivialPrimitiveTypeNames[PrimitiveTypes.Int16] = "short";
            technicalPrimitiveTypeNames[PrimitiveTypes.Int16] = "int16";
            trivialPrimitiveTypeNames[PrimitiveTypes.Int32] = "int";
            technicalPrimitiveTypeNames[PrimitiveTypes.Int32] = "int32";
            trivialPrimitiveTypeNames[PrimitiveTypes.Int64] = "long";
            technicalPrimitiveTypeNames[PrimitiveTypes.Int64] = "int64";
            trivialPrimitiveTypeNames[PrimitiveTypes.UInt8] = "byte";
            technicalPrimitiveTypeNames[PrimitiveTypes.UInt8] = "uint8";
            trivialPrimitiveTypeNames[PrimitiveTypes.UInt16] = "ushort";
            technicalPrimitiveTypeNames[PrimitiveTypes.UInt16] = "uint16";
            trivialPrimitiveTypeNames[PrimitiveTypes.UInt32] = "uint";
            technicalPrimitiveTypeNames[PrimitiveTypes.UInt32] = "uint32";
            trivialPrimitiveTypeNames[PrimitiveTypes.UInt64] = "ulong";
            technicalPrimitiveTypeNames[PrimitiveTypes.UInt64] = "uint64";
            trivialPrimitiveTypeNames[PrimitiveTypes.Float32] = "float";
            technicalPrimitiveTypeNames[PrimitiveTypes.Float32] = "float32";
            trivialPrimitiveTypeNames[PrimitiveTypes.Float64] = "double";
            technicalPrimitiveTypeNames[PrimitiveTypes.Float64] = "float64";
            trivialPrimitiveTypeNames[PrimitiveTypes.Boolean] = "bool";
            technicalPrimitiveTypeNames[PrimitiveTypes.Boolean] = "bool";
            trivialPrimitiveTypeNames[PrimitiveTypes.Char] = "char";
            technicalPrimitiveTypeNames[PrimitiveTypes.Char] = "char";
            trivialPrimitiveTypeNames[PrimitiveTypes.String] = "string";
            technicalPrimitiveTypeNames[PrimitiveTypes.String] = "string";
            trivialPrimitiveTypeNames[PrimitiveTypes.Void] = "void";
            technicalPrimitiveTypeNames[PrimitiveTypes.Void] = "void";
            trivialPrimitiveTypeNames[PrimitiveTypes.Null] = "null";
            technicalPrimitiveTypeNames[PrimitiveTypes.Null] = "null";
        }

        private static Dictionary<IType, string> trivialPrimitiveTypeNames;
        private static Dictionary<IType, string> technicalPrimitiveTypeNames;

        public static IEnumerable<IType> KeywordPrimitiveTypes
        {
            get { return trivialPrimitiveTypeNames.Keys; }
        }
    }
}
