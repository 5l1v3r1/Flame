using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.DSharp.Build
{
    public class AttributeBinder : BinderBase
    {
        public const this(set IBinder Binder);

        public IBinder Binder { const get; private set; }

		public override IEnvironment Environment : BinderBase.Environment
		{
			get { return Binder.Environment; }
		}

        public override IType BindTypeCore(QualifiedName Name) : BinderBase.BindTypeCore
        {
            var normalType = Binder.BindType(Name);
            if (normalType != null)
            {
                return normalType;
            }
            return Binder.BindType(AppendSuffix(Name, "Attribute"));
        }

        private QualifiedName AppendSuffix(QualifiedName Name, string Suffix)
        {
            if (Name.IsQualified)
            {
                return AppendSuffix(Name.Name, Suffix).Qualify(Name.Qualifier);
            }
            else if (Name.Qualifier is SimpleName)
            {
                var simple = (SimpleName)Name.Qualifier;
                return new QualifiedName(
                    new SimpleName(simple.Name + Suffix, simple.TypeParameterCount));
            }
            else
            {
                return Name;
            }
        }

        public override [IType] GetTypes() : BinderBase.GetTypes
        {
            return Binder.GetTypes();
        }
    }
}
