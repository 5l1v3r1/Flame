using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public class ClosedGenericType : SyntaxType
    {
        public const this(set TypeDeclarationSyntax syntax, set INamespace DeclaringNamespace, set IBinder Binder, set ICompilerLog Log, set IMemberProvider MemberProvider, set [IType] GenericArguments);

        public [IType] GenericArguments { const get; private set; }

        public override string Name
        {
            const get
            {
                var genericArgs = Enumerable.ToArray<IType>(this.GetGenericArguments());
                StringBuilder sb = new StringBuilder();
                sb.Append(Syntax.Signature.NameToken.TokenValue);
                sb.Append('<');
                for (int i = 0; i < genericArgs.Length; i++)
                {
                    if (i > 0)
                    {
                        sb.Append(',');
                    }
                    sb.Append(genericArgs[i].Name);
                }
                sb.Append('>');
                return sb.ToString();
            }
        }

        public override string FullName
        {
            const get
            {
                var genericArgs = Enumerable.ToArray<IType>(this.GetGenericArguments());
                StringBuilder sb = new StringBuilder();
                sb.Append(MemberExtensions.CombineNames(DeclaringNamespace.FullName, Syntax.Signature.NameToken.TokenValue));
                sb.Append('<');
                for (int i = 0; i < genericArgs.Length; i++)
                {
                    if (i > 0)
                    {
                        sb.Append(',');
                    }
                    string fullName = genericArgs[i].FullName;
                    if (fullName == null)
                    {
                    	sb.Append(genericArgs[i].Name);
                    }
                    else
                    {
                    	sb.Append(fullName);
                    }
                }
                sb.Append('>');
                return sb.ToString();
            }
        }

        public override [IType] GetGenericArguments()
        {
            return GenericArguments;
        }
    }
}