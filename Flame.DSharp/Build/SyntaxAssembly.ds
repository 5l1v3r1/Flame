using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Binding;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Projects;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
	public class SyntaxAssembly : ISyntaxAssembly
	{
		public const this(set IBinder ExternalBinder)
		{
			this.Graph = new AncestryGraph();
			this.Name = "";
			this.AssemblyVersion = default(Version);
			this.MainNamespace = new AssemblyNamespace(this);
			this.TypeNamer = new DSharpTypeNamer();
		}
		public const this(set IBinder ExternalBinder, set string Name)
		{
			this.Graph = new AncestryGraph();
			this.AssemblyVersion = default(Version);
			this.MainNamespace = new AssemblyNamespace(this);
			this.TypeNamer = new DSharpTypeNamer();
		}
		public const this(set IBinder ExternalBinder, set string Name, set IConverter<IType, string> TypeNamer)
		{
			this.Graph = new AncestryGraph();
			this.AssemblyVersion = default(Version);
			this.MainNamespace = new AssemblyNamespace(this);
		}
		public const this(set IBinder ExternalBinder, set string Name, set Version AssemblyVersion,
						  set IConverter<IType, string> TypeNamer)
		{
			this.Graph = new AncestryGraph();
			this.MainNamespace = new AssemblyNamespace(this);
		}

		public string Name { const get; set; }
		public string FullName { const get return Name; }
		/// <summary>
        /// Gets the assembly's version.
        /// </summary>
        public Version AssemblyVersion { const get; set; }

        public AncestryGraph Graph { const get; private set; }
		public IConverter<IType, string> TypeNamer { const get; private set; }

        public const [IAttribute] GetAttributes()
        {
        	return new IAttribute[] { new AncestryGraphAttribute(Graph) };
        }

        /// <summary>
		/// Gets the nameless root namespace of the assembly.
		/// </summary>
        public AssemblyNamespace MainNamespace { const get; private set; }

        /// <summary>
        /// Adds a compilation unit to the assembly.
        /// </summary>
        public void AddCompilationUnit(ICompilationUnit Item, ICompilerLog Log)
        {
        	MainNamespace.ClearExtensionTypeCache();
        	Item.CompileToNamespace(MainNamespace, new ScopedBinder(GetSyntaxBinder()), Log);
        }

        /// <summary>
		/// Gets the nameless root namespace of the assembly.
		/// </summary>
		public INamespaceBranchBuilder RootNamespace { const get return MainNamespace; }

		public IBinder ExternalBinder { const get; private set; }
		private IBinder syntaxBinder;
		public const IBinder GetSyntaxBinder()
		{
			if (syntaxBinder == null)
			{
				syntaxBinder = new CachingBinder(new DualBinder(CreateBinder(), ExternalBinder));
			}
			return syntaxBinder;
		}

		/// <summary>
        /// Creates a binder for this assembly.
        /// </summary>
        /// <returns></returns>
        public const IBinder CreateBinder()
        {
        	return new NamespaceTreeBinder(ExternalBinder.Environment, MainNamespace);
        }

        /// <summary>
        /// Gets all types in the assembly.
        /// </summary>
        public const IEnumerable<IType> AllTypes
        {
        	const get
        	{
        		return CreateBinder().GetTypes();
        	}
        }

        /// <summary>
        /// Gets the entry point method for this assembly.
        /// </summary>
        /// <returns></returns>
        public const IMethod GetEntryPoint()
        {
        	foreach (var type in AllTypes)
            {
                foreach (var item in type.GetMethods())
                {
                    if (item.IsStatic && item.Name.Equals("main"))
                    {
                        return item;
                    }
                }
            }
            return null;
        }
	}
}
