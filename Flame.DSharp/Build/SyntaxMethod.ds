using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public virtual class SyntaxMethod : SyntaxMethodBase
    {
        public const this(set MethodSyntax syntax, IType DeclaringType, set IBinder Binder,
            ICompilerLog Log, set IMemberProvider MemberProvider, set IConverter<IType, string> TypeNamer)
            : base(DeclaringType, Log);

        public const this(set MethodSyntax syntax, IType DeclaringType, set IBinder Binder,
            ICompilerLog Log, set IConverter<IType, string> TypeNamer)
            : base(DeclaringType, Log)
        {
        	this.MemberProvider = new MemberProvider(Binder);
        }

        public const this(set MethodSyntax syntax, ISyntaxState State)
            : base(State.DeclaringType, State.Log)
        {
        	this.Binder = State.Binder;
        	this.MemberProvider = State.MemberProvider;
            this.TypeNamer = State.TypeNamer;
        }

        public IBinder Binder { const get; protected set; }
        public IMemberProvider MemberProvider { const get; protected set; }
        public IConverter<IType, string> TypeNamer { const get; protected set; }

        protected MethodSyntax syntax;
        public override const MethodSyntax GetMethodSyntax()
        {
        	return syntax;
        }

        public override ISyntaxState GetDeclaringSyntaxState()
        {
            return new SyntaxState(this, Binder, Log, TypeNamer);
        }

        public override ISyntaxState GetSyntaxState()
        {
            var genericBinder = new PredefinedBinder(Binder);

        	foreach (var param in this.GenericParameters)
            {
            	genericBinder.MapType(new QualifiedName(param.Name), param);
            }

            return new SyntaxState(this, genericBinder, Log, MemberProvider, TypeNamer);
        }

        #region Equality

        public override int GetHashCode()
        {
            return Syntax.GetHashCode();
        }

        public override virtual bool Equals(object obj)
        {
            if (obj is SyntaxMethod)
            {
                var otherMethod = (SyntaxMethod)obj;
                return this.Syntax == otherMethod.Syntax &&
                       this.DeclaringType == otherMethod.DeclaringType;
            }
            else
            {
                return false;
            }
        }

        #endregion
    }
}
