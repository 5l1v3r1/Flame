using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public class SyntaxEnumLiteral : CodeMember, IDSharpField, ISyntaxNode
    {
        public const this(set EnumLiteralSyntax Syntax, set ISyntaxState State)
        {
            this.cachedAttrs = new Lazy<AttributeMap>(CreateAttributes);
        }

        public EnumLiteralSyntax Syntax { const get; private set; }
        public ISyntaxState State { const get; private set; }

        #region ISourceMember Implementation

        public SourceLocation Location
        {
            const get return Syntax.Location;
        }

        #endregion

        public const IExpression GetValue()
        {
            if (Syntax.LiteralValueSyntax == null)
            {
                return NullExpression;
            }
            else
            {
                return ConversionExpression.Create(Syntax.LiteralValueSyntax.CreateExpression(State), DeclaringType.GetParent());
            }
        }

        public IType FieldType
        {
            const get { return DeclaringType; }
        }

        public IType DeclaringType { const get { return State.DeclaringType; } }

        public bool IsStatic
        {
            const get { return true; }
        }

        public string Name
        {
            const get { return Syntax.Identifier.TokenValue; }
        }

        public string FullName
        {
            const get { return MemberExtensions.CombineNames(DeclaringType.FullName, Name); }
        }

        public AttributeMap Attributes { get { return cachedAttrs.Value; } }

		private Lazy<AttributeMap> cachedAttrs;
        private AttributeMap CreateAttributes()
        {
        	var attrs = new AttributeMapBuilder();
        	attrs.Add(PrimitiveAttributes.ConstantAttribute);
        	attrs.AddRange(Syntax.GetDescriptionAttributes(State));
        	return new AttributeMap(attrs);
        }

        public override const string GetHeaderString()
        {
            return Syntax.GetCode().ToString();
        }

        public override const CodeBuilder GetBodyCode()
        {
            return null;
        }

        public const CodeBuilder GetCode()
        {
            return Syntax.GetCode();
        }

        #region Equality

        public override int GetHashCode()
        {
            return Syntax.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is SyntaxEnumLiteral)
            {
            	var syntaxField = (SyntaxEnumLiteral)obj;
                return DeclaringType.Equals(syntaxField.DeclaringType) && Syntax.Equals(syntaxField.Syntax);
            }
            else
            {
                return false;
            }
        }

        #endregion
    }
}
