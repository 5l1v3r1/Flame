using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public class OpenGenericMethod : SyntaxMethod
    {
        public const this(set MethodSyntax syntax, set IType DeclaringType, set IBinder Binder, set ICompilerLog Log)
        {
        	this.MemberProvider = new MemberProvider(Binder);
        }
        public const this(set MethodSyntax syntax, set IType DeclaringType, set IBinder Binder, set ICompilerLog Log, set IMemberProvider MemberProvider);
        public const this(set MethodSyntax syntax, ISyntaxState State)
        {
        	this.DeclaringType = State.DeclaringType;
        	this.Binder = State.Binder;
        	this.MemberProvider = State.MemberProvider;
        	this.Log = State.Log;
        }

        public override IMethod GetGenericDeclaration()
        {
            return this;
        }

        public override IEnumerable<IType> GetGenericArguments()
        {
            //return GetGenericParameters();
            return new IType[0];
        }
    }
}