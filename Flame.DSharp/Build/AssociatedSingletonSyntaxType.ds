using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
	public class AssociatedSingletonSyntaxType : IType, IEquatable<IType>
	{
		public const this(set ISyntaxState InstanceState, set TypeDeclarationSyntax Syntax)
		{
			this.attrCache = new Lazy<AttributeMap>(CreateAttributes);
			this.cachedBaseTypes = new Lazy<IType[]>(CreateBaseTypes);
			this.methodCache = new Lazy<IMethod[]>(CreateMethods);
			this.propertyCache = new Lazy<IProperty[]>(CreateProperties);
			this.fieldCache = new Lazy<IField[]>(CreateFields);
		}

		public ISyntaxState InstanceState { const get; private set; }
		public IType InstanceType { const get return InstanceState.CurrentType; }
		public TypeDeclarationSyntax Syntax { const get; private set; }

        public const ISyntaxState GetSyntaxState()
        {
	    	var descMethod = new DescribedMethod("", this, PrimitiveTypes.Void, false);

            return new SyntaxState(descMethod, InstanceState.Binder,
				InstanceState.Log, InstanceState.MemberProvider,
				InstanceState.TypeNamer);
        }

		public UnqualifiedName Name { const get return new SimpleName("Static_Singleton"); }
		public QualifiedName FullName { const get return Name.Qualify(DeclaringNamespace.FullName); }
		public INamespace DeclaringNamespace { const get return (INamespace)InstanceType; }

		private Lazy<AttributeMap> attrCache;
		public AttributeMap Attributes
		{
			get { return attrCache.Value; }
		}

		private AttributeMap CreateAttributes()
		{
			var attrs = new AttributeMapBuilder();
			attrs.Add(new AccessAttribute(AccessModifier.Public));
			attrs.Add(PrimitiveAttributes.HiddenAttribute);
			attrs.Add(new AssociatedTypeAttribute(InstanceType));
			attrs.Add(new SingletonAttribute("Instance"));
			if (InstanceType.IsAbstract || InstanceType.IsVirtual)
			{
				attrs.Add(PrimitiveAttributes.VirtualAttribute);
			}
			return new AttributeMap(attrs);
		}

		public [IGenericParameter] GenericParameters
		{
			const get { return Enumerable.Empty<IGenericParameter>(); }
		}

		public IAncestryRules AncestryRules
		{
			const get { return DefinitionAncestryRules; }
		}

		public const IBoundObject GetDefaultValue()
		{
			return null;
		}

		private Lazy<IType[]> cachedBaseTypes;
		public const [IType] BaseTypes
		{
			get { return cachedBaseTypes.Value; }
		}

		private IType[] CreateBaseTypes()
		{
			var instanceParent = InstanceType.GetParent();
			while (instanceParent != null)
			{
				var associated = instanceParent.GetAssociatedSingleton();
				if (associated != null)
				{
					return new IType[] { associated };
				}
				instanceParent = instanceParent.GetParent();
			}
			// No 'real' base types found. Look for root type
			var rootType = InstanceState.Binder.Environment.RootType;
			if (rootType != null)
				return new IType[] { rootType };
			else
				return new IType[0];
		}

		private Lazy<IMethod[]> methodCache;
		public [IMethod] Methods { get { return methodCache.Value; } }

		private IMethod[] CreateMethods()
		{
			var state = GetSyntaxState();
			var methods = new List<IMethod>();
			bool containsCtor = false;

			foreach (var item in Syntax.Methods)
				if (item.IsSingletonMember)
			{
				var method = item.CreateMember(state);
				if (method.IsConstructor)
				{
					containsCtor = true;
				}
				methods.Add(method);
			}

			if (!containsCtor) // Create a ctor if no ctors have been defined.
			{
				methods.Add(DSharpTypeExtensions.CreateParameterlessConstructor(state));
			}

			methods.AddRange(DSharpTypeExtensions.GenerateOperators(methods, state));

			return methods.ToArray();
		}

		private FieldProperty singletonInstanceProp;
		public FieldProperty SingletonInstanceProperty
		{
			const get
			{
				if (singletonInstanceProp == null)
				{
					singletonInstanceProp = SingletonInstanceAccessor.CreateAccessorProperty(GetSyntaxState());
				}
		    	return singletonInstanceProp;
			}
		}

		private FieldProperty[] fieldPropertyCache;
		public const FieldProperty[] GetFieldProperties()
		{
			if (fieldPropertyCache == null)
			{
			   	var state = GetSyntaxState();
	        	var props = new List<FieldProperty>();

	        	foreach (var item in Syntax.FieldProperties)
	        		if (item.IsSingletonMember)
	        	{
        			props.Add(item.CreateMember(state));
	        	}

		    	props.Add(SingletonInstanceProperty);

	            fieldPropertyCache = props.ToArray();
			}
			return fieldPropertyCache;
		}

		private Lazy<IProperty[]> propertyCache;

		public [IProperty] Properties { get { return propertyCache.Value; } }

		private IProperty[] CreateProperties()
		{
    		var state = GetSyntaxState();
        	var props = new List<IProperty>();
        	foreach (var item in Syntax.Properties)
        		if (item.IsSingletonMember)
        	{
    			props.Add(item.CreateMember(state));
        	}

	    	foreach (var item in GetFieldProperties())
	    	{
	    		props.Add(item.Property);
	    	}

            return props.ToArray();
		}

		private Lazy<IField[]> fieldCache;

		public [IField] Fields
		{
			get { return fieldCache.Value; }
		}

		private IField[] CreateFields()
		{
    		var state = GetSyntaxState();
        	var fields = new List<IField>();
        	foreach (var item in Syntax.Fields)
        	if (item.IsSingletonMember)
        	{
        		fields.Add(item.CreateMember(state));
        	}

        	foreach (var item in GetFieldProperties())
	    	{
	    		fields.Add(item.Field);
	    	}

            return fields.ToArray();
		}

		public const bool Equals(AssociatedSingletonSyntaxType Other)
		{
			return InstanceType.Equals(Other.InstanceType);
		}
		public const bool Equals(IType Other)
		{
			if (Other is AssociatedSingletonSyntaxType)
			{
				return Equals((AssociatedSingletonSyntaxType)Other);
			}
			else return false;
		}
		public override const bool Equals(object Other)
		{
			if (Other is IType)
			{
				return Equals((IType)Other);
			}
			else return false;
		}
		public override const int GetHashCode()
		{
			return InstanceType.GetHashCode() ^ Name.GetHashCode();
		}

		public override const string operator cast()
		{
			return FullName.ToString();
		}
	}
}
