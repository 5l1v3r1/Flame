using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;
using Pixie;

namespace Flame.DSharp.Build
{
    public class SyntaxType : SyntaxTypeBase
    {
        public const this(set TypeDeclarationSyntax syntax, INamespace DeclaringNamespace, set IBinder Binder,
            set ICompilerLog Log, set TypeRenderer Renderer)
            : base(DeclaringNamespace)
        {
        	this.MemberProvider = new MemberProvider(Binder);
        }
        public const this(set TypeDeclarationSyntax syntax, INamespace DeclaringNamespace,
            set IBinder Binder, set ICompilerLog Log, IExtensionTypeProvider ExtensionTypeProvider, set TypeRenderer Renderer)
            : base(DeclaringNamespace)
        {
            this.MemberProvider = new MemberProvider(ExtensionTypeProvider, Binder);
        }
        public const this(set TypeDeclarationSyntax syntax, INamespace DeclaringNamespace, set IBinder Binder,
            set ICompilerLog Log, set IMemberProvider MemberProvider, set TypeRenderer Renderer)
            : base(DeclaringNamespace);

        protected TypeDeclarationSyntax syntax;
        public override TypeDeclarationSyntax GetTypeSyntax()
        {
        	return syntax;
        }

        public IBinder Binder { const get; protected set; }
        public ICompilerLog Log { const get; protected set; }
        public IMemberProvider MemberProvider { const get; protected set; }
        public TypeRenderer Renderer { const get; protected set; }

        public override UnqualifiedName Name
        {
            const get
            {
                return new SimpleName(
                    Syntax.Signature.NameToken.TokenValue,
                    Enumerable.Count<IGenericParameterDeclarationSyntax>(
                       Syntax.Signature.GenericDeclarations));
            }
        }

        private ISyntaxState currentState;
        public override ISyntaxState GetSyntaxState()
        {
            if (currentState == null)
            {
                var genericBinder = new PredefinedBinder(Binder);

            	foreach (var param in this.GenericParameters)
	            {
	            	genericBinder.MapType(new QualifiedName(param.Name), param);
	            }

    			var descMethod = new DescribedMethod("", this, PrimitiveTypes.Void, false);

                currentState = new SyntaxState(descMethod, genericBinder, Log, MemberProvider, Renderer);

                foreach (var item in Syntax.BinderDeclarations)
                {
                    item.CreateMember(currentState);
                }
            }

            return currentState;
        }

        protected override ISyntaxState GetNamespaceSyntaxState()
        {
        	var descMethod = new DescribedMethod("", this, PrimitiveTypes.Void, false);
            return new SyntaxState(descMethod, Binder, Log, MemberProvider, Renderer);
        }

        #region Equality

        public override int GetHashCode()
        {
            return Syntax.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is SyntaxType)
            {
                return this.Syntax == ((SyntaxType)obj).Syntax;
            }
            else
            {
                return false;
            }
        }

        #endregion
    }
}
