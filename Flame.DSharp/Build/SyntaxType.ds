using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public abstract class SyntaxType : SyntaxTypeBase
    {
    	public const this();
        public const this(set TypeDeclarationSyntax syntax, set INamespace DeclaringNamespace, set IBinder Binder,
            set ICompilerLog Log, set IConverter<IType, string> TypeNamer)
        {
        	this.MemberProvider = new MemberProvider(Binder);
        }
        public const this(set TypeDeclarationSyntax syntax, set INamespace DeclaringNamespace, set IBinder Binder,
            set ICompilerLog Log, set IMemberProvider MemberProvider, set IConverter<IType, string> TypeNamer);

        protected TypeDeclarationSyntax syntax;
        public override TypeDeclarationSyntax GetTypeSyntax()
        {
        	return syntax;
        }

        public IBinder Binder { const get; protected set; }
        public ICompilerLog Log { const get; protected set; }
        public IMemberProvider MemberProvider { const get; protected set; }
        public IConverter<IType, string> TypeNamer { const get; protected set; }

        private ISyntaxState currentState;
        public override ISyntaxState GetSyntaxState()
        {
            if (currentState == null)
            {
                var genericBinder = new PredefinedBinder(Binder);

                var genericParams = this.GetGenericParameters();
                var genericArgs = this.GetGenericArguments();

                bool empty = true;
                foreach (var param in genericParams, var arg in genericArgs)
                {
                	genericBinder.MapType(param.Name, arg);
                	empty = false;
                }
                if (empty)
                {
                	foreach (var param in genericParams)
    	            {
    	            	genericBinder.MapType(param.Name, param);
    	            }
                }

    			var descMethod = new DescribedMethod();
    			descMethod.DeclaringType = this;

                currentState = new SyntaxState(descMethod, genericBinder, Log, MemberProvider, TypeNamer);

                this.CreateTypeMembers<BinderDirectiveMember>(Syntax.BinderDeclarations, "binderDecls");
            }

            return currentState;
        }

        protected override ISyntaxState GetNamespaceSyntaxState()
        {
        	var descMethod = new DescribedMethod();
			descMethod.DeclaringType = this;

            return new SyntaxState(descMethod, Binder, Log, MemberProvider, TypeNamer);
        }
    }
}
