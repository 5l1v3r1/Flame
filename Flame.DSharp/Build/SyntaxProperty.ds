using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public class SyntaxProperty : CodeMember, IProperty, ISyntaxNode, ISourceMember
    {
        public const this(set PropertySyntax Syntax, set IType DeclaringType, set IBinder Binder,
            set ICompilerLog Log, set IMemberProvider MemberProvider, set IConverter<IType, string> TypeNamer)
        {
            this.indexerParams = new Lazy<IParameter[]>(CreateIndexerParameters);
            this.accessorVals = new Lazy<IAccessor[]>(CreateAccessors);
            this.basePropertyCache = new Lazy<IProperty[]>(CreateBaseProperties);
            this.attrCache = new Lazy<IAttribute[]>(CreateAttributes);
        }

        public PropertySyntax Syntax { const get; private set; }
        public IType DeclaringType { const get; private set; }
        public ICompilerLog Log { const get; private set; }
        public IBinder Binder { const get; private set; }
        public IMemberProvider MemberProvider { const get; private set; }
        public IConverter<IType, string> TypeNamer { const get; private set; }

        #region GetSyntaxState

        public virtual const ISyntaxState GetSyntaxState()
        {
        	var descMethod = new DescribedMethod("", DeclaringType);
            return new SyntaxState(descMethod, Binder, Log, MemberProvider, TypeNamer);
        }

        #endregion

        #region ISourceMember Implementation

        public SourceLocation Location
        {
            const get return Syntax.NameLocation;
        }

        #endregion

        #region IProperty Implementation

        public IType PropertyType
        {
            const get { return Syntax.Signature.TypeSyntax.CreateVerifiedType(GetSyntaxState()); }
        }

		private Lazy<IAccessor[]> accessorVals;
		public [IAccessor] Accessors { get { return accessorVals.Value; } }

        private IAccessor[] CreateAccessors()
        {
        	var accessors = new List<IAccessor>();
        	foreach (var item in Syntax.Accessors)
        	{
        		accessors.Add(item.CreateAccessor(this, Binder));
        	}
        	return accessors.ToArray();
        }

		private Lazy<IParameter[]> indexerParams;
		public [IParameter] IndexerParameters { const get return indexerParams.Value; }

        private IParameter[] CreateIndexerParameters()
        {
    		var indexParams = new List<IParameter>();
    		foreach (var item in Syntax.IndexerParameters)
    		{
    			indexParams.Add(item.CreateMember(GetSyntaxState()));
    		}
    		return indexParams.ToArray();
        }

        public bool IsStatic
        {
            get
            {
                return DeclaringType.IsStaticType
                    || (Syntax.Signature.ModifierTokens.IsStatic && !DeclaringType.IsSingleton);
            }
        }

        public string Name
        {
            const get { return Syntax.Signature.NameToken.TokenValue; }
        }

        public string FullName
        {
            const get { return MemberExtensions.CombineNames(DeclaringType.FullName, Name); }
        }

		private Lazy<IAttribute[]> attrCache;
		public [IAttribute] Attributes { get { return attrCache.Value; } }

        private IAttribute[] CreateAttributes()
        {
            var state = GetSyntaxState();

            var modifierAttrs = Syntax.Signature.ModifierTokens.GetModifiers();
            var extraAttributes = new List<IAttribute>();
            /*foreach (var item in Syntax.ImplementedProperties)
            {
                var member = item.GetAccessedMembers(state).First();
                extraAttributes.Add(new OverrideAttribute(member.Name, member.DeclaringType.FullName));
            }*/
            if (Syntax.Signature.NameToken.Type == TokenType.ThisKeyword && indexerParams.Value.Length > 0)
            {
                extraAttributes.Add(PrimitiveAttributes.IndexerAttribute);
            }
            if (!modifierAttrs.HasAccessAttribute)
            {
                extraAttributes.Add(DeclaringType.GetAccessAttribute());
            }
            foreach (var item in modifierAttrs)
            	extraAttributes.Add(item);
            foreach (var item in Syntax.Signature.Attributes)
            	extraAttributes.Add(item.CreateAttribute(state, this));

            extraAttributes.AddRange(Syntax.GetDescriptionAttributes(GetSyntaxState()));

            return extraAttributes.ToArray();
        }

        #endregion GetBaseProperties

        private Lazy<IProperty[]> basePropertyCache;
        public [IProperty] BaseProperties { get { return basePropertyCache.Value; } }

        private IProperty[] CreateBaseProperties()
        {
        	var state = GetSyntaxState();
        	var baseMethods = new HashSet<IProperty>();
        	foreach (var item in Syntax.ImplementedProperties)
            {
                var paramTypes = Enumerable.ToArray<IType>(this.IndexerParameters.GetTypes());
                var member = Enumerable.OfType<IProperty>(item.GetAccessedMembers(state)).GetProperty(this.IsStatic, this.PropertyType, paramTypes);
                baseMethods.Add(member);
            }
            if (baseMethods.Count == 0)
            {
            	foreach (var item in DeclaringType.GetAllBaseTypes())
            	{
            		var match = item.Properties.GetProperty(this);
            		if (match != null)
            		{
            			baseMethods.Add(match);
            		}
            	}
            	if (baseMethods.Count == 0 && Syntax.Signature.ModifierTokens.IsOverride)
            	{
            		state.Log.LogError(new LogEntry(
                        "base property missing",
                        "override property '" + FullName + "' could not find any suitable base properties to override.",
                        Location));
            	}
            }
            return Enumerable.ToArray<IProperty>(baseMethods);
        }

        #region

        #endregion

        #region CodeMember Implementation

        public override string GetHeaderString()
        {
            return Syntax.Signature.GetCode().ToString();
        }

        public override CodeBuilder GetBodyCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.AddLine("{");
            cb.IncreaseIndentation();
            foreach (var item in Syntax.Accessors)
            {
                cb.AddCodeBuilder(item.GetCode());
            }
            cb.IncreaseIndentation();
            cb.AddLine("}");
            return cb;
        }

        #endregion

        #region ISyntaxNode Implementation

        public CodeBuilder GetCode()
        {
            return Syntax.GetCode();
        }

        #endregion

        #region Equality

        public override int GetHashCode()
        {
            return Syntax.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is SyntaxProperty)
            {
            	var syntaxProp = (SyntaxProperty)obj;
                return DeclaringType.Equals(syntaxProp.DeclaringType) && Syntax.Equals(syntaxProp.Syntax);
            }
            else
            {
                return false;
            }
        }

        #endregion
    }
}
