using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Projects;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
	public class AssemblyNamespace : SyntaxNamespaceBase, ISyntaxNode
	{
		public const this(set SyntaxAssembly Assembly);

		public override IConverter<IType, string> TypeNamer { const get return Assembly.TypeNamer; }

		public SyntaxAssembly Assembly { const get; private set; }
		public override IAssembly DeclaringAssembly { const get return Assembly; }
		private GlobalExtensionTypeProvider extTypeProvider;
		public override IExtensionTypeProvider ExtensionTypeProvider
		{
			const get
			{
				if (extTypeProvider == null)
				{
					extTypeProvider = new GlobalExtensionTypeProvider(Assembly.GetSyntaxBinder());
				}
				return extTypeProvider;
			}
		}

		public void ClearExtensionTypeCache()
		{
			if (extTypeProvider != null)
				this.extTypeProvider.ClearCache();
		}

		public override string Name { const get return ""; }
		public override string FullName { const get return Name; }

		public const CodeBuilder GetCode()
		{
			var cb = new CodeBuilder();
			foreach (var item in Namespaces)
				if (item is ISyntaxNode)
					cb.AddCodeBuilder(((ISyntaxNode)item).GetCode());
			foreach (var item in Types)
				if (item is ISyntaxNode)
					cb.AddCodeBuilder(((ISyntaxNode)item).GetCode());
			return cb;
		}
	}
}
