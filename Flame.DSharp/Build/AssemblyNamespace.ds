using System;
using System.Collections.Generic;
using System.Text;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Projects;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
	public class AssemblyNamespace : INamespaceBranchBuilder, ISyntaxNode
	{
		public const this(set SyntaxAssembly Assembly)
		{
			this.Namespaces = new List<INamespace>();
			this.Types = new List<IType>();
		}
		
		public List<INamespace> Namespaces { const get; private set; }
		public List<IType> Types { const get; private set; }
	
		public SyntaxAssembly Assembly { const get; private set; }
		public IAssembly DeclaringAssembly { const get return Assembly; }
		private GlobalExtensionTypeProvider extTypeProvider;
		public IExtensionTypeProvider ExtensionTypeProvider 
		{ 
			const get
			{
				if (extTypeProvider == null)
				{
					extTypeProvider = new GlobalExtensionTypeProvider(Assembly.GetSyntaxBinder());
				}
				return extTypeProvider;
			}
		}
		
		public void ClearExtensionTypeCache()
		{
			if (extTypeProvider != null)
				this.extTypeProvider.ClearCache();
		}
		
		public string Name { const get return ""; }
		public string FullName { const get return Name; }
		public const IEnumerable<IAttribute> GetAttributes()
		{
			return (IEnumerable<IAttribute>)new IAttribute[0];
		}
		
		public const IEnumerable<INamespaceBranch> GetNamespaces()
		{
			List<INamespaceBranch> branches = new List<INamespaceBranch>();
			foreach (var item in Namespaces)
				if (item is INamespaceBranch)
					branches.Add((INamespaceBranch)item);
			foreach (var item in Types)
				if (item is INamespaceBranch)
					branches.Add((INamespaceBranch)item);
			return branches;
		}
		
		public const IType[] GetTypes()
		{
			return Types.ToArray();
		}
	
		public void AddNamespace(INamespace Namespace)
		{
			this.Namespaces.Add(Namespace);
		}
		public void AddType(IType Type)
		{
			this.Types.Add(Type);
		}
		
		public const CodeBuilder GetCode()
		{
			var cb = new CodeBuilder();
			foreach (var item in Namespaces)
				if (item is ISyntaxNode)
					cb.AddCodeBuilder(((ISyntaxNode)item).GetCode());
			foreach (var item in Types)
				if (item is ISyntaxNode)
					cb.AddCodeBuilder(((ISyntaxNode)item).GetCode());
			return cb;
		}
	}
}