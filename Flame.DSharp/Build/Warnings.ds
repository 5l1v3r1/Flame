using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;

namespace Flame.DSharp.Build
{
    public static class Warnings
    {
        /// <summary>
        /// The -pedantic option, which turns on most non-essential warnings.
        /// </summary>
        public const string Pedantic = "pedantic";

        /// <summary>
        /// The warning name for shadowed locals.
        /// </summary>
        /// <example>
        /// for (int i = 0; i < 5; i++)
        /// {
        ///     for (int i = 0; i < 5; i++)
        ///              ^~~~~
        ///     {
        ///
        ///     }
        /// }
        /// </example>
        public const string Shadow = "shadow";

        /// <summary>
        /// The warning name for undefined operators on generic parameters.
        /// </summary>
        /// <example>
        /// T z = x + y;
        ///       ^~~~~
        /// </example>
        public const string GenericOperators = "generic-operators";

        /// <summary>
        /// The warning name for undefined operators.
        /// </summary>
        /// <example>
        /// bool x = true, y = false;
        /// bool z = x + y;
        ///          ^~~~~
        /// </example>
        public const string Operators = "operators";

        /// <summary>
        /// The warning name for bitcasts.
        /// </summary>
        /// <example>
        /// int x = -5;
        /// bit32 y = (bit32)x;
        /// bit16 z = (bit16)y;
        ///            ^~~~~
        /// x = (int)(bit32)z;
        public const string Bitcast = "bitcast";

        /// <summary>
        /// The warning name for meaningless casts.
        /// </summary>
        /// <example>
        /// int x = 5;
        /// int y = (int)x;
        ///          ^~~
        /// </example>
        public const string MeaninglessCast = "meaningless-cast";

        /// <summary>
        /// The warning name for discarded constants.
        /// </summary>
        /// <example>
        /// 5;
        ///  ^
        /// </example>
        public const string ConstantDiscarded = "constant-discarded";

        /// <summary>
        /// The warning name for constant assertions.
        /// </summary>
        /// <example>
        /// assert(true);
        /// ^~~~~~
        /// </example>
        public const string ConstantAssert = "constant-assert";

        /// <summary>
        /// The warning name for C# style alias directives.
        /// </summary>
        /// <example>
        /// using x = y;
        /// ^~~~~
        /// </example>
        public const string BadAlias = "bad-alias";

        /// <summary>
        /// The warning name for (illegal) C++ style directives.
        /// </summary>
        /// <example>
        /// using namespace x;
        ///       ^~~~~~~~~
        /// </example>
        public const string CppUsingNamespace = "cpp-using-namespace";

        /// <summary>
        /// The warning name for control flow statements with empty bodies.
        /// </summary>
        /// <example>
        /// while (flag);
        ///             ^
        /// </example>
        public const string EmptyBody = "empty-body";

        /// <summary>
        /// The warning name for dangling else statements.
        /// </summary>
        /// <example>
        /// if (x)
        /// if (y) return x;
        /// else return y;
        /// ^~~~
        /// </example>
        public const string DanglingElse = "dangling-else";

        /// <summary>
        /// The warning name for try statements without associated catch or finally blocks.
        /// </summary>
        /// <example>
        /// try { Console.WriteLine("Hi"); }
        /// ^~~
        /// return 0;
        /// </example>
        public const string LonelyTry = "lonely-try";

        /// <summary>
        /// Gets a warning's "official name", which the log maps to an on/off boolean.
        /// </summary>
        public static const string GetWarningName(string Name)
        {
            return "W" + Name;
        }

        /// <summary>
        /// Gets a warning's "relaxed name", which the log maps to an on/off boolean.
        /// A warning that is relaxed will not be shown unless the warning is explicitly
        /// turned on.
        /// </summary>
        public static const string GetRelaxWarningName(string Name)
        {
            return "Wrelax-" + Name;
        }

        /// <summary>
        /// Gets a "[-W...]" style warning name.
        /// </summary>
        public static const string GetWarningNameMessage(string Name)
        {
            return "[-" + GetWarningName(Name) + "]";
        }

        /// <summary>
        /// Finds out whether the given log instance is in pedantic mode.
        /// </summary>
        public static bool IsPedantic[this ICompilerLog Log]
        {
            const get
            {
                if (Log.Options.HasOption(Pedantic))
                {
                    return Log.Options.GetOption<bool>(Pedantic, false);
                }
                else return Log.UseDefaultWarnings(Pedantic, false);
            }
        }

        private static const bool UseWarnings(this ICompilerLog Log, string Name, bool IsPedantic, bool DefaultValue)
        {
            string warningName = GetWarningName(Name);
            if (Log.Options.HasOption(warningName))
            {
                return Log.Options.GetOption<bool>(warningName, false);
            }
            else
            {
                string relaxName = GetRelaxWarningName(Name);
                if (Log.Options.HasOption(relaxName))
                {
                    return !Log.Options.GetOption<bool>(relaxName, true);
                }
                else if (IsPedantic)
                {
                    return Log.IsPedantic;
                }
                else return DefaultValue;
            }
        }

        public static const bool UsePedanticWarnings(this ICompilerLog Log, string Name)
        {
            return Log.UseWarnings(Name, true, false);
        }

        public static const bool UseDefaultWarnings(this ICompilerLog Log, string Name, bool DefaultValue)
        {
            return Log.UseWarnings(Name, false, DefaultValue);
        }
        public static const bool UseDefaultWarnings(this ICompilerLog Log, string Name)
        {
            return Log.UseDefaultWarnings(Name, true);
        }

        // Default warnings
        public static bool ShowOperatorWarnings[this ICompilerLog Log]
        {
            const get return Log.UseDefaultWarnings(Operators);
        }
        public static bool ShowGenericOperatorWarnings[this ICompilerLog Log]
        {
            const get return Log.UseDefaultWarnings(GenericOperators);
        }
        public static bool ShowConstantAssertWarnings[this ICompilerLog Log]
        {
            const get return Log.UseDefaultWarnings(ConstantAssert);
        }

        // Pedantic warnings
        public static bool ShowShadowWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(Shadow);
        }
        public static bool ShowBitcastWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(Bitcast);
        }
        public static bool ShowConstantDiscardedWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(ConstantDiscarded);
        }
        public static bool ShowMeaninglessCastWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(MeaninglessCast);
        }
        public static bool ShowBadAliasWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(BadAlias);
        }
        public static bool ShowCppUsingNamespaceWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(BadAlias);
        }
        public static bool ShowEmptyBodyWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(EmptyBody);
        }
        public static bool ShowDanglingElseWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(DanglingElse);
        }
        public static bool ShowLonelyTryWarnings[this ICompilerLog Log]
        {
            const get return Log.UsePedanticWarnings(LonelyTry);
        }
    }
}
