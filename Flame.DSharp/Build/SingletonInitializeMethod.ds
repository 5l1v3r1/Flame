using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;

namespace Flame.DSharp.Build
{
	/*public class SingletonInitializeMethod : IBodyMethod
	{
		public const this(set ISyntaxState DeclaringState, set MethodSyntax ConstructorSyntax, set IField BackingField);
	
		public IType DeclaringType { const get return DeclaringState.DeclaringType; }
		public MethodSyntax ConstructorSyntax { const get; private set; }
		public IField BackingField { const get; private set; }
		public ISyntaxState DeclaringState { const get; private set; }
		
		public const ISyntaxState GetSyntaxState()
		{
			return new SyntaxState(this, DeclaringState.Binder, DeclaringState.Log, DeclaringState.MemberProvider);
		}
		
		public string Name { const get return "InitializeSingleton"; }
		public string FullName { const get return MemberExtensions.CombineNames(DeclaringType.FullName, Name); }
		
		public IType ReturnType { const get return PrimitiveTypes.Void; }
		public bool IsStatic { const get return true; }
		public const IParameter[] GetParameters()
		{
			return new IParameter[0];
		}
		public bool IsConstructor { const get return false; }
		public const IMethod[] GetBaseMethods()
		{
			return new IMethod[0];
		}
		
		private IEnumerable<IAttribute> attrCache;
		public const IEnumerable<IAttribute> GetAttributes()
		{
			if (attrCache == null)
			{
				List<IAttribute> attrs = new List<IAttribute>();
				attrs.Add(new AccessAttribute(AccessModifier.Protected));
				attrCache = attrs;
			}
			return attrCache;
		}
		
		public const IBoundObject Invoke(IBoundObject Target, IEnumerable<IBoundObject> Arguments)
		{
			return null;
		}
		
		public const IMethod GetGenericDeclaration()
		{
			return this;
		}
		
		public const IMethod MakeGenericMethod(IEnumerable<IType> Arguments)
		{
			return null;
		}
		
		public const IEnumerable<IType> GetGenericArguments()
		{
			return (IEnumerable<IType>)new IType[0];
		}
		
		public const IEnumerable<IGenericParameter> GetGenericParameters()
		{
			return (IEnumerable<IGenericParameter>)new IGenericParameter[0];
		}
		
		private IStatement methodBodyCache;
		public const IStatement GetMethodBody()
        {
        	if (methodBodyCache == null)
        	{   
	        	// Statement for:
	        	// 
	        	// <call to base InitializeSingleton method if applicable>
	        	// if (<field> == null)
				// {
				//     <field> = new <type>(); // This should only call the base constructor, nothing more
				//     <initialization logic in constructor body if applicable>
				// }
				// return;
	        	
	        	var state = GetSyntaxState();
	        	IStatement baseCall;
	        	var parent = State.CurrentType.GetParent();
	        	if (parent != null)
	        	{
	        		baseCall = CreateInitializeSingletonStatement(parent);
	        	}
	        	else
	        	{
	        		baseCall = new EmptyStatement();
	        	}
	        	var newObjExpr = new NewObjectExpression(BackingField.FieldType); // <field> = new <type>();
	        	var fieldVar = new FieldVariable(BackingField, null);
	        	var fieldGetExpr = fieldVar.CreateGetExpression();
	        	var eqExpr = new EqualityExpression(fieldGetExpr, new NullExpression()); // <field> == null
	        	var initStatements = new List<IStatement>(); // {
	        	initStatements.Add(fieldVar.CreateSetStatement(newObjExpr)); // <field> = new <type>();
	        	if (ConstructorSyntax != null)
	        	{
	        		initStatements.Add(ConstructorSyntax.Body.CreateStatement(state)); // <initialization logic in constructor body>
	        	}
	        	var blockStmt = new BlockStatement(initStatements); // }
	        	var ifStmt = new IfElseStatement(eqExpr, setStmt); // if (<field> == null)
	        	var retStmt = new ReturnStatement(); // return;
	        	methodBodyCache = new BlockStatement((IEnumerable<IStatement>)new IStatement[] { ifStmt, retStmt });
        	}
        	return methodBodyCache;
        }
        
        public static const IStatement CreateInitializeSingletonStatement(IType TargetType)
        {
        	IType declType = TargetType;
        	if (TargetType.IsAssociatedSingleton && TargetType.DeclaringNamespace is IType)
        	{
        		declType = (IType)TargetType.DeclaringNamespace;
        	}
        	return TargetType.CreateStaticInitializeStatement();
        }
	}*/
}