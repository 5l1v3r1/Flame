using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Emit;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.DSharp.Lexer;
using Flame.Syntax;
using Flame.Syntax.DSharp;

namespace Flame.DSharp.Build
{
    public abstract class SyntaxMethodBase : CodeMember, IDSharpSyntaxMethod, ISyntaxNode
    {
        public const this(set IType DeclaringType, set ICompilerLog Log)
        {
            this.genericParams = new Lazy<IGenericParameter[]>(CreateGenericParameters);
            this.returnTypeVal = new Lazy<IType>(CreateReturnType);
            this.parameterVals = new Lazy<IParameter[]>(CreateParameters);
            this.baseMethodVals = new Lazy<IMethod[]>(CreateBaseMethods);
            this.attributeVals = new Lazy<AttributeMap>(CreateAttributes);
        }

        public IType DeclaringType { const get; protected set; }
        public ICompilerLog Log { const get; protected set; }

        #region Abstract

        public const IMemberSyntax<IMethod> GetSyntax() : IDSharpSyntaxMethod.GetSyntax
        {
            return Syntax;
        }

		public abstract const MethodSyntax GetMethodSyntax();

        public MethodSyntax Syntax { const get return GetMethodSyntax(); }
        public abstract ISyntaxState GetSyntaxState();
        public abstract ISyntaxState GetDeclaringSyntaxState();

        #endregion

        #region ISourceMember Implementation

        public SourceLocation Location
        {
            const get return Syntax.NameLocation;
        }

        #endregion

        #region CodeMember Implementation

        public override virtual string GetHeaderString()
        {
            return Syntax.Signature.GetCode().ToString();
        }

        public override virtual CodeBuilder GetBodyCode()
        {
            return Syntax.Body.GetCode();
        }

        #endregion

        #region IDSharpMethod Implementation

        public virtual const IStatement GetMethodBody()
        {
            var state = GetSyntaxState();
            IStatement statement = Syntax.Body.CreateVerifiedStatement(state);
            var parameters = GetParameters();

			var blockStatements = new List<IStatement>();

			if (this.IsConstructor)
			{
                bool hasBaseCtor = false;
                foreach (var item in Syntax.ImplementedMethods)
	            {
	                var baseCtorExpr = ((IExpressionSyntax)item).CreateVerifiedExpression(state);
                    blockStatements.Add(new ExpressionStatement(baseCtorExpr));
                    hasBaseCtor = true;
	            }
				if (!hasBaseCtor && !this.IsStatic)
				{
					blockStatements.Add(DSharpTypeExtensions.CreateBaseConstructorCall(state, this));
				}
			}

            for (int i = 0; i < parameters.Length; i++)
            {
                if (parameters[i].SetsMember)
                {
                	var setStatement = parameters[i].CreateSetMemberStatement(i, state.CurrentType, this.IsStatic);
                	if (setStatement == null)
                	{
                		state.Log.LogError(new LogEntry("invalid 'set' modifier",
                            "'set' modifier on parameter '" + parameters[i].Name +
                            "' could not be mapped to a field or property of type '" +
                            this.DeclaringType.FullName + "'.",
                            parameters[i].GetSourceLocation()));
                	}
                	else
                	{
                    	blockStatements.Add(setStatement);
                    }
                }
            }

            blockStatements.Add(statement);

            if (!this.HasReturnValue)
            {
            	blockStatements.Add(new ReturnStatement());
            }

            return Syntax.Contract.CreateContractBody(new BlockStatement(blockStatements.ToArray()), state);
        }

        private Lazy<IType> returnTypeVal;
        public IType ReturnType
        {
            const get { return returnTypeVal.Value; }
        }
        private IType CreateReturnType()
        {
            return Syntax.Signature.TypeSyntax.CreateVerifiedType(GetSyntaxState());
        }

        public [IParameter] Parameters { get { return parameterVals.Value; } }

        private Lazy<IParameter[]> parameterVals;
        public IParameter[] CreateParameters()
        {
            var state = GetSyntaxState();
            var paramList = new List<IParameter>();
            foreach (var item in Syntax.Parameters)
            {
            	paramList.Add(item.CreateMember(state));
            }
            return paramList.ToArray();
        }

        public bool IsConstructor
        {
            const get { return Syntax.Name.Equals("this"); }
        }

        #endregion

        #region Common Properties

        public bool IsStatic
        {
            get
            {
                return DeclaringType.IsStaticType
                    || (Syntax.Signature.ModifierTokens.IsStatic && !DeclaringType.IsSingleton);
            }
        }

        public string Name
        {
            const get
            {
            	if (Syntax.Signature.IsOperator)
            	{
            		string tokenVal = Syntax.Signature.NameToken.TokenValue;
            		if (tokenVal.Equals("hash"))
            		{
            			return "GetHashCode";
            		}
            		else if (tokenVal.Equals("cast"))
            		{
            			var retType = ReturnType;
            			if (retType.Equals(PrimitiveTypes.String))
            				return "ToString";
            			else
            				return "cast<" + retType.FullName + ">";
            		}
            		else
            		{
            			return "operator" + tokenVal;
            		}
            	}
            	else
            		return Syntax.Signature.NameToken.TokenValue;
           	}
        }

        public string FullName
        {
            const get { return MemberExtensions.CombineNames(DeclaringType.FullName, Name); }
        }

		private Lazy<AttributeMap> attributeVals;
		public AttributeMap Attributes { get { return attributeVals.Value; } }

        protected virtual const AttributeMap CreateAttributes()
        {
            var state = GetSyntaxState();

            var modifierAttrs = Syntax.Signature.ModifierTokens.GetModifiers();
            var extraAttrs = new AttributeMapBuilder();
            bool isCtor = IsConstructor;
            if (isCtor)
            {
                // All D# constructors perform total initialization, i.e.
                // there is no need to initialize memory contents before the
                // constructor is run.
                extraAttrs.Add(PrimitiveAttributes.TotalInitializationAttribute);
            }
            // Singleton constructor handling
            bool singletonCtor = DeclaringType.IsSingleton && isCtor;
            if (!modifierAttrs.HasAccessAttribute && !singletonCtor)
            {
                extraAttrs.Add(new AccessAttribute(AccessModifier.Public));
            }
            else if (singletonCtor)
            {
            	AccessModifier accessMod;
            	if (DeclaringType.IsVirtual || DeclaringType.IsAbstract)
            	{
            		accessMod = AccessModifier.Protected;
            	}
            	else
            	{
            		accessMod = AccessModifier.Private;
            	}
                var providedAccess = ((AccessAttribute)extraAttrs.Get(AccessAttribute.AccessAttributeType));;
                if (providedAccess != null && providedAccess.Access != accessMod)
                {
                    state.Log.LogError(
                        new LogEntry("invalid access modifier",
                        "invalid explicit access modifier at '" + this.GetHeaderString() +
                        "' in singleton '" + DeclaringType.FullName + "': expected '" +
                        accessMod + "', got '" + providedAccess + "'"));
                }
                else
                {
                    extraAttrs.Add(new AccessAttribute(accessMod));
                }
            }

            foreach (var item in modifierAttrs)
	            extraAttrs.Add(item);
	        foreach (var item in Syntax.Signature.Attributes)
	        	extraAttrs.Add(item.CreateAttribute(state, this));

	        if (Syntax.Signature.IsOperator)
	        {
	        	string opName = Syntax.Signature.NameToken.TokenValue;
	        	if (opName.Equals("cast"))
	        	{
	        		extraAttrs.Add(PrimitiveAttributes.CastAttribute);
	        	}
	        	else
	        	{
	        		var op = Operator.GetOperator(Syntax.Signature.NameToken.TokenValue);
	        		if (!op.IsDefined)
	        		{
	        			state.Log.LogError(new LogEntry(
                            "unknown operator overload",
                            "overloaded operator '" + opName + "' in '" + this.FullName + "' is not a known operator."));
	        		}
	        		extraAttrs.Add(new OperatorAttribute(op));
	        	}
	        }

	       	extraAttrs.AddRange(Syntax.GetDescriptionAttributes(GetDeclaringSyntaxState()));

            return new AttributeMap(extraAttrs);
        }

        #endregion

        #region Base Methods

        private Lazy<IMethod[]> baseMethodVals;
        public [IMethod] BaseMethods { const get return baseMethodVals.Value; }

        protected virtual IMethod[] CreateBaseMethods()
        {
            if (IsConstructor) // Constructors can't have base methods.
                               // (base method syntax has a different meaning for them)
            {
                return new IMethod[0];
            }

        	var state = GetSyntaxState();
        	var baseMethods = new List<IMethod>();
        	foreach (var item in Syntax.ImplementedMethods)
            {
                var paramTypes = Enumerable.ToArray<IType>(this.Parameters.GetTypes());
                var member = Enumerable.OfType<IMethod>(item.GetAccessedMembers(state)).GetMethod(this.IsStatic, this.ReturnType, paramTypes);
                if (member == null)
                {
                	state.Log.LogError(new LogEntry(
                        "base method resolution error",
                        "could not resolve base method '" + item.GetCode().Trim().ToString() + "'.", item.GetSourceLocation()));
                }
                baseMethods.Add(member);
            }
            if (baseMethods.Count == 0)
            {
            	foreach (var item in DeclaringType.GetAllBaseTypes())
            	{
            		var match = item.GetMethods().GetMethod(this);
            		if (match != null && match.IsVirtual && !baseMethods.Contains(match))
            		{
            			baseMethods.Add(match);
            		}
            	}
            	if (baseMethods.Count == 0 && Syntax.Signature.ModifierTokens.IsOverride)
            	{
            		state.Log.LogError(new LogEntry(
                        "base method missing",
                        "override method '" + FullName + "' could not find any suitable base methods to override.",
                        Location));
            	}
            }
            return baseMethods.ToArray();
        }

        #endregion

        #region Generics

        private Lazy<IGenericParameter[]> genericParams;
        public [IGenericParameter] GenericParameters { get { return genericParams.Value; } }

        protected virtual IGenericParameter[] CreateGenericParameters()
        {
            return Enumerable.ToArray<IGenericParameter>(
                       DSharpTypeExtensions.CreateConstrainedGenericParameters(
                           GetDeclaringSyntaxState(), this,
                           Syntax.Signature.GenericDeclarations,
                           Syntax.GenericConstraints));
        }

        #endregion

        #region GetCode

        public override virtual string ToString()
        {
            return Syntax.ToString();
        }

        public CodeBuilder GetCode()
        {
            return Syntax.GetCode();
        }

        #endregion
    }
}
